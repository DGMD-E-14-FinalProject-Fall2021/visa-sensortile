
visa_sensortile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800efbc  0800efbc  0001efbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5e0  0800f5e0  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800f5e0  0800f5e0  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f5e0  0800f5e0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5e0  0800f5e0  0001f5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5e4  0800f5e4  0001f5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800f5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026dc  20000100  0800f6e8  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027dc  0800f6e8  000227dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000431ab  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ed7  00000000  00000000  000632db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002800  00000000  00000000  0006a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002550  00000000  00000000  0006c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030b6f  00000000  00000000  0006ef08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f532  00000000  00000000  0009fa77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106d1e  00000000  00000000  000cefa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d5cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abe0  00000000  00000000  001d5d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800efa4 	.word	0x0800efa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800efa4 	.word	0x0800efa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  TargetType_t BoardType Nucleo/BlueCoin/SensorTile
  * @retval None
  */
void InitTargetPlatform(TargetType_t BoardType)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0c6      	sub	sp, #280	; 0x118
 8000274:	af02      	add	r7, sp, #8
 8000276:	4602      	mov	r2, r0
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	701a      	strb	r2, [r3, #0]
  TargetBoardFeatures.BoardType = BoardType;
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <InitTargetPlatform+0x68>)
 800027e:	1dfb      	adds	r3, r7, #7
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	7013      	strb	r3, [r2, #0]
   * for looking the MOTENV1 Initialization phase */
  HAL_Delay(10000);
#endif /* ENABLE_USB_DEBUG */
  
  /* Initialize LED */
  BSP_LED_Init( LED1 );
 8000284:	2000      	movs	r0, #0
 8000286:	f004 f9a1 	bl	80045cc <BSP_LED_Init>

  STLBLE_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 800028a:	f107 000c 	add.w	r0, r7, #12
 800028e:	2330      	movs	r3, #48	; 0x30
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	2335      	movs	r3, #53	; 0x35
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	2332      	movs	r3, #50	; 0x32
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <InitTargetPlatform+0x6c>)
 800029a:	4911      	ldr	r1, [pc, #68]	; (80002e0 <InitTargetPlatform+0x70>)
 800029c:	f00e fb1c 	bl	800e8d8 <siprintf>
 80002a0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80002a4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4611      	mov	r1, r2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fb38 	bl	8002924 <CDC_Fill_Buffer>
          "\r\n",
          STLBLE_PACKAGENAME,
          STLBLE_VERSION_MAJOR,STLBLE_VERSION_MINOR,STLBLE_VERSION_PATCH);

  /* Reset all the Target's Features */
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 80002b4:	2234      	movs	r2, #52	; 0x34
 80002b6:	2100      	movs	r1, #0
 80002b8:	4807      	ldr	r0, [pc, #28]	; (80002d8 <InitTargetPlatform+0x68>)
 80002ba:	f00e fa4b 	bl	800e754 <memset>
  /* Discovery and Intialize all the Target's Features */
  Sensor_IO_SPI_CS_Init_All();
 80002be:	f004 fa31 	bl	8004724 <Sensor_IO_SPI_CS_Init_All>
  Init_MEM1_Sensors();
 80002c2:	f000 f80f 	bl	80002e4 <Init_MEM1_Sensors>
  
  TargetBoardFeatures.LedStatus = 0; /*Off by default */
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <InitTargetPlatform+0x68>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80002ce:	bf00      	nop
 80002d0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	200005dc 	.word	0x200005dc
 80002dc:	0800efbc 	.word	0x0800efbc
 80002e0:	0800efc4 	.word	0x0800efc4

080002e4 <Init_MEM1_Sensors>:
/** @brief Initialize all the MEMS1 sensors
 * @param None
 * @retval None
 */
static void Init_MEM1_Sensors(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b0c8      	sub	sp, #288	; 0x120
 80002e8:	af00      	add	r7, sp, #0
  /* Humidity Temperature1 */
  if(BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY|ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80002ea:	2105      	movs	r1, #5
 80002ec:	2000      	movs	r0, #0
 80002ee:	f004 fda1 	bl	8004e34 <BSP_ENV_SENSOR_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d126      	bne.n	8000346 <Init_MEM1_Sensors+0x62>
  {
    STLBLE_PRINTF("OK Humidity Sensor\n\r");
 80002f8:	463b      	mov	r3, r7
 80002fa:	495e      	ldr	r1, [pc, #376]	; (8000474 <Init_MEM1_Sensors+0x190>)
 80002fc:	4618      	mov	r0, r3
 80002fe:	f00e faeb 	bl	800e8d8 <siprintf>
 8000302:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8000306:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800030a:	463b      	mov	r3, r7
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fb08 	bl	8002924 <CDC_Fill_Buffer>
    TargetBoardFeatures.HandleHumSensor=1;
 8000314:	4b58      	ldr	r3, [pc, #352]	; (8000478 <Init_MEM1_Sensors+0x194>)
 8000316:	2201      	movs	r2, #1
 8000318:	619a      	str	r2, [r3, #24]

    STLBLE_PRINTF("OK Temperature Sensor1\n\r");
 800031a:	463b      	mov	r3, r7
 800031c:	4957      	ldr	r1, [pc, #348]	; (800047c <Init_MEM1_Sensors+0x198>)
 800031e:	4618      	mov	r0, r3
 8000320:	f00e fada 	bl	800e8d8 <siprintf>
 8000324:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000328:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800032c:	463b      	mov	r3, r7
 800032e:	4611      	mov	r1, r2
 8000330:	4618      	mov	r0, r3
 8000332:	f002 faf7 	bl	8002924 <CDC_Fill_Buffer>
    TargetBoardFeatures.NumTempSensors++;
 8000336:	4b50      	ldr	r3, [pc, #320]	; (8000478 <Init_MEM1_Sensors+0x194>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	3301      	adds	r3, #1
 800033c:	4a4e      	ldr	r2, [pc, #312]	; (8000478 <Init_MEM1_Sensors+0x194>)
 800033e:	6093      	str	r3, [r2, #8]
    TargetBoardFeatures.HandleTempSensors[0]=1;
 8000340:	4b4d      	ldr	r3, [pc, #308]	; (8000478 <Init_MEM1_Sensors+0x194>)
 8000342:	2201      	movs	r2, #1
 8000344:	60da      	str	r2, [r3, #12]
  }

  /* Temperature2 Pressure */
  if(BSP_ENV_SENSOR_Init(LPS22HB_0, ENV_TEMPERATURE|ENV_PRESSURE)==BSP_ERROR_NONE)
 8000346:	2103      	movs	r1, #3
 8000348:	2001      	movs	r0, #1
 800034a:	f004 fd73 	bl	8004e34 <BSP_ENV_SENSOR_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d126      	bne.n	80003a2 <Init_MEM1_Sensors+0xbe>
  {
     STLBLE_PRINTF("OK Temperature Sensor2\n\r");
 8000354:	463b      	mov	r3, r7
 8000356:	494a      	ldr	r1, [pc, #296]	; (8000480 <Init_MEM1_Sensors+0x19c>)
 8000358:	4618      	mov	r0, r3
 800035a:	f00e fabd 	bl	800e8d8 <siprintf>
 800035e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000362:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000366:	463b      	mov	r3, r7
 8000368:	4611      	mov	r1, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fada 	bl	8002924 <CDC_Fill_Buffer>
     TargetBoardFeatures.NumTempSensors++;
 8000370:	4b41      	ldr	r3, [pc, #260]	; (8000478 <Init_MEM1_Sensors+0x194>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	3301      	adds	r3, #1
 8000376:	4a40      	ldr	r2, [pc, #256]	; (8000478 <Init_MEM1_Sensors+0x194>)
 8000378:	6093      	str	r3, [r2, #8]
     TargetBoardFeatures.HandleTempSensors[1]=1;
 800037a:	4b3f      	ldr	r3, [pc, #252]	; (8000478 <Init_MEM1_Sensors+0x194>)
 800037c:	2201      	movs	r2, #1
 800037e:	611a      	str	r2, [r3, #16]

     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 8000380:	463b      	mov	r3, r7
 8000382:	4940      	ldr	r1, [pc, #256]	; (8000484 <Init_MEM1_Sensors+0x1a0>)
 8000384:	4618      	mov	r0, r3
 8000386:	f00e faa7 	bl	800e8d8 <siprintf>
 800038a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 800038e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000392:	463b      	mov	r3, r7
 8000394:	4611      	mov	r1, r2
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fac4 	bl	8002924 <CDC_Fill_Buffer>
     TargetBoardFeatures.HandlePressSensor=1;
 800039c:	4b36      	ldr	r3, [pc, #216]	; (8000478 <Init_MEM1_Sensors+0x194>)
 800039e:	2201      	movs	r2, #1
 80003a0:	615a      	str	r2, [r3, #20]
  }

  if(TargetBoardFeatures.HandleHumSensor) {
 80003a2:	4b35      	ldr	r3, [pc, #212]	; (8000478 <Init_MEM1_Sensors+0x194>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d014      	beq.n	80003d4 <Init_MEM1_Sensors+0xf0>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_HUMIDITY)==BSP_ERROR_NONE)
 80003aa:	2104      	movs	r1, #4
 80003ac:	2000      	movs	r0, #0
 80003ae:	f004 fe01 	bl	8004fb4 <BSP_ENV_SENSOR_Enable>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d10d      	bne.n	80003d4 <Init_MEM1_Sensors+0xf0>
    {
      STLBLE_PRINTF("Enabled Humidity Sensor\n\r");
 80003b8:	463b      	mov	r3, r7
 80003ba:	4933      	ldr	r1, [pc, #204]	; (8000488 <Init_MEM1_Sensors+0x1a4>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f00e fa8b 	bl	800e8d8 <siprintf>
 80003c2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80003c6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80003ca:	463b      	mov	r3, r7
 80003cc:	4611      	mov	r1, r2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f002 faa8 	bl	8002924 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[0]){
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <Init_MEM1_Sensors+0x194>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d014      	beq.n	8000406 <Init_MEM1_Sensors+0x122>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80003dc:	2101      	movs	r1, #1
 80003de:	2000      	movs	r0, #0
 80003e0:	f004 fde8 	bl	8004fb4 <BSP_ENV_SENSOR_Enable>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d10d      	bne.n	8000406 <Init_MEM1_Sensors+0x122>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor1\n\r");
 80003ea:	463b      	mov	r3, r7
 80003ec:	4927      	ldr	r1, [pc, #156]	; (800048c <Init_MEM1_Sensors+0x1a8>)
 80003ee:	4618      	mov	r0, r3
 80003f0:	f00e fa72 	bl	800e8d8 <siprintf>
 80003f4:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80003f8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80003fc:	463b      	mov	r3, r7
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fa8f 	bl	8002924 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[1]){
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <Init_MEM1_Sensors+0x194>)
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d014      	beq.n	8000438 <Init_MEM1_Sensors+0x154>
    if(BSP_ENV_SENSOR_Enable( LPS22HB_0, ENV_TEMPERATURE)==BSP_ERROR_NONE) 
 800040e:	2101      	movs	r1, #1
 8000410:	2001      	movs	r0, #1
 8000412:	f004 fdcf 	bl	8004fb4 <BSP_ENV_SENSOR_Enable>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10d      	bne.n	8000438 <Init_MEM1_Sensors+0x154>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor2\n\r");
 800041c:	463b      	mov	r3, r7
 800041e:	491c      	ldr	r1, [pc, #112]	; (8000490 <Init_MEM1_Sensors+0x1ac>)
 8000420:	4618      	mov	r0, r3
 8000422:	f00e fa59 	bl	800e8d8 <siprintf>
 8000426:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 800042a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800042e:	463b      	mov	r3, r7
 8000430:	4611      	mov	r1, r2
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fa76 	bl	8002924 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandlePressSensor) {
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <Init_MEM1_Sensors+0x194>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d014      	beq.n	800046a <Init_MEM1_Sensors+0x186>
    if(BSP_ENV_SENSOR_Enable(LPS22HB_0, ENV_PRESSURE)==BSP_ERROR_NONE)
 8000440:	2102      	movs	r1, #2
 8000442:	2001      	movs	r0, #1
 8000444:	f004 fdb6 	bl	8004fb4 <BSP_ENV_SENSOR_Enable>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d10d      	bne.n	800046a <Init_MEM1_Sensors+0x186>
    {
      STLBLE_PRINTF("Enabled Pressure Sensor\n\r");
 800044e:	463b      	mov	r3, r7
 8000450:	4910      	ldr	r1, [pc, #64]	; (8000494 <Init_MEM1_Sensors+0x1b0>)
 8000452:	4618      	mov	r0, r3
 8000454:	f00e fa40 	bl	800e8d8 <siprintf>
 8000458:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800045c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000460:	463b      	mov	r3, r7
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f002 fa5d 	bl	8002924 <CDC_Fill_Buffer>
    }
  }
}
 800046a:	bf00      	nop
 800046c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	0800f000 	.word	0x0800f000
 8000478:	200005dc 	.word	0x200005dc
 800047c:	0800f018 	.word	0x0800f018
 8000480:	0800f034 	.word	0x0800f034
 8000484:	0800f050 	.word	0x0800f050
 8000488:	0800f068 	.word	0x0800f068
 800048c:	0800f084 	.word	0x0800f084
 8000490:	0800f0a4 	.word	0x0800f0a4
 8000494:	0800f0c4 	.word	0x0800f0c4

08000498 <LedOnTargetPlatform>:
  * @brief  This function switches on the LED
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  BSP_LED_On( LED1 );
 800049c:	2000      	movs	r0, #0
 800049e:	f004 f8e5 	bl	800466c <BSP_LED_On>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <LedOffTargetPlatform>:
  * @brief  This function switches off the LED
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  BSP_LED_Off( LED1 );
 80004aa:	2000      	movs	r0, #0
 80004ac:	f004 f90c 	bl	80046c8 <BSP_LED_Off>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80004bc:	f007 ffa4 	bl	8008408 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c0:	4b2e      	ldr	r3, [pc, #184]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c4:	4a2d      	ldr	r2, [pc, #180]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004cc:	4b2b      	ldr	r3, [pc, #172]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004dc:	4a27      	ldr	r2, [pc, #156]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004f6:	f043 0302 	orr.w	r3, r3, #2
 80004fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <HCI_TL_SPI_Init+0xc8>)
 80004fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000500:	f003 0302 	and.w	r3, r3, #2
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2104      	movs	r1, #4
 800050c:	481c      	ldr	r0, [pc, #112]	; (8000580 <HCI_TL_SPI_Init+0xcc>)
 800050e:	f005 fe2d 	bl	800616c <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000512:	2320      	movs	r3, #32
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <HCI_TL_SPI_Init+0xd0>)
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	4818      	ldr	r0, [pc, #96]	; (8000588 <HCI_TL_SPI_Init+0xd4>)
 8000526:	f005 fb6b 	bl	8005c00 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <HCI_TL_SPI_Init+0xd8>)
 8000542:	f005 fb5d 	bl	8005c00 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000546:	2304      	movs	r3, #4
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <HCI_TL_SPI_Init+0xcc>)
 800055e:	f005 fb4f 	bl	8005c00 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	2104      	movs	r1, #4
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <HCI_TL_SPI_Init+0xcc>)
 8000568:	f005 fe00 	bl	800616c <HAL_GPIO_WritePin>
    
  return BSP_SPI1_Init();
 800056c:	f004 fa54 	bl	8004a18 <BSP_SPI1_Init>
 8000570:	4603      	mov	r3, r0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3728      	adds	r7, #40	; 0x28
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400
 8000584:	10110000 	.word	0x10110000
 8000588:	48000800 	.word	0x48000800
 800058c:	48001c00 	.word	0x48001c00

08000590 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8000594:	2120      	movs	r1, #32
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <HCI_TL_SPI_DeInit+0x24>)
 8000598:	f005 fcdc 	bl	8005f54 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 800059c:	2104      	movs	r1, #4
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <HCI_TL_SPI_DeInit+0x28>)
 80005a0:	f005 fcd8 	bl	8005f54 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80005a4:	2101      	movs	r1, #1
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <HCI_TL_SPI_DeInit+0x2c>)
 80005a8:	f005 fcd4 	bl	8005f54 <HAL_GPIO_DeInit>
  return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	48000800 	.word	0x48000800
 80005b8:	48000400 	.word	0x48000400
 80005bc:	48001c00 	.word	0x48001c00

080005c0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2101      	movs	r1, #1
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <HCI_TL_SPI_Reset+0x2c>)
 80005ca:	f005 fdcf 	bl	800616c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005ce:	2005      	movs	r0, #5
 80005d0:	f000 fef6 	bl	80013c0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <HCI_TL_SPI_Reset+0x2c>)
 80005da:	f005 fdc7 	bl	800616c <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80005de:	2005      	movs	r0, #5
 80005e0:	f000 feee 	bl	80013c0 <HAL_Delay>
  return 0;
 80005e4:	2300      	movs	r3, #0
}  
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	48001c00 	.word	0x48001c00

080005f0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8000600:	23ff      	movs	r3, #255	; 0xff
 8000602:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <HCI_TL_SPI_Receive+0xac>)
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060e:	6018      	str	r0, [r3, #0]
 8000610:	3304      	adds	r3, #4
 8000612:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4821      	ldr	r0, [pc, #132]	; (80006a0 <HCI_TL_SPI_Receive+0xb0>)
 800061a:	f005 fda7 	bl	800616c <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800061e:	f107 010c 	add.w	r1, r7, #12
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2205      	movs	r2, #5
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fa19 	bl	8004a60 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 800062e:	7b3b      	ldrb	r3, [r7, #12]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d129      	bne.n	8000688 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000634:	7c3b      	ldrb	r3, [r7, #16]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	b21a      	sxth	r2, r3
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	b21b      	sxth	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	b21b      	sxth	r3, r3
 8000642:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 8000644:	8bfb      	ldrh	r3, [r7, #30]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d01e      	beq.n	8000688 <HCI_TL_SPI_Receive+0x98>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 800064a:	8bfa      	ldrh	r2, [r7, #30]
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	429a      	cmp	r2, r3
 8000650:	d901      	bls.n	8000656 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 8000656:	2300      	movs	r3, #0
 8000658:	777b      	strb	r3, [r7, #29]
 800065a:	e010      	b.n	800067e <HCI_TL_SPI_Receive+0x8e>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 800065c:	f107 011b 	add.w	r1, r7, #27
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	2201      	movs	r2, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f004 f9fa 	bl	8004a60 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800066c:	7f7b      	ldrb	r3, [r7, #29]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	7efa      	ldrb	r2, [r7, #27]
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000678:	7f7b      	ldrb	r3, [r7, #29]
 800067a:	3301      	adds	r3, #1
 800067c:	777b      	strb	r3, [r7, #29]
 800067e:	7f7b      	ldrb	r3, [r7, #29]
 8000680:	b29b      	uxth	r3, r3
 8000682:	8bfa      	ldrh	r2, [r7, #30]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8e9      	bhi.n	800065c <HCI_TL_SPI_Receive+0x6c>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2104      	movs	r1, #4
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <HCI_TL_SPI_Receive+0xb0>)
 800068e:	f005 fd6d 	bl	800616c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 8000692:	7f7b      	ldrb	r3, [r7, #29]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	0800f0e0 	.word	0x0800f0e0
 80006a0:	48000400 	.word	0x48000400

080006a4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006b0:	4a23      	ldr	r2, [pc, #140]	; (8000740 <HCI_TL_SPI_Send+0x9c>)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	6018      	str	r0, [r3, #0]
 80006bc:	3304      	adds	r3, #4
 80006be:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f005 f88a 	bl	80057d8 <HAL_GetTick>
 80006c4:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2104      	movs	r1, #4
 80006ce:	481d      	ldr	r0, [pc, #116]	; (8000744 <HCI_TL_SPI_Send+0xa0>)
 80006d0:	f005 fd4c 	bl	800616c <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006d4:	f107 0108 	add.w	r1, r7, #8
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2205      	movs	r2, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 f9be 	bl	8004a60 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 80006e4:	7a3b      	ldrb	r3, [r7, #8]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d10f      	bne.n	800070a <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80006ea:	7a7b      	ldrb	r3, [r7, #9]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	887a      	ldrh	r2, [r7, #2]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d806      	bhi.n	8000702 <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4913      	ldr	r1, [pc, #76]	; (8000748 <HCI_TL_SPI_Send+0xa4>)
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f004 f9b0 	bl	8004a60 <BSP_SPI1_SendRecv>
 8000700:	e006      	b.n	8000710 <HCI_TL_SPI_Send+0x6c>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8000702:	f06f 0301 	mvn.w	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
 8000708:	e002      	b.n	8000710 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070e:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2104      	movs	r1, #4
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <HCI_TL_SPI_Send+0xa0>)
 8000716:	f005 fd29 	bl	800616c <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800071a:	f005 f85d 	bl	80057d8 <HAL_GetTick>
 800071e:	4602      	mov	r2, r0
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d903      	bls.n	8000730 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000728:	f06f 0302 	mvn.w	r3, #2
 800072c:	61fb      	str	r3, [r7, #28]
      break;
 800072e:	e002      	b.n	8000736 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	2b00      	cmp	r3, #0
 8000734:	dbc7      	blt.n	80006c6 <HCI_TL_SPI_Send+0x22>
  
  return result;
 8000736:	69fb      	ldr	r3, [r7, #28]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	0800f0e8 	.word	0x0800f0e8
 8000744:	48000400 	.word	0x48000400
 8000748:	2000011c 	.word	0x2000011c

0800074c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000750:	2120      	movs	r1, #32
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <IsDataAvailable+0x1c>)
 8000754:	f005 fcf2 	bl	800613c <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	bf0c      	ite	eq
 800075e:	2301      	moveq	r3, #1
 8000760:	2300      	movne	r3, #0
 8000762:	b2db      	uxtb	r3, r3
} 
 8000764:	4618      	mov	r0, r3
 8000766:	bd80      	pop	{r7, pc}
 8000768:	48000800 	.word	0x48000800

0800076c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <hci_tl_lowlevel_init+0x50>)
 8000774:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <hci_tl_lowlevel_init+0x54>)
 8000778:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <hci_tl_lowlevel_init+0x58>)
 800077c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <hci_tl_lowlevel_init+0x5c>)
 8000780:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <hci_tl_lowlevel_init+0x60>)
 8000784:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <hci_tl_lowlevel_init+0x64>)
 8000788:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f00d fcdf 	bl	800e150 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8000792:	4910      	ldr	r1, [pc, #64]	; (80007d4 <hci_tl_lowlevel_init+0x68>)
 8000794:	4810      	ldr	r0, [pc, #64]	; (80007d8 <hci_tl_lowlevel_init+0x6c>)
 8000796:	f005 f9ee 	bl	8005b76 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <hci_tl_lowlevel_init+0x70>)
 800079c:	2100      	movs	r1, #0
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <hci_tl_lowlevel_init+0x6c>)
 80007a0:	f005 f9cf 	bl	8005b42 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2103      	movs	r1, #3
 80007a8:	2017      	movs	r0, #23
 80007aa:	f005 f92a 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ae:	2017      	movs	r0, #23
 80007b0:	f005 f943 	bl	8005a3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	080004b5 	.word	0x080004b5
 80007c0:	08000591 	.word	0x08000591
 80007c4:	080006a5 	.word	0x080006a5
 80007c8:	080005f1 	.word	0x080005f1
 80007cc:	080005c1 	.word	0x080005c1
 80007d0:	08004aa1 	.word	0x08004aa1
 80007d4:	16000005 	.word	0x16000005
 80007d8:	200008e0 	.word	0x200008e0
 80007dc:	080007e1 	.word	0x080007e1

080007e0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 80007e4:	e008      	b.n	80007f8 <hci_tl_lowlevel_isr+0x18>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 80007e6:	2000      	movs	r0, #0
 80007e8:	f00d fe18 	bl	800e41c <hci_notify_asynch_evt>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d108      	bne.n	8000804 <hci_tl_lowlevel_isr+0x24>
      return;
	}
    HCI_ProcessEvent=1;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <hci_tl_lowlevel_isr+0x28>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
  while(IsDataAvailable())
 80007f8:	f7ff ffa8 	bl	800074c <IsDataAvailable>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <hci_tl_lowlevel_isr+0x6>
 8000802:	e000      	b.n	8000806 <hci_tl_lowlevel_isr+0x26>
      return;
 8000804:	bf00      	nop
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200008e8 	.word	0x200008e8

0800080c <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	b0cb      	sub	sp, #300	; 0x12c
 8000810:	af06      	add	r7, sp, #24
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Set NVIC Group Priority to 4
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000812:	f004 ff71 	bl	80056f8 <HAL_Init>
  
  /* Configure the System clock */
  SystemClock_Config();
 8000816:	f000 fd45 	bl	80012a4 <SystemClock_Config>
  
  InitTargetPlatform(TARGET_SENSORTILE);
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff fd28 	bl	8000270 <InitTargetPlatform>
  
  STLBLE_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8000820:	f004 ffe6 	bl	80057f0 <HAL_GetHalVersion>
 8000824:	4603      	mov	r3, r0
 8000826:	0e1d      	lsrs	r5, r3, #24
 8000828:	f004 ffe2 	bl	80057f0 <HAL_GetHalVersion>
 800082c:	4603      	mov	r3, r0
 800082e:	0c1b      	lsrs	r3, r3, #16
 8000830:	b2de      	uxtb	r6, r3
 8000832:	f004 ffdd 	bl	80057f0 <HAL_GetHalVersion>
 8000836:	4603      	mov	r3, r0
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b2dc      	uxtb	r4, r3
 800083c:	f004 ffd8 	bl	80057f0 <HAL_GetHalVersion>
 8000840:	4603      	mov	r3, r0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4638      	mov	r0, r7
 8000846:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800084a:	9204      	str	r2, [sp, #16]
 800084c:	4a42      	ldr	r2, [pc, #264]	; (8000958 <main+0x14c>)
 800084e:	9203      	str	r2, [sp, #12]
 8000850:	4a42      	ldr	r2, [pc, #264]	; (800095c <main+0x150>)
 8000852:	9202      	str	r2, [sp, #8]
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	9400      	str	r4, [sp, #0]
 8000858:	4633      	mov	r3, r6
 800085a:	462a      	mov	r2, r5
 800085c:	4940      	ldr	r1, [pc, #256]	; (8000960 <main+0x154>)
 800085e:	f00e f83b 	bl	800e8d8 <siprintf>
 8000862:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8000866:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800086a:	463b      	mov	r3, r7
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f858 	bl	8002924 <CDC_Fill_Buffer>
                        HAL_GetHalVersion()      &0xFF,
                        __DATE__,__TIME__,
                        uhCCR1_Val/10);
  
#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF("Debug Connection         Enabled\r\n");
 8000874:	463b      	mov	r3, r7
 8000876:	493b      	ldr	r1, [pc, #236]	; (8000964 <main+0x158>)
 8000878:	4618      	mov	r0, r3
 800087a:	f00e f82d 	bl	800e8d8 <siprintf>
 800087e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000882:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000886:	463b      	mov	r3, r7
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f002 f84a 	bl	8002924 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  STLBLE_PRINTF("Debug Notify Trasmission Enabled\r\n");
 8000890:	463b      	mov	r3, r7
 8000892:	4935      	ldr	r1, [pc, #212]	; (8000968 <main+0x15c>)
 8000894:	4618      	mov	r0, r3
 8000896:	f00e f81f 	bl	800e8d8 <siprintf>
 800089a:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800089e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80008a2:	463b      	mov	r3, r7
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 f83c 	bl	8002924 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Initialize the BlueNRG */
  Init_BlueNRG_Stack();
 80008ac:	f000 fb52 	bl	8000f54 <Init_BlueNRG_Stack>
  
  /* Initialize the BlueNRG Custom services */
  Init_BlueNRG_Custom_Services();  
 80008b0:	f000 fc9c 	bl	80011ec <Init_BlueNRG_Custom_Services>
  
  /* initialize timers */
  InitTimers();
 80008b4:	f000 fb0c 	bl	8000ed0 <InitTimers>
  
  StartTime = HAL_GetTick();
 80008b8:	f004 ff8e 	bl	80057d8 <HAL_GetTick>
 80008bc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  /* Infinite loop */
  while (1)
  {
    /* Led Blinking when there is not a client connected */
    if(!connected) 
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <main+0x160>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12a      	bne.n	800091e <main+0x112>
    {
      if(!TargetBoardFeatures.LedStatus) 
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <main+0x164>)
 80008ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d113      	bne.n	80008fa <main+0xee>
      {
        if(HAL_GetTick()-StartTime > 1000)
 80008d2:	f004 ff81 	bl	80057d8 <HAL_GetTick>
 80008d6:	4602      	mov	r2, r0
 80008d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008e2:	d91c      	bls.n	800091e <main+0x112>
        {
          LedOnTargetPlatform();
 80008e4:	f7ff fdd8 	bl	8000498 <LedOnTargetPlatform>
          TargetBoardFeatures.LedStatus =1;
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <main+0x164>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 80008f0:	f004 ff72 	bl	80057d8 <HAL_GetTick>
 80008f4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80008f8:	e011      	b.n	800091e <main+0x112>
        }
      } 
      else 
      {
        if(HAL_GetTick()-StartTime > 50)
 80008fa:	f004 ff6d 	bl	80057d8 <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b32      	cmp	r3, #50	; 0x32
 8000908:	d909      	bls.n	800091e <main+0x112>
        {
          LedOffTargetPlatform();
 800090a:	f7ff fdcc 	bl	80004a6 <LedOffTargetPlatform>
          TargetBoardFeatures.LedStatus =0;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <main+0x164>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000916:	f004 ff5f 	bl	80057d8 <HAL_GetTick>
 800091a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        }
      }
    }
    
    /* handle BLE event */
    if(HCI_ProcessEvent) 
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <main+0x168>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <main+0x124>
    {
      HCI_ProcessEvent=0;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <main+0x168>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
      hci_user_evt_proc();
 800092c:	f00d fd4a 	bl	800e3c4 <hci_user_evt_proc>
    }
    
    /* Update the BLE advertise data and make the Board connectable */
    if(set_connectable)
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x16c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <main+0x136>
    {
      setConnectable();
 8000938:	f001 fa1a 	bl	8001d70 <setConnectable>
      set_connectable = FALSE;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <main+0x16c>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
    }
    
    /* Environmental Data */
    if(SendEnv) 
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <main+0x170>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <main+0x148>
    {
      SendEnv=0;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <main+0x170>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
      SendEnvironmentalData();
 8000950:	f000 f84a 	bl	80009e8 <SendEnvironmentalData>
    }
    
    /* Wait for Interrupt */
    __WFI();
 8000954:	bf30      	wfi
    if(!connected) 
 8000956:	e7b3      	b.n	80008c0 <main+0xb4>
 8000958:	0800f158 	.word	0x0800f158
 800095c:	0800f164 	.word	0x0800f164
 8000960:	0800f0f0 	.word	0x0800f0f0
 8000964:	0800f170 	.word	0x0800f170
 8000968:	0800f194 	.word	0x0800f194
 800096c:	20000224 	.word	0x20000224
 8000970:	200005dc 	.word	0x200005dc
 8000974:	200008e8 	.word	0x200008e8
 8000978:	20000000 	.word	0x20000000
 800097c:	20000220 	.word	0x20000220

08000980 <HAL_TIM_OC_DelayElapsedCallback>:
* @brief  Output Compare callback in non blocking mode 
* @param  htim : TIM OC handle
* @retval None
*/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t uhCapture=0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  
  /* TIM1_CH1 toggling with frequency = 2Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7f1b      	ldrb	r3, [r3, #28]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d10e      	bne.n	80009b2 <HAL_TIM_OC_DelayElapsedCallback+0x32>
  {
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000994:	2100      	movs	r1, #0
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f00a f9ce 	bl	800ad38 <HAL_TIM_ReadCapturedValue>
 800099c:	60f8      	str	r0, [r7, #12]
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80009a8:	3308      	adds	r3, #8
 80009aa:	6353      	str	r3, [r2, #52]	; 0x34
    SendEnv=1;
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	601a      	str	r2, [r3, #0]
  }
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200008f4 	.word	0x200008f4
 80009c0:	20000220 	.word	0x20000220

080009c4 <HAL_TIM_PeriodElapsedCallback>:
* @brief  Period elapsed callback in non blocking mode for Environmental timer
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim == (&TimHandle)) 
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d102      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    CDC_TIM_PeriodElapsedCallback(htim);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f001 ffcf 	bl	8002978 <CDC_TIM_PeriodElapsedCallback>
  }
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20002248 	.word	0x20002248

080009e8 <SendEnvironmentalData>:
* @brief  Send Environmetal Data (Temperature/Pressure/Humidity) to BLE
* @param  None
* @retval None
*/
static void SendEnvironmentalData(void)
{  
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ce      	sub	sp, #312	; 0x138
 80009ec:	af00      	add	r7, sp, #0
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 80009ee:	4bcf      	ldr	r3, [pc, #828]	; (8000d2c <SendEnvironmentalData+0x344>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00e      	beq.n	8000a1c <SendEnvironmentalData+0x34>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"Sending: ");
 80009fe:	49cc      	ldr	r1, [pc, #816]	; (8000d30 <SendEnvironmentalData+0x348>)
 8000a00:	48cc      	ldr	r0, [pc, #816]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000a02:	f00d ff69 	bl	800e8d8 <siprintf>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4acb      	ldr	r2, [pc, #812]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000a0a:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8000a0c:	4bca      	ldr	r3, [pc, #808]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	48c7      	ldr	r0, [pc, #796]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000a16:	f000 fdad 	bl	8001574 <Term_Update>
 8000a1a:	e00d      	b.n	8000a38 <SendEnvironmentalData+0x50>
  } 
  else 
  {
    STLBLE_PRINTF("Sending: ");
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	49c4      	ldr	r1, [pc, #784]	; (8000d30 <SendEnvironmentalData+0x348>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00d ff59 	bl	800e8d8 <siprintf>
 8000a26:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8000a2a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 ff76 	bl	8002924 <CDC_Fill_Buffer>
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Pressure,Humidity, and Temperatures*/
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV)) 
 8000a38:	4bbc      	ldr	r3, [pc, #752]	; (8000d2c <SendEnvironmentalData+0x344>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 820b 	beq.w	8000e5e <SendEnvironmentalData+0x476>
  {
    float SensorValue;
    int32_t PressToSend=0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t HumToSend=0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    int32_t decPart, intPart;
    
    if(TargetBoardFeatures.HandlePressSensor) 
 8000a60:	4bb6      	ldr	r3, [pc, #728]	; (8000d3c <SendEnvironmentalData+0x354>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d055      	beq.n	8000b14 <SendEnvironmentalData+0x12c>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8000a68:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	2102      	movs	r1, #2
 8000a70:	2001      	movs	r0, #1
 8000a72:	f004 fae1 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8000a76:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a7e:	ee17 3a90 	vmov	r3, s15
 8000a82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000a86:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8000a8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a8e:	ee07 3a90 	vmov	s15, r3
 8000a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a9a:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8000d40 <SendEnvironmentalData+0x358>
 8000a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa6:	ee17 3a90 	vmov	r3, s15
 8000aaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      PressToSend=intPart*100+decPart;
 8000aae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ab2:	2264      	movs	r2, #100	; 0x64
 8000ab4:	fb02 f303 	mul.w	r3, r2, r3
 8000ab8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000abc:	4413      	add	r3, r2
 8000abe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000ac2:	4b9a      	ldr	r3, [pc, #616]	; (8000d2c <SendEnvironmentalData+0x344>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d010      	beq.n	8000af4 <SendEnvironmentalData+0x10c>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Press=%ld ",PressToSend);
 8000ad2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000ad6:	499b      	ldr	r1, [pc, #620]	; (8000d44 <SendEnvironmentalData+0x35c>)
 8000ad8:	4896      	ldr	r0, [pc, #600]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000ada:	f00d fefd 	bl	800e8d8 <siprintf>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a95      	ldr	r2, [pc, #596]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000ae2:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000ae4:	4b94      	ldr	r3, [pc, #592]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	4891      	ldr	r0, [pc, #580]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000aee:	f000 fd41 	bl	8001574 <Term_Update>
 8000af2:	e00f      	b.n	8000b14 <SendEnvironmentalData+0x12c>
      } 
      else 
      {
        STLBLE_PRINTF("Press=%ld ",PressToSend);
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000afa:	4992      	ldr	r1, [pc, #584]	; (8000d44 <SendEnvironmentalData+0x35c>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f00d feeb 	bl	800e8d8 <siprintf>
 8000b02:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8000b06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 ff08 	bl	8002924 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 8000b14:	4b89      	ldr	r3, [pc, #548]	; (8000d3c <SendEnvironmentalData+0x354>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d05a      	beq.n	8000bd2 <SendEnvironmentalData+0x1ea>
    {
      
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8000b1c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b20:	461a      	mov	r2, r3
 8000b22:	2104      	movs	r1, #4
 8000b24:	2000      	movs	r0, #0
 8000b26:	f004 fa87 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000b2a:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b32:	ee17 3a90 	vmov	r3, s15
 8000b36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000b3a:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8000b3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b5a:	ee17 3a90 	vmov	r3, s15
 8000b5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      HumToSend = intPart*10+decPart;
 8000b62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	461a      	mov	r2, r3
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	4413      	add	r3, r2
 8000b7a:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000b7e:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <SendEnvironmentalData+0x344>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d011      	beq.n	8000bb2 <SendEnvironmentalData+0x1ca>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Hum=%d ",HumToSend);
 8000b8e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8000b92:	461a      	mov	r2, r3
 8000b94:	496c      	ldr	r1, [pc, #432]	; (8000d48 <SendEnvironmentalData+0x360>)
 8000b96:	4867      	ldr	r0, [pc, #412]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000b98:	f00d fe9e 	bl	800e8d8 <siprintf>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a66      	ldr	r2, [pc, #408]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000ba0:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000ba2:	4b65      	ldr	r3, [pc, #404]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4862      	ldr	r0, [pc, #392]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000bac:	f000 fce2 	bl	8001574 <Term_Update>
 8000bb0:	e00f      	b.n	8000bd2 <SendEnvironmentalData+0x1ea>
      } 
      else 
      {
        STLBLE_PRINTF("Hum=%d ",HumToSend);
 8000bb2:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4963      	ldr	r1, [pc, #396]	; (8000d48 <SendEnvironmentalData+0x360>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f00d fe8c 	bl	800e8d8 <siprintf>
 8000bc0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000bc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fea9 	bl	8002924 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 8000bd2:	4b5a      	ldr	r3, [pc, #360]	; (8000d3c <SendEnvironmentalData+0x354>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	f040 80cd 	bne.w	8000d76 <SendEnvironmentalData+0x38e>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000bdc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000be0:	461a      	mov	r2, r3
 8000be2:	2101      	movs	r1, #1
 8000be4:	2000      	movs	r0, #0
 8000be6:	f004 fa27 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000bea:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf2:	ee17 3a90 	vmov	r3, s15
 8000bf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000bfa:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8000bfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c02:	ee07 3a90 	vmov	s15, r3
 8000c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c0e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c1a:	ee17 3a90 	vmov	r3, s15
 8000c1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      Temp1ToSend = intPart*10+decPart;
 8000c22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000c40:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <SendEnvironmentalData+0x344>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d011      	beq.n	8000c74 <SendEnvironmentalData+0x28c>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp=%d ",Temp1ToSend);
 8000c50:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8000c54:	461a      	mov	r2, r3
 8000c56:	493d      	ldr	r1, [pc, #244]	; (8000d4c <SendEnvironmentalData+0x364>)
 8000c58:	4836      	ldr	r0, [pc, #216]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000c5a:	f00d fe3d 	bl	800e8d8 <siprintf>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a35      	ldr	r2, [pc, #212]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000c62:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4831      	ldr	r0, [pc, #196]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000c6e:	f000 fc81 	bl	8001574 <Term_Update>
 8000c72:	e00f      	b.n	8000c94 <SendEnvironmentalData+0x2ac>
      } 
      else 
      {
        STLBLE_PRINTF("Temp=%d ",Temp1ToSend);
 8000c74:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4934      	ldr	r1, [pc, #208]	; (8000d4c <SendEnvironmentalData+0x364>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f00d fe2b 	bl	800e8d8 <siprintf>
 8000c82:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8000c86:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fe48 	bl	8002924 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000c94:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f004 f9cb 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000ca2:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000caa:	ee17 3a90 	vmov	r3, s15
 8000cae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000cb2:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8000cb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cd2:	ee17 3a90 	vmov	r3, s15
 8000cd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      Temp2ToSend = intPart*10+decPart;
 8000cda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <SendEnvironmentalData+0x344>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d025      	beq.n	8000d54 <SendEnvironmentalData+0x36c>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp2=%d ",Temp2ToSend);
 8000d08:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4910      	ldr	r1, [pc, #64]	; (8000d50 <SendEnvironmentalData+0x368>)
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000d12:	f00d fde1 	bl	800e8d8 <siprintf>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000d1a:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SendEnvironmentalData+0x350>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <SendEnvironmentalData+0x34c>)
 8000d26:	f000 fc25 	bl	8001574 <Term_Update>
 8000d2a:	e08e      	b.n	8000e4a <SendEnvironmentalData+0x462>
 8000d2c:	2000021c 	.word	0x2000021c
 8000d30:	0800f1b8 	.word	0x0800f1b8
 8000d34:	20000940 	.word	0x20000940
 8000d38:	20000a40 	.word	0x20000a40
 8000d3c:	200005dc 	.word	0x200005dc
 8000d40:	42c80000 	.word	0x42c80000
 8000d44:	0800f1c4 	.word	0x0800f1c4
 8000d48:	0800f1d0 	.word	0x0800f1d0
 8000d4c:	0800f1d8 	.word	0x0800f1d8
 8000d50:	0800f1e4 	.word	0x0800f1e4
      } 
      else 
      {
        STLBLE_PRINTF("Temp2=%d ",Temp2ToSend);
 8000d54:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4956      	ldr	r1, [pc, #344]	; (8000eb4 <SendEnvironmentalData+0x4cc>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00d fdbb 	bl	800e8d8 <siprintf>
 8000d62:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000d66:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fdd8 	bl	8002924 <CDC_Fill_Buffer>
 8000d74:	e069      	b.n	8000e4a <SendEnvironmentalData+0x462>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    } 
    else if(TargetBoardFeatures.NumTempSensors==1)
 8000d76:	4b50      	ldr	r3, [pc, #320]	; (8000eb8 <SendEnvironmentalData+0x4d0>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d165      	bne.n	8000e4a <SendEnvironmentalData+0x462>
    {
      if (BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue)!=BSP_ERROR_NONE)
 8000d7e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000d82:	461a      	mov	r2, r3
 8000d84:	2101      	movs	r1, #1
 8000d86:	2000      	movs	r0, #0
 8000d88:	f004 f956 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <SendEnvironmentalData+0x3b8>
      {
        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000d92:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000d96:	461a      	mov	r2, r3
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f004 f94c 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      }
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000da0:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da8:	ee17 3a90 	vmov	r3, s15
 8000dac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000db0:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8000db4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 3a90 	vmov	r3, s15
 8000dd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      Temp1ToSend = intPart*10+decPart;
 8000dd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <SendEnvironmentalData+0x4d4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d011      	beq.n	8000e2a <SendEnvironmentalData+0x442>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp1=%d ",Temp1ToSend);
 8000e06:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	492c      	ldr	r1, [pc, #176]	; (8000ec0 <SendEnvironmentalData+0x4d8>)
 8000e0e:	482d      	ldr	r0, [pc, #180]	; (8000ec4 <SendEnvironmentalData+0x4dc>)
 8000e10:	f00d fd62 	bl	800e8d8 <siprintf>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4a2c      	ldr	r2, [pc, #176]	; (8000ec8 <SendEnvironmentalData+0x4e0>)
 8000e18:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <SendEnvironmentalData+0x4e0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	4828      	ldr	r0, [pc, #160]	; (8000ec4 <SendEnvironmentalData+0x4dc>)
 8000e24:	f000 fba6 	bl	8001574 <Term_Update>
 8000e28:	e00f      	b.n	8000e4a <SendEnvironmentalData+0x462>
      }
      else
      {
        STLBLE_PRINTF("Temp1=%d ",Temp1ToSend);
 8000e2a:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4923      	ldr	r1, [pc, #140]	; (8000ec0 <SendEnvironmentalData+0x4d8>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f00d fd50 	bl	800e8d8 <siprintf>
 8000e38:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000e3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fd6d 	bl	8002924 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
    }
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 8000e4a:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8000e4e:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 8000e52:	f8b7 1132 	ldrh.w	r1, [r7, #306]	; 0x132
 8000e56:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8000e5a:	f000 fdf5 	bl	8001a48 <Environmental_Update>
  }
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <SendEnvironmentalData+0x4d4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00e      	beq.n	8000e8c <SendEnvironmentalData+0x4a4>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"\r\n");
 8000e6e:	4917      	ldr	r1, [pc, #92]	; (8000ecc <SendEnvironmentalData+0x4e4>)
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <SendEnvironmentalData+0x4dc>)
 8000e72:	f00d fd31 	bl	800e8d8 <siprintf>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <SendEnvironmentalData+0x4e0>)
 8000e7a:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <SendEnvironmentalData+0x4e0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <SendEnvironmentalData+0x4dc>)
 8000e86:	f000 fb75 	bl	8001574 <Term_Update>
  else 
  {
    STLBLE_PRINTF("\r\n");
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
}
 8000e8a:	e00d      	b.n	8000ea8 <SendEnvironmentalData+0x4c0>
    STLBLE_PRINTF("\r\n");
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	490f      	ldr	r1, [pc, #60]	; (8000ecc <SendEnvironmentalData+0x4e4>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f00d fd21 	bl	800e8d8 <siprintf>
 8000e96:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8000e9a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fd3e 	bl	8002924 <CDC_Fill_Buffer>
}
 8000ea8:	bf00      	nop
 8000eaa:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	0800f1e4 	.word	0x0800f1e4
 8000eb8:	200005dc 	.word	0x200005dc
 8000ebc:	2000021c 	.word	0x2000021c
 8000ec0:	0800f1f0 	.word	0x0800f1f0
 8000ec4:	20000940 	.word	0x20000940
 8000ec8:	20000a40 	.word	0x20000a40
 8000ecc:	0800f1fc 	.word	0x0800f1fc

08000ed0 <InitTimers>:
*  - 1 for sending the Environmental info
* @param  None
* @retval None
*/
static void InitTimers(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
  
  /* Timer Output Compare Configuration Structure declaration */
  TIM_OC_InitTypeDef sConfig;
  
  /* Compute the prescaler value to have TIM3 counter clock equal to 10 KHz */
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <InitTimers+0x74>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <InitTimers+0x78>)
 8000edc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee0:	0b5b      	lsrs	r3, r3, #13
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
  
  /* Set TIM1 instance (Motion)*/
  /* Set TIM1 instance */
  TimCCHandle.Instance = TIM1;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <InitTimers+0x7c>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <InitTimers+0x80>)
 8000eea:	601a      	str	r2, [r3, #0]
  TimCCHandle.Init.Period        = 65535;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <InitTimers+0x7c>)
 8000eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef2:	60da      	str	r2, [r3, #12]
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <InitTimers+0x7c>)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	6053      	str	r3, [r2, #4]
  TimCCHandle.Init.ClockDivision = 0;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <InitTimers+0x7c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <InitTimers+0x7c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <InitTimers+0x7c>)
 8000f08:	f009 fb00 	bl	800a50c <HAL_TIM_OC_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <InitTimers+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8000f12:	f000 fa6d 	bl	80013f0 <Error_Handler>
  }
  
  /* Configure the Output Compare channels */
  /* Common configuration for all channels */
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8000f16:	2330      	movs	r3, #48	; 0x30
 8000f18:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	60bb      	str	r3, [r7, #8]
  
  /* Output Compare Toggle Mode configuration: Channel1 */
  sConfig.Pulse = uhCCR1_Val;
 8000f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f22:	607b      	str	r3, [r7, #4]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4808      	ldr	r0, [pc, #32]	; (8000f4c <InitTimers+0x7c>)
 8000f2c:	f009 fe8e 	bl	800ac4c <HAL_TIM_OC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <InitTimers+0x6a>
  {
    /* Configuration Error */
    Error_Handler();
 8000f36:	f000 fa5b 	bl	80013f0 <Error_Handler>
  }  
  
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000004 	.word	0x20000004
 8000f48:	d1b71759 	.word	0xd1b71759
 8000f4c:	200008f4 	.word	0x200008f4
 8000f50:	40012c00 	.word	0x40012c00

08000f54 <Init_BlueNRG_Stack>:
/** @brief Initialize the BlueNRG Stack
* @param None
* @retval None
*/
static void Init_BlueNRG_Stack(void)
{
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f56:	b0db      	sub	sp, #364	; 0x16c
 8000f58:	af0a      	add	r7, sp, #40	; 0x28
  const char BoardName[8] = {NAME_STLBLE,0};
 8000f5a:	4a96      	ldr	r2, [pc, #600]	; (80011b4 <Init_BlueNRG_Stack+0x260>)
 8000f5c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f64:	e883 0003 	stmia.w	r3, {r0, r1}
      bdaddr[i] = tmp_bdaddr[i];
  }
#endif /* STATIC_BLE_MAC */

  /* Initialize the BlueNRG HCI */
  hci_init(HCI_Event_CB, NULL);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4893      	ldr	r0, [pc, #588]	; (80011b8 <Init_BlueNRG_Stack+0x264>)
 8000f6c:	f00d f8ae 	bl	800e0cc <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f70:	f507 7289 	add.w	r2, r7, #274	; 0x112
 8000f74:	f207 1315 	addw	r3, r7, #277	; 0x115
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f00c fee3 	bl	800dd46 <getBlueNRGVersion>
  * Reset BlueNRG again otherwise we won't
  * be able to change its MAC address.
  * aci_hal_write_config_data() must be the first
  * command after reset otherwise it will fail.
  */
  hci_reset();
 8000f80:	f00c ff25 	bl	800ddce <hci_reset>
  
  HAL_Delay(100);
 8000f84:	2064      	movs	r0, #100	; 0x64
 8000f86:	f000 fa1b 	bl	80013c0 <HAL_Delay>
  
#ifndef STATIC_BLE_MAC
  /* Create a Unique BLE MAC */
  {
    bdaddr[0] = (STM32_UUID[1]>>24)&0xFF;
 8000f8a:	4b8c      	ldr	r3, [pc, #560]	; (80011bc <Init_BlueNRG_Stack+0x268>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	0e1b      	lsrs	r3, r3, #24
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b8b      	ldr	r3, [pc, #556]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8000f94:	701a      	strb	r2, [r3, #0]
    bdaddr[1] = (STM32_UUID[0]    )&0xFF;
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <Init_BlueNRG_Stack+0x270>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8000f9e:	705a      	strb	r2, [r3, #1]
    bdaddr[2] = (STM32_UUID[2] >>8)&0xFF;
 8000fa0:	4b89      	ldr	r3, [pc, #548]	; (80011c8 <Init_BlueNRG_Stack+0x274>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b85      	ldr	r3, [pc, #532]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8000faa:	709a      	strb	r2, [r3, #2]
    bdaddr[3] = (STM32_UUID[0]>>16)&0xFF;
 8000fac:	4b85      	ldr	r3, [pc, #532]	; (80011c4 <Init_BlueNRG_Stack+0x270>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b82      	ldr	r3, [pc, #520]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8000fb6:	70da      	strb	r2, [r3, #3]
    bdaddr[4] = (((STLBLE_VERSION_MAJOR-48)*10) + (STLBLE_VERSION_MINOR-48)+100)&0xFF;
 8000fb8:	4b81      	ldr	r3, [pc, #516]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8000fba:	227d      	movs	r2, #125	; 0x7d
 8000fbc:	711a      	strb	r2, [r3, #4]
    bdaddr[5] = 0xC0; /* for a Legal BLE Random MAC */
 8000fbe:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8000fc0:	22c0      	movs	r2, #192	; 0xc0
 8000fc2:	715a      	strb	r2, [r3, #5]
    STLBLE_PRINTF("\r\nSetting Pubblic BD_ADDR failed\r\n");
    goto fail;
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_init();    
 8000fc4:	f00c fc4e 	bl	800d864 <aci_gatt_init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if(ret)
 8000fce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d010      	beq.n	8000ff8 <Init_BlueNRG_Stack+0xa4>
  {
    STLBLE_PRINTF("\r\nGATT_Init failed\r\n");
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	497c      	ldr	r1, [pc, #496]	; (80011cc <Init_BlueNRG_Stack+0x278>)
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00d fc7b 	bl	800e8d8 <siprintf>
 8000fe2:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
 8000fe6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fc97 	bl	8002924 <CDC_Fill_Buffer>
    goto fail;
 8000ff6:	e0d7      	b.n	80011a8 <Init_BlueNRG_Stack+0x254>
  }
  

    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ff8:	f507 728d 	add.w	r2, r7, #282	; 0x11a
 8000ffc:	f507 738b 	add.w	r3, r7, #278	; 0x116
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	2207      	movs	r2, #7
 800100c:	2100      	movs	r1, #0
 800100e:	2001      	movs	r0, #1
 8001010:	f00c fa40 	bl	800d494 <aci_gap_init_IDB05A1>
 8001014:	4603      	mov	r3, r0
 8001016:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  
  if(ret != BLE_STATUS_SUCCESS)
 800101a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800101e:	2b00      	cmp	r3, #0
 8001020:	d010      	beq.n	8001044 <Init_BlueNRG_Stack+0xf0>
  {
    STLBLE_PRINTF("\r\nGAP_Init failed\r\n");
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	496a      	ldr	r1, [pc, #424]	; (80011d0 <Init_BlueNRG_Stack+0x27c>)
 8001028:	4618      	mov	r0, r3
 800102a:	f00d fc55 	bl	800e8d8 <siprintf>
 800102e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8001032:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fc71 	bl	8002924 <CDC_Fill_Buffer>
    goto fail;
 8001042:	e0b1      	b.n	80011a8 <Init_BlueNRG_Stack+0x254>
  }
  
#ifndef  STATIC_BLE_MAC
  ret = hci_le_set_random_address(bdaddr);
 8001044:	485e      	ldr	r0, [pc, #376]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8001046:	f00c ff6f 	bl	800df28 <hci_le_set_random_address>
 800104a:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
  
  if(ret)
 800104e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001052:	2b00      	cmp	r3, #0
 8001054:	d010      	beq.n	8001078 <Init_BlueNRG_Stack+0x124>
  {
    STLBLE_PRINTF("\r\nSetting the Static Random BD_ADDR failed\r\n");
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	495e      	ldr	r1, [pc, #376]	; (80011d4 <Init_BlueNRG_Stack+0x280>)
 800105c:	4618      	mov	r0, r3
 800105e:	f00d fc3b 	bl	800e8d8 <siprintf>
 8001062:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 8001066:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fc57 	bl	8002924 <CDC_Fill_Buffer>
    goto fail;
 8001076:	e097      	b.n	80011a8 <Init_BlueNRG_Stack+0x254>
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001078:	f8b7 011a 	ldrh.w	r0, [r7, #282]	; 0x11a
 800107c:	f8b7 1118 	ldrh.w	r1, [r7, #280]	; 0x118
 8001080:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2307      	movs	r3, #7
 8001088:	2200      	movs	r2, #0
 800108a:	f00c fd6c 	bl	800db66 <aci_gatt_update_char_value>
 800108e:	4603      	mov	r3, r0
 8001090:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                                   7/*strlen(BoardName)*/, (uint8_t *)BoardName);
  
  if(ret)
 8001094:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d010      	beq.n	80010be <Init_BlueNRG_Stack+0x16a>
  {
    STLBLE_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	494d      	ldr	r1, [pc, #308]	; (80011d8 <Init_BlueNRG_Stack+0x284>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00d fc18 	bl	800e8d8 <siprintf>
 80010a8:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 80010ac:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fc34 	bl	8002924 <CDC_Fill_Buffer>
    while(1);
 80010bc:	e7fe      	b.n	80010bc <Init_BlueNRG_Stack+0x168>
  }
  
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80010be:	2301      	movs	r3, #1
 80010c0:	9303      	str	r3, [sp, #12]
 80010c2:	4b46      	ldr	r3, [pc, #280]	; (80011dc <Init_BlueNRG_Stack+0x288>)
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2310      	movs	r3, #16
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2307      	movs	r3, #7
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2001      	movs	r0, #1
 80010d6:	f00c fb1c 	bl	800d712 <aci_gap_set_auth_requirement>
 80010da:	4603      	mov	r3, r0
 80010dc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                                     OOB_AUTH_DATA_ABSENT,
                                     NULL, 7, 16,
                                     USE_FIXED_PIN_FOR_PAIRING, 123456,
                                     BONDING);
  if (ret != BLE_STATUS_SUCCESS) 
 80010e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d010      	beq.n	800110a <Init_BlueNRG_Stack+0x1b6>
  {
    STLBLE_PRINTF("\r\nGAP setting Authentication failed\r\n");
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	493c      	ldr	r1, [pc, #240]	; (80011e0 <Init_BlueNRG_Stack+0x28c>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00d fbf2 	bl	800e8d8 <siprintf>
 80010f4:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 80010f8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fc0e 	bl	8002924 <CDC_Fill_Buffer>
    goto fail;
 8001108:	e04e      	b.n	80011a8 <Init_BlueNRG_Stack+0x254>
  }
  
  STLBLE_PRINTF("SERVER: BLE Stack Initialized \r\n"
 800110a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800110e:	469c      	mov	ip, r3
 8001110:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b29b      	uxth	r3, r3
 8001118:	461c      	mov	r4, r3
 800111a:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	b29b      	uxth	r3, r3
 8001122:	f003 020f 	and.w	r2, r3, #15
 8001126:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800112a:	2b30      	cmp	r3, #48	; 0x30
 800112c:	d905      	bls.n	800113a <Init_BlueNRG_Stack+0x1e6>
 800112e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3360      	adds	r3, #96	; 0x60
 8001138:	e000      	b.n	800113c <Init_BlueNRG_Stack+0x1e8>
 800113a:	2361      	movs	r3, #97	; 0x61
 800113c:	4920      	ldr	r1, [pc, #128]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 800113e:	7949      	ldrb	r1, [r1, #5]
 8001140:	460d      	mov	r5, r1
 8001142:	491f      	ldr	r1, [pc, #124]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8001144:	7909      	ldrb	r1, [r1, #4]
 8001146:	460e      	mov	r6, r1
 8001148:	491d      	ldr	r1, [pc, #116]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 800114a:	78c9      	ldrb	r1, [r1, #3]
 800114c:	60f9      	str	r1, [r7, #12]
 800114e:	491c      	ldr	r1, [pc, #112]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8001150:	7889      	ldrb	r1, [r1, #2]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	491a      	ldr	r1, [pc, #104]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 8001156:	7849      	ldrb	r1, [r1, #1]
 8001158:	6079      	str	r1, [r7, #4]
 800115a:	4919      	ldr	r1, [pc, #100]	; (80011c0 <Init_BlueNRG_Stack+0x26c>)
 800115c:	7809      	ldrb	r1, [r1, #0]
 800115e:	f107 0010 	add.w	r0, r7, #16
 8001162:	9109      	str	r1, [sp, #36]	; 0x24
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	9108      	str	r1, [sp, #32]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	9107      	str	r1, [sp, #28]
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	9106      	str	r1, [sp, #24]
 8001170:	9605      	str	r6, [sp, #20]
 8001172:	9504      	str	r5, [sp, #16]
 8001174:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001178:	9103      	str	r1, [sp, #12]
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	9201      	str	r2, [sp, #4]
 800117e:	9400      	str	r4, [sp, #0]
 8001180:	4663      	mov	r3, ip
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <Init_BlueNRG_Stack+0x290>)
 8001184:	4918      	ldr	r1, [pc, #96]	; (80011e8 <Init_BlueNRG_Stack+0x294>)
 8001186:	f00d fba7 	bl	800e8d8 <siprintf>
 800118a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 800118e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fbc3 	bl	8002924 <CDC_Fill_Buffer>
                    (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a',
                    BoardName,
                    bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  
  /* Set output power level */
  aci_hal_set_tx_power_level(1,4);
 800119e:	2104      	movs	r1, #4
 80011a0:	2001      	movs	r0, #1
 80011a2:	f00c fd9f 	bl	800dce4 <aci_hal_set_tx_power_level>
  
  return;
 80011a6:	e000      	b.n	80011aa <Init_BlueNRG_Stack+0x256>
  
fail:
  return;
 80011a8:	bf00      	nop
}
 80011aa:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0800f338 	.word	0x0800f338
 80011b8:	08002681 	.word	0x08002681
 80011bc:	1fff7594 	.word	0x1fff7594
 80011c0:	200008ec 	.word	0x200008ec
 80011c4:	1fff7590 	.word	0x1fff7590
 80011c8:	1fff7598 	.word	0x1fff7598
 80011cc:	0800f200 	.word	0x0800f200
 80011d0:	0800f218 	.word	0x0800f218
 80011d4:	0800f22c 	.word	0x0800f22c
 80011d8:	0800f25c 	.word	0x0800f25c
 80011dc:	0001e240 	.word	0x0001e240
 80011e0:	0800f284 	.word	0x0800f284
 80011e4:	0800f2ac 	.word	0x0800f2ac
 80011e8:	0800f2b8 	.word	0x0800f2b8

080011ec <Init_BlueNRG_Custom_Services>:
/** @brief Initialize all the Custom BlueNRG services
* @param None
* @retval None
*/
static void Init_BlueNRG_Custom_Services(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0c6      	sub	sp, #280	; 0x118
 80011f0:	af00      	add	r7, sp, #0
  int ret;
  
  ret = Add_HWServW2ST_Service();
 80011f2:	f000 fb2b 	bl	800184c <Add_HWServW2ST_Service>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 80011fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10e      	bne.n	8001222 <Init_BlueNRG_Custom_Services+0x36>
  {
    STLBLE_PRINTF("HW      Service W2ST added successfully\r\n");
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4923      	ldr	r1, [pc, #140]	; (8001294 <Init_BlueNRG_Custom_Services+0xa8>)
 8001208:	4618      	mov	r0, r3
 800120a:	f00d fb65 	bl	800e8d8 <siprintf>
 800120e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001212:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fb82 	bl	8002924 <CDC_Fill_Buffer>
 8001220:	e00d      	b.n	800123e <Init_BlueNRG_Custom_Services+0x52>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding HW Service W2ST\r\n");
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	491c      	ldr	r1, [pc, #112]	; (8001298 <Init_BlueNRG_Custom_Services+0xac>)
 8001226:	4618      	mov	r0, r3
 8001228:	f00d fb56 	bl	800e8d8 <siprintf>
 800122c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001230:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fb73 	bl	8002924 <CDC_Fill_Buffer>
  }
  
  ret = Add_ConfigW2ST_Service();
 800123e:	f000 f8db 	bl	80013f8 <Add_ConfigW2ST_Service>
 8001242:	4603      	mov	r3, r0
 8001244:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 8001248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10e      	bne.n	800126e <Init_BlueNRG_Custom_Services+0x82>
  {
    STLBLE_PRINTF("Config  Service W2ST added successfully\r\n");
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4912      	ldr	r1, [pc, #72]	; (800129c <Init_BlueNRG_Custom_Services+0xb0>)
 8001254:	4618      	mov	r0, r3
 8001256:	f00d fb3f 	bl	800e8d8 <siprintf>
 800125a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 800125e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fb5c 	bl	8002924 <CDC_Fill_Buffer>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
  }
}
 800126c:	e00d      	b.n	800128a <Init_BlueNRG_Custom_Services+0x9e>
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	490b      	ldr	r1, [pc, #44]	; (80012a0 <Init_BlueNRG_Custom_Services+0xb4>)
 8001272:	4618      	mov	r0, r3
 8001274:	f00d fb30 	bl	800e8d8 <siprintf>
 8001278:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800127c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fb4d 	bl	8002924 <CDC_Fill_Buffer>
}
 800128a:	bf00      	nop
 800128c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	0800f340 	.word	0x0800f340
 8001298:	0800f36c 	.word	0x0800f36c
 800129c:	0800f394 	.word	0x0800f394
 80012a0:	0800f3c0 	.word	0x0800f3c0

080012a4 <SystemClock_Config>:
* @brief  System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0ba      	sub	sp, #232	; 0xe8
 80012a8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012be:	2244      	movs	r2, #68	; 0x44
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00d fa46 	bl	800e754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2288      	movs	r2, #136	; 0x88
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00d fa3f 	bl	800e754 <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b39      	ldr	r3, [pc, #228]	; (80013bc <SystemClock_Config+0x118>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <SystemClock_Config+0x118>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <SystemClock_Config+0x118>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 80012ee:	f007 f86d 	bl	80083cc <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80012f2:	2304      	movs	r3, #4
 80012f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001302:	4618      	mov	r0, r3
 8001304:	f007 f890 	bl	8008428 <HAL_RCC_OscConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d000      	beq.n	8001310 <SystemClock_Config+0x6c>
  {
    while(1);
 800130e:	e7fe      	b.n	800130e <SystemClock_Config+0x6a>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8001310:	f008 f934 	bl	800957c <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8001314:	2310      	movs	r3, #16
 8001316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800131a:	2301      	movs	r3, #1
 800131c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8001326:	23b0      	movs	r3, #176	; 0xb0
 8001328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8001332:	2301      	movs	r3, #1
 8001334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 8001338:	2306      	movs	r3, #6
 800133a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 800133e:	2328      	movs	r3, #40	; 0x28
 8001340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8001344:	2307      	movs	r3, #7
 8001346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800134a:	2304      	movs	r3, #4
 800134c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8001350:	2304      	movs	r3, #4
 8001352:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800135a:	4618      	mov	r0, r3
 800135c:	f007 f864 	bl	8008428 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d000      	beq.n	8001368 <SystemClock_Config+0xc4>
  {
    while(1);
 8001366:	e7fe      	b.n	8001366 <SystemClock_Config+0xc2>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8001368:	f008 f920 	bl	80095ac <HAL_RCCEx_EnableMSIPLLMode>
  
  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001370:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8001372:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001376:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f007 fe13 	bl	8008fa8 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001382:	230f      	movs	r3, #15
 8001384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a4:	2104      	movs	r1, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f007 fc24 	bl	8008bf4 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d000      	beq.n	80013b4 <SystemClock_Config+0x110>
  {
    while(1);
 80013b2:	e7fe      	b.n	80013b2 <SystemClock_Config+0x10e>
  }
}
 80013b4:	bf00      	nop
 80013b6:	37e8      	adds	r7, #232	; 0xe8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_Delay>:
* @note This is a user implementation using WFI state
* @param Delay: specifies the delay time length, in milliseconds.
* @retval None
*/
void HAL_Delay(__IO uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80013cc:	f004 fa04 	bl	80057d8 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80013d2:	e000      	b.n	80013d6 <HAL_Delay+0x16>
  {
    __WFI();
 80013d4:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay)
 80013d6:	f004 f9ff 	bl	80057d8 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad2      	subs	r2, r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d3f6      	bcc.n	80013d4 <HAL_Delay+0x14>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <Error_Handler>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x4>
	...

080013f8 <Add_ConfigW2ST_Service>:
* @brief  Add the Config service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_ConfigW2ST_Service(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af06      	add	r7, sp, #24
  tBleStatus ret;
  
  uint8_t uuid[16];
  
  COPY_CONFIG_SERVICE_UUID(uuid);
 80013fe:	231b      	movs	r3, #27
 8001400:	713b      	strb	r3, [r7, #4]
 8001402:	23c5      	movs	r3, #197	; 0xc5
 8001404:	717b      	strb	r3, [r7, #5]
 8001406:	23d5      	movs	r3, #213	; 0xd5
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	23a5      	movs	r3, #165	; 0xa5
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	2302      	movs	r3, #2
 8001410:	723b      	strb	r3, [r7, #8]
 8001412:	2300      	movs	r3, #0
 8001414:	727b      	strb	r3, [r7, #9]
 8001416:	23b4      	movs	r3, #180	; 0xb4
 8001418:	72bb      	strb	r3, [r7, #10]
 800141a:	239a      	movs	r3, #154	; 0x9a
 800141c:	72fb      	strb	r3, [r7, #11]
 800141e:	23e1      	movs	r3, #225	; 0xe1
 8001420:	733b      	strb	r3, [r7, #12]
 8001422:	2311      	movs	r3, #17
 8001424:	737b      	strb	r3, [r7, #13]
 8001426:	230f      	movs	r3, #15
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	2300      	movs	r3, #0
 8001430:	743b      	strb	r3, [r7, #16]
 8001432:	2300      	movs	r3, #0
 8001434:	747b      	strb	r3, [r7, #17]
 8001436:	2300      	movs	r3, #0
 8001438:	74bb      	strb	r3, [r7, #18]
 800143a:	2300      	movs	r3, #0
 800143c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);
 800143e:	1d39      	adds	r1, r7, #4
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <Add_ConfigW2ST_Service+0xe4>)
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2304      	movs	r3, #4
 8001446:	2201      	movs	r2, #1
 8001448:	2002      	movs	r0, #2
 800144a:	f00c fa2e 	bl	800d8aa <aci_gatt_add_serv>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]
  
  if (ret != BLE_STATUS_SUCCESS)
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d139      	bne.n	80014cc <Add_ConfigW2ST_Service+0xd4>
    goto fail;
  
  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 8001458:	231b      	movs	r3, #27
 800145a:	713b      	strb	r3, [r7, #4]
 800145c:	23c5      	movs	r3, #197	; 0xc5
 800145e:	717b      	strb	r3, [r7, #5]
 8001460:	23d5      	movs	r3, #213	; 0xd5
 8001462:	71bb      	strb	r3, [r7, #6]
 8001464:	23a5      	movs	r3, #165	; 0xa5
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	2302      	movs	r3, #2
 800146a:	723b      	strb	r3, [r7, #8]
 800146c:	2300      	movs	r3, #0
 800146e:	727b      	strb	r3, [r7, #9]
 8001470:	2336      	movs	r3, #54	; 0x36
 8001472:	72bb      	strb	r3, [r7, #10]
 8001474:	23ac      	movs	r3, #172	; 0xac
 8001476:	72fb      	strb	r3, [r7, #11]
 8001478:	23e1      	movs	r3, #225	; 0xe1
 800147a:	733b      	strb	r3, [r7, #12]
 800147c:	2311      	movs	r3, #17
 800147e:	737b      	strb	r3, [r7, #13]
 8001480:	230f      	movs	r3, #15
 8001482:	73bb      	strb	r3, [r7, #14]
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	2302      	movs	r3, #2
 800148a:	743b      	strb	r3, [r7, #16]
 800148c:	2300      	movs	r3, #0
 800148e:	747b      	strb	r3, [r7, #17]
 8001490:	2300      	movs	r3, #0
 8001492:	74bb      	strb	r3, [r7, #18]
 8001494:	2300      	movs	r3, #0
 8001496:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <Add_ConfigW2ST_Service+0xe4>)
 800149a:	8818      	ldrh	r0, [r3, #0]
 800149c:	1d3a      	adds	r2, r7, #4
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <Add_ConfigW2ST_Service+0xe8>)
 80014a0:	9305      	str	r3, [sp, #20]
 80014a2:	2301      	movs	r3, #1
 80014a4:	9304      	str	r3, [sp, #16]
 80014a6:	2310      	movs	r3, #16
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	2305      	movs	r3, #5
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	2300      	movs	r3, #0
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	2314      	movs	r3, #20
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2314      	movs	r3, #20
 80014b8:	2102      	movs	r1, #2
 80014ba:	f00c fa82 	bl	800d9c2 <aci_gatt_add_char>
 80014be:	4603      	mov	r3, r0
 80014c0:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &ConfigCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d103      	bne.n	80014d0 <Add_ConfigW2ST_Service+0xd8>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e003      	b.n	80014d4 <Add_ConfigW2ST_Service+0xdc>
    goto fail;
 80014cc:	bf00      	nop
 80014ce:	e000      	b.n	80014d2 <Add_ConfigW2ST_Service+0xda>
    goto fail;
 80014d0:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding Configuration service.\n");
  return BLE_STATUS_ERROR;
 80014d2:	2347      	movs	r3, #71	; 0x47
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000022e 	.word	0x2000022e
 80014e0:	20000230 	.word	0x20000230

080014e4 <Stderr_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Stderr_Update(uint8_t *data,uint8_t length)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages*/
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e02d      	b.n	8001552 <Stderr_Update+0x6e>
  {
    DataToSend = (length-Offset);
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	2b14      	cmp	r3, #20
 8001502:	bf28      	it	cs
 8001504:	2314      	movcs	r3, #20
 8001506:	73bb      	strb	r3, [r7, #14]
    
    /* keep a copy */
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	7bba      	ldrb	r2, [r7, #14]
 8001510:	4619      	mov	r1, r3
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <Stderr_Update+0x80>)
 8001514:	f00d f910 	bl	800e738 <memcpy>
    LastStderrLen = DataToSend;
 8001518:	4a13      	ldr	r2, [pc, #76]	; (8001568 <Stderr_Update+0x84>)
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <Stderr_Update+0x88>)
 8001520:	8818      	ldrh	r0, [r3, #0]
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <Stderr_Update+0x8c>)
 8001524:	8819      	ldrh	r1, [r3, #0]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	7bba      	ldrb	r2, [r7, #14]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	2200      	movs	r2, #0
 8001534:	f00c fb17 	bl	800db66 <aci_gatt_update_char_value>
 8001538:	4603      	mov	r3, r0
 800153a:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS)
 800153c:	7b7b      	ldrb	r3, [r7, #13]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <Stderr_Update+0x62>
    {
      return BLE_STATUS_ERROR;
 8001542:	2347      	movs	r3, #71	; 0x47
 8001544:	e00a      	b.n	800155c <Stderr_Update+0x78>
    }
    HAL_Delay(10);
 8001546:	200a      	movs	r0, #10
 8001548:	f7ff ff3a 	bl	80013c0 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	3314      	adds	r3, #20
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	429a      	cmp	r2, r3
 8001558:	d3cd      	bcc.n	80014f6 <Stderr_Update+0x12>
  }
  
  return BLE_STATUS_SUCCESS;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000238 	.word	0x20000238
 8001568:	2000024c 	.word	0x2000024c
 800156c:	20000232 	.word	0x20000232
 8001570:	20000236 	.word	0x20000236

08001574 <Term_Update>:
* @param  uint8_t *data string to write
* @param  uint8_t lenght lengt of string to write
* @retval tBleStatus      Status
*/
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0c6      	sub	sp, #280	; 0x118
 8001578:	af02      	add	r7, sp, #8
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	6018      	str	r0, [r3, #0]
 800157e:	460a      	mov	r2, r1
 8001580:	1cfb      	adds	r3, r7, #3
 8001582:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001584:	2300      	movs	r3, #0
 8001586:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800158a:	e04d      	b.n	8001628 <Term_Update+0xb4>
  {
    DataToSend = (length-Offset);
 800158c:	1cfb      	adds	r3, r7, #3
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 800159a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800159e:	2b14      	cmp	r3, #20
 80015a0:	bf28      	it	cs
 80015a2:	2314      	movcs	r3, #20
 80015a4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    
    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 80015a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015ac:	1d3a      	adds	r2, r7, #4
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80015b6:	4619      	mov	r1, r3
 80015b8:	4821      	ldr	r0, [pc, #132]	; (8001640 <Term_Update+0xcc>)
 80015ba:	f00d f8bd 	bl	800e738 <memcpy>
    LastTermLen = DataToSend;
 80015be:	4a21      	ldr	r2, [pc, #132]	; (8001644 <Term_Update+0xd0>)
 80015c0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80015c4:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <Term_Update+0xd4>)
 80015c8:	8818      	ldrh	r0, [r3, #0]
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <Term_Update+0xd8>)
 80015cc:	8819      	ldrh	r1, [r3, #0]
 80015ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015d2:	1d3a      	adds	r2, r7, #4
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4613      	mov	r3, r2
 80015e0:	2200      	movs	r2, #0
 80015e2:	f00c fac0 	bl	800db66 <aci_gatt_update_char_value>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
    if (ret != BLE_STATUS_SUCCESS) 
 80015ec:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d011      	beq.n	8001618 <Term_Update+0xa4>
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4915      	ldr	r1, [pc, #84]	; (8001650 <Term_Update+0xdc>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00d f96c 	bl	800e8d8 <siprintf>
 8001600:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8001604:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f001 f988 	bl	8002924 <CDC_Fill_Buffer>
      return BLE_STATUS_ERROR;
 8001614:	2347      	movs	r3, #71	; 0x47
 8001616:	e00e      	b.n	8001636 <Term_Update+0xc2>
    }
    HAL_Delay(20);
 8001618:	2014      	movs	r0, #20
 800161a:	f7ff fed1 	bl	80013c0 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 800161e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001622:	3314      	adds	r3, #20
 8001624:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001628:	1cfb      	adds	r3, r7, #3
 800162a:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3ab      	bcc.n	800158c <Term_Update+0x18>
  }
  
  return BLE_STATUS_SUCCESS;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000250 	.word	0x20000250
 8001644:	20000264 	.word	0x20000264
 8001648:	20000232 	.word	0x20000232
 800164c:	20000234 	.word	0x20000234
 8001650:	0800f3ec 	.word	0x0800f3ec

08001654 <Stderr_Update_AfterRead>:
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Stderr_Update_AfterRead(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <Stderr_Update_AfterRead+0x34>)
 800165c:	8818      	ldrh	r0, [r3, #0]
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <Stderr_Update_AfterRead+0x38>)
 8001660:	8819      	ldrh	r1, [r3, #0]
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <Stderr_Update_AfterRead+0x3c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <Stderr_Update_AfterRead+0x40>)
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	f00c fa7b 	bl	800db66 <aci_gatt_update_char_value>
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) 
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <Stderr_Update_AfterRead+0x2a>
  {
    return BLE_STATUS_ERROR;
 800167a:	2347      	movs	r3, #71	; 0x47
 800167c:	e000      	b.n	8001680 <Stderr_Update_AfterRead+0x2c>
  }
  
  return BLE_STATUS_SUCCESS;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000232 	.word	0x20000232
 800168c:	20000236 	.word	0x20000236
 8001690:	2000024c 	.word	0x2000024c
 8001694:	20000238 	.word	0x20000238

08001698 <Term_Update_AfterRead>:
* @brief  Update Terminal characteristic value after a read request
* @param None
* @retval tBleStatus      Status
*/
static tBleStatus Term_Update_AfterRead(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0c4      	sub	sp, #272	; 0x110
 800169c:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <Term_Update_AfterRead+0x84>)
 80016a0:	8818      	ldrh	r0, [r3, #0]
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <Term_Update_AfterRead+0x88>)
 80016a4:	8819      	ldrh	r1, [r3, #0]
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <Term_Update_AfterRead+0x8c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <Term_Update_AfterRead+0x90>)
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f00c fa59 	bl	800db66 <aci_gatt_update_char_value>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  if (ret != BLE_STATUS_SUCCESS) 
 80016ba:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d026      	beq.n	8001710 <Term_Update_AfterRead+0x78>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <Term_Update_AfterRead+0x94>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0a5b      	lsrs	r3, r3, #9
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00e      	beq.n	80016f0 <Term_Update_AfterRead+0x58>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Stdout Char\r\n");
 80016d2:	4917      	ldr	r1, [pc, #92]	; (8001730 <Term_Update_AfterRead+0x98>)
 80016d4:	4817      	ldr	r0, [pc, #92]	; (8001734 <Term_Update_AfterRead+0x9c>)
 80016d6:	f00d f8ff 	bl	800e8d8 <siprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a16      	ldr	r2, [pc, #88]	; (8001738 <Term_Update_AfterRead+0xa0>)
 80016de:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <Term_Update_AfterRead+0xa0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	4812      	ldr	r0, [pc, #72]	; (8001734 <Term_Update_AfterRead+0x9c>)
 80016ea:	f7ff fefb 	bl	80014e4 <Stderr_Update>
 80016ee:	e00d      	b.n	800170c <Term_Update_AfterRead+0x74>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 80016f0:	463b      	mov	r3, r7
 80016f2:	490f      	ldr	r1, [pc, #60]	; (8001730 <Term_Update_AfterRead+0x98>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00d f8ef 	bl	800e8d8 <siprintf>
 80016fa:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80016fe:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001702:	463b      	mov	r3, r7
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f001 f90c 	bl	8002924 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 800170c:	2347      	movs	r3, #71	; 0x47
 800170e:	e000      	b.n	8001712 <Term_Update_AfterRead+0x7a>
  }
  
  return BLE_STATUS_SUCCESS;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000232 	.word	0x20000232
 8001720:	20000234 	.word	0x20000234
 8001724:	20000264 	.word	0x20000264
 8001728:	20000250 	.word	0x20000250
 800172c:	2000021c 	.word	0x2000021c
 8001730:	0800f3ec 	.word	0x0800f3ec
 8001734:	20000940 	.word	0x20000940
 8001738:	20000a40 	.word	0x20000a40

0800173c <Config_Notify>:
 * @param  uint8_t Command Replay to this Command
 * @param  uint8_t data result to send back
 * @retval tBleStatus Status
 */
tBleStatus Config_Notify(uint32_t Feature,uint8_t Command,uint8_t data)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0c8      	sub	sp, #288	; 0x120
 8001740:	af02      	add	r7, sp, #8
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	6018      	str	r0, [r3, #0]
 8001746:	4608      	mov	r0, r1
 8001748:	4611      	mov	r1, r2
 800174a:	1cfb      	adds	r3, r7, #3
 800174c:	4602      	mov	r2, r0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	1cbb      	adds	r3, r7, #2
 8001752:	460a      	mov	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t buff[2+4+1+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001756:	f004 f83f 	bl	80057d8 <HAL_GetTick>
 800175a:	4603      	mov	r3, r0
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
 8001764:	f004 f838 	bl	80057d8 <HAL_GetTick>
 8001768:	4603      	mov	r3, r0
 800176a:	0adb      	lsrs	r3, r3, #11
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  STORE_BE_32(buff+2,Feature);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0e1b      	lsrs	r3, r3, #24
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
  buff[6] = Command;
 80017a0:	1cfb      	adds	r3, r7, #3
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  buff[7] = data;
 80017a8:	1cbb      	adds	r3, r7, #2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  
  ret = aci_gatt_update_char_value (ConfigServW2STHandle, ConfigCharHandle, 0, 8,buff);
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <Config_Notify+0xf8>)
 80017b2:	8818      	ldrh	r0, [r3, #0]
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <Config_Notify+0xfc>)
 80017b6:	8819      	ldrh	r1, [r3, #0]
 80017b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2308      	movs	r3, #8
 80017c0:	2200      	movs	r2, #0
 80017c2:	f00c f9d0 	bl	800db66 <aci_gatt_update_char_value>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  if (ret != BLE_STATUS_SUCCESS)
 80017cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d028      	beq.n	8001826 <Config_Notify+0xea>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <Config_Notify+0x100>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0a5b      	lsrs	r3, r3, #9
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <Config_Notify+0xc6>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Configuration Char\r\n");
 80017e4:	4916      	ldr	r1, [pc, #88]	; (8001840 <Config_Notify+0x104>)
 80017e6:	4817      	ldr	r0, [pc, #92]	; (8001844 <Config_Notify+0x108>)
 80017e8:	f00d f876 	bl	800e8d8 <siprintf>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4a16      	ldr	r2, [pc, #88]	; (8001848 <Config_Notify+0x10c>)
 80017f0:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <Config_Notify+0x10c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	4812      	ldr	r0, [pc, #72]	; (8001844 <Config_Notify+0x108>)
 80017fc:	f7ff fe72 	bl	80014e4 <Stderr_Update>
 8001800:	e00f      	b.n	8001822 <Config_Notify+0xe6>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Configuration Char\r\n");
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <Config_Notify+0x104>)
 8001808:	4618      	mov	r0, r3
 800180a:	f00d f865 	bl	800e8d8 <siprintf>
 800180e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001812:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f001 f881 	bl	8002924 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001822:	2347      	movs	r3, #71	; 0x47
 8001824:	e000      	b.n	8001828 <Config_Notify+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000022e 	.word	0x2000022e
 8001838:	20000230 	.word	0x20000230
 800183c:	2000021c 	.word	0x2000021c
 8001840:	0800f40c 	.word	0x0800f40c
 8001844:	20000940 	.word	0x20000940
 8001848:	20000a40 	.word	0x20000a40

0800184c <Add_HWServW2ST_Service>:
* @brief  Add the HW Features service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_HWServW2ST_Service(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberChars = 4;
 8001852:	2304      	movs	r3, #4
 8001854:	617b      	str	r3, [r7, #20]
  
  uint8_t uuid[16];
  
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001856:	231b      	movs	r3, #27
 8001858:	703b      	strb	r3, [r7, #0]
 800185a:	23c5      	movs	r3, #197	; 0xc5
 800185c:	707b      	strb	r3, [r7, #1]
 800185e:	23d5      	movs	r3, #213	; 0xd5
 8001860:	70bb      	strb	r3, [r7, #2]
 8001862:	23a5      	movs	r3, #165	; 0xa5
 8001864:	70fb      	strb	r3, [r7, #3]
 8001866:	2302      	movs	r3, #2
 8001868:	713b      	strb	r3, [r7, #4]
 800186a:	2300      	movs	r3, #0
 800186c:	717b      	strb	r3, [r7, #5]
 800186e:	23b4      	movs	r3, #180	; 0xb4
 8001870:	71bb      	strb	r3, [r7, #6]
 8001872:	239a      	movs	r3, #154	; 0x9a
 8001874:	71fb      	strb	r3, [r7, #7]
 8001876:	23e1      	movs	r3, #225	; 0xe1
 8001878:	723b      	strb	r3, [r7, #8]
 800187a:	2311      	movs	r3, #17
 800187c:	727b      	strb	r3, [r7, #9]
 800187e:	2301      	movs	r3, #1
 8001880:	72bb      	strb	r3, [r7, #10]
 8001882:	2300      	movs	r3, #0
 8001884:	72fb      	strb	r3, [r7, #11]
 8001886:	2300      	movs	r3, #0
 8001888:	733b      	strb	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	737b      	strb	r3, [r7, #13]
 800188e:	2300      	movs	r3, #0
 8001890:	73bb      	strb	r3, [r7, #14]
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	0052      	lsls	r2, r2, #1
 800189e:	4413      	add	r3, r2
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4639      	mov	r1, r7
 80018a8:	4a62      	ldr	r2, [pc, #392]	; (8001a34 <Add_HWServW2ST_Service+0x1e8>)
 80018aa:	9200      	str	r2, [sp, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	2002      	movs	r0, #2
 80018b0:	f00b fffb 	bl	800d8aa <aci_gatt_add_serv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberChars,
                          &HWServW2STHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 80b0 	bne.w	8001a20 <Add_HWServW2ST_Service+0x1d4>
  {
    goto fail;
  }
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80018c0:	231b      	movs	r3, #27
 80018c2:	703b      	strb	r3, [r7, #0]
 80018c4:	23c5      	movs	r3, #197	; 0xc5
 80018c6:	707b      	strb	r3, [r7, #1]
 80018c8:	23d5      	movs	r3, #213	; 0xd5
 80018ca:	70bb      	strb	r3, [r7, #2]
 80018cc:	23a5      	movs	r3, #165	; 0xa5
 80018ce:	70fb      	strb	r3, [r7, #3]
 80018d0:	2302      	movs	r3, #2
 80018d2:	713b      	strb	r3, [r7, #4]
 80018d4:	2300      	movs	r3, #0
 80018d6:	717b      	strb	r3, [r7, #5]
 80018d8:	2336      	movs	r3, #54	; 0x36
 80018da:	71bb      	strb	r3, [r7, #6]
 80018dc:	23ac      	movs	r3, #172	; 0xac
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	23e1      	movs	r3, #225	; 0xe1
 80018e2:	723b      	strb	r3, [r7, #8]
 80018e4:	2311      	movs	r3, #17
 80018e6:	727b      	strb	r3, [r7, #9]
 80018e8:	2301      	movs	r3, #1
 80018ea:	72bb      	strb	r3, [r7, #10]
 80018ec:	2300      	movs	r3, #0
 80018ee:	72fb      	strb	r3, [r7, #11]
 80018f0:	2300      	movs	r3, #0
 80018f2:	733b      	strb	r3, [r7, #12]
 80018f4:	2300      	movs	r3, #0
 80018f6:	737b      	strb	r3, [r7, #13]
 80018f8:	2300      	movs	r3, #0
 80018fa:	73bb      	strb	r3, [r7, #14]
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <Add_HWServW2ST_Service+0x1ec>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d10b      	bne.n	8001920 <Add_HWServW2ST_Service+0xd4>
  {
    uuid[14] |= 0x05; /* Two Temperature values*/
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	f043 0305 	orr.w	r3, r3, #5
 800190e:	b2db      	uxtb	r3, r3
 8001910:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2*2;
 8001912:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	3304      	adds	r3, #4
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e00e      	b.n	800193e <Add_HWServW2ST_Service+0xf2>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <Add_HWServW2ST_Service+0x1ec>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d10a      	bne.n	800193e <Add_HWServW2ST_Service+0xf2>
  {
    uuid[14] |= 0x04; /* One Temperature value*/
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	b2db      	uxtb	r3, r3
 8001930:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001932:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	3302      	adds	r3, #2
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 800193c:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <Add_HWServW2ST_Service+0x1ec>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00a      	beq.n	800195c <Add_HWServW2ST_Service+0x110>
  {
    uuid[14] |= 0x08; /* Humidity */
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	b2db      	uxtb	r3, r3
 800194e:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001950:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	3302      	adds	r3, #2
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 800195a:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <Add_HWServW2ST_Service+0x1ec>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <Add_HWServW2ST_Service+0x12e>
  {
    uuid[14] |= 0x10; /* Pressure value*/
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	b2db      	uxtb	r3, r3
 800196c:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=4;
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	3304      	adds	r3, #4
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 8001978:	701a      	strb	r2, [r3, #0]
  }
  
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, EnvironmentalCharSize,
 800197a:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <Add_HWServW2ST_Service+0x1e8>)
 800197c:	8818      	ldrh	r0, [r3, #0]
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <Add_HWServW2ST_Service+0x1f0>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	463a      	mov	r2, r7
 8001984:	492e      	ldr	r1, [pc, #184]	; (8001a40 <Add_HWServW2ST_Service+0x1f4>)
 8001986:	9105      	str	r1, [sp, #20]
 8001988:	2100      	movs	r1, #0
 800198a:	9104      	str	r1, [sp, #16]
 800198c:	2110      	movs	r1, #16
 800198e:	9103      	str	r1, [sp, #12]
 8001990:	2104      	movs	r1, #4
 8001992:	9102      	str	r1, [sp, #8]
 8001994:	2100      	movs	r1, #0
 8001996:	9101      	str	r1, [sp, #4]
 8001998:	2112      	movs	r1, #18
 800199a:	9100      	str	r1, [sp, #0]
 800199c:	2102      	movs	r1, #2
 800199e:	f00c f810 	bl	800d9c2 <aci_gatt_add_char>
 80019a2:	4603      	mov	r3, r0
 80019a4:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 80019a6:	7cfb      	ldrb	r3, [r7, #19]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d13b      	bne.n	8001a24 <Add_HWServW2ST_Service+0x1d8>
  {
    goto fail;
  }
  
  COPY_LED_W2ST_CHAR_UUID(uuid);
 80019ac:	231b      	movs	r3, #27
 80019ae:	703b      	strb	r3, [r7, #0]
 80019b0:	23c5      	movs	r3, #197	; 0xc5
 80019b2:	707b      	strb	r3, [r7, #1]
 80019b4:	23d5      	movs	r3, #213	; 0xd5
 80019b6:	70bb      	strb	r3, [r7, #2]
 80019b8:	23a5      	movs	r3, #165	; 0xa5
 80019ba:	70fb      	strb	r3, [r7, #3]
 80019bc:	2302      	movs	r3, #2
 80019be:	713b      	strb	r3, [r7, #4]
 80019c0:	2300      	movs	r3, #0
 80019c2:	717b      	strb	r3, [r7, #5]
 80019c4:	2336      	movs	r3, #54	; 0x36
 80019c6:	71bb      	strb	r3, [r7, #6]
 80019c8:	23ac      	movs	r3, #172	; 0xac
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	23e1      	movs	r3, #225	; 0xe1
 80019ce:	723b      	strb	r3, [r7, #8]
 80019d0:	2311      	movs	r3, #17
 80019d2:	727b      	strb	r3, [r7, #9]
 80019d4:	2301      	movs	r3, #1
 80019d6:	72bb      	strb	r3, [r7, #10]
 80019d8:	2300      	movs	r3, #0
 80019da:	72fb      	strb	r3, [r7, #11]
 80019dc:	2300      	movs	r3, #0
 80019de:	733b      	strb	r3, [r7, #12]
 80019e0:	2300      	movs	r3, #0
 80019e2:	737b      	strb	r3, [r7, #13]
 80019e4:	2300      	movs	r3, #0
 80019e6:	73bb      	strb	r3, [r7, #14]
 80019e8:	2320      	movs	r3, #32
 80019ea:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <Add_HWServW2ST_Service+0x1e8>)
 80019ee:	8818      	ldrh	r0, [r3, #0]
 80019f0:	463a      	mov	r2, r7
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <Add_HWServW2ST_Service+0x1f8>)
 80019f4:	9305      	str	r3, [sp, #20]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9304      	str	r3, [sp, #16]
 80019fa:	2310      	movs	r3, #16
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	2304      	movs	r3, #4
 8001a00:	9302      	str	r3, [sp, #8]
 8001a02:	2300      	movs	r3, #0
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	2312      	movs	r3, #18
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	f00b ffd8 	bl	800d9c2 <aci_gatt_add_char>
 8001a12:	4603      	mov	r3, r0
 8001a14:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &LedCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <Add_HWServW2ST_Service+0x1dc>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e005      	b.n	8001a2c <Add_HWServW2ST_Service+0x1e0>
    goto fail;
 8001a20:	bf00      	nop
 8001a22:	e002      	b.n	8001a2a <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001a24:	bf00      	nop
 8001a26:	e000      	b.n	8001a2a <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001a28:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding HW's Characteristcs service.\n");
  return BLE_STATUS_ERROR;
 8001a2a:	2347      	movs	r3, #71	; 0x47
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000228 	.word	0x20000228
 8001a38:	200005dc 	.word	0x200005dc
 8001a3c:	20000001 	.word	0x20000001
 8001a40:	2000022a 	.word	0x2000022a
 8001a44:	2000022c 	.word	0x2000022c

08001a48 <Environmental_Update>:
* @param  int16_t Temp2 Temperature in tenths of degree second sensor
* @param  int16_t Temp1 Temperature in tenths of degree first sensor
* @retval tBleStatus   Status
*/
tBleStatus Environmental_Update(int32_t Press,uint16_t Hum,int16_t Temp2,int16_t Temp1)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b0cd      	sub	sp, #308	; 0x134
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	f107 040c 	add.w	r4, r7, #12
 8001a52:	6020      	str	r0, [r4, #0]
 8001a54:	460c      	mov	r4, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f107 030a 	add.w	r3, r7, #10
 8001a5e:	4622      	mov	r2, r4
 8001a60:	801a      	strh	r2, [r3, #0]
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4602      	mov	r2, r0
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	1dbb      	adds	r3, r7, #6
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	801a      	strh	r2, [r3, #0]
  tBleStatus ret;
  uint8_t BuffPos;
  
  uint8_t buff[2+4/*Press*/+2/*Hum*/+2/*Temp2*/+2/*Temp1*/];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001a70:	f003 feb2 	bl	80057d8 <HAL_GetTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	08db      	lsrs	r3, r3, #3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001a7e:	f003 feab 	bl	80057d8 <HAL_GetTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	0adb      	lsrs	r3, r3, #11
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  BuffPos=2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001a92:	4b7b      	ldr	r3, [pc, #492]	; (8001c80 <Environmental_Update+0x238>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d032      	beq.n	8001b00 <Environmental_Update+0xb8>
  {
    STORE_LE_32(buff+BuffPos,Press);
 8001a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001a9e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f107 020c 	add.w	r2, r7, #12
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	1219      	asrs	r1, r3, #8
 8001ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001aba:	3301      	adds	r3, #1
 8001abc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	1419      	asrs	r1, r3, #16
 8001ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ad8:	4413      	add	r3, r2
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1619      	asrs	r1, r3, #24
 8001ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001aea:	3303      	adds	r3, #3
 8001aec:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001af0:	4413      	add	r3, r2
 8001af2:	b2ca      	uxtb	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
    BuffPos+=4;
 8001af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001afa:	3304      	adds	r3, #4
 8001afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001b00:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <Environmental_Update+0x238>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <Environmental_Update+0xf8>
  {
    STORE_LE_16(buff+BuffPos,Hum);
 8001b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b0c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001b10:	4413      	add	r3, r2
 8001b12:	f107 020a 	add.w	r2, r7, #10
 8001b16:	8812      	ldrh	r2, [r2, #0]
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	f107 030a 	add.w	r3, r7, #10
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	b299      	uxth	r1, r3
 8001b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001b30:	4413      	add	r3, r2
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <Environmental_Update+0x238>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d138      	bne.n	8001bba <Environmental_Update+0x172>
  {
    STORE_LE_16(buff+BuffPos,Temp2);
 8001b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b4c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001b50:	4413      	add	r3, r2
 8001b52:	f107 0208 	add.w	r2, r7, #8
 8001b56:	8812      	ldrh	r2, [r2, #0]
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b64:	121b      	asrs	r3, r3, #8
 8001b66:	b219      	sxth	r1, r3
 8001b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001b72:	4413      	add	r3, r2
 8001b74:	b2ca      	uxtb	r2, r1
 8001b76:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    STORE_LE_16(buff+BuffPos,Temp1);
 8001b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001b86:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001b8a:	4413      	add	r3, r2
 8001b8c:	1dba      	adds	r2, r7, #6
 8001b8e:	8812      	ldrh	r2, [r2, #0]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9a:	121b      	asrs	r3, r3, #8
 8001b9c:	b219      	sxth	r1, r3
 8001b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8001bb8:	e01e      	b.n	8001bf8 <Environmental_Update+0x1b0>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <Environmental_Update+0x238>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d11a      	bne.n	8001bf8 <Environmental_Update+0x1b0>
  {
    STORE_LE_16(buff+BuffPos,Temp1);
 8001bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001bc6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001bca:	4413      	add	r3, r2
 8001bcc:	1dba      	adds	r2, r7, #6
 8001bce:	8812      	ldrh	r2, [r2, #0]
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	1dbb      	adds	r3, r7, #6
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	121b      	asrs	r3, r3, #8
 8001bdc:	b219      	sxth	r1, r3
 8001bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001be2:	3301      	adds	r3, #1
 8001be4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001be8:	4413      	add	r3, r2
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, EnvironmentalCharSize,buff);
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <Environmental_Update+0x23c>)
 8001bfa:	8818      	ldrh	r0, [r3, #0]
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <Environmental_Update+0x240>)
 8001bfe:	8819      	ldrh	r1, [r3, #0]
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <Environmental_Update+0x244>)
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f00b ffaa 	bl	800db66 <aci_gatt_update_char_value>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  
  if (ret != BLE_STATUS_SUCCESS)
 8001c18:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d028      	beq.n	8001c72 <Environmental_Update+0x22a>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <Environmental_Update+0x248>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0a5b      	lsrs	r3, r3, #9
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00e      	beq.n	8001c4e <Environmental_Update+0x206>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
 8001c30:	4918      	ldr	r1, [pc, #96]	; (8001c94 <Environmental_Update+0x24c>)
 8001c32:	4819      	ldr	r0, [pc, #100]	; (8001c98 <Environmental_Update+0x250>)
 8001c34:	f00c fe50 	bl	800e8d8 <siprintf>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <Environmental_Update+0x254>)
 8001c3c:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <Environmental_Update+0x254>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4619      	mov	r1, r3
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <Environmental_Update+0x250>)
 8001c48:	f7ff fc4c 	bl	80014e4 <Stderr_Update>
 8001c4c:	e00f      	b.n	8001c6e <Environmental_Update+0x226>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Environmental Char\r\n");
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4910      	ldr	r1, [pc, #64]	; (8001c94 <Environmental_Update+0x24c>)
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00c fe3f 	bl	800e8d8 <siprintf>
 8001c5a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8001c5e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fe5b 	bl	8002924 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001c6e:	2347      	movs	r3, #71	; 0x47
 8001c70:	e000      	b.n	8001c74 <Environmental_Update+0x22c>
  }
  return BLE_STATUS_SUCCESS;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200005dc 	.word	0x200005dc
 8001c84:	20000228 	.word	0x20000228
 8001c88:	2000022a 	.word	0x2000022a
 8001c8c:	20000001 	.word	0x20000001
 8001c90:	2000021c 	.word	0x2000021c
 8001c94:	0800f430 	.word	0x0800f430
 8001c98:	20000940 	.word	0x20000940
 8001c9c:	20000a40 	.word	0x20000a40

08001ca0 <LED_Update>:
* @brief  Update LEDs characteristic value
* @param  uint8_t LedStatus LEDs status 0/1 (off/on)
* @retval tBleStatus   Status
*/
tBleStatus LED_Update(uint8_t LedStatus)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0c8      	sub	sp, #288	; 0x120
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  
  uint8_t buff[2+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001cac:	f003 fd94 	bl	80057d8 <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8001cba:	f003 fd8d 	bl	80057d8 <HAL_GetTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	0adb      	lsrs	r3, r3, #11
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
  buff[2] = LedStatus;
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, LedCharHandle, 0, 2+1,buff);
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <LED_Update+0xb4>)
 8001cd2:	8818      	ldrh	r0, [r3, #0]
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <LED_Update+0xb8>)
 8001cd6:	8819      	ldrh	r1, [r3, #0]
 8001cd8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2303      	movs	r3, #3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f00b ff40 	bl	800db66 <aci_gatt_update_char_value>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
  if (ret != BLE_STATUS_SUCCESS)
 8001cec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d028      	beq.n	8001d46 <LED_Update+0xa6>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <LED_Update+0xbc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0a5b      	lsrs	r3, r3, #9
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00e      	beq.n	8001d22 <LED_Update+0x82>
    {
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating LED Char\r\n");
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <LED_Update+0xc0>)
 8001d06:	4817      	ldr	r0, [pc, #92]	; (8001d64 <LED_Update+0xc4>)
 8001d08:	f00c fde6 	bl	800e8d8 <siprintf>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <LED_Update+0xc8>)
 8001d10:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <LED_Update+0xc8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4812      	ldr	r0, [pc, #72]	; (8001d64 <LED_Update+0xc4>)
 8001d1c:	f7ff fbe2 	bl	80014e4 <Stderr_Update>
 8001d20:	e00f      	b.n	8001d42 <LED_Update+0xa2>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Temp Char\r\n");
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4911      	ldr	r1, [pc, #68]	; (8001d6c <LED_Update+0xcc>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00c fdd5 	bl	800e8d8 <siprintf>
 8001d2e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001d32:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fdf1 	bl	8002924 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001d42:	2347      	movs	r3, #71	; 0x47
 8001d44:	e000      	b.n	8001d48 <LED_Update+0xa8>
  }
  return BLE_STATUS_SUCCESS;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000228 	.word	0x20000228
 8001d58:	2000022c 	.word	0x2000022c
 8001d5c:	2000021c 	.word	0x2000021c
 8001d60:	0800f454 	.word	0x0800f454
 8001d64:	20000940 	.word	0x20000940
 8001d68:	20000a40 	.word	0x20000a40
 8001d6c:	0800f470 	.word	0x0800f470

08001d70 <setConnectable>:
 * @brief  Puts the device in connectable mode.
 * @param  None 
 * @retval None
 */
void setConnectable(void)
{  
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b092      	sub	sp, #72	; 0x48
 8001d74:	af08      	add	r7, sp, #32
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_STLBLE};
 8001d76:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <setConnectable+0x108>)
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d80:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t manuf_data[26] = {
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <setConnectable+0x10c>)
 8001d86:	1d3c      	adds	r4, r7, #4
 8001d88:	461d      	mov	r5, r3
 8001d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d92:	c403      	stmia	r4!, {r0, r1}
 8001d94:	8022      	strh	r2, [r4, #0]
    0x00,
    0x00, /* BLE MAC stop */
  };
  
  /* BLE MAC */
  manuf_data[20] = bdaddr[5];
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <setConnectable+0x110>)
 8001d98:	795b      	ldrb	r3, [r3, #5]
 8001d9a:	763b      	strb	r3, [r7, #24]
  manuf_data[21] = bdaddr[4];
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <setConnectable+0x110>)
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	767b      	strb	r3, [r7, #25]
  manuf_data[22] = bdaddr[3];
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <setConnectable+0x110>)
 8001da4:	78db      	ldrb	r3, [r3, #3]
 8001da6:	76bb      	strb	r3, [r7, #26]
  manuf_data[23] = bdaddr[2];
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <setConnectable+0x110>)
 8001daa:	789b      	ldrb	r3, [r3, #2]
 8001dac:	76fb      	strb	r3, [r7, #27]
  manuf_data[24] = bdaddr[1];
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <setConnectable+0x110>)
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	773b      	strb	r3, [r7, #28]
  manuf_data[25] = bdaddr[0];
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <setConnectable+0x110>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	777b      	strb	r3, [r7, #29]
  
  manuf_data[16] |= 0x20; /* Led */
 8001dba:	7d3b      	ldrb	r3, [r7, #20]
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	753b      	strb	r3, [r7, #20]
  
  if(TargetBoardFeatures.HandleGGComponent)
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <setConnectable+0x114>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <setConnectable+0x66>
  {
    manuf_data[17] |= 0x02; /* Battery Present */
 8001dcc:	7d7b      	ldrb	r3, [r7, #21]
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.NumTempSensors==2)
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <setConnectable+0x114>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d105      	bne.n	8001dea <setConnectable+0x7a>
  {
    manuf_data[17] |= 0x05; /* Two Temperature values*/
 8001dde:	7d7b      	ldrb	r3, [r7, #21]
 8001de0:	f043 0305 	orr.w	r3, r3, #5
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	757b      	strb	r3, [r7, #21]
 8001de8:	e008      	b.n	8001dfc <setConnectable+0x8c>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <setConnectable+0x114>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d104      	bne.n	8001dfc <setConnectable+0x8c>
  {
    manuf_data[17] |= 0x04; /* One Temperature value*/
 8001df2:	7d7b      	ldrb	r3, [r7, #21]
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <setConnectable+0x114>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <setConnectable+0x9e>
  {
    manuf_data[17] |= 0x08; /* Humidity */
 8001e04:	7d7b      	ldrb	r3, [r7, #21]
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <setConnectable+0x114>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d004      	beq.n	8001e20 <setConnectable+0xb0>
  {
    manuf_data[17] |= 0x10; /* Pressure value*/
 8001e16:	7d7b      	ldrb	r3, [r7, #21]
 8001e18:	f043 0310 	orr.w	r3, r3, #16
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	757b      	strb	r3, [r7, #21]
  }
  
  /* DS3 DIL24  present*/
  if(TargetBoardFeatures.HWAdvanceFeatures) 
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <setConnectable+0x114>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <setConnectable+0xc2>
  {
    /* Accelerometer Events */
    manuf_data[18] |=0x04;
 8001e28:	7dbb      	ldrb	r3, [r7, #22]
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	75bb      	strb	r3, [r7, #22]
  }
  
  
  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
 8001e32:	2100      	movs	r1, #0
 8001e34:	2000      	movs	r0, #0
 8001e36:	f00c f836 	bl	800dea6 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9306      	str	r3, [sp, #24]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9305      	str	r3, [sp, #20]
 8001e42:	2300      	movs	r3, #0
 8001e44:	9304      	str	r3, [sp, #16]
 8001e46:	2300      	movs	r3, #0
 8001e48:	9303      	str	r3, [sp, #12]
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2308      	movs	r3, #8
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	2300      	movs	r3, #0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f00b fb68 	bl	800d534 <aci_gap_set_discoverable>
#endif /* STATIC_BLE_MAC */
                           NO_WHITE_LIST_USE,
                           sizeof(local_name), local_name, 0, NULL, 0, 0);
  
  /* Send Advertising data */
  aci_gap_update_adv_data(26, manuf_data);
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	201a      	movs	r0, #26
 8001e6a:	f00b fca9 	bl	800d7c0 <aci_gap_update_adv_data>
}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	; 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bdb0      	pop	{r4, r5, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	0800f48c 	.word	0x0800f48c
 8001e7c:	0800f494 	.word	0x0800f494
 8001e80:	200008ec 	.word	0x200008ec
 8001e84:	200005dc 	.word	0x200005dc

08001e88 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	b0c9      	sub	sp, #292	; 0x124
 8001e8c:	af04      	add	r7, sp, #16
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	6018      	str	r0, [r3, #0]
 8001e92:	460a      	mov	r2, r1
 8001e94:	1cbb      	adds	r3, r7, #2
 8001e96:	801a      	strh	r2, [r3, #0]
  connected = TRUE;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <GAP_ConnectionComplete_CB+0x90>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <GAP_ConnectionComplete_CB+0x94>)
 8001ea0:	1cbb      	adds	r3, r7, #2
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	8013      	strh	r3, [r2, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3305      	adds	r3, #5
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461d      	mov	r5, r3
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461e      	mov	r6, r3
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3303      	adds	r3, #3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461c      	mov	r4, r3
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	f107 000c 	add.w	r0, r7, #12
 8001ee2:	9303      	str	r3, [sp, #12]
 8001ee4:	9402      	str	r4, [sp, #8]
 8001ee6:	9101      	str	r1, [sp, #4]
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	4633      	mov	r3, r6
 8001eec:	462a      	mov	r2, r5
 8001eee:	490c      	ldr	r1, [pc, #48]	; (8001f20 <GAP_ConnectionComplete_CB+0x98>)
 8001ef0:	f00c fcf2 	bl	800e8d8 <siprintf>
 8001ef4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001ef8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fd0e 	bl	8002924 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <GAP_ConnectionComplete_CB+0x9c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
  
}
 8001f0e:	bf00      	nop
 8001f10:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f18:	20000224 	.word	0x20000224
 8001f1c:	20000266 	.word	0x20000266
 8001f20:	0800f4b0 	.word	0x0800f4b0
 8001f24:	2000021c 	.word	0x2000021c

08001f28 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0c2      	sub	sp, #264	; 0x108
 8001f2c:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <GAP_DisconnectionComplete_CB+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION  
  STLBLE_PRINTF("<<<<<<DISCONNECTED\r\n");
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4911      	ldr	r1, [pc, #68]	; (8001f7c <GAP_DisconnectionComplete_CB+0x54>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00c fccd 	bl	800e8d8 <siprintf>
 8001f3e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8001f42:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fcea 	bl	8002924 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */  

  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <GAP_DisconnectionComplete_CB+0x58>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]

  ConnectionBleStatus=0;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <GAP_DisconnectionComplete_CB+0x5c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	480a      	ldr	r0, [pc, #40]	; (8001f88 <GAP_DisconnectionComplete_CB+0x60>)
 8001f60:	f008 fc78 	bl	800a854 <HAL_TIM_OC_Stop_IT>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <GAP_DisconnectionComplete_CB+0x46>
    /* Stopping Error */
    Error_Handler();
 8001f6a:	f7ff fa41 	bl	80013f0 <Error_Handler>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000224 	.word	0x20000224
 8001f7c:	0800f4d4 	.word	0x0800f4d4
 8001f80:	20000000 	.word	0x20000000
 8001f84:	2000021c 	.word	0x2000021c
 8001f88:	200008f4 	.word	0x200008f4

08001f8c <Read_Request_CB>:
* @brief  This function is called when there is a Bluetooth Read request
* @param  uint16_t handle Handle of the attribute
* @retval None
*/
void Read_Request_CB(uint16_t handle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  if(handle == EnvironmentalCharHandle + 1)
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	4b99      	ldr	r3, [pc, #612]	; (8002200 <Read_Request_CB+0x274>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	f040 8102 	bne.w	80021a8 <Read_Request_CB+0x21c>
  {
    /* Read Request for Pressure,Humidity, and Temperatures*/
    float SensorValue;
    int32_t PressToSend=0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    uint16_t HumToSend=0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	837b      	strh	r3, [r7, #26]
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	833b      	strh	r3, [r7, #24]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	82fb      	strh	r3, [r7, #22]
    int32_t decPart, intPart;
    
    if(TargetBoardFeatures.HandlePressSensor) 
 8001fb4:	4b93      	ldr	r3, [pc, #588]	; (8002204 <Read_Request_CB+0x278>)
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d026      	beq.n	800200a <Read_Request_CB+0x7e>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f003 f837 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8001fca:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd2:	ee17 3a90 	vmov	r3, s15
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fea:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002208 <Read_Request_CB+0x27c>
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff6:	ee17 3a90 	vmov	r3, s15
 8001ffa:	60fb      	str	r3, [r7, #12]
      PressToSend=intPart*100+decPart;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2264      	movs	r2, #100	; 0x64
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 800200a:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <Read_Request_CB+0x278>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02a      	beq.n	8002068 <Read_Request_CB+0xdc>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	461a      	mov	r2, r3
 8002018:	2104      	movs	r1, #4
 800201a:	2000      	movs	r0, #0
 800201c:	f003 f80c 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8002020:	edd7 7a02 	vldr	s15, [r7, #8]
 8002024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204c:	ee17 3a90 	vmov	r3, s15
 8002050:	60fb      	str	r3, [r7, #12]
      HumToSend = intPart*10+decPart;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b29b      	uxth	r3, r3
 8002064:	4413      	add	r3, r2
 8002066:	837b      	strh	r3, [r7, #26]
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 8002068:	4b66      	ldr	r3, [pc, #408]	; (8002204 <Read_Request_CB+0x278>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d158      	bne.n	8002122 <Read_Request_CB+0x196>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	461a      	mov	r2, r3
 8002076:	2101      	movs	r1, #1
 8002078:	2000      	movs	r0, #0
 800207a:	f002 ffdd 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 800207e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002086:	ee17 3a90 	vmov	r3, s15
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	ee17 3a90 	vmov	r3, s15
 80020ae:	60fb      	str	r3, [r7, #12]
      Temp1ToSend = intPart*10+decPart; 
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	82fb      	strh	r3, [r7, #22]
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	461a      	mov	r2, r3
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f002 ffb1 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80020d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80020da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020de:	ee17 3a90 	vmov	r3, s15
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002102:	ee17 3a90 	vmov	r3, s15
 8002106:	60fb      	str	r3, [r7, #12]
      Temp2ToSend = intPart*10+decPart;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	833b      	strh	r3, [r7, #24]
 8002120:	e039      	b.n	8002196 <Read_Request_CB+0x20a>
    } 
    else if(TargetBoardFeatures.NumTempSensors==1)
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <Read_Request_CB+0x278>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d135      	bne.n	8002196 <Read_Request_CB+0x20a>
    {
      if (BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue)!=BSP_ERROR_NONE)
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	461a      	mov	r2, r3
 8002130:	2101      	movs	r1, #1
 8002132:	2000      	movs	r0, #0
 8002134:	f002 ff80 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <Read_Request_CB+0x1c0>
      {
        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	461a      	mov	r2, r3
 8002144:	2101      	movs	r1, #1
 8002146:	2001      	movs	r0, #1
 8002148:	f002 ff76 	bl	8005038 <BSP_ENV_SENSOR_GetValue>
      }
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 800214c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002154:	ee17 3a90 	vmov	r3, s15
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	ed97 7a02 	vldr	s14, [r7, #8]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002178:	ee17 3a90 	vmov	r3, s15
 800217c:	60fb      	str	r3, [r7, #12]
      Temp1ToSend = intPart*10+decPart;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	b29b      	uxth	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4413      	add	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	82fb      	strh	r3, [r7, #22]
    }
    
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 8002196:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800219a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800219e:	8b79      	ldrh	r1, [r7, #26]
 80021a0:	69f8      	ldr	r0, [r7, #28]
 80021a2:	f7ff fc51 	bl	8001a48 <Environmental_Update>
 80021a6:	e01d      	b.n	80021e4 <Read_Request_CB+0x258>
  } 
  else if(handle == LedCharHandle + 1)
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <Read_Request_CB+0x280>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d106      	bne.n	80021c2 <Read_Request_CB+0x236>
  {
    /* Read Request for Led Status */
    LED_Update(TargetBoardFeatures.LedStatus);
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <Read_Request_CB+0x278>)
 80021b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fd70 	bl	8001ca0 <LED_Update>
 80021c0:	e010      	b.n	80021e4 <Read_Request_CB+0x258>
  }
  else if (handle == StdErrCharHandle + 1) 
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <Read_Request_CB+0x284>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d102      	bne.n	80021d4 <Read_Request_CB+0x248>
  {
    /* Send again the last packet for StdError */
    Stderr_Update_AfterRead();
 80021ce:	f7ff fa41 	bl	8001654 <Stderr_Update_AfterRead>
 80021d2:	e007      	b.n	80021e4 <Read_Request_CB+0x258>
  } 
  else if (handle == TermCharHandle + 1)
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <Read_Request_CB+0x288>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	429a      	cmp	r2, r3
 80021de:	d101      	bne.n	80021e4 <Read_Request_CB+0x258>
  {
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 80021e0:	f7ff fa5a 	bl	8001698 <Term_Update_AfterRead>
  }
  
  //EXIT:
  if(connection_handle != 0)
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <Read_Request_CB+0x28c>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d004      	beq.n	80021f6 <Read_Request_CB+0x26a>
    aci_gatt_allow_read(connection_handle);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <Read_Request_CB+0x28c>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f00b fd4a 	bl	800dc8a <aci_gatt_allow_read>
}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000022a 	.word	0x2000022a
 8002204:	200005dc 	.word	0x200005dc
 8002208:	42c80000 	.word	0x42c80000
 800220c:	2000022c 	.word	0x2000022c
 8002210:	20000236 	.word	0x20000236
 8002214:	20000234 	.word	0x20000234
 8002218:	20000266 	.word	0x20000266

0800221c <Attribute_Modified_CB>:
* @param uint8_t *att_data attribute data
* @param uint8_t data_length length of the data
* @retval None
*/
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0c6      	sub	sp, #280	; 0x118
 8002220:	af00      	add	r7, sp, #0
 8002222:	463b      	mov	r3, r7
 8002224:	6019      	str	r1, [r3, #0]
 8002226:	4611      	mov	r1, r2
 8002228:	1dbb      	adds	r3, r7, #6
 800222a:	4602      	mov	r2, r0
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	1d7b      	adds	r3, r7, #5
 8002230:	460a      	mov	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
  if(attr_handle == ConfigCharHandle + 2) 
 8002234:	1dbb      	adds	r3, r7, #6
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	4ba4      	ldr	r3, [pc, #656]	; (80024cc <Attribute_Modified_CB+0x2b0>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	3302      	adds	r3, #2
 800223e:	429a      	cmp	r2, r3
 8002240:	f000 8172 	beq.w	8002528 <Attribute_Modified_CB+0x30c>
  {
    ;/* do nothing... only for removing the message "Notification UNKNOW handle" */
  }
  else if(attr_handle == EnvironmentalCharHandle + 2)
 8002244:	1dbb      	adds	r3, r7, #6
 8002246:	881a      	ldrh	r2, [r3, #0]
 8002248:	4ba1      	ldr	r3, [pc, #644]	; (80024d0 <Attribute_Modified_CB+0x2b4>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	3302      	adds	r3, #2
 800224e:	429a      	cmp	r2, r3
 8002250:	d172      	bne.n	8002338 <Attribute_Modified_CB+0x11c>
  {
    if (att_data[0] == 01) 
 8002252:	463b      	mov	r3, r7
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d11c      	bne.n	8002296 <Attribute_Modified_CB+0x7a>
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
 800225c:	4b9d      	ldr	r3, [pc, #628]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	4a9b      	ldr	r2, [pc, #620]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002266:	6013      	str	r3, [r2, #0]
      
      /* Start the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 8002268:	2100      	movs	r1, #0
 800226a:	489b      	ldr	r0, [pc, #620]	; (80024d8 <Attribute_Modified_CB+0x2bc>)
 800226c:	f008 f9a6 	bl	800a5bc <HAL_TIM_OC_Start_IT>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <Attribute_Modified_CB+0x5e>
      {
        /* Starting Error */
        Error_Handler();
 8002276:	f7ff f8bb 	bl	80013f0 <Error_Handler>
      }
      
      /* Set the new Capture compare value */
      {
        uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 800227a:	4b97      	ldr	r3, [pc, #604]	; (80024d8 <Attribute_Modified_CB+0x2bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* Set the Capture Compare Register value */
        __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8002284:	4b94      	ldr	r3, [pc, #592]	; (80024d8 <Attribute_Modified_CB+0x2bc>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800228c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002290:	3308      	adds	r3, #8
 8002292:	6353      	str	r3, [r2, #52]	; 0x34
 8002294:	e013      	b.n	80022be <Attribute_Modified_CB+0xa2>
      }
    } 
    else if (att_data[0] == 0)
 8002296:	463b      	mov	r3, r7
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10e      	bne.n	80022be <Attribute_Modified_CB+0xa2>
    {
      W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
 80022a0:	4b8c      	ldr	r3, [pc, #560]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	4a8a      	ldr	r2, [pc, #552]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80022aa:	6013      	str	r3, [r2, #0]
      
      /* Stop the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 80022ac:	2100      	movs	r1, #0
 80022ae:	488a      	ldr	r0, [pc, #552]	; (80024d8 <Attribute_Modified_CB+0x2bc>)
 80022b0:	f008 fad0 	bl	800a854 <HAL_TIM_OC_Stop_IT>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <Attribute_Modified_CB+0xa2>
      {
        /* Stopping Error */
        Error_Handler();
 80022ba:	f7ff f899 	bl	80013f0 <Error_Handler>
      }
    }
#ifdef ENABLE_USB_DEBUG_CONNECTION
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d019      	beq.n	8002302 <Attribute_Modified_CB+0xe6>
    {
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 80022ce:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <Attribute_Modified_CB+0xc4>
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <Attribute_Modified_CB+0x2c0>)
 80022de:	e000      	b.n	80022e2 <Attribute_Modified_CB+0xc6>
 80022e0:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <Attribute_Modified_CB+0x2c4>)
 80022e2:	461a      	mov	r2, r3
 80022e4:	497f      	ldr	r1, [pc, #508]	; (80024e4 <Attribute_Modified_CB+0x2c8>)
 80022e6:	4880      	ldr	r0, [pc, #512]	; (80024e8 <Attribute_Modified_CB+0x2cc>)
 80022e8:	f00c faf6 	bl	800e8d8 <siprintf>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a7f      	ldr	r2, [pc, #508]	; (80024ec <Attribute_Modified_CB+0x2d0>)
 80022f0:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80022f2:	4b7e      	ldr	r3, [pc, #504]	; (80024ec <Attribute_Modified_CB+0x2d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	487b      	ldr	r0, [pc, #492]	; (80024e8 <Attribute_Modified_CB+0x2cc>)
 80022fc:	f7ff f93a 	bl	8001574 <Term_Update>
    else
    {
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
    }
  }
}
 8002300:	e112      	b.n	8002528 <Attribute_Modified_CB+0x30c>
      STLBLE_PRINTF("--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8002302:	4b74      	ldr	r3, [pc, #464]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <Attribute_Modified_CB+0xf8>
 8002310:	4a72      	ldr	r2, [pc, #456]	; (80024dc <Attribute_Modified_CB+0x2c0>)
 8002312:	e000      	b.n	8002316 <Attribute_Modified_CB+0xfa>
 8002314:	4a72      	ldr	r2, [pc, #456]	; (80024e0 <Attribute_Modified_CB+0x2c4>)
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4972      	ldr	r1, [pc, #456]	; (80024e4 <Attribute_Modified_CB+0x2c8>)
 800231c:	4618      	mov	r0, r3
 800231e:	f00c fadb 	bl	800e8d8 <siprintf>
 8002322:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8002326:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f000 faf7 	bl	8002924 <CDC_Fill_Buffer>
}
 8002336:	e0f7      	b.n	8002528 <Attribute_Modified_CB+0x30c>
  else if(attr_handle == StdErrCharHandle + 2)
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	881a      	ldrh	r2, [r3, #0]
 800233c:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <Attribute_Modified_CB+0x2d4>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	3302      	adds	r3, #2
 8002342:	429a      	cmp	r2, r3
 8002344:	d118      	bne.n	8002378 <Attribute_Modified_CB+0x15c>
    if (att_data[0] == 01) 
 8002346:	463b      	mov	r3, r7
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <Attribute_Modified_CB+0x142>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
 8002350:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002358:	4a5e      	ldr	r2, [pc, #376]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	e0e4      	b.n	8002528 <Attribute_Modified_CB+0x30c>
    else if (att_data[0] == 0)
 800235e:	463b      	mov	r3, r7
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 80df 	bne.w	8002528 <Attribute_Modified_CB+0x30c>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
 800236a:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002372:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	e0d7      	b.n	8002528 <Attribute_Modified_CB+0x30c>
  else if(attr_handle == TermCharHandle + 2)
 8002378:	1dbb      	adds	r3, r7, #6
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <Attribute_Modified_CB+0x2d8>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3302      	adds	r3, #2
 8002382:	429a      	cmp	r2, r3
 8002384:	d118      	bne.n	80023b8 <Attribute_Modified_CB+0x19c>
    if (att_data[0] == 01) 
 8002386:	463b      	mov	r3, r7
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <Attribute_Modified_CB+0x182>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_TERM);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	4a4e      	ldr	r2, [pc, #312]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	e0c4      	b.n	8002528 <Attribute_Modified_CB+0x30c>
    else if (att_data[0] == 0)
 800239e:	463b      	mov	r3, r7
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 80bf 	bne.w	8002528 <Attribute_Modified_CB+0x30c>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_TERM);
 80023aa:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b2:	4a48      	ldr	r2, [pc, #288]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	e0b7      	b.n	8002528 <Attribute_Modified_CB+0x30c>
  else if(attr_handle == LedCharHandle + 2)
 80023b8:	1dbb      	adds	r3, r7, #6
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <Attribute_Modified_CB+0x2dc>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	3302      	adds	r3, #2
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d15b      	bne.n	800247e <Attribute_Modified_CB+0x262>
    if (att_data[0] == 01) 
 80023c6:	463b      	mov	r3, r7
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10c      	bne.n	80023ea <Attribute_Modified_CB+0x1ce>
      W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
 80023d0:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	4a3e      	ldr	r2, [pc, #248]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80023da:	6013      	str	r3, [r2, #0]
      LED_Update(TargetBoardFeatures.LedStatus);
 80023dc:	4b47      	ldr	r3, [pc, #284]	; (80024fc <Attribute_Modified_CB+0x2e0>)
 80023de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fc5c 	bl	8001ca0 <LED_Update>
 80023e8:	e00a      	b.n	8002400 <Attribute_Modified_CB+0x1e4>
    else if (att_data[0] == 0)
 80023ea:	463b      	mov	r3, r7
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <Attribute_Modified_CB+0x1e4>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0302 	bic.w	r3, r3, #2
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 80023fe:	6013      	str	r3, [r2, #0]
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01a      	beq.n	8002446 <Attribute_Modified_CB+0x22a>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8002410:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <Attribute_Modified_CB+0x208>
 8002420:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <Attribute_Modified_CB+0x2c0>)
 8002422:	e000      	b.n	8002426 <Attribute_Modified_CB+0x20a>
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <Attribute_Modified_CB+0x2c4>)
 8002426:	461a      	mov	r2, r3
 8002428:	4935      	ldr	r1, [pc, #212]	; (8002500 <Attribute_Modified_CB+0x2e4>)
 800242a:	482f      	ldr	r0, [pc, #188]	; (80024e8 <Attribute_Modified_CB+0x2cc>)
 800242c:	f00c fa54 	bl	800e8d8 <siprintf>
 8002430:	4603      	mov	r3, r0
 8002432:	4a2e      	ldr	r2, [pc, #184]	; (80024ec <Attribute_Modified_CB+0x2d0>)
 8002434:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <Attribute_Modified_CB+0x2d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	482a      	ldr	r0, [pc, #168]	; (80024e8 <Attribute_Modified_CB+0x2cc>)
 8002440:	f7ff f898 	bl	8001574 <Term_Update>
}
 8002444:	e070      	b.n	8002528 <Attribute_Modified_CB+0x30c>
      STLBLE_PRINTF("--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <Attribute_Modified_CB+0x23e>
 8002456:	4a21      	ldr	r2, [pc, #132]	; (80024dc <Attribute_Modified_CB+0x2c0>)
 8002458:	e000      	b.n	800245c <Attribute_Modified_CB+0x240>
 800245a:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <Attribute_Modified_CB+0x2c4>)
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	4927      	ldr	r1, [pc, #156]	; (8002500 <Attribute_Modified_CB+0x2e4>)
 8002462:	4618      	mov	r0, r3
 8002464:	f00c fa38 	bl	800e8d8 <siprintf>
 8002468:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 800246c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fa54 	bl	8002924 <CDC_Fill_Buffer>
}
 800247c:	e054      	b.n	8002528 <Attribute_Modified_CB+0x30c>
  else if (attr_handle == ConfigCharHandle + 1) 
 800247e:	1dbb      	adds	r3, r7, #6
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <Attribute_Modified_CB+0x2b0>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <Attribute_Modified_CB+0x280>
    ConfigCommandParsing(att_data, data_length);    
 800248c:	1d7b      	adds	r3, r7, #5
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	463b      	mov	r3, r7
 8002492:	4611      	mov	r1, r2
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	f000 f84f 	bl	8002538 <ConfigCommandParsing>
}
 800249a:	e045      	b.n	8002528 <Attribute_Modified_CB+0x30c>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <Attribute_Modified_CB+0x2b8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0a5b      	lsrs	r3, r3, #9
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d02d      	beq.n	8002508 <Attribute_Modified_CB+0x2ec>
      BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
 80024ac:	4915      	ldr	r1, [pc, #84]	; (8002504 <Attribute_Modified_CB+0x2e8>)
 80024ae:	480e      	ldr	r0, [pc, #56]	; (80024e8 <Attribute_Modified_CB+0x2cc>)
 80024b0:	f00c fa12 	bl	800e8d8 <siprintf>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <Attribute_Modified_CB+0x2d0>)
 80024b8:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <Attribute_Modified_CB+0x2d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	4809      	ldr	r0, [pc, #36]	; (80024e8 <Attribute_Modified_CB+0x2cc>)
 80024c4:	f7ff f80e 	bl	80014e4 <Stderr_Update>
}
 80024c8:	e02e      	b.n	8002528 <Attribute_Modified_CB+0x30c>
 80024ca:	bf00      	nop
 80024cc:	20000230 	.word	0x20000230
 80024d0:	2000022a 	.word	0x2000022a
 80024d4:	2000021c 	.word	0x2000021c
 80024d8:	200008f4 	.word	0x200008f4
 80024dc:	0800f4ec 	.word	0x0800f4ec
 80024e0:	0800f4f0 	.word	0x0800f4f0
 80024e4:	0800f4f4 	.word	0x0800f4f4
 80024e8:	20000940 	.word	0x20000940
 80024ec:	20000a40 	.word	0x20000a40
 80024f0:	20000236 	.word	0x20000236
 80024f4:	20000234 	.word	0x20000234
 80024f8:	2000022c 	.word	0x2000022c
 80024fc:	200005dc 	.word	0x200005dc
 8002500:	0800f504 	.word	0x0800f504
 8002504:	0800f514 	.word	0x0800f514
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	4909      	ldr	r1, [pc, #36]	; (8002534 <Attribute_Modified_CB+0x318>)
 800250e:	4618      	mov	r0, r3
 8002510:	f00c f9e2 	bl	800e8d8 <siprintf>
 8002514:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8002518:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800251c:	f107 0308 	add.w	r3, r7, #8
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9fe 	bl	8002924 <CDC_Fill_Buffer>
}
 8002528:	bf00      	nop
 800252a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	0800f514 	.word	0x0800f514

08002538 <ConfigCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
static void ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0c6      	sub	sp, #280	; 0x118
 800253c:	af00      	add	r7, sp, #0
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	6018      	str	r0, [r3, #0]
 8002542:	460a      	mov	r2, r1
 8002544:	1cfb      	adds	r3, r7, #3
 8002546:	701a      	strb	r2, [r3, #0]
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3303      	adds	r3, #3
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3302      	adds	r3, #2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	431a      	orrs	r2, r3
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	431a      	orrs	r2, r3
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint8_t Command = att_data[4];
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	791b      	ldrb	r3, [r3, #4]
 800257e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  uint8_t Data    = att_data[5];
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	795b      	ldrb	r3, [r3, #5]
 8002588:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  switch (FeatureMask) {
 800258c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002594:	d162      	bne.n	800265c <ConfigCommandParsing+0x124>
    case FEATURE_MASK_LED:
      /* Led events */
#ifdef ENABLE_USB_DEBUG_CONNECTION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) {
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <ConfigCommandParsing+0x130>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <ConfigCommandParsing+0x94>
        BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x\n\r",FeatureMask,Command);
 80025a6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80025aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80025ae:	492f      	ldr	r1, [pc, #188]	; (800266c <ConfigCommandParsing+0x134>)
 80025b0:	482f      	ldr	r0, [pc, #188]	; (8002670 <ConfigCommandParsing+0x138>)
 80025b2:	f00c f991 	bl	800e8d8 <siprintf>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <ConfigCommandParsing+0x13c>)
 80025ba:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <ConfigCommandParsing+0x13c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	4619      	mov	r1, r3
 80025c4:	482a      	ldr	r0, [pc, #168]	; (8002670 <ConfigCommandParsing+0x138>)
 80025c6:	f7fe ffd5 	bl	8001574 <Term_Update>
 80025ca:	e012      	b.n	80025f2 <ConfigCommandParsing+0xba>
      } else {
        STLBLE_PRINTF("Conf Sig F=%lx C=%2x\r\n",FeatureMask,Command);
 80025cc:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80025d0:	f107 000c 	add.w	r0, r7, #12
 80025d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80025d8:	4927      	ldr	r1, [pc, #156]	; (8002678 <ConfigCommandParsing+0x140>)
 80025da:	f00c f97d 	bl	800e8d8 <siprintf>
 80025de:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80025e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f999 	bl	8002924 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_CONNECTION */
     switch(Command) {
 80025f2:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d011      	beq.n	800261e <ConfigCommandParsing+0xe6>
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d11f      	bne.n	800263e <ConfigCommandParsing+0x106>
      case 1:
        TargetBoardFeatures.LedStatus=1;
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <ConfigCommandParsing+0x144>)
 8002600:	2201      	movs	r2, #1
 8002602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOnTargetPlatform();
 8002606:	f7fd ff47 	bl	8000498 <LedOnTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 800260a:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800260e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002612:	4619      	mov	r1, r3
 8002614:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002618:	f7ff f890 	bl	800173c <Config_Notify>
        break;
 800261c:	e00f      	b.n	800263e <ConfigCommandParsing+0x106>
      case 0:
        TargetBoardFeatures.LedStatus=0;
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <ConfigCommandParsing+0x144>)
 8002620:	2200      	movs	r2, #0
 8002622:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOffTargetPlatform();
 8002626:	f7fd ff3e 	bl	80004a6 <LedOffTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 800262a:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800262e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002638:	f7ff f880 	bl	800173c <Config_Notify>
        break;
 800263c:	bf00      	nop
     }
     /* Update the LED feature */
     if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED)) {
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <ConfigCommandParsing+0x130>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <ConfigCommandParsing+0x122>
       LED_Update(TargetBoardFeatures.LedStatus);
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <ConfigCommandParsing+0x144>)
 8002650:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fb23 	bl	8001ca0 <LED_Update>
     }
    break;
 800265a:	bf00      	nop
  }
}
 800265c:	bf00      	nop
 800265e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000021c 	.word	0x2000021c
 800266c:	0800f534 	.word	0x0800f534
 8002670:	20000940 	.word	0x20000940
 8002674:	20000a40 	.word	0x20000a40
 8002678:	0800f54c 	.word	0x0800f54c
 800267c:	200005dc 	.word	0x200005dc

08002680 <HCI_Event_CB>:
*         parsed.
* @param  void *pckt Pointer to the ACI packet
* @retval None
*/
void HCI_Event_CB(void *pckt)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pckt;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3301      	adds	r3, #1
 8002690:	623b      	str	r3, [r7, #32]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d14a      	bne.n	8002730 <HCI_Event_CB+0xb0>
  {
    return;
  }
  
  switch(event_pckt->evt)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	d01f      	beq.n	80026e2 <HCI_Event_CB+0x62>
 80026a2:	2bff      	cmp	r3, #255	; 0xff
 80026a4:	dc49      	bgt.n	800273a <HCI_Event_CB+0xba>
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d002      	beq.n	80026b0 <HCI_Event_CB+0x30>
 80026aa:	2b3e      	cmp	r3, #62	; 0x3e
 80026ac:	d003      	beq.n	80026b6 <HCI_Event_CB+0x36>
 80026ae:	e044      	b.n	800273a <HCI_Event_CB+0xba>
  {
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80026b0:	f7ff fc3a 	bl	8001f28 <GAP_DisconnectionComplete_CB>
    }
    break;
 80026b4:	e041      	b.n	800273a <HCI_Event_CB+0xba>
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	3302      	adds	r3, #2
 80026ba:	613b      	str	r3, [r7, #16]
      
      switch(evt->subevent)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d137      	bne.n	8002734 <HCI_Event_CB+0xb4>
      {
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1d5a      	adds	r2, r3, #5
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f7ff fbd5 	bl	8001e88 <GAP_ConnectionComplete_CB>
        }
        break;
 80026de:	bf00      	nop
      }
    }
    break;
 80026e0:	e028      	b.n	8002734 <HCI_Event_CB+0xb4>
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	3302      	adds	r3, #2
 80026e6:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f640 4201 	movw	r2, #3073	; 0xc01
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HCI_Event_CB+0x92>
 80026f6:	f640 4214 	movw	r2, #3092	; 0xc14
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d11c      	bne.n	8002738 <HCI_Event_CB+0xb8>
      {
      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data; 
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3302      	adds	r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);                    
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	885b      	ldrh	r3, [r3, #2]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fc3e 	bl	8001f8c <Read_Request_CB>
        }
        break;
 8002710:	e00d      	b.n	800272e <HCI_Event_CB+0xae>
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3302      	adds	r3, #2
 8002716:	617b      	str	r3, [r7, #20]
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	885b      	ldrh	r3, [r3, #2]
 800271c:	b298      	uxth	r0, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1dd9      	adds	r1, r3, #7
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	791b      	ldrb	r3, [r3, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	f7ff fd78 	bl	800221c <Attribute_Modified_CB>
        }
        break;
 800272c:	bf00      	nop
      }
    }
    break;
 800272e:	e003      	b.n	8002738 <HCI_Event_CB+0xb8>
    return;
 8002730:	bf00      	nop
 8002732:	e002      	b.n	800273a <HCI_Event_CB+0xba>
    break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <HCI_Event_CB+0xba>
    break;
 8002738:	bf00      	nop
  }
}
 800273a:	3728      	adds	r7, #40	; 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_TIM_OC_MspInit+0x38>)
 800274a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_TIM_OC_MspInit+0x38>)
 800274e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002752:	6613      	str	r3, [r2, #96]	; 0x60
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_TIM_OC_MspInit+0x38>)
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2108      	movs	r1, #8
 8002764:	201b      	movs	r0, #27
 8002766:	f003 f94c 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800276a:	201b      	movs	r0, #27
 800276c:	f003 f965 	bl	8005a3a <HAL_NVIC_EnableIRQ>
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000

0800277c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <MemManage_Handler+0x4>

08002796 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279a:	e7fe      	b.n	800279a <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d0:	f002 ffee 	bl	80057b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80027d4:	f003 f959 	bl	8005a8a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimCCHandle);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM1_CC_IRQHandler+0x10>)
 80027e2:	f008 f913 	bl	800aa0c <HAL_TIM_IRQHandler>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200008f4 	.word	0x200008f4

080027f0 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti5);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <EXTI9_5_IRQHandler+0x10>)
 80027f6:	f003 f9d3 	bl	8005ba0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200008e0 	.word	0x200008e0

08002804 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <OTG_FS_IRQHandler+0x10>)
 800280a:	f004 ff65 	bl	80076d8 <HAL_PCD_IRQHandler>
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20002294 	.word	0x20002294

08002818 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <TIM3_IRQHandler+0x10>)
 800281e:	f008 f8f5 	bl	800aa0c <HAL_TIM_IRQHandler>
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20002248 	.word	0x20002248

0800282c <I2C3_EV_IRQHandler>:

/**
* @brief This function handles I2C3 event interrupt.
*/
void I2C3_EV_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hbusi2c3);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <I2C3_EV_IRQHandler+0x10>)
 8002832:	f003 ffb3 	bl	800679c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000269c 	.word	0x2000269c

08002840 <I2C3_ER_IRQHandler>:

/**
* @brief This function handles I2C3 error interrupt.
*/
void I2C3_ER_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hbusi2c3);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <I2C3_ER_IRQHandler+0x10>)
 8002846:	f003 ffc3 	bl	80067d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000269c 	.word	0x2000269c

08002854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <_sbrk+0x5c>)
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <_sbrk+0x60>)
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <_sbrk+0x64>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <_sbrk+0x64>)
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <_sbrk+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d207      	bcs.n	8002894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002884:	f00b ff2e 	bl	800e6e4 <__errno>
 8002888:	4603      	mov	r3, r0
 800288a:	220c      	movs	r2, #12
 800288c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002892:	e009      	b.n	80028a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <_sbrk+0x64>)
 80028a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20018000 	.word	0x20018000
 80028b4:	00000400 	.word	0x00000400
 80028b8:	20000268 	.word	0x20000268
 80028bc:	200027e0 	.word	0x200027e0

080028c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <SystemInit+0x5c>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <SystemInit+0x5c>)
 80028cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <SystemInit+0x60>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <SystemInit+0x60>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <SystemInit+0x60>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <SystemInit+0x60>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <SystemInit+0x60>)
 80028ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80028f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80028f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <SystemInit+0x60>)
 80028f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <SystemInit+0x60>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a07      	ldr	r2, [pc, #28]	; (8002920 <SystemInit+0x60>)
 8002904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SystemInit+0x60>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00
 8002920:	40021000 	.word	0x40021000

08002924 <CDC_Fill_Buffer>:
  * @param  Buf: pointer to the tx buffer
  * @param  TotalLen: number of bytes to be sent
  * @retval Result of the operation: USBD_OK if all operations are OK
  */
uint8_t CDC_Fill_Buffer(uint8_t* Buf, uint32_t TotalLen)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint16_t i;
  
  for (i = 0; i < TotalLen; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	81fb      	strh	r3, [r7, #14]
 8002932:	e011      	b.n	8002958 <CDC_Fill_Buffer+0x34>
  {
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 8002934:	89fb      	ldrh	r3, [r7, #14]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	441a      	add	r2, r3
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <CDC_Fill_Buffer+0x4c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	7811      	ldrb	r1, [r2, #0]
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <CDC_Fill_Buffer+0x50>)
 8002942:	54d1      	strb	r1, [r2, r3]
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <CDC_Fill_Buffer+0x4c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <CDC_Fill_Buffer+0x4c>)
 8002950:	6013      	str	r3, [r2, #0]
  for (i = 0; i < TotalLen; i++)
 8002952:	89fb      	ldrh	r3, [r7, #14]
 8002954:	3301      	adds	r3, #1
 8002956:	81fb      	strh	r3, [r7, #14]
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d8e9      	bhi.n	8002934 <CDC_Fill_Buffer+0x10>
  }
  return (USBD_OK);
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	2000026c 	.word	0x2000026c
 8002974:	20001248 	.word	0x20001248

08002978 <CDC_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void CDC_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;
  
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d030      	beq.n	80029ee <CDC_TIM_PeriodElapsedCallback+0x76>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d905      	bls.n	80029a4 <CDC_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e005      	b.n	80029b0 <CDC_TIM_PeriodElapsedCallback+0x38>
    }
    else 
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <CDC_TIM_PeriodElapsedCallback+0x84>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	60fb      	str	r3, [r7, #12]
    }
    
    buffptr = UserTxBufPtrOut;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]
    
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4a11      	ldr	r2, [pc, #68]	; (8002a00 <CDC_TIM_PeriodElapsedCallback+0x88>)
 80029ba:	4413      	add	r3, r2
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4619      	mov	r1, r3
 80029c0:	4810      	ldr	r0, [pc, #64]	; (8002a04 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 80029c2:	f009 fc91 	bl	800c2e8 <USBD_CDC_SetTxBuffer>
    
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 80029c6:	480f      	ldr	r0, [pc, #60]	; (8002a04 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 80029c8:	f009 fcac 	bl	800c324 <USBD_CDC_TransmitPacket>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <CDC_TIM_PeriodElapsedCallback+0x76>
    {
      UserTxBufPtrOut += buffsize;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 80029dc:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e6:	d102      	bne.n	80029ee <CDC_TIM_PeriodElapsedCallback+0x76>
      {
        UserTxBufPtrOut = 0;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <CDC_TIM_PeriodElapsedCallback+0x80>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000270 	.word	0x20000270
 80029fc:	2000026c 	.word	0x2000026c
 8002a00:	20001248 	.word	0x20001248
 8002a04:	20000610 	.word	0x20000610

08002a08 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f009 fcef 	bl	800c402 <USBD_LL_SetupStage>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f009 fd29 	bl	800c4ac <USBD_LL_DataOutStage>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3348      	adds	r3, #72	; 0x48
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f009 fd72 	bl	800c572 <USBD_LL_DataInStage>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f009 fe86 	bl	800c7b6 <USBD_LL_SOF>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f009 fdec 	bl	800c69e <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f009 fe33 	bl	800c73a <USBD_LL_SetSpeed>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002aea:	4618      	mov	r0, r3
 8002aec:	f009 fe35 	bl	800c75a <USBD_LL_Suspend>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b06:	4618      	mov	r0, r3
 8002b08:	f009 fe3d 	bl	800c786 <USBD_LL_Resume>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f009 fe8b 	bl	800c846 <USBD_LL_IsoOUTIncomplete>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f009 fe53 	bl	800c7fa <USBD_LL_IsoINIncomplete>
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f009 fe91 	bl	800c892 <USBD_LL_DevConnected>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b86:	4618      	mov	r0, r3
 8002b88:	f009 fe8e 	bl	800c8a8 <USBD_LL_DevDisconnected>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	70fb      	strb	r3, [r7, #3]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70bb      	strb	r3, [r7, #2]
 8002baa:	4613      	mov	r3, r2
 8002bac:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8002bb4:	78bb      	ldrb	r3, [r7, #2]
 8002bb6:	883a      	ldrh	r2, [r7, #0]
 8002bb8:	78f9      	ldrb	r1, [r7, #3]
 8002bba:	f005 f956 	bl	8007e6a <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f005 fa26 	bl	8008030 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f005 fa75 	bl	80080f4 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002c26:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8002c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da0b      	bge.n	8002c48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	333e      	adds	r3, #62	; 0x3e
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	e00b      	b.n	8002c60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002c5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f005 f8cc 	bl	8007e20 <HAL_PCD_SetAddress>
  return USBD_OK; 
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8002ca8:	7af9      	ldrb	r1, [r7, #11]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	f005 f982 	bl	8007fb6 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8002cd2:	7af9      	ldrb	r1, [r7, #11]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	f005 f92f 	bl	8007f3a <HAL_PCD_EP_Receive>
  return USBD_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cec:	f7ff fde8 	bl	80028c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cf0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cf2:	e003      	b.n	8002cfc <LoopCopyDataInit>

08002cf4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cf6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cf8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cfa:	3104      	adds	r1, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002cfc:	480a      	ldr	r0, [pc, #40]	; (8002d28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d04:	d3f6      	bcc.n	8002cf4 <CopyDataInit>
	ldr	r2, =_sbss
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d08:	e002      	b.n	8002d10 <LoopFillZerobss>

08002d0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d0c:	f842 3b04 	str.w	r3, [r2], #4

08002d10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <LoopForever+0x16>)
	cmp	r2, r3
 8002d12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d14:	d3f9      	bcc.n	8002d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d16:	f00b fceb 	bl	800e6f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d1a:	f7fd fd77 	bl	800080c <main>

08002d1e <LoopForever>:

LoopForever:
    b LoopForever
 8002d1e:	e7fe      	b.n	8002d1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d20:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002d24:	0800f5e8 	.word	0x0800f5e8
	ldr	r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d2c:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 8002d30:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8002d34:	200027dc 	.word	0x200027dc

08002d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC1_2_IRQHandler>
	...

08002d3c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	e030      	b.n	8002db6 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	7b1a      	ldrb	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HTS221_RegisterBusIO+0x84>)
 8002d90:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HTS221_RegisterBusIO+0x88>)
 8002d96:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4798      	blx	r3
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	e002      	b.n	8002db6 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	080033f3 	.word	0x080033f3
 8002dc4:	08003455 	.word	0x08003455

08002dc8 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 faa4 	bl	8003328 <HTS221_Initialize>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dea:	e004      	b.n	8002df6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d111      	bne.n	8002e34 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f878 	bl	8002f06 <HTS221_HUM_Disable>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e20:	e00d      	b.n	8002e3e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f95f 	bl	80030e6 <HTS221_TEMP_Disable>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e32:	e004      	b.n	8002e3e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	331c      	adds	r3, #28
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fc28 	bl	80036ac <hts221_device_id_get>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e66:	e000      	b.n	8002e6a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2201      	movs	r2, #1
 8002e82:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <HTS221_GetCapabilities+0x44>)
 8002e9a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <HTS221_GetCapabilities+0x44>)
 8002ea0:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	41480000 	.word	0x41480000

08002ebc <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e015      	b.n	8002efe <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	331c      	adds	r3, #28
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fbf3 	bl	80036ce <hts221_power_on_set>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef2:	e004      	b.n	8002efe <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e015      	b.n	8002f48 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	331c      	adds	r3, #28
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fbce 	bl	80036ce <hts221_power_on_set>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3c:	e004      	b.n	8002f48 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f96f 	bl	8003240 <HTS221_GetOutputDataRate>
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002f78:	ed97 0a00 	vldr	s0, [r7]
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f9a3 	bl	80032c8 <HTS221_SetOutputDataRate>
 8002f82:	4603      	mov	r3, r0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	331c      	adds	r3, #28
 8002f9a:	f107 020c 	add.w	r2, r7, #12
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fc58 	bl	8003856 <hts221_hum_adc_point_0_get>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fb0:	e06b      	b.n	800308a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f103 021c 	add.w	r2, r3, #28
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f000 fbaa 	bl	800371a <hts221_hum_rh_point_0_get>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fd0:	e05b      	b.n	800308a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f103 021c 	add.w	r2, r3, #28
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	3308      	adds	r3, #8
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f000 fc5c 	bl	800389e <hts221_hum_adc_point_1_get>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ff0:	e04b      	b.n	800308a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f103 021c 	add.w	r2, r3, #28
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f000 fba8 	bl	8003756 <hts221_hum_rh_point_1_get>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003010:	e03b      	b.n	800308a <HTS221_HUM_GetHumidity+0xfe>
 8003012:	2300      	movs	r3, #0
 8003014:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	331c      	adds	r3, #28
 800301a:	f107 021c 	add.w	r2, r7, #28
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fafd 	bl	8003620 <hts221_humidity_raw_get>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 800302c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003030:	e02b      	b.n	800308a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003032:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303e:	f107 030c 	add.w	r3, r7, #12
 8003042:	eeb0 0a67 	vmov.f32	s0, s15
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f99a 	bl	8003380 <Linear_Interpolation>
 800304c:	eef0 7a40 	vmov.f32	s15, s0
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003064:	d503      	bpl.n	800306e <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003094 <HTS221_HUM_GetHumidity+0x108>
 8003078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	dd02      	ble.n	8003088 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HTS221_HUM_GetHumidity+0x10c>)
 8003086:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	42c80000 	.word	0x42c80000
 8003098:	42c80000 	.word	0x42c80000

0800309c <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e015      	b.n	80030de <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	331c      	adds	r3, #28
 80030c0:	2101      	movs	r1, #1
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fb03 	bl	80036ce <hts221_power_on_set>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d2:	e004      	b.n	80030de <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e015      	b.n	8003128 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	331c      	adds	r3, #28
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fade 	bl	80036ce <hts221_power_on_set>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800311c:	e004      	b.n	8003128 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800313a:	6839      	ldr	r1, [r7, #0]
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f87f 	bl	8003240 <HTS221_GetOutputDataRate>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003158:	ed97 0a00 	vldr	s0, [r7]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f8b3 	bl	80032c8 <HTS221_SetOutputDataRate>
 8003162:	4603      	mov	r3, r0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	331c      	adds	r3, #28
 800317a:	f107 020c 	add.w	r2, r7, #12
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fbb0 	bl	80038e6 <hts221_temp_adc_point_0_get>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003190:	e052      	b.n	8003238 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 021c 	add.w	r2, r3, #28
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	3304      	adds	r3, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f000 faf6 	bl	8003792 <hts221_temp_deg_point_0_get>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b0:	e042      	b.n	8003238 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f103 021c 	add.w	r2, r3, #28
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	3308      	adds	r3, #8
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 fbb4 	bl	800392e <hts221_temp_adc_point_1_get>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d0:	e032      	b.n	8003238 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f103 021c 	add.w	r2, r3, #28
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	330c      	adds	r3, #12
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 fb07 	bl	80037f4 <hts221_temp_deg_point_1_get>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f0:	e022      	b.n	8003238 <HTS221_TEMP_GetTemperature+0xcc>
 80031f2:	2300      	movs	r3, #0
 80031f4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	331c      	adds	r3, #28
 80031fa:	f107 021c 	add.w	r2, r7, #28
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fa30 	bl	8003666 <hts221_temperature_raw_get>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003210:	e012      	b.n	8003238 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003212:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f8aa 	bl	8003380 <Linear_Interpolation>
 800322c:	eef0 7a40 	vmov.f32	s15, s0
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	331c      	adds	r3, #28
 8003252:	f107 020b 	add.w	r2, r7, #11
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f983 	bl	8003564 <hts221_data_rate_get>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003268:	e025      	b.n	80032b6 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800326a:	7afb      	ldrb	r3, [r7, #11]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d81d      	bhi.n	80032ac <HTS221_GetOutputDataRate+0x6c>
 8003270:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <HTS221_GetOutputDataRate+0x38>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	08003289 	.word	0x08003289
 800327c:	08003293 	.word	0x08003293
 8003280:	0800329d 	.word	0x0800329d
 8003284:	080032a5 	.word	0x080032a5
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
      break;
 8003290:	e010      	b.n	80032b4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003298:	601a      	str	r2, [r3, #0]
      break;
 800329a:	e00b      	b.n	80032b4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HTS221_GetOutputDataRate+0x80>)
 80032a0:	601a      	str	r2, [r3, #0]
      break;
 80032a2:	e007      	b.n	80032b4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HTS221_GetOutputDataRate+0x84>)
 80032a8:	601a      	str	r2, [r3, #0]
      break;
 80032aa:	e003      	b.n	80032b4 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80032ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b0:	60fb      	str	r3, [r7, #12]
      break;
 80032b2:	bf00      	nop
  }

  return ret;
 80032b4:	68fb      	ldr	r3, [r7, #12]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40e00000 	.word	0x40e00000
 80032c4:	41480000 	.word	0x41480000

080032c8 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80032d4:	edd7 7a00 	vldr	s15, [r7]
 80032d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e4:	d801      	bhi.n	80032ea <HTS221_SetOutputDataRate+0x22>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00b      	b.n	8003302 <HTS221_SetOutputDataRate+0x3a>
 80032ea:	edd7 7a00 	vldr	s15, [r7]
 80032ee:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d801      	bhi.n	8003300 <HTS221_SetOutputDataRate+0x38>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e000      	b.n	8003302 <HTS221_SetOutputDataRate+0x3a>
 8003300:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003302:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	331c      	adds	r3, #28
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f902 	bl	8003516 <hts221_data_rate_set>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800331c:	e000      	b.n	8003320 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	331c      	adds	r3, #28
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f9c9 	bl	80036ce <hts221_power_on_set>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003346:	e017      	b.n	8003378 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	331c      	adds	r3, #28
 800334c:	2101      	movs	r1, #1
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f940 	bl	80035d4 <hts221_block_data_update_set>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800335e:	e00b      	b.n	8003378 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003360:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ffaf 	bl	80032c8 <HTS221_SetOutputDataRate>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003374:	e000      	b.n	8003378 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	edd3 7a01 	vldr	s15, [r3, #4]
 8003398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800339c:	edd7 7a00 	vldr	s15, [r7]
 80033a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80033b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	ed93 6a00 	vldr	s12, [r3]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80033c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033e0:	eef0 7a66 	vmov.f32	s15, s13
}
 80033e4:	eeb0 0a67 	vmov.f32	s0, s15
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033f2:	b590      	push	{r4, r7, lr}
 80033f4:	b087      	sub	sp, #28
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	461a      	mov	r2, r3
 80033fe:	460b      	mov	r3, r1
 8003400:	72fb      	strb	r3, [r7, #11]
 8003402:	4613      	mov	r3, r2
 8003404:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10e      	bne.n	8003430 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	695c      	ldr	r4, [r3, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	7b1b      	ldrb	r3, [r3, #12]
 800341a:	b298      	uxth	r0, r3
 800341c:	7afb      	ldrb	r3, [r7, #11]
 800341e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003422:	b2db      	uxtb	r3, r3
 8003424:	b299      	uxth	r1, r3
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	47a0      	blx	r4
 800342c:	4603      	mov	r3, r0
 800342e:	e00d      	b.n	800344c <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	695c      	ldr	r4, [r3, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	7b1b      	ldrb	r3, [r3, #12]
 8003438:	b298      	uxth	r0, r3
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003440:	b2db      	uxtb	r3, r3
 8003442:	b299      	uxth	r1, r3
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	47a0      	blx	r4
 800344a:	4603      	mov	r3, r0
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	461a      	mov	r2, r3
 8003460:	460b      	mov	r3, r1
 8003462:	72fb      	strb	r3, [r7, #11]
 8003464:	4613      	mov	r3, r2
 8003466:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10e      	bne.n	8003492 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	691c      	ldr	r4, [r3, #16]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	7b1b      	ldrb	r3, [r3, #12]
 800347c:	b298      	uxth	r0, r3
 800347e:	7afb      	ldrb	r3, [r7, #11]
 8003480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	b299      	uxth	r1, r3
 8003488:	893b      	ldrh	r3, [r7, #8]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	47a0      	blx	r4
 800348e:	4603      	mov	r3, r0
 8003490:	e00d      	b.n	80034ae <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	691c      	ldr	r4, [r3, #16]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	7b1b      	ldrb	r3, [r3, #12]
 800349a:	b298      	uxth	r0, r3
 800349c:	7afb      	ldrb	r3, [r7, #11]
 800349e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	b299      	uxth	r1, r3
 80034a6:	893b      	ldrh	r3, [r7, #8]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	47a0      	blx	r4
 80034ac:	4603      	mov	r3, r0
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}

080034b6 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80034b6:	b590      	push	{r4, r7, lr}
 80034b8:	b087      	sub	sp, #28
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	461a      	mov	r2, r3
 80034c2:	460b      	mov	r3, r1
 80034c4:	72fb      	strb	r3, [r7, #11]
 80034c6:	4613      	mov	r3, r2
 80034c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685c      	ldr	r4, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6898      	ldr	r0, [r3, #8]
 80034d2:	893b      	ldrh	r3, [r7, #8]
 80034d4:	7af9      	ldrb	r1, [r7, #11]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	47a0      	blx	r4
 80034da:	6178      	str	r0, [r7, #20]
  return ret;
 80034dc:	697b      	ldr	r3, [r7, #20]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}

080034e6 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80034e6:	b590      	push	{r4, r7, lr}
 80034e8:	b087      	sub	sp, #28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	461a      	mov	r2, r3
 80034f2:	460b      	mov	r3, r1
 80034f4:	72fb      	strb	r3, [r7, #11]
 80034f6:	4613      	mov	r3, r2
 80034f8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681c      	ldr	r4, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6898      	ldr	r0, [r3, #8]
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	7af9      	ldrb	r1, [r7, #11]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	47a0      	blx	r4
 800350a:	6178      	str	r0, [r7, #20]
  return ret;
 800350c:	697b      	ldr	r3, [r7, #20]
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}

08003516 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003522:	f107 0208 	add.w	r2, r7, #8
 8003526:	2301      	movs	r3, #1
 8003528:	2120      	movs	r1, #32
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffc3 	bl	80034b6 <hts221_read_reg>
 8003530:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10f      	bne.n	8003558 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	b2da      	uxtb	r2, r3
 8003540:	7a3b      	ldrb	r3, [r7, #8]
 8003542:	f362 0301 	bfi	r3, r2, #0, #2
 8003546:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003548:	f107 0208 	add.w	r2, r7, #8
 800354c:	2301      	movs	r3, #1
 800354e:	2120      	movs	r1, #32
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ffc8 	bl	80034e6 <hts221_write_reg>
 8003556:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800356e:	f107 0208 	add.w	r2, r7, #8
 8003572:	2301      	movs	r3, #1
 8003574:	2120      	movs	r1, #32
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff9d 	bl	80034b6 <hts221_read_reg>
 800357c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 800357e:	7a3b      	ldrb	r3, [r7, #8]
 8003580:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b03      	cmp	r3, #3
 8003588:	d81a      	bhi.n	80035c0 <hts221_data_rate_get+0x5c>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <hts221_data_rate_get+0x2c>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035a9 	.word	0x080035a9
 8003598:	080035b1 	.word	0x080035b1
 800359c:	080035b9 	.word	0x080035b9
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
      break;
 80035a6:	e00f      	b.n	80035c8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]
      break;
 80035ae:	e00b      	b.n	80035c8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
      break;
 80035b6:	e007      	b.n	80035c8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2203      	movs	r2, #3
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	e003      	b.n	80035c8 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2204      	movs	r2, #4
 80035c4:	701a      	strb	r2, [r3, #0]
      break;
 80035c6:	bf00      	nop
  }

  return ret;
 80035c8:	68fb      	ldr	r3, [r7, #12]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035e0:	f107 0208 	add.w	r2, r7, #8
 80035e4:	2301      	movs	r3, #1
 80035e6:	2120      	movs	r1, #32
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff64 	bl	80034b6 <hts221_read_reg>
 80035ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	7a3b      	ldrb	r3, [r7, #8]
 8003600:	f362 0382 	bfi	r3, r2, #2, #1
 8003604:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003606:	f107 0208 	add.w	r2, r7, #8
 800360a:	2301      	movs	r3, #1
 800360c:	2120      	movs	r1, #32
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff69 	bl	80034e6 <hts221_write_reg>
 8003614:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800362a:	f107 0208 	add.w	r2, r7, #8
 800362e:	2302      	movs	r3, #2
 8003630:	2128      	movs	r1, #40	; 0x28
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ff3f 	bl	80034b6 <hts221_read_reg>
 8003638:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800363a:	7a7b      	ldrb	r3, [r7, #9]
 800363c:	b21a      	sxth	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003648:	b29b      	uxth	r3, r3
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	b29a      	uxth	r2, r3
 800364e:	7a3b      	ldrb	r3, [r7, #8]
 8003650:	b29b      	uxth	r3, r3
 8003652:	4413      	add	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	b21a      	sxth	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	801a      	strh	r2, [r3, #0]
  return ret;
 800365c:	68fb      	ldr	r3, [r7, #12]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003670:	f107 0208 	add.w	r2, r7, #8
 8003674:	2302      	movs	r3, #2
 8003676:	212a      	movs	r1, #42	; 0x2a
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff1c 	bl	80034b6 <hts221_read_reg>
 800367e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003680:	7a7b      	ldrb	r3, [r7, #9]
 8003682:	b21a      	sxth	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800368e:	b29b      	uxth	r3, r3
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	b29a      	uxth	r2, r3
 8003694:	7a3b      	ldrb	r3, [r7, #8]
 8003696:	b29b      	uxth	r3, r3
 8003698:	4413      	add	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	b21a      	sxth	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	801a      	strh	r2, [r3, #0]
  return ret;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80036b6:	2301      	movs	r3, #1
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	210f      	movs	r1, #15
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fefa 	bl	80034b6 <hts221_read_reg>
 80036c2:	60f8      	str	r0, [r7, #12]
  return ret;
 80036c4:	68fb      	ldr	r3, [r7, #12]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036da:	f107 0208 	add.w	r2, r7, #8
 80036de:	2301      	movs	r3, #1
 80036e0:	2120      	movs	r1, #32
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fee7 	bl	80034b6 <hts221_read_reg>
 80036e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10f      	bne.n	8003710 <hts221_power_on_set+0x42>
    reg.pd = val;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	7a3b      	ldrb	r3, [r7, #8]
 80036fa:	f362 13c7 	bfi	r3, r2, #7, #1
 80036fe:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003700:	f107 0208 	add.w	r2, r7, #8
 8003704:	2301      	movs	r3, #1
 8003706:	2120      	movs	r1, #32
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff feec 	bl	80034e6 <hts221_write_reg>
 800370e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003724:	f107 020b 	add.w	r2, r7, #11
 8003728:	2301      	movs	r3, #1
 800372a:	2130      	movs	r1, #48	; 0x30
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fec2 	bl	80034b6 <hts221_read_reg>
 8003732:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800373e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800374c:	68fb      	ldr	r3, [r7, #12]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003760:	f107 020b 	add.w	r2, r7, #11
 8003764:	2301      	movs	r3, #1
 8003766:	2131      	movs	r1, #49	; 0x31
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fea4 	bl	80034b6 <hts221_read_reg>
 800376e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003770:	7afb      	ldrb	r3, [r7, #11]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800377e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003788:	68fb      	ldr	r3, [r7, #12]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800379c:	f107 020f 	add.w	r2, r7, #15
 80037a0:	2301      	movs	r3, #1
 80037a2:	2132      	movs	r1, #50	; 0x32
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fe86 	bl	80034b6 <hts221_read_reg>
 80037aa:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11b      	bne.n	80037ea <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80037b2:	f107 0210 	add.w	r2, r7, #16
 80037b6:	2301      	movs	r3, #1
 80037b8:	2135      	movs	r1, #53	; 0x35
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fe7b 	bl	80034b6 <hts221_read_reg>
 80037c0:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80037c2:	7c3b      	ldrb	r3, [r7, #16]
 80037c4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	4413      	add	r3, r2
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037dc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80037e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80037ea:	697b      	ldr	r3, [r7, #20]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80037fe:	f107 020f 	add.w	r2, r7, #15
 8003802:	2301      	movs	r3, #1
 8003804:	2133      	movs	r1, #51	; 0x33
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fe55 	bl	80034b6 <hts221_read_reg>
 800380c:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d11b      	bne.n	800384c <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003814:	f107 0210 	add.w	r2, r7, #16
 8003818:	2301      	movs	r3, #1
 800381a:	2135      	movs	r1, #53	; 0x35
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fe4a 	bl	80034b6 <hts221_read_reg>
 8003822:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003824:	7c3b      	ldrb	r3, [r7, #16]
 8003826:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800382a:	b2db      	uxtb	r3, r3
 800382c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	4413      	add	r3, r2
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800383e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800384c:	697b      	ldr	r3, [r7, #20]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003860:	f107 0208 	add.w	r2, r7, #8
 8003864:	2302      	movs	r3, #2
 8003866:	2136      	movs	r1, #54	; 0x36
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe24 	bl	80034b6 <hts221_read_reg>
 800386e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003870:	7a7b      	ldrb	r3, [r7, #9]
 8003872:	b29b      	uxth	r3, r3
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	b29a      	uxth	r2, r3
 8003878:	7a3b      	ldrb	r3, [r7, #8]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4413      	add	r3, r2
 800387e:	b29b      	uxth	r3, r3
 8003880:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003882:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80038a8:	f107 0208 	add.w	r2, r7, #8
 80038ac:	2302      	movs	r3, #2
 80038ae:	213a      	movs	r1, #58	; 0x3a
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fe00 	bl	80034b6 <hts221_read_reg>
 80038b6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80038b8:	7a7b      	ldrb	r3, [r7, #9]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	b29a      	uxth	r2, r3
 80038c0:	7a3b      	ldrb	r3, [r7, #8]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80038ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80038f0:	f107 0208 	add.w	r2, r7, #8
 80038f4:	2302      	movs	r3, #2
 80038f6:	213c      	movs	r1, #60	; 0x3c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fddc 	bl	80034b6 <hts221_read_reg>
 80038fe:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003900:	7a7b      	ldrb	r3, [r7, #9]
 8003902:	b29b      	uxth	r3, r3
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	b29a      	uxth	r2, r3
 8003908:	7a3b      	ldrb	r3, [r7, #8]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4413      	add	r3, r2
 800390e:	b29b      	uxth	r3, r3
 8003910:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003912:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003938:	f107 0208 	add.w	r2, r7, #8
 800393c:	2302      	movs	r3, #2
 800393e:	213e      	movs	r1, #62	; 0x3e
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fdb8 	bl	80034b6 <hts221_read_reg>
 8003946:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003948:	7a7b      	ldrb	r3, [r7, #9]
 800394a:	b29b      	uxth	r3, r3
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	b29a      	uxth	r2, r3
 8003950:	7a3b      	ldrb	r3, [r7, #8]
 8003952:	b29b      	uxth	r3, r3
 8003954:	4413      	add	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800395a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e04d      	b.n	8003a30 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	7b1a      	ldrb	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <LPS22HB_RegisterBusIO+0xc4>)
 80039d0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <LPS22HB_RegisterBusIO+0xc8>)
 80039d6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	e020      	b.n	8003a30 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4798      	blx	r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e016      	b.n	8003a30 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d112      	bne.n	8003a30 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003a14:	2301      	movs	r3, #1
 8003a16:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2110      	movs	r1, #16
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9df 	bl	8003de2 <LPS22HB_Write_Reg>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a2e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003a30:	68fb      	ldr	r3, [r7, #12]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	080040a3 	.word	0x080040a3
 8003a40:	08004129 	.word	0x08004129

08003a44 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 faca 	bl	8003ff0 <LPS22HB_Initialize>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a66:	e004      	b.n	8003a72 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d111      	bne.n	8003ab0 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f877 	bl	8003b80 <LPS22HB_PRESS_Disable>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a9c:	e00d      	b.n	8003aba <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f918 	bl	8003cd4 <LPS22HB_TEMP_Disable>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aae:	e004      	b.n	8003aba <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	331c      	adds	r3, #28
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fcd0 	bl	8004478 <lps22hb_device_id_get>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ae2:	e000      	b.n	8003ae6 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2200      	movs	r2, #0
 8003afe:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <LPS22HB_GetCapabilities+0x44>)
 8003b1e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <LPS22HB_GetCapabilities+0x44>)
 8003b24:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	42960000 	.word	0x42960000

08003b38 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e014      	b.n	8003b78 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f103 021c 	add.w	r2, r3, #28
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f000 fbd5 	bl	800430c <lps22hb_data_rate_set>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b6c:	e004      	b.n	8003b78 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e024      	b.n	8003be0 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11a      	bne.n	8003bd6 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f103 021c 	add.w	r2, r3, #28
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	332b      	adds	r3, #43	; 0x2b
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f000 fbd3 	bl	8004358 <lps22hb_data_rate_get>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bbc:	e010      	b.n	8003be0 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	331c      	adds	r3, #28
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fba1 	bl	800430c <lps22hb_data_rate_set>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd4:	e004      	b.n	8003be0 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8003bf2:	6839      	ldr	r1, [r7, #0]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f90f 	bl	8003e18 <LPS22HB_GetOutputDataRate>
 8003bfa:	4603      	mov	r3, r0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d106      	bne.n	8003c28 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003c1a:	ed97 0a00 	vldr	s0, [r7]
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f94e 	bl	8003ec0 <LPS22HB_SetOutputDataRate_When_Enabled>
 8003c24:	4603      	mov	r3, r0
 8003c26:	e005      	b.n	8003c34 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003c28:	ed97 0a00 	vldr	s0, [r7]
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f99f 	bl	8003f70 <LPS22HB_SetOutputDataRate_When_Disabled>
 8003c32:	4603      	mov	r3, r0
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003c46:	f107 030c 	add.w	r3, r7, #12
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00a fd80 	bl	800e754 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	331c      	adds	r3, #28
 8003c58:	f107 020c 	add.w	r2, r7, #12
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fbbe 	bl	80043e0 <lps22hb_pressure_raw_get>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6e:	e009      	b.n	8003c84 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 facc 	bl	8004210 <lps22hb_from_lsb_to_hpa>
 8003c78:	eef0 7a40 	vmov.f32	s15, s0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e014      	b.n	8003ccc <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f103 021c 	add.w	r2, r3, #28
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f000 fb2b 	bl	800430c <lps22hb_data_rate_set>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc0:	e004      	b.n	8003ccc <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e024      	b.n	8003d34 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11a      	bne.n	8003d2a <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f103 021c 	add.w	r2, r3, #28
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	332b      	adds	r3, #43	; 0x2b
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f000 fb29 	bl	8004358 <lps22hb_data_rate_get>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d10:	e010      	b.n	8003d34 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	331c      	adds	r3, #28
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 faf7 	bl	800430c <lps22hb_data_rate_set>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d28:	e004      	b.n	8003d34 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8003d46:	6839      	ldr	r1, [r7, #0]
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f865 	bl	8003e18 <LPS22HB_GetOutputDataRate>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d106      	bne.n	8003d7c <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003d6e:	ed97 0a00 	vldr	s0, [r7]
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f8a4 	bl	8003ec0 <LPS22HB_SetOutputDataRate_When_Enabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	e005      	b.n	8003d88 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003d7c:	ed97 0a00 	vldr	s0, [r7]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8f5 	bl	8003f70 <LPS22HB_SetOutputDataRate_When_Disabled>
 8003d86:	4603      	mov	r3, r0
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	2202      	movs	r2, #2
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f00a fcd6 	bl	800e754 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	331c      	adds	r3, #28
 8003dac:	f107 020c 	add.w	r2, r7, #12
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fb3d 	bl	8004432 <lps22hb_temperature_raw_get>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dc2:	e00a      	b.n	8003dda <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8003dc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa39 	bl	8004240 <lps22hb_from_lsb_to_degc>
 8003dce:	eef0 7a40 	vmov.f32	s15, s0
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	460b      	mov	r3, r1
 8003dec:	70fb      	strb	r3, [r7, #3]
 8003dee:	4613      	mov	r3, r2
 8003df0:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f103 001c 	add.w	r0, r3, #28
 8003df8:	1cba      	adds	r2, r7, #2
 8003dfa:	78f9      	ldrb	r1, [r7, #3]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f000 f9ee 	bl	80041de <lps22hb_write_reg>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e0c:	e000      	b.n	8003e10 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	331c      	adds	r3, #28
 8003e2a:	f107 020b 	add.w	r2, r7, #11
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fa91 	bl	8004358 <lps22hb_data_rate_get>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e40:	e031      	b.n	8003ea6 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d829      	bhi.n	8003e9c <LPS22HB_GetOutputDataRate+0x84>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <LPS22HB_GetOutputDataRate+0x38>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e69 	.word	0x08003e69
 8003e54:	08003e73 	.word	0x08003e73
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003e95 	.word	0x08003e95
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
      break;
 8003e70:	e018      	b.n	8003ea4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e78:	601a      	str	r2, [r3, #0]
      break;
 8003e7a:	e013      	b.n	8003ea4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <LPS22HB_GetOutputDataRate+0x98>)
 8003e80:	601a      	str	r2, [r3, #0]
      break;
 8003e82:	e00f      	b.n	8003ea4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4a0b      	ldr	r2, [pc, #44]	; (8003eb4 <LPS22HB_GetOutputDataRate+0x9c>)
 8003e88:	601a      	str	r2, [r3, #0]
      break;
 8003e8a:	e00b      	b.n	8003ea4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <LPS22HB_GetOutputDataRate+0xa0>)
 8003e90:	601a      	str	r2, [r3, #0]
      break;
 8003e92:	e007      	b.n	8003ea4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <LPS22HB_GetOutputDataRate+0xa4>)
 8003e98:	601a      	str	r2, [r3, #0]
      break;
 8003e9a:	e003      	b.n	8003ea4 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea0:	60fb      	str	r3, [r7, #12]
      break;
 8003ea2:	bf00      	nop
  }

  return ret;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	41200000 	.word	0x41200000
 8003eb4:	41c80000 	.word	0x41c80000
 8003eb8:	42480000 	.word	0x42480000
 8003ebc:	42960000 	.word	0x42960000

08003ec0 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8003ecc:	edd7 7a00 	vldr	s15, [r7]
 8003ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003edc:	d801      	bhi.n	8003ee2 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e021      	b.n	8003f26 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8003ee2:	edd7 7a00 	vldr	s15, [r7]
 8003ee6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	d801      	bhi.n	8003ef8 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e016      	b.n	8003f26 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8003ef8:	edd7 7a00 	vldr	s15, [r7]
 8003efc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f08:	d801      	bhi.n	8003f0e <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e00b      	b.n	8003f26 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8003f0e:	edd7 7a00 	vldr	s15, [r7]
 8003f12:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003f6c <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8003f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1e:	d801      	bhi.n	8003f24 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e000      	b.n	8003f26 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8003f24:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8003f26:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	331c      	adds	r3, #28
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 f9eb 	bl	800430c <lps22hb_data_rate_set>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f40:	e00f      	b.n	8003f62 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f103 021c 	add.w	r2, r3, #28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	332b      	adds	r3, #43	; 0x2b
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 fa02 	bl	8004358 <lps22hb_data_rate_get>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f5e:	e000      	b.n	8003f62 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	42480000 	.word	0x42480000

08003f70 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8003f7c:	edd7 7a00 	vldr	s15, [r7]
 8003f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8c:	d801      	bhi.n	8003f92 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e021      	b.n	8003fd6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8003f92:	edd7 7a00 	vldr	s15, [r7]
 8003f96:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	d801      	bhi.n	8003fa8 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e016      	b.n	8003fd6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8003fa8:	edd7 7a00 	vldr	s15, [r7]
 8003fac:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	d801      	bhi.n	8003fbe <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e00b      	b.n	8003fd6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8003fbe:	edd7 7a00 	vldr	s15, [r7]
 8003fc2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003fec <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8003fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fce:	d801      	bhi.n	8003fd4 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	e000      	b.n	8003fd6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8003fd4:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	42480000 	.word	0x42480000

08003ff0 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	331c      	adds	r3, #28
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fa71 	bl	80044e6 <lps22hb_low_power_set>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800400e:	e044      	b.n	800409a <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	331c      	adds	r3, #28
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f978 	bl	800430c <lps22hb_data_rate_set>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004026:	e038      	b.n	800409a <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	331c      	adds	r3, #28
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f946 	bl	80042c0 <lps22hb_low_pass_filter_mode_set>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800403e:	e02c      	b.n	800409a <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	331c      	adds	r3, #28
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f914 	bl	8004274 <lps22hb_block_data_update_set>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004056:	e020      	b.n	800409a <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	331c      	adds	r3, #28
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa89 	bl	800457e <lps22hb_auto_add_inc_set>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00e      	beq.n	8004090 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004076:	e010      	b.n	800409a <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	331c      	adds	r3, #28
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa7d 	bl	800457e <lps22hb_auto_add_inc_set>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800408e:	e004      	b.n	800409a <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2203      	movs	r2, #3
 8004094:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040a2:	b590      	push	{r4, r7, lr}
 80040a4:	b089      	sub	sp, #36	; 0x24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	461a      	mov	r2, r3
 80040ae:	460b      	mov	r3, r1
 80040b0:	72fb      	strb	r3, [r7, #11]
 80040b2:	4613      	mov	r3, r2
 80040b4:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d121      	bne.n	800410a <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	83fb      	strh	r3, [r7, #30]
 80040ca:	e018      	b.n	80040fe <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	695c      	ldr	r4, [r3, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	7b1b      	ldrb	r3, [r3, #12]
 80040d4:	b298      	uxth	r0, r3
 80040d6:	7afb      	ldrb	r3, [r7, #11]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	8bfb      	ldrh	r3, [r7, #30]
 80040dc:	4413      	add	r3, r2
 80040de:	b299      	uxth	r1, r3
 80040e0:	8bfb      	ldrh	r3, [r7, #30]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	441a      	add	r2, r3
 80040e6:	2301      	movs	r3, #1
 80040e8:	47a0      	blx	r4
 80040ea:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80040f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f6:	e013      	b.n	8004120 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80040f8:	8bfb      	ldrh	r3, [r7, #30]
 80040fa:	3301      	adds	r3, #1
 80040fc:	83fb      	strh	r3, [r7, #30]
 80040fe:	8bfa      	ldrh	r2, [r7, #30]
 8004100:	893b      	ldrh	r3, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d3e2      	bcc.n	80040cc <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	e00a      	b.n	8004120 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	695c      	ldr	r4, [r3, #20]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	7b1b      	ldrb	r3, [r3, #12]
 8004112:	b298      	uxth	r0, r3
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	b299      	uxth	r1, r3
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	47a0      	blx	r4
 800411e:	4603      	mov	r3, r0
  }
}
 8004120:	4618      	mov	r0, r3
 8004122:	3724      	adds	r7, #36	; 0x24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd90      	pop	{r4, r7, pc}

08004128 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	461a      	mov	r2, r3
 8004134:	460b      	mov	r3, r1
 8004136:	72fb      	strb	r3, [r7, #11]
 8004138:	4613      	mov	r3, r2
 800413a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d121      	bne.n	8004190 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	83fb      	strh	r3, [r7, #30]
 8004150:	e018      	b.n	8004184 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	691c      	ldr	r4, [r3, #16]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	7b1b      	ldrb	r3, [r3, #12]
 800415a:	b298      	uxth	r0, r3
 800415c:	7afb      	ldrb	r3, [r7, #11]
 800415e:	b29a      	uxth	r2, r3
 8004160:	8bfb      	ldrh	r3, [r7, #30]
 8004162:	4413      	add	r3, r2
 8004164:	b299      	uxth	r1, r3
 8004166:	8bfb      	ldrh	r3, [r7, #30]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	441a      	add	r2, r3
 800416c:	2301      	movs	r3, #1
 800416e:	47a0      	blx	r4
 8004170:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800417c:	e013      	b.n	80041a6 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800417e:	8bfb      	ldrh	r3, [r7, #30]
 8004180:	3301      	adds	r3, #1
 8004182:	83fb      	strh	r3, [r7, #30]
 8004184:	8bfa      	ldrh	r2, [r7, #30]
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3e2      	bcc.n	8004152 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	e00a      	b.n	80041a6 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	691c      	ldr	r4, [r3, #16]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	7b1b      	ldrb	r3, [r3, #12]
 8004198:	b298      	uxth	r0, r3
 800419a:	7afb      	ldrb	r3, [r7, #11]
 800419c:	b299      	uxth	r1, r3
 800419e:	893b      	ldrh	r3, [r7, #8]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	47a0      	blx	r4
 80041a4:	4603      	mov	r3, r0
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	; 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}

080041ae <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80041ae:	b590      	push	{r4, r7, lr}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	461a      	mov	r2, r3
 80041ba:	460b      	mov	r3, r1
 80041bc:	72fb      	strb	r3, [r7, #11]
 80041be:	4613      	mov	r3, r2
 80041c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685c      	ldr	r4, [r3, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6898      	ldr	r0, [r3, #8]
 80041ca:	893b      	ldrh	r3, [r7, #8]
 80041cc:	7af9      	ldrb	r1, [r7, #11]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	47a0      	blx	r4
 80041d2:	6178      	str	r0, [r7, #20]
  return ret;
 80041d4:	697b      	ldr	r3, [r7, #20]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd90      	pop	{r4, r7, pc}

080041de <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80041de:	b590      	push	{r4, r7, lr}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	461a      	mov	r2, r3
 80041ea:	460b      	mov	r3, r1
 80041ec:	72fb      	strb	r3, [r7, #11]
 80041ee:	4613      	mov	r3, r2
 80041f0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681c      	ldr	r4, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6898      	ldr	r0, [r3, #8]
 80041fa:	893b      	ldrh	r3, [r7, #8]
 80041fc:	7af9      	ldrb	r1, [r7, #11]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	47a0      	blx	r4
 8004202:	6178      	str	r0, [r7, #20]
  return ret;
 8004204:	697b      	ldr	r3, [r7, #20]
}
 8004206:	4618      	mov	r0, r3
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd90      	pop	{r4, r7, pc}
	...

08004210 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004222:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800423c <lps22hb_from_lsb_to_hpa+0x2c>
 8004226:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800422a:	eef0 7a66 	vmov.f32	s15, s13
}
 800422e:	eeb0 0a67 	vmov.f32	s0, s15
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	49800000 	.word	0x49800000

08004240 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 800424a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004256:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004270 <lps22hb_from_lsb_to_degc+0x30>
 800425a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800425e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004262:	eeb0 0a67 	vmov.f32	s0, s15
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	42c80000 	.word	0x42c80000

08004274 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004280:	f107 0208 	add.w	r2, r7, #8
 8004284:	2301      	movs	r3, #1
 8004286:	2110      	movs	r1, #16
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff90 	bl	80041ae <lps22hb_read_reg>
 800428e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	b2da      	uxtb	r2, r3
 800429e:	7a3b      	ldrb	r3, [r7, #8]
 80042a0:	f362 0341 	bfi	r3, r2, #1, #1
 80042a4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80042a6:	f107 0208 	add.w	r2, r7, #8
 80042aa:	2301      	movs	r3, #1
 80042ac:	2110      	movs	r1, #16
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff95 	bl	80041de <lps22hb_write_reg>
 80042b4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80042b6:	68fb      	ldr	r3, [r7, #12]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80042cc:	f107 0208 	add.w	r2, r7, #8
 80042d0:	2301      	movs	r3, #1
 80042d2:	2110      	movs	r1, #16
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff6a 	bl	80041ae <lps22hb_read_reg>
 80042da:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	7a3b      	ldrb	r3, [r7, #8]
 80042ec:	f362 0383 	bfi	r3, r2, #2, #2
 80042f0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80042f2:	f107 0208 	add.w	r2, r7, #8
 80042f6:	2301      	movs	r3, #1
 80042f8:	2110      	movs	r1, #16
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff6f 	bl	80041de <lps22hb_write_reg>
 8004300:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004318:	f107 0208 	add.w	r2, r7, #8
 800431c:	2301      	movs	r3, #1
 800431e:	2110      	movs	r1, #16
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff44 	bl	80041ae <lps22hb_read_reg>
 8004326:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	b2da      	uxtb	r2, r3
 8004336:	7a3b      	ldrb	r3, [r7, #8]
 8004338:	f362 1306 	bfi	r3, r2, #4, #3
 800433c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800433e:	f107 0208 	add.w	r2, r7, #8
 8004342:	2301      	movs	r3, #1
 8004344:	2110      	movs	r1, #16
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ff49 	bl	80041de <lps22hb_write_reg>
 800434c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004362:	f107 0208 	add.w	r2, r7, #8
 8004366:	2301      	movs	r3, #1
 8004368:	2110      	movs	r1, #16
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff1f 	bl	80041ae <lps22hb_read_reg>
 8004370:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8004372:	7a3b      	ldrb	r3, [r7, #8]
 8004374:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b05      	cmp	r3, #5
 800437c:	d826      	bhi.n	80043cc <lps22hb_data_rate_get+0x74>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <lps22hb_data_rate_get+0x2c>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	0800439d 	.word	0x0800439d
 8004388:	080043a5 	.word	0x080043a5
 800438c:	080043ad 	.word	0x080043ad
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
      break;
 80043a2:	e017      	b.n	80043d4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
      break;
 80043aa:	e013      	b.n	80043d4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2202      	movs	r2, #2
 80043b0:	701a      	strb	r2, [r3, #0]
      break;
 80043b2:	e00f      	b.n	80043d4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2203      	movs	r2, #3
 80043b8:	701a      	strb	r2, [r3, #0]
      break;
 80043ba:	e00b      	b.n	80043d4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2204      	movs	r2, #4
 80043c0:	701a      	strb	r2, [r3, #0]
      break;
 80043c2:	e007      	b.n	80043d4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2205      	movs	r2, #5
 80043c8:	701a      	strb	r2, [r3, #0]
      break;
 80043ca:	e003      	b.n	80043d4 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
      break;
 80043d2:	bf00      	nop
  }

  return ret;
 80043d4:	68fb      	ldr	r3, [r7, #12]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop

080043e0 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 80043ea:	f107 0208 	add.w	r2, r7, #8
 80043ee:	2303      	movs	r3, #3
 80043f0:	2128      	movs	r1, #40	; 0x28
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fedb 	bl	80041ae <lps22hb_read_reg>
 80043f8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80043fa:	7abb      	ldrb	r3, [r7, #10]
 80043fc:	461a      	mov	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	7a7a      	ldrb	r2, [r7, #9]
 800440a:	441a      	add	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	7a3a      	ldrb	r2, [r7, #8]
 8004418:	441a      	add	r2, r3
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	021a      	lsls	r2, r3, #8
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	601a      	str	r2, [r3, #0]
  return ret;
 8004428:	68fb      	ldr	r3, [r7, #12]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 800443c:	f107 0208 	add.w	r2, r7, #8
 8004440:	2302      	movs	r3, #2
 8004442:	212b      	movs	r1, #43	; 0x2b
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff feb2 	bl	80041ae <lps22hb_read_reg>
 800444a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800444c:	7a7b      	ldrb	r3, [r7, #9]
 800444e:	b21a      	sxth	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800445a:	b29b      	uxth	r3, r3
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	b29a      	uxth	r2, r3
 8004460:	7a3b      	ldrb	r3, [r7, #8]
 8004462:	b29b      	uxth	r3, r3
 8004464:	4413      	add	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	b21a      	sxth	r2, r3
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	801a      	strh	r2, [r3, #0]
  return ret;
 800446e:	68fb      	ldr	r3, [r7, #12]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8004482:	2301      	movs	r3, #1
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	210f      	movs	r1, #15
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff fe90 	bl	80041ae <lps22hb_read_reg>
 800448e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <lps22hb_boot_set>:
  * @param  val    Change the values of boot in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80044a6:	f107 0208 	add.w	r2, r7, #8
 80044aa:	2301      	movs	r3, #1
 80044ac:	2111      	movs	r1, #17
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fe7d 	bl	80041ae <lps22hb_read_reg>
 80044b4:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <lps22hb_boot_set+0x42>
    ctrl_reg2.boot = val;
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	7a3b      	ldrb	r3, [r7, #8]
 80044c6:	f362 13c7 	bfi	r3, r2, #7, #1
 80044ca:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80044cc:	f107 0208 	add.w	r2, r7, #8
 80044d0:	2301      	movs	r3, #1
 80044d2:	2111      	movs	r1, #17
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fe82 	bl	80041de <lps22hb_write_reg>
 80044da:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80044dc:	68fb      	ldr	r3, [r7, #12]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 80044f2:	f107 0208 	add.w	r2, r7, #8
 80044f6:	2301      	movs	r3, #1
 80044f8:	211a      	movs	r1, #26
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fe57 	bl	80041ae <lps22hb_read_reg>
 8004500:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10f      	bne.n	8004528 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	b2da      	uxtb	r2, r3
 8004510:	7a3b      	ldrb	r3, [r7, #8]
 8004512:	f362 0300 	bfi	r3, r2, #0, #1
 8004516:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8004518:	f107 0208 	add.w	r2, r7, #8
 800451c:	2301      	movs	r3, #1
 800451e:	211a      	movs	r1, #26
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fe5c 	bl	80041de <lps22hb_write_reg>
 8004526:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004528:	68fb      	ldr	r3, [r7, #12]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <lps22hb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hb_i2c_dis_t val)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800453e:	f107 0208 	add.w	r2, r7, #8
 8004542:	2301      	movs	r3, #1
 8004544:	2111      	movs	r1, #17
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff fe31 	bl	80041ae <lps22hb_read_reg>
 800454c:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10f      	bne.n	8004574 <lps22hb_i2c_interface_set+0x42>
    ctrl_reg2.i2c_dis = (uint8_t)val;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	b2da      	uxtb	r2, r3
 800455c:	7a3b      	ldrb	r3, [r7, #8]
 800455e:	f362 03c3 	bfi	r3, r2, #3, #1
 8004562:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004564:	f107 0208 	add.w	r2, r7, #8
 8004568:	2301      	movs	r3, #1
 800456a:	2111      	movs	r1, #17
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fe36 	bl	80041de <lps22hb_write_reg>
 8004572:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800458a:	f107 0208 	add.w	r2, r7, #8
 800458e:	2301      	movs	r3, #1
 8004590:	2111      	movs	r1, #17
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fe0b 	bl	80041ae <lps22hb_read_reg>
 8004598:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	7a3b      	ldrb	r3, [r7, #8]
 80045aa:	f362 1304 	bfi	r3, r2, #4, #1
 80045ae:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80045b0:	f107 0208 	add.w	r2, r7, #8
 80045b4:	2301      	movs	r3, #1
 80045b6:	2111      	movs	r1, #17
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fe10 	bl	80041de <lps22hb_write_reg>
 80045be:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80045c0:	68fb      	ldr	r3, [r7, #12]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <BSP_LED_Init+0x94>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	4a21      	ldr	r2, [pc, #132]	; (8004660 <BSP_LED_Init+0x94>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6593      	str	r3, [r2, #88]	; 0x58
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <BSP_LED_Init+0x94>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 80045ee:	f003 ff0b 	bl	8008408 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <BSP_LED_Init+0x44>
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <BSP_LED_Init+0x94>)
 80045fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <BSP_LED_Init+0x94>)
 80045fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <BSP_LED_Init+0x94>)
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10b      	bne.n	800462e <BSP_LED_Init+0x62>
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <BSP_LED_Init+0x94>)
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	4a11      	ldr	r2, [pc, #68]	; (8004660 <BSP_LED_Init+0x94>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <BSP_LED_Init+0x94>)
 8004624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	4a0c      	ldr	r2, [pc, #48]	; (8004664 <BSP_LED_Init+0x98>)
 8004632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004638:	2301      	movs	r3, #1
 800463a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004640:	2302      	movs	r3, #2
 8004642:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <BSP_LED_Init+0x9c>)
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	f107 0214 	add.w	r2, r7, #20
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f001 fad4 	bl	8005c00 <HAL_GPIO_Init>
}
 8004658:	bf00      	nop
 800465a:	3728      	adds	r7, #40	; 0x28
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	0800f5a4 	.word	0x0800f5a4
 8004668:	20000078 	.word	0x20000078

0800466c <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <BSP_LED_On+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <BSP_LED_On+0x54>)
 8004680:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	4a0f      	ldr	r2, [pc, #60]	; (80046c4 <BSP_LED_On+0x58>)
 8004688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468c:	b29b      	uxth	r3, r3
 800468e:	2201      	movs	r2, #1
 8004690:	4619      	mov	r1, r3
 8004692:	f001 fd6b 	bl	800616c <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
}
 8004696:	e00f      	b.n	80046b8 <BSP_LED_On+0x4c>
  else if (Led == LEDSWD)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10c      	bne.n	80046b8 <BSP_LED_On+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	4a07      	ldr	r2, [pc, #28]	; (80046c0 <BSP_LED_On+0x54>)
 80046a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	4a06      	ldr	r2, [pc, #24]	; (80046c4 <BSP_LED_On+0x58>)
 80046aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2200      	movs	r2, #0
 80046b2:	4619      	mov	r1, r3
 80046b4:	f001 fd5a 	bl	800616c <HAL_GPIO_WritePin>
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000078 	.word	0x20000078
 80046c4:	0800f5a4 	.word	0x0800f5a4

080046c8 <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10d      	bne.n	80046f4 <BSP_LED_Off+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <BSP_LED_Off+0x54>)
 80046dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <BSP_LED_Off+0x58>)
 80046e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2200      	movs	r2, #0
 80046ec:	4619      	mov	r1, r3
 80046ee:	f001 fd3d 	bl	800616c <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
}
 80046f2:	e00f      	b.n	8004714 <BSP_LED_Off+0x4c>
  else if (Led == LEDSWD)
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10c      	bne.n	8004714 <BSP_LED_Off+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	4a07      	ldr	r2, [pc, #28]	; (800471c <BSP_LED_Off+0x54>)
 80046fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4a06      	ldr	r2, [pc, #24]	; (8004720 <BSP_LED_Off+0x58>)
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	b29b      	uxth	r3, r3
 800470c:	2201      	movs	r2, #1
 800470e:	4619      	mov	r1, r3
 8004710:	f001 fd2c 	bl	800616c <HAL_GPIO_WritePin>
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000078 	.word	0x20000078
 8004720:	0800f5a4 	.word	0x0800f5a4

08004724 <Sensor_IO_SPI_CS_Init_All>:
  * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
  * @param  None
  * @retval HAL_StatusTypeDef HAL Status
  */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 800472a:	4b44      	ldr	r3, [pc, #272]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	4a43      	ldr	r2, [pc, #268]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004730:	f043 0302 	orr.w	r3, r3, #2
 8004734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	4a37      	ldr	r2, [pc, #220]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004766:	4b35      	ldr	r3, [pc, #212]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8004772:	4b32      	ldr	r3, [pc, #200]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004776:	4a31      	ldr	r2, [pc, #196]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800478a:	2201      	movs	r2, #1
 800478c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004790:	482b      	ldr	r0, [pc, #172]	; (8004840 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004792:	f001 fceb 	bl	800616c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004796:	2201      	movs	r2, #1
 8004798:	2110      	movs	r1, #16
 800479a:	482a      	ldr	r0, [pc, #168]	; (8004844 <Sensor_IO_SPI_CS_Init_All+0x120>)
 800479c:	f001 fce6 	bl	800616c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 80047a0:	2201      	movs	r2, #1
 80047a2:	2102      	movs	r1, #2
 80047a4:	4826      	ldr	r0, [pc, #152]	; (8004840 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 80047a6:	f001 fce1 	bl	800616c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80047aa:	2201      	movs	r2, #1
 80047ac:	2108      	movs	r1, #8
 80047ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047b2:	f001 fcdb 	bl	800616c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80047b6:	2303      	movs	r3, #3
 80047b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047be:	2301      	movs	r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 80047c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 80047c8:	f107 0314 	add.w	r3, r7, #20
 80047cc:	4619      	mov	r1, r3
 80047ce:	481c      	ldr	r0, [pc, #112]	; (8004840 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 80047d0:	f001 fa16 	bl	8005c00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 80047d4:	2201      	movs	r2, #1
 80047d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047da:	4819      	ldr	r0, [pc, #100]	; (8004840 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 80047dc:	f001 fcc6 	bl	800616c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 80047e0:	2310      	movs	r3, #16
 80047e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	4619      	mov	r1, r3
 80047ea:	4816      	ldr	r0, [pc, #88]	; (8004844 <Sensor_IO_SPI_CS_Init_All+0x120>)
 80047ec:	f001 fa08 	bl	8005c00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 80047f0:	2201      	movs	r2, #1
 80047f2:	2110      	movs	r1, #16
 80047f4:	4813      	ldr	r0, [pc, #76]	; (8004844 <Sensor_IO_SPI_CS_Init_All+0x120>)
 80047f6:	f001 fcb9 	bl	800616c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 80047fa:	2302      	movs	r3, #2
 80047fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 80047fe:	f107 0314 	add.w	r3, r7, #20
 8004802:	4619      	mov	r1, r3
 8004804:	480e      	ldr	r0, [pc, #56]	; (8004840 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004806:	f001 f9fb 	bl	8005c00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 800480a:	2201      	movs	r2, #1
 800480c:	2102      	movs	r1, #2
 800480e:	480c      	ldr	r0, [pc, #48]	; (8004840 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004810:	f001 fcac 	bl	800616c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8004814:	2308      	movs	r3, #8
 8004816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4619      	mov	r1, r3
 800481e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004822:	f001 f9ed 	bl	8005c00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004826:	2201      	movs	r2, #1
 8004828:	2108      	movs	r1, #8
 800482a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800482e:	f001 fc9d 	bl	800616c <HAL_GPIO_WritePin>

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3728      	adds	r7, #40	; 0x28
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	48000400 	.word	0x48000400
 8004844:	48000800 	.word	0x48000800

08004848 <BSP_I2C3_Init>:
/**
  * @brief  Initialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_Init(void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
  
  hbusi2c3.Instance  = I2C3;
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <BSP_I2C3_Init+0x44>)
 8004854:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <BSP_I2C3_Init+0x48>)
 8004856:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&hbusi2c3) == HAL_I2C_STATE_RESET)
 8004858:	480c      	ldr	r0, [pc, #48]	; (800488c <BSP_I2C3_Init+0x44>)
 800485a:	f002 f85a 	bl	8006912 <HAL_I2C_GetState>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10e      	bne.n	8004882 <BSP_I2C3_Init+0x3a>
  {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C3_MspInit(&hbusi2c3);
 8004864:	4809      	ldr	r0, [pc, #36]	; (800488c <BSP_I2C3_Init+0x44>)
 8004866:	f000 f9ef 	bl	8004c48 <I2C3_MspInit>
        }
      }
    #endif

    /* Init the I2C */
    if(MX_I2C3_Init(&hbusi2c3) != HAL_OK)
 800486a:	4808      	ldr	r0, [pc, #32]	; (800488c <BSP_I2C3_Init+0x44>)
 800486c:	f000 f9c8 	bl	8004c00 <MX_I2C3_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <BSP_I2C3_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004876:	f06f 0307 	mvn.w	r3, #7
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	e001      	b.n	8004882 <BSP_I2C3_Init+0x3a>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
    }	
  }

  return ret;
 8004882:	687b      	ldr	r3, [r7, #4]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	2000269c 	.word	0x2000269c
 8004890:	40005c00 	.word	0x40005c00

08004894 <BSP_I2C3_DeInit>:
/**
  * @brief  DeInitialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_DeInit(void) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800489a:	f06f 0307 	mvn.w	r3, #7
 800489e:	607b      	str	r3, [r7, #4]
  
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    /* DeInit the I2C */ 
    I2C3_MspDeInit(&hbusi2c3);
 80048a0:	4807      	ldr	r0, [pc, #28]	; (80048c0 <BSP_I2C3_DeInit+0x2c>)
 80048a2:	f000 fa35 	bl	8004d10 <I2C3_MspDeInit>
  #endif  
  
  if (HAL_I2C_DeInit(&hbusi2c3) == HAL_OK) {
 80048a6:	4806      	ldr	r0, [pc, #24]	; (80048c0 <BSP_I2C3_DeInit+0x2c>)
 80048a8:	f001 fd07 	bl	80062ba <HAL_I2C_DeInit>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <BSP_I2C3_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80048b6:	687b      	ldr	r3, [r7, #4]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	2000269c 	.word	0x2000269c

080048c4 <BSP_I2C3_WriteReg>:
  * @param  Addr: Device address on Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af04      	add	r7, sp, #16
 80048ca:	60ba      	str	r2, [r7, #8]
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	81fb      	strh	r3, [r7, #14]
 80048d2:	460b      	mov	r3, r1
 80048d4:	81bb      	strh	r3, [r7, #12]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80048da:	f06f 0307 	mvn.w	r3, #7
 80048de:	617b      	str	r3, [r7, #20]

  if(HAL_I2C_Mem_Write(&hbusi2c3, (uint8_t)DevAddr,
 80048e0:	89fb      	ldrh	r3, [r7, #14]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	b299      	uxth	r1, r3
 80048e6:	89ba      	ldrh	r2, [r7, #12]
 80048e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ec:	9302      	str	r3, [sp, #8]
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2301      	movs	r3, #1
 80048f8:	4806      	ldr	r0, [pc, #24]	; (8004914 <BSP_I2C3_WriteReg+0x50>)
 80048fa:	f001 fd21 	bl	8006340 <HAL_I2C_Mem_Write>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <BSP_I2C3_WriteReg+0x44>
                       (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                       (uint8_t *)pData, len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004908:	697b      	ldr	r3, [r7, #20]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000269c 	.word	0x2000269c

08004918 <BSP_I2C3_ReadReg>:
  * @brief  Read registers through a bus (8 bits)
  * @param  DevAddr: Device address on BUS
  * @param  Reg: The target register address to read
  * @retval BSP status
  */
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af04      	add	r7, sp, #16
 800491e:	60ba      	str	r2, [r7, #8]
 8004920:	461a      	mov	r2, r3
 8004922:	4603      	mov	r3, r0
 8004924:	81fb      	strh	r3, [r7, #14]
 8004926:	460b      	mov	r3, r1
 8004928:	81bb      	strh	r3, [r7, #12]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800492e:	f06f 0307 	mvn.w	r3, #7
 8004932:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hbusi2c3, DevAddr, (uint16_t)Reg,
 8004934:	89ba      	ldrh	r2, [r7, #12]
 8004936:	89f9      	ldrh	r1, [r7, #14]
 8004938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800493c:	9302      	str	r3, [sp, #8]
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2301      	movs	r3, #1
 8004948:	4806      	ldr	r0, [pc, #24]	; (8004964 <BSP_I2C3_ReadReg+0x4c>)
 800494a:	f001 fe0d 	bl	8006568 <HAL_I2C_Mem_Read>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <BSP_I2C3_ReadReg+0x40>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004958:	697b      	ldr	r3, [r7, #20]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	2000269c 	.word	0x2000269c

08004968 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
  
  hbusspi2.Instance  = SPI2;
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <BSP_SPI2_Init+0x40>)
 8004974:	4a0d      	ldr	r2, [pc, #52]	; (80049ac <BSP_SPI2_Init+0x44>)
 8004976:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 8004978:	480b      	ldr	r0, [pc, #44]	; (80049a8 <BSP_SPI2_Init+0x40>)
 800497a:	f005 fc59 	bl	800a230 <HAL_SPI_GetState>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <BSP_SPI2_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 8004984:	4808      	ldr	r0, [pc, #32]	; (80049a8 <BSP_SPI2_Init+0x40>)
 8004986:	f000 f8ed 	bl	8004b64 <SPI2_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 800498a:	4807      	ldr	r0, [pc, #28]	; (80049a8 <BSP_SPI2_Init+0x40>)
 800498c:	f000 f890 	bl	8004ab0 <MX_SPI2_Init>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004996:	f06f 0307 	mvn.w	r3, #7
 800499a:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 800499c:	687b      	ldr	r3, [r7, #4]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200026e8 	.word	0x200026e8
 80049ac:	40003800 	.word	0x40003800

080049b0 <BSP_SPI2_DeInit>:
/**
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80049b6:	f06f 0307 	mvn.w	r3, #7
 80049ba:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 80049bc:	4807      	ldr	r0, [pc, #28]	; (80049dc <BSP_SPI2_DeInit+0x2c>)
 80049be:	f000 f907 	bl	8004bd0 <SPI2_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi2) == HAL_OK) {
 80049c2:	4806      	ldr	r0, [pc, #24]	; (80049dc <BSP_SPI2_DeInit+0x2c>)
 80049c4:	f005 f877 	bl	8009ab6 <HAL_SPI_DeInit>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <BSP_SPI2_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80049d2:	687b      	ldr	r3, [r7, #4]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200026e8 	.word	0x200026e8

080049e0 <BSP_SPI2_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80049ec:	f06f 0305 	mvn.w	r3, #5
 80049f0:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4806      	ldr	r0, [pc, #24]	; (8004a14 <BSP_SPI2_Send+0x34>)
 80049fc:	f005 f897 	bl	8009b2e <HAL_SPI_Transmit>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <BSP_SPI2_Send+0x2a>
  {
      ret = len;
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200026e8 	.word	0x200026e8

08004a18 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	607b      	str	r3, [r7, #4]
  
  hbusspi1.Instance  = SPI1;
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <BSP_SPI1_Init+0x40>)
 8004a24:	4a0d      	ldr	r2, [pc, #52]	; (8004a5c <BSP_SPI1_Init+0x44>)
 8004a26:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8004a28:	480b      	ldr	r0, [pc, #44]	; (8004a58 <BSP_SPI1_Init+0x40>)
 8004a2a:	f005 fc01 	bl	800a230 <HAL_SPI_GetState>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <BSP_SPI1_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbusspi1);
 8004a34:	4808      	ldr	r0, [pc, #32]	; (8004a58 <BSP_SPI1_Init+0x40>)
 8004a36:	f000 f9c9 	bl	8004dcc <SPI1_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8004a3a:	4807      	ldr	r0, [pc, #28]	; (8004a58 <BSP_SPI1_Init+0x40>)
 8004a3c:	f000 f984 	bl	8004d48 <MX_SPI1_Init>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <BSP_SPI1_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004a46:	f06f 0307 	mvn.w	r3, #7
 8004a4a:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004a4c:	687b      	ldr	r3, [r7, #4]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2000274c 	.word	0x2000274c
 8004a5c:	40013000 	.word	0x40013000

08004a60 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004a6e:	f06f 0305 	mvn.w	r3, #5
 8004a72:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a7a:	9200      	str	r2, [sp, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	4806      	ldr	r0, [pc, #24]	; (8004a9c <BSP_SPI1_SendRecv+0x3c>)
 8004a82:	f005 f9c2 	bl	8009e0a <HAL_SPI_TransmitReceive>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <BSP_SPI1_SendRecv+0x30>
  {
      ret = len;
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004a90:	697b      	ldr	r3, [r7, #20]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000274c 	.word	0x2000274c

08004aa0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004aa4:	f000 fe98 	bl	80057d8 <HAL_GetTick>
 8004aa8:	4603      	mov	r3, r0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <MX_SPI2_Init>:

/* SPI2 init function */ 

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <MX_SPI2_Init+0xb0>)
 8004ac0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ac8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ad0:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ad8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aec:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2230      	movs	r2, #48	; 0x30
 8004af2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2207      	movs	r2, #7
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	635a      	str	r2, [r3, #52]	; 0x34
  
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f004 ff29 	bl	8009970 <HAL_SPI_Init>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <MX_SPI2_Init+0x78>
  {
    ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
  }
  
  HAL_Delay(5);
 8004b28:	2005      	movs	r0, #5
 8004b2a:	f7fc fc49 	bl	80013c0 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b3c:	601a      	str	r2, [r3, #0]
  HAL_Delay(5);
 8004b3e:	2005      	movs	r0, #5
 8004b40:	f7fc fc3e 	bl	80013c0 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]
  
  return ret;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40003800 	.word	0x40003800

08004b64 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b6c:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <SPI2_MspInit+0x64>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <SPI2_MspInit+0x64>)
 8004b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b76:	6593      	str	r3, [r2, #88]	; 0x58
 8004b78:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <SPI2_MspInit+0x64>)
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <SPI2_MspInit+0x64>)
 8004b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b88:	4a0f      	ldr	r2, [pc, #60]	; (8004bc8 <SPI2_MspInit+0x64>)
 8004b8a:	f043 0302 	orr.w	r3, r3, #2
 8004b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <SPI2_MspInit+0x64>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
  
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8004b9c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004baa:	2302      	movs	r3, #2
 8004bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bae:	2305      	movs	r3, #5
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb2:	f107 0314 	add.w	r3, r7, #20
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4804      	ldr	r0, [pc, #16]	; (8004bcc <SPI2_MspInit+0x68>)
 8004bba:	f001 f821 	bl	8005c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	48000400 	.word	0x48000400

08004bd0 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <SPI2_MspDeInit+0x28>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <SPI2_MspDeInit+0x28>)
 8004bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be2:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 8004be4:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8004be8:	4804      	ldr	r0, [pc, #16]	; (8004bfc <SPI2_MspDeInit+0x2c>)
 8004bea:	f001 f9b3 	bl	8005f54 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	48000400 	.word	0x48000400

08004c00 <MX_I2C3_Init>:

/* I2C3 init function */ 

__weak HAL_StatusTypeDef MX_I2C3_Init(I2C_HandleTypeDef* hi2c)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C3;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <MX_I2C3_Init+0x40>)
 8004c10:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10801541;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <MX_I2C3_Init+0x44>)
 8004c16:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0x33;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2233      	movs	r2, #51	; 0x33
 8004c1c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	60da      	str	r2, [r3, #12]
  
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 fab9 	bl	800619c <HAL_I2C_Init>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_I2C3_Init+0x34>
  {
    ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40005c00 	.word	0x40005c00
 8004c44:	10801541 	.word	0x10801541

08004c48 <I2C3_MspInit>:

static void I2C3_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b0ac      	sub	sp, #176	; 0xb0
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C3_MspInit 0 */
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c54:	617b      	str	r3, [r7, #20]
  RCC_PeriphCLKInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8004c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4618      	mov	r0, r3
 8004c62:	f004 f9a1 	bl	8008fa8 <HAL_RCCEx_PeriphCLKConfig>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d000      	beq.n	8004c6e <I2C3_MspInit+0x26>
  {
    while(1);
 8004c6c:	e7fe      	b.n	8004c6c <I2C3_MspInit+0x24>
  }
  
  /* Enable I2C GPIO clocks */
  __GPIOC_CLK_ENABLE();
 8004c6e:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004c74:	f043 0304 	orr.w	r3, r3, #4
 8004c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c7a:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
  
  /**I2C3 GPIO Configuration    
  PC1     ------> I2C3_SDA
  PC0     ------> I2C3_SCL 
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004c86:	2303      	movs	r3, #3
 8004c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c8c:	2312      	movs	r3, #18
 8004c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ca4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4818      	ldr	r0, [pc, #96]	; (8004d0c <I2C3_MspInit+0xc4>)
 8004cac:	f000 ffa8 	bl	8005c00 <HAL_GPIO_Init>
  
  /* Peripheral clock enable */
  __HAL_RCC_I2C3_CLK_ENABLE();
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004cb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cba:	6593      	str	r3, [r2, #88]	; 0x58
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Force the I2C peripheral clock reset */
  __I2C3_FORCE_RESET();
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cd2:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Release the I2C peripheral clock reset */
  __I2C3_RELEASE_RESET();
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	4a0b      	ldr	r2, [pc, #44]	; (8004d08 <I2C3_MspInit+0xc0>)
 8004cda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cde:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2048      	movs	r0, #72	; 0x48
 8004ce6:	f000 fe8c 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004cea:	2048      	movs	r0, #72	; 0x48
 8004cec:	f000 fea5 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2049      	movs	r0, #73	; 0x49
 8004cf6:	f000 fe84 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004cfa:	2049      	movs	r0, #73	; 0x49
 8004cfc:	f000 fe9d 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */
  
  /* USER CODE END I2C3_MspInit 1 */
}
 8004d00:	bf00      	nop
 8004d02:	37b0      	adds	r7, #176	; 0xb0
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	48000800 	.word	0x48000800

08004d10 <I2C3_MspDeInit>:

static void I2C3_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <I2C3_MspDeInit+0x30>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <I2C3_MspDeInit+0x30>)
 8004d1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d22:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C3 GPIO Configuration    
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 8004d24:	2103      	movs	r1, #3
 8004d26:	4807      	ldr	r0, [pc, #28]	; (8004d44 <I2C3_MspDeInit+0x34>)
 8004d28:	f001 f914 	bl	8005f54 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8004d2c:	2048      	movs	r0, #72	; 0x48
 8004d2e:	f000 fe92 	bl	8005a56 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8004d32:	2049      	movs	r0, #73	; 0x49
 8004d34:	f000 fe8f 	bl	8005a56 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	48000800 	.word	0x48000800

08004d48 <MX_SPI1_Init>:


/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a1c      	ldr	r2, [pc, #112]	; (8004dc8 <MX_SPI1_Init+0x80>)
 8004d58:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d60:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d6e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d82:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2218      	movs	r2, #24
 8004d88:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2207      	movs	r2, #7
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2208      	movs	r2, #8
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f004 fdde 	bl	8009970 <HAL_SPI_Init>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40013000 	.word	0x40013000

08004dcc <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <SPI1_MspInit+0x64>)
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <SPI1_MspInit+0x64>)
 8004dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dde:	6613      	str	r3, [r2, #96]	; 0x60
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <SPI1_MspInit+0x64>)
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dec:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <SPI1_MspInit+0x64>)
 8004dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df0:	4a0f      	ldr	r2, [pc, #60]	; (8004e30 <SPI1_MspInit+0x64>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <SPI1_MspInit+0x64>)
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004e04:	23e0      	movs	r3, #224	; 0xe0
 8004e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e10:	2303      	movs	r3, #3
 8004e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e14:	2305      	movs	r3, #5
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e22:	f000 feed 	bl	8005c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8004e26:	bf00      	nop
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000

08004e34 <BSP_ENV_SENSOR_Init>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
  ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <BSP_ENV_SENSOR_Init+0x24>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d032      	beq.n	8004ebc <BSP_ENV_SENSOR_Init+0x88>
 8004e56:	e063      	b.n	8004f20 <BSP_ENV_SENSOR_Init+0xec>
  {
#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8004e58:	6838      	ldr	r0, [r7, #0]
 8004e5a:	f000 f931 	bl	80050c0 <HTS221_0_Probe>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <BSP_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8004e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e68:	e098      	b.n	8004f9c <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004e6a:	4a4e      	ldr	r2, [pc, #312]	; (8004fa4 <BSP_ENV_SENSOR_Init+0x170>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	494c      	ldr	r1, [pc, #304]	; (8004fa8 <BSP_ENV_SENSOR_Init+0x174>)
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e7c:	f107 0108 	add.w	r1, r7, #8
 8004e80:	4610      	mov	r0, r2
 8004e82:	4798      	blx	r3
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <BSP_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004e8a:	f06f 0306 	mvn.w	r3, #6
 8004e8e:	e085      	b.n	8004f9c <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8004e90:	7a3b      	ldrb	r3, [r7, #8]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d103      	bne.n	8004e9e <BSP_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8004e9e:	7abb      	ldrb	r3, [r7, #10]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d103      	bne.n	8004eac <BSP_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8004eac:	7a7b      	ldrb	r3, [r7, #9]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d13a      	bne.n	8004f28 <BSP_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f043 0302 	orr.w	r3, r3, #2
 8004eb8:	61bb      	str	r3, [r7, #24]
      }
      break;
 8004eba:	e035      	b.n	8004f28 <BSP_ENV_SENSOR_Init+0xf4>
#endif
#if (USE_ENV_SENSOR_LPS22HB_0 == 1)
    case LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8004ebc:	6838      	ldr	r0, [r7, #0]
 8004ebe:	f000 f9a9 	bl	8005214 <LPS22HB_0_Probe>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <BSP_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 8004ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ecc:	e066      	b.n	8004f9c <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004ece:	4a35      	ldr	r2, [pc, #212]	; (8004fa4 <BSP_ENV_SENSOR_Init+0x170>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4933      	ldr	r1, [pc, #204]	; (8004fa8 <BSP_ENV_SENSOR_Init+0x174>)
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ee0:	f107 0108 	add.w	r1, r7, #8
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4798      	blx	r3
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <BSP_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004eee:	f06f 0306 	mvn.w	r3, #6
 8004ef2:	e053      	b.n	8004f9c <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8004ef4:	7a3b      	ldrb	r3, [r7, #8]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d103      	bne.n	8004f02 <BSP_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8004f02:	7abb      	ldrb	r3, [r7, #10]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d103      	bne.n	8004f10 <BSP_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f043 0304 	orr.w	r3, r3, #4
 8004f0e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8004f10:	7a7b      	ldrb	r3, [r7, #9]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10a      	bne.n	8004f2c <BSP_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
      }
      break;
 8004f1e:	e005      	b.n	8004f2c <BSP_ENV_SENSOR_Init+0xf8>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004f20:	f06f 0301 	mvn.w	r3, #1
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004f26:	e002      	b.n	8004f2e <BSP_ENV_SENSOR_Init+0xfa>
      break;
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <BSP_ENV_SENSOR_Init+0xfa>
      break;
 8004f2c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <BSP_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	e031      	b.n	8004f9c <BSP_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	e02a      	b.n	8004f94 <BSP_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	4013      	ands	r3, r2
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d11e      	bne.n	8004f88 <BSP_ENV_SENSOR_Init+0x154>
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d118      	bne.n	8004f88 <BSP_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004f56:	4a15      	ldr	r2, [pc, #84]	; (8004fac <BSP_ENV_SENSOR_Init+0x178>)
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f5e:	4814      	ldr	r0, [pc, #80]	; (8004fb0 <BSP_ENV_SENSOR_Init+0x17c>)
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	440b      	add	r3, r1
 8004f6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	490d      	ldr	r1, [pc, #52]	; (8004fa8 <BSP_ENV_SENSOR_Init+0x174>)
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4798      	blx	r3
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <BSP_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004f82:	f06f 0304 	mvn.w	r3, #4
 8004f86:	e009      	b.n	8004f9c <BSP_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d9d1      	bls.n	8004f3e <BSP_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3728      	adds	r7, #40	; 0x28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	2000028c 	.word	0x2000028c
 8004fa8:	200027b0 	.word	0x200027b0
 8004fac:	20000080 	.word	0x20000080
 8004fb0:	20000274 	.word	0x20000274

08004fb4 <BSP_ENV_SENSOR_Enable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d903      	bls.n	8004fcc <BSP_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004fc4:	f06f 0301 	mvn.w	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e028      	b.n	800501e <BSP_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <BSP_ENV_SENSOR_Enable+0x74>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d11c      	bne.n	8005018 <BSP_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <BSP_ENV_SENSOR_Enable+0x78>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fe6:	4812      	ldr	r0, [pc, #72]	; (8005030 <BSP_ENV_SENSOR_Enable+0x7c>)
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	490e      	ldr	r1, [pc, #56]	; (8005034 <BSP_ENV_SENSOR_Enable+0x80>)
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005000:	4610      	mov	r0, r2
 8005002:	4798      	blx	r3
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <BSP_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800500a:	f06f 0304 	mvn.w	r3, #4
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e005      	b.n	800501e <BSP_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e002      	b.n	800501e <BSP_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005018:	f06f 0301 	mvn.w	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000294 	.word	0x20000294
 800502c:	20000080 	.word	0x20000080
 8005030:	20000274 	.word	0x20000274
 8005034:	200027b0 	.word	0x200027b0

08005038 <BSP_ENV_SENSOR_GetValue>:
 *         - ENV_HUMIDITY
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d903      	bls.n	8005052 <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800504a:	f06f 0301 	mvn.w	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e029      	b.n	80050a6 <BSP_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <BSP_ENV_SENSOR_GetValue+0x78>)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	d11d      	bne.n	80050a0 <BSP_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005064:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <BSP_ENV_SENSOR_GetValue+0x7c>)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800506c:	4812      	ldr	r0, [pc, #72]	; (80050b8 <BSP_ENV_SENSOR_GetValue+0x80>)
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	440b      	add	r3, r1
 8005078:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	490f      	ldr	r1, [pc, #60]	; (80050bc <BSP_ENV_SENSOR_GetValue+0x84>)
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <BSP_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005092:	f06f 0304 	mvn.w	r3, #4
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e005      	b.n	80050a6 <BSP_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e002      	b.n	80050a6 <BSP_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80050a0:	f06f 0301 	mvn.w	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80050a6:	697b      	ldr	r3, [r7, #20]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000294 	.word	0x20000294
 80050b4:	20000080 	.word	0x20000080
 80050b8:	20000274 	.word	0x20000274
 80050bc:	200027b0 	.word	0x200027b0

080050c0 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b090      	sub	sp, #64	; 0x40
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80050cc:	2300      	movs	r3, #0
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80050d0:	23bf      	movs	r3, #191	; 0xbf
 80050d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = BSP_I2C3_Init;
 80050d6:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HTS221_0_Probe+0x11c>)
 80050d8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = BSP_I2C3_DeInit;
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HTS221_0_Probe+0x120>)
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = BSP_I2C3_ReadReg;
 80050de:	4b41      	ldr	r3, [pc, #260]	; (80051e4 <HTS221_0_Probe+0x124>)
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 80050e2:	4b41      	ldr	r3, [pc, #260]	; (80051e8 <HTS221_0_Probe+0x128>)
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = BSP_GetTick;
 80050e6:	4b41      	ldr	r3, [pc, #260]	; (80051ec <HTS221_0_Probe+0x12c>)
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80050ea:	f107 0320 	add.w	r3, r7, #32
 80050ee:	4619      	mov	r1, r3
 80050f0:	483f      	ldr	r0, [pc, #252]	; (80051f0 <HTS221_0_Probe+0x130>)
 80050f2:	f7fd fe23 	bl	8002d3c <HTS221_RegisterBusIO>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80050fc:	f06f 0306 	mvn.w	r3, #6
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005102:	e065      	b.n	80051d0 <HTS221_0_Probe+0x110>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8005104:	f107 031f 	add.w	r3, r7, #31
 8005108:	4619      	mov	r1, r3
 800510a:	4839      	ldr	r0, [pc, #228]	; (80051f0 <HTS221_0_Probe+0x130>)
 800510c:	f7fd fe9b 	bl	8002e46 <HTS221_ReadID>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005116:	f06f 0306 	mvn.w	r3, #6
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800511c:	e058      	b.n	80051d0 <HTS221_0_Probe+0x110>
  }
  else if (id != HTS221_ID)
 800511e:	7ffb      	ldrb	r3, [r7, #31]
 8005120:	2bbc      	cmp	r3, #188	; 0xbc
 8005122:	d003      	beq.n	800512c <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005124:	f06f 0306 	mvn.w	r3, #6
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512a:	e051      	b.n	80051d0 <HTS221_0_Probe+0x110>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800512c:	f107 030c 	add.w	r3, r7, #12
 8005130:	4619      	mov	r1, r3
 8005132:	482f      	ldr	r0, [pc, #188]	; (80051f0 <HTS221_0_Probe+0x130>)
 8005134:	f7fd fe9e 	bl	8002e74 <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005138:	7b3b      	ldrb	r3, [r7, #12]
 800513a:	461a      	mov	r2, r3
 800513c:	7b7b      	ldrb	r3, [r7, #13]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	431a      	orrs	r2, r3
                                   uint32_t)cap.Humidity << 2);
 8005142:	7bbb      	ldrb	r3, [r7, #14]
 8005144:	009b      	lsls	r3, r3, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005146:	4313      	orrs	r3, r2
 8005148:	4a2a      	ldr	r2, [pc, #168]	; (80051f4 <HTS221_0_Probe+0x134>)
 800514a:	6013      	str	r3, [r2, #0]

    EnvCompObj[HTS221_0] = &hts221_obj_0;
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HTS221_0_Probe+0x138>)
 800514e:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <HTS221_0_Probe+0x130>)
 8005150:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <HTS221_0_Probe+0x13c>)
 8005154:	4a2a      	ldr	r2, [pc, #168]	; (8005200 <HTS221_0_Probe+0x140>)
 8005156:	601a      	str	r2, [r3, #0]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d018      	beq.n	8005194 <HTS221_0_Probe+0xd4>
 8005162:	7b3b      	ldrb	r3, [r7, #12]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d115      	bne.n	8005194 <HTS221_0_Probe+0xd4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005168:	4b26      	ldr	r3, [pc, #152]	; (8005204 <HTS221_0_Probe+0x144>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a26      	ldr	r2, [pc, #152]	; (8005208 <HTS221_0_Probe+0x148>)
 800516e:	4927      	ldr	r1, [pc, #156]	; (800520c <HTS221_0_Probe+0x14c>)
 8005170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8005174:	4b21      	ldr	r3, [pc, #132]	; (80051fc <HTS221_0_Probe+0x13c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HTS221_0_Probe+0x138>)
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	4610      	mov	r0, r2
 8005180:	4798      	blx	r3
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HTS221_0_Probe+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005188:	f06f 0304 	mvn.w	r3, #4
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518e:	e001      	b.n	8005194 <HTS221_0_Probe+0xd4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <HTS221_0_Probe+0x110>
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d115      	bne.n	80051d0 <HTS221_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80051a4:	4b17      	ldr	r3, [pc, #92]	; (8005204 <HTS221_0_Probe+0x144>)
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	4a17      	ldr	r2, [pc, #92]	; (8005208 <HTS221_0_Probe+0x148>)
 80051aa:	4919      	ldr	r1, [pc, #100]	; (8005210 <HTS221_0_Probe+0x150>)
 80051ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HTS221_0_Probe+0x13c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <HTS221_0_Probe+0x138>)
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	4610      	mov	r0, r2
 80051bc:	4798      	blx	r3
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HTS221_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80051c4:	f06f 0304 	mvn.w	r3, #4
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ca:	e001      	b.n	80051d0 <HTS221_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  return ret;
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3740      	adds	r7, #64	; 0x40
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	08004849 	.word	0x08004849
 80051e0:	08004895 	.word	0x08004895
 80051e4:	08004919 	.word	0x08004919
 80051e8:	080048c5 	.word	0x080048c5
 80051ec:	08004aa1 	.word	0x08004aa1
 80051f0:	2000029c 	.word	0x2000029c
 80051f4:	20000294 	.word	0x20000294
 80051f8:	200027b0 	.word	0x200027b0
 80051fc:	2000028c 	.word	0x2000028c
 8005200:	20000008 	.word	0x20000008
 8005204:	20000080 	.word	0x20000080
 8005208:	20000274 	.word	0x20000274
 800520c:	2000002c 	.word	0x2000002c
 8005210:	20000018 	.word	0x20000018

08005214 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b090      	sub	sp, #64	; 0x40
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800521c:	2300      	movs	r3, #0
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;
  
  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_SPI_3WIRES_BUS; /* SPI 3-Wires */
 8005220:	2302      	movs	r3, #2
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = 0x0;
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_LPS22HB_Init;
 800522a:	4b56      	ldr	r3, [pc, #344]	; (8005384 <LPS22HB_0_Probe+0x170>)
 800522c:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_LPS22HB_DeInit;
 800522e:	4b56      	ldr	r3, [pc, #344]	; (8005388 <LPS22HB_0_Probe+0x174>)
 8005230:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_LPS22HB_ReadReg;
 8005232:	4b56      	ldr	r3, [pc, #344]	; (800538c <LPS22HB_0_Probe+0x178>)
 8005234:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_LPS22HB_WriteReg;
 8005236:	4b56      	ldr	r3, [pc, #344]	; (8005390 <LPS22HB_0_Probe+0x17c>)
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 800523a:	4b56      	ldr	r3, [pc, #344]	; (8005394 <LPS22HB_0_Probe+0x180>)
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800523e:	f107 031c 	add.w	r3, r7, #28
 8005242:	4619      	mov	r1, r3
 8005244:	4854      	ldr	r0, [pc, #336]	; (8005398 <LPS22HB_0_Probe+0x184>)
 8005246:	f7fe fb97 	bl	8003978 <LPS22HB_RegisterBusIO>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005250:	f06f 0306 	mvn.w	r3, #6
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005256:	e08f      	b.n	8005378 <LPS22HB_0_Probe+0x164>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005258:	f107 031b 	add.w	r3, r7, #27
 800525c:	4619      	mov	r1, r3
 800525e:	484e      	ldr	r0, [pc, #312]	; (8005398 <LPS22HB_0_Probe+0x184>)
 8005260:	f7fe fc2f 	bl	8003ac2 <LPS22HB_ReadID>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800526a:	f06f 0306 	mvn.w	r3, #6
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005270:	e082      	b.n	8005378 <LPS22HB_0_Probe+0x164>
  }
  else if (id != LPS22HB_ID)
 8005272:	7efb      	ldrb	r3, [r7, #27]
 8005274:	2bb1      	cmp	r3, #177	; 0xb1
 8005276:	d003      	beq.n	8005280 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005278:	f06f 0306 	mvn.w	r3, #6
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527e:	e07b      	b.n	8005378 <LPS22HB_0_Probe+0x164>
  }
  else
  {
    /* LPS22HB_SwResetAndMemoryBoot */
    if (lps22hb_boot_set(&lps22hb_obj_0.Ctx, PROPERTY_ENABLE) != LPS22HB_OK) 
 8005280:	2101      	movs	r1, #1
 8005282:	4846      	ldr	r0, [pc, #280]	; (800539c <LPS22HB_0_Probe+0x188>)
 8005284:	f7ff f909 	bl	800449a <lps22hb_boot_set>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <LPS22HB_0_Probe+0x80>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800528e:	f06f 0306 	mvn.w	r3, #6
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    
    HAL_Delay(1000);
 8005294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005298:	f7fc f892 	bl	80013c0 <HAL_Delay>
    
    /* Do again the "LPS22HB_RegisterBusIO" */
    {
      uint8_t data = 0x01;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      
      if (LPS22HB_Write_Reg(&lps22hb_obj_0, LPS22HB_CTRL_REG1, data) != LPS22HB_OK) 
 80052a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80052a6:	461a      	mov	r2, r3
 80052a8:	2110      	movs	r1, #16
 80052aa:	483b      	ldr	r0, [pc, #236]	; (8005398 <LPS22HB_0_Probe+0x184>)
 80052ac:	f7fe fd99 	bl	8003de2 <LPS22HB_Write_Reg>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <LPS22HB_0_Probe+0xa8>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80052b6:	f06f 0306 	mvn.w	r3, #6
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }

    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 80052bc:	f107 0308 	add.w	r3, r7, #8
 80052c0:	4619      	mov	r1, r3
 80052c2:	4835      	ldr	r0, [pc, #212]	; (8005398 <LPS22HB_0_Probe+0x184>)
 80052c4:	f7fe fc14 	bl	8003af0 <LPS22HB_GetCapabilities>
    
    EnvCtx[LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((uint32_t)cap.Humidity << 2);
 80052c8:	7a3b      	ldrb	r3, [r7, #8]
 80052ca:	461a      	mov	r2, r3
 80052cc:	7a7b      	ldrb	r3, [r7, #9]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	431a      	orrs	r2, r3
 80052d2:	7abb      	ldrb	r3, [r7, #10]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4313      	orrs	r3, r2
 80052d8:	4a31      	ldr	r2, [pc, #196]	; (80053a0 <LPS22HB_0_Probe+0x18c>)
 80052da:	6053      	str	r3, [r2, #4]
    
    EnvCompObj[LPS22HB_0] = &lps22hb_obj_0;
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <LPS22HB_0_Probe+0x190>)
 80052de:	4a2e      	ldr	r2, [pc, #184]	; (8005398 <LPS22HB_0_Probe+0x184>)
 80052e0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80052e2:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <LPS22HB_0_Probe+0x194>)
 80052e4:	4a31      	ldr	r2, [pc, #196]	; (80053ac <LPS22HB_0_Probe+0x198>)
 80052e6:	605a      	str	r2, [r3, #4]
    
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d019      	beq.n	8005326 <LPS22HB_0_Probe+0x112>
 80052f2:	7a3b      	ldrb	r3, [r7, #8]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d116      	bne.n	8005326 <LPS22HB_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80052f8:	4b2d      	ldr	r3, [pc, #180]	; (80053b0 <LPS22HB_0_Probe+0x19c>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a2d      	ldr	r2, [pc, #180]	; (80053b4 <LPS22HB_0_Probe+0x1a0>)
 80052fe:	3303      	adds	r3, #3
 8005300:	492d      	ldr	r1, [pc, #180]	; (80053b8 <LPS22HB_0_Probe+0x1a4>)
 8005302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 8005306:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <LPS22HB_0_Probe+0x194>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <LPS22HB_0_Probe+0x190>)
 800530e:	6852      	ldr	r2, [r2, #4]
 8005310:	4610      	mov	r0, r2
 8005312:	4798      	blx	r3
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <LPS22HB_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800531a:	f06f 0304 	mvn.w	r3, #4
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005320:	e001      	b.n	8005326 <LPS22HB_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005322:	2300      	movs	r3, #0
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d023      	beq.n	8005378 <LPS22HB_0_Probe+0x164>
 8005330:	7a7b      	ldrb	r3, [r7, #9]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d120      	bne.n	8005378 <LPS22HB_0_Probe+0x164>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8005336:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <LPS22HB_0_Probe+0x19c>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <LPS22HB_0_Probe+0x1a0>)
 800533c:	3303      	adds	r3, #3
 800533e:	491f      	ldr	r1, [pc, #124]	; (80053bc <LPS22HB_0_Probe+0x1a8>)
 8005340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <LPS22HB_0_Probe+0x194>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <LPS22HB_0_Probe+0x190>)
 800534c:	6852      	ldr	r2, [r2, #4]
 800534e:	4610      	mov	r0, r2
 8005350:	4798      	blx	r3
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <LPS22HB_0_Probe+0x14c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005358:	f06f 0304 	mvn.w	r3, #4
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535e:	e001      	b.n	8005364 <LPS22HB_0_Probe+0x150>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005360:	2300      	movs	r3, #0
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 8005364:	2101      	movs	r1, #1
 8005366:	480d      	ldr	r0, [pc, #52]	; (800539c <LPS22HB_0_Probe+0x188>)
 8005368:	f7ff f8e3 	bl	8004532 <lps22hb_i2c_interface_set>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <LPS22HB_0_Probe+0x164>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005372:	f06f 0306 	mvn.w	r3, #6
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
    }
  }
  
  return ret;
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800537a:	4618      	mov	r0, r3
 800537c:	3740      	adds	r7, #64	; 0x40
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	080053c1 	.word	0x080053c1
 8005388:	08005439 	.word	0x08005439
 800538c:	080054d1 	.word	0x080054d1
 8005390:	0800545d 	.word	0x0800545d
 8005394:	08004aa1 	.word	0x08004aa1
 8005398:	200002c8 	.word	0x200002c8
 800539c:	200002e4 	.word	0x200002e4
 80053a0:	20000294 	.word	0x20000294
 80053a4:	200027b0 	.word	0x200027b0
 80053a8:	2000028c 	.word	0x2000028c
 80053ac:	20000040 	.word	0x20000040
 80053b0:	20000080 	.word	0x20000080
 80053b4:	20000274 	.word	0x20000274
 80053b8:	20000064 	.word	0x20000064
 80053bc:	20000050 	.word	0x20000050

080053c0 <BSP_LPS22HB_Init>:
/**
 * @brief  Initialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_Init(void)
{  
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80053c6:	f06f 0305 	mvn.w	r3, #5
 80053ca:	61fb      	str	r3, [r7, #28]
  
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80053cc:	2201      	movs	r2, #1
 80053ce:	2108      	movs	r1, #8
 80053d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053d4:	f000 feca 	bl	800616c <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80053d8:	2303      	movs	r3, #3
 80053da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053e0:	2301      	movs	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
  
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 80053e4:	4b13      	ldr	r3, [pc, #76]	; (8005434 <BSP_LPS22HB_Init+0x74>)
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <BSP_LPS22HB_Init+0x74>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <BSP_LPS22HB_Init+0x74>)
 80053f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 80053fc:	2308      	movs	r3, #8
 80053fe:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	4619      	mov	r1, r3
 8005406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800540a:	f000 fbf9 	bl	8005c00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800540e:	2201      	movs	r2, #1
 8005410:	2108      	movs	r1, #8
 8005412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005416:	f000 fea9 	bl	800616c <HAL_GPIO_WritePin>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 800541a:	f7ff faa5 	bl	8004968 <BSP_SPI2_Init>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <BSP_LPS22HB_Init+0x68>
  {
    ret = BSP_ERROR_NONE;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8005428:	69fb      	ldr	r3, [r7, #28]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40021000 	.word	0x40021000

08005438 <BSP_LPS22HB_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_DeInit(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800543e:	f06f 0305 	mvn.w	r3, #5
 8005442:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 8005444:	f7ff fab4 	bl	80049b0 <BSP_SPI2_DeInit>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <BSP_LPS22HB_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8005452:	687b      	ldr	r3, [r7, #4]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <BSP_LPS22HB_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60ba      	str	r2, [r7, #8]
 8005464:	461a      	mov	r2, r3
 8005466:	4603      	mov	r3, r0
 8005468:	81fb      	strh	r3, [r7, #14]
 800546a:	460b      	mov	r3, r1
 800546c:	81bb      	strh	r3, [r7, #12]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8005476:	89bb      	ldrh	r3, [r7, #12]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 800547c:	2200      	movs	r2, #0
 800547e:	2108      	movs	r1, #8
 8005480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005484:	f000 fe72 	bl	800616c <HAL_GPIO_WritePin>

  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 8005488:	f107 0313 	add.w	r3, r7, #19
 800548c:	2101      	movs	r1, #1
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff faa6 	bl	80049e0 <BSP_SPI2_Send>
 8005494:	4603      	mov	r3, r0
 8005496:	2b01      	cmp	r3, #1
 8005498:	d002      	beq.n	80054a0 <BSP_LPS22HB_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800549a:	f06f 0305 	mvn.w	r3, #5
 800549e:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI2_Send(pdata, len) != len)
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	4619      	mov	r1, r3
 80054a4:	68b8      	ldr	r0, [r7, #8]
 80054a6:	f7ff fa9b 	bl	80049e0 <BSP_SPI2_Send>
 80054aa:	4602      	mov	r2, r0
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d002      	beq.n	80054b8 <BSP_LPS22HB_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80054b2:	f06f 0305 	mvn.w	r3, #5
 80054b6:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80054b8:	2201      	movs	r2, #1
 80054ba:	2108      	movs	r1, #8
 80054bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054c0:	f000 fe54 	bl	800616c <HAL_GPIO_WritePin>

  return ret;
 80054c4:	697b      	ldr	r3, [r7, #20]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <BSP_LPS22HB_ReadReg>:
* @param  pdata the pointer to the data to be read
* @param  len the length of the data to be read
* @retval BSP status
*/
static int32_t BSP_LPS22HB_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60ba      	str	r2, [r7, #8]
 80054d8:	461a      	mov	r2, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	81fb      	strh	r3, [r7, #14]
 80054de:	460b      	mov	r3, r1
 80054e0:	81bb      	strh	r3, [r7, #12]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 80054ea:	89bb      	ldrh	r3, [r7, #12]
 80054ec:	74fb      	strb	r3, [r7, #19]
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
 80054ee:	2200      	movs	r2, #0
 80054f0:	2108      	movs	r1, #8
 80054f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f6:	f000 fe39 	bl	800616c <HAL_GPIO_WritePin>
  LPS22HB_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005500:	b2db      	uxtb	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	481d      	ldr	r0, [pc, #116]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 8005506:	f000 f8cd 	bl	80056a4 <LPS22HB_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005518:	601a      	str	r2, [r3, #0]
  SPI_1LINE_RX(&hbusspi2);  
 800551a:	4b18      	ldr	r3, [pc, #96]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b16      	ldr	r3, [pc, #88]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005528:	601a      	str	r2, [r3, #0]
  
  if (len > 1)
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d906      	bls.n	800553e <BSP_LPS22HB_ReadReg+0x6e>
  {
    LPS22HB_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	461a      	mov	r2, r3
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	4811      	ldr	r0, [pc, #68]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 8005538:	f000 f822 	bl	8005580 <LPS22HB_SPI_Read_nBytes>
 800553c:	e003      	b.n	8005546 <BSP_LPS22HB_ReadReg+0x76>
  }
  else
  {
    LPS22HB_SPI_Read(&hbusspi2, (pdata));
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	480e      	ldr	r0, [pc, #56]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 8005542:	f000 f874 	bl	800562e <LPS22HB_SPI_Read>
  }
  
  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);  
 8005546:	2201      	movs	r2, #1
 8005548:	2108      	movs	r1, #8
 800554a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800554e:	f000 fe0d 	bl	800616c <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005560:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <BSP_LPS22HB_ReadReg+0xac>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005570:	601a      	str	r2, [r3, #0]
  
  return ret;
 8005572:	697b      	ldr	r3, [r7, #20]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	200026e8 	.word	0x200026e8

08005580 <LPS22HB_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LPS22HB_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800558e:	b672      	cpsid	i
}
 8005590:	bf00      	nop
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]
  
  /* Transfer loop */
  while (nBytesToRead > 1U)
 80055a2:	e013      	b.n	80055cc <LPS22HB_SPI_Read_nBytes+0x4c>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <LPS22HB_SPI_Read_nBytes+0x4c>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	701a      	strb	r2, [r3, #0]
      val += sizeof(uint8_t);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60bb      	str	r3, [r7, #8]
      nBytesToRead--;
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	80fb      	strh	r3, [r7, #6]
  while (nBytesToRead > 1U)
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d8e8      	bhi.n	80055a4 <LPS22HB_SPI_Read_nBytes+0x24>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80055d2:	f3bf 8f4f 	dsb	sy
}
 80055d6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80055d8:	f3bf 8f4f 	dsb	sy
}
 80055dc:	bf00      	nop
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */
  
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80055ee:	b662      	cpsie	i
}
 80055f0:	bf00      	nop
  
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80055f2:	bf00      	nop
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d1f8      	bne.n	80055f4 <LPS22HB_SPI_Read_nBytes+0x74>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005610:	bf00      	nop
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	2b80      	cmp	r3, #128	; 0x80
 800561e:	d0f8      	beq.n	8005612 <LPS22HB_SPI_Read_nBytes+0x92>
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <LPS22HB_SPI_Read>:
* @param  command: command id.
* @param  uint8_t val: value.
* @retval None
*/
void LPS22HB_SPI_Read(SPI_HandleTypeDef* xSpiHandle, uint8_t *val)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005638:	b672      	cpsid	i
}
 800563a:	bf00      	nop
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
  
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800564a:	601a      	str	r2, [r3, #0]
  __asm("dsb\n");
 800564c:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005650:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005662:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005664:	b662      	cpsie	i
}
 8005666:	bf00      	nop
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005668:	bf00      	nop
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d1f8      	bne.n	800566a <LPS22HB_SPI_Read+0x3c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005686:	bf00      	nop
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b80      	cmp	r3, #128	; 0x80
 8005694:	d0f8      	beq.n	8005688 <LPS22HB_SPI_Read+0x5a>
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <LPS22HB_SPI_Write>:
* @param  command : command id.
* @param  val : value.
* @retval None
*/
void LPS22HB_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80056b0:	bf00      	nop
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d1f8      	bne.n	80056b2 <LPS22HB_SPI_Write+0xe>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	701a      	strb	r2, [r3, #0]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 80056ca:	bf00      	nop
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f8      	bne.n	80056cc <LPS22HB_SPI_Write+0x28>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80056da:	bf00      	nop
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d0f8      	beq.n	80056dc <LPS22HB_SPI_Write+0x38>
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005702:	2003      	movs	r0, #3
 8005704:	f000 f972 	bl	80059ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005708:	200f      	movs	r0, #15
 800570a:	f000 f815 	bl	8005738 <HAL_InitTick>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	71fb      	strb	r3, [r7, #7]
 8005718:	e001      	b.n	800571e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800571a:	f000 f805 	bl	8005728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800571e:	79fb      	ldrb	r3, [r7, #7]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005744:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_InitTick+0x6c>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d023      	beq.n	8005794 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800574c:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <HAL_InitTick+0x70>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_InitTick+0x6c>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4619      	mov	r1, r3
 8005756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800575a:	fbb3 f3f1 	udiv	r3, r3, r1
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f985 	bl	8005a72 <HAL_SYSTICK_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10f      	bne.n	800578e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d809      	bhi.n	8005788 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005774:	2200      	movs	r2, #0
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577c:	f000 f941 	bl	8005a02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <HAL_InitTick+0x74>)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e007      	b.n	8005798 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	e004      	b.n	8005798 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e001      	b.n	8005798 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000098 	.word	0x20000098
 80057a8:	20000004 	.word	0x20000004
 80057ac:	20000094 	.word	0x20000094

080057b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_IncTick+0x20>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_IncTick+0x24>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <HAL_IncTick+0x24>)
 80057c2:	6013      	str	r3, [r2, #0]
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000098 	.word	0x20000098
 80057d4:	200027b8 	.word	0x200027b8

080057d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  return uwTick;
 80057dc:	4b03      	ldr	r3, [pc, #12]	; (80057ec <HAL_GetTick+0x14>)
 80057de:	681b      	ldr	r3, [r3, #0]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	200027b8 	.word	0x200027b8

080057f0 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 80057f4:	4b02      	ldr	r3, [pc, #8]	; (8005800 <HAL_GetHalVersion+0x10>)
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	010d0000 	.word	0x010d0000

08005804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <__NVIC_SetPriorityGrouping+0x44>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005820:	4013      	ands	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800582c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005836:	4a04      	ldr	r2, [pc, #16]	; (8005848 <__NVIC_SetPriorityGrouping+0x44>)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	60d3      	str	r3, [r2, #12]
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	e000ed00 	.word	0xe000ed00

0800584c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <__NVIC_GetPriorityGrouping+0x18>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	0a1b      	lsrs	r3, r3, #8
 8005856:	f003 0307 	and.w	r3, r3, #7
}
 800585a:	4618      	mov	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005876:	2b00      	cmp	r3, #0
 8005878:	db0b      	blt.n	8005892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	f003 021f 	and.w	r2, r3, #31
 8005880:	4907      	ldr	r1, [pc, #28]	; (80058a0 <__NVIC_EnableIRQ+0x38>)
 8005882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	2001      	movs	r0, #1
 800588a:	fa00 f202 	lsl.w	r2, r0, r2
 800588e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000e100 	.word	0xe000e100

080058a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	db12      	blt.n	80058dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	f003 021f 	and.w	r2, r3, #31
 80058bc:	490a      	ldr	r1, [pc, #40]	; (80058e8 <__NVIC_DisableIRQ+0x44>)
 80058be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2001      	movs	r0, #1
 80058c6:	fa00 f202 	lsl.w	r2, r0, r2
 80058ca:	3320      	adds	r3, #32
 80058cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80058d0:	f3bf 8f4f 	dsb	sy
}
 80058d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80058d6:	f3bf 8f6f 	isb	sy
}
 80058da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	e000e100 	.word	0xe000e100

080058ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db0a      	blt.n	8005916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <__NVIC_SetPriority+0x4c>)
 8005906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	440b      	add	r3, r1
 8005910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005914:	e00a      	b.n	800592c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4908      	ldr	r1, [pc, #32]	; (800593c <__NVIC_SetPriority+0x50>)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3b04      	subs	r3, #4
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	440b      	add	r3, r1
 800592a:	761a      	strb	r2, [r3, #24]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000e100 	.word	0xe000e100
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f1c3 0307 	rsb	r3, r3, #7
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf28      	it	cs
 800595e:	2304      	movcs	r3, #4
 8005960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3304      	adds	r3, #4
 8005966:	2b06      	cmp	r3, #6
 8005968:	d902      	bls.n	8005970 <NVIC_EncodePriority+0x30>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3b03      	subs	r3, #3
 800596e:	e000      	b.n	8005972 <NVIC_EncodePriority+0x32>
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43da      	mvns	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	401a      	ands	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	43d9      	mvns	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005998:	4313      	orrs	r3, r2
         );
}
 800599a:	4618      	mov	r0, r3
 800599c:	3724      	adds	r7, #36	; 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b8:	d301      	bcc.n	80059be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059ba:	2301      	movs	r3, #1
 80059bc:	e00f      	b.n	80059de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <SysTick_Config+0x40>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059c6:	210f      	movs	r1, #15
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059cc:	f7ff ff8e 	bl	80058ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <SysTick_Config+0x40>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <SysTick_Config+0x40>)
 80059d8:	2207      	movs	r2, #7
 80059da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	e000e010 	.word	0xe000e010

080059ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff05 	bl	8005804 <__NVIC_SetPriorityGrouping>
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a14:	f7ff ff1a 	bl	800584c <__NVIC_GetPriorityGrouping>
 8005a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	6978      	ldr	r0, [r7, #20]
 8005a20:	f7ff ff8e 	bl	8005940 <NVIC_EncodePriority>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff ff5d 	bl	80058ec <__NVIC_SetPriority>
}
 8005a32:	bf00      	nop
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	4603      	mov	r3, r0
 8005a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff ff0d 	bl	8005868 <__NVIC_EnableIRQ>
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff ff1d 	bl	80058a4 <__NVIC_DisableIRQ>
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff ff94 	bl	80059a8 <SysTick_Config>
 8005a80:	4603      	mov	r3, r0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005a8e:	f000 f802 	bl	8005a96 <HAL_SYSTICK_Callback>
}
 8005a92:	bf00      	nop
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d005      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	e029      	b.n	8005b1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 020e 	bic.w	r2, r2, #14
 8005ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aec:	f003 021c 	and.w	r2, r3, #28
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f202 	lsl.w	r2, r1, r2
 8005afa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
    }
  }
  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b34:	b2db      	uxtb	r3, r3
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	605a      	str	r2, [r3, #4]
      break;
 8005b60:	e002      	b.n	8005b68 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	75fb      	strb	r3, [r7, #23]
      break;
 8005b66:	bf00      	nop
  }

  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e003      	b.n	8005b92 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005b90:	2300      	movs	r3, #0
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <HAL_EXTI_IRQHandler+0x5c>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4798      	blx	r3
    }
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40010414 	.word	0x40010414

08005c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c0e:	e17f      	b.n	8005f10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	2101      	movs	r1, #1
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8171 	beq.w	8005f0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d00b      	beq.n	8005c48 <HAL_GPIO_Init+0x48>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d007      	beq.n	8005c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c3c:	2b11      	cmp	r3, #17
 8005c3e:	d003      	beq.n	8005c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b12      	cmp	r3, #18
 8005c46:	d130      	bne.n	8005caa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	2203      	movs	r2, #3
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c7e:	2201      	movs	r2, #1
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43db      	mvns	r3, r3
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	f003 0201 	and.w	r2, r3, #1
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d118      	bne.n	8005ce8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	08db      	lsrs	r3, r3, #3
 8005cd2:	f003 0201 	and.w	r2, r3, #1
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d003      	beq.n	8005d28 <HAL_GPIO_Init+0x128>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b12      	cmp	r3, #18
 8005d26:	d123      	bne.n	8005d70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	08da      	lsrs	r2, r3, #3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3208      	adds	r2, #8
 8005d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	220f      	movs	r2, #15
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	08da      	lsrs	r2, r3, #3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3208      	adds	r2, #8
 8005d6a:	6939      	ldr	r1, [r7, #16]
 8005d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4013      	ands	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0203 	and.w	r2, r3, #3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80ac 	beq.w	8005f0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db2:	4b5f      	ldr	r3, [pc, #380]	; (8005f30 <HAL_GPIO_Init+0x330>)
 8005db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db6:	4a5e      	ldr	r2, [pc, #376]	; (8005f30 <HAL_GPIO_Init+0x330>)
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8005dbe:	4b5c      	ldr	r3, [pc, #368]	; (8005f30 <HAL_GPIO_Init+0x330>)
 8005dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005dca:	4a5a      	ldr	r2, [pc, #360]	; (8005f34 <HAL_GPIO_Init+0x334>)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	220f      	movs	r2, #15
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4013      	ands	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005df4:	d025      	beq.n	8005e42 <HAL_GPIO_Init+0x242>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a4f      	ldr	r2, [pc, #316]	; (8005f38 <HAL_GPIO_Init+0x338>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01f      	beq.n	8005e3e <HAL_GPIO_Init+0x23e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a4e      	ldr	r2, [pc, #312]	; (8005f3c <HAL_GPIO_Init+0x33c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d019      	beq.n	8005e3a <HAL_GPIO_Init+0x23a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a4d      	ldr	r2, [pc, #308]	; (8005f40 <HAL_GPIO_Init+0x340>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <HAL_GPIO_Init+0x236>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a4c      	ldr	r2, [pc, #304]	; (8005f44 <HAL_GPIO_Init+0x344>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00d      	beq.n	8005e32 <HAL_GPIO_Init+0x232>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a4b      	ldr	r2, [pc, #300]	; (8005f48 <HAL_GPIO_Init+0x348>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d007      	beq.n	8005e2e <HAL_GPIO_Init+0x22e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a4a      	ldr	r2, [pc, #296]	; (8005f4c <HAL_GPIO_Init+0x34c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d101      	bne.n	8005e2a <HAL_GPIO_Init+0x22a>
 8005e26:	2306      	movs	r3, #6
 8005e28:	e00c      	b.n	8005e44 <HAL_GPIO_Init+0x244>
 8005e2a:	2307      	movs	r3, #7
 8005e2c:	e00a      	b.n	8005e44 <HAL_GPIO_Init+0x244>
 8005e2e:	2305      	movs	r3, #5
 8005e30:	e008      	b.n	8005e44 <HAL_GPIO_Init+0x244>
 8005e32:	2304      	movs	r3, #4
 8005e34:	e006      	b.n	8005e44 <HAL_GPIO_Init+0x244>
 8005e36:	2303      	movs	r3, #3
 8005e38:	e004      	b.n	8005e44 <HAL_GPIO_Init+0x244>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e002      	b.n	8005e44 <HAL_GPIO_Init+0x244>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <HAL_GPIO_Init+0x244>
 8005e42:	2300      	movs	r3, #0
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	f002 0203 	and.w	r2, r2, #3
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	4093      	lsls	r3, r2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e54:	4937      	ldr	r1, [pc, #220]	; (8005f34 <HAL_GPIO_Init+0x334>)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	089b      	lsrs	r3, r3, #2
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e62:	4b3b      	ldr	r3, [pc, #236]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e86:	4a32      	ldr	r2, [pc, #200]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005e8c:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005eb6:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ee0:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4013      	ands	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f04:	4a12      	ldr	r2, [pc, #72]	; (8005f50 <HAL_GPIO_Init+0x350>)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f47f ae78 	bne.w	8005c10 <HAL_GPIO_Init+0x10>
  }
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40010000 	.word	0x40010000
 8005f38:	48000400 	.word	0x48000400
 8005f3c:	48000800 	.word	0x48000800
 8005f40:	48000c00 	.word	0x48000c00
 8005f44:	48001000 	.word	0x48001000
 8005f48:	48001400 	.word	0x48001400
 8005f4c:	48001800 	.word	0x48001800
 8005f50:	40010400 	.word	0x40010400

08005f54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005f62:	e0cd      	b.n	8006100 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005f64:	2201      	movs	r2, #1
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 80c0 	beq.w	80060fa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005f7a:	4a68      	ldr	r2, [pc, #416]	; (800611c <HAL_GPIO_DeInit+0x1c8>)
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	089b      	lsrs	r3, r3, #2
 8005f80:	3302      	adds	r3, #2
 8005f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f86:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	220f      	movs	r2, #15
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fa2:	d025      	beq.n	8005ff0 <HAL_GPIO_DeInit+0x9c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a5e      	ldr	r2, [pc, #376]	; (8006120 <HAL_GPIO_DeInit+0x1cc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d01f      	beq.n	8005fec <HAL_GPIO_DeInit+0x98>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a5d      	ldr	r2, [pc, #372]	; (8006124 <HAL_GPIO_DeInit+0x1d0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d019      	beq.n	8005fe8 <HAL_GPIO_DeInit+0x94>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a5c      	ldr	r2, [pc, #368]	; (8006128 <HAL_GPIO_DeInit+0x1d4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_GPIO_DeInit+0x90>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a5b      	ldr	r2, [pc, #364]	; (800612c <HAL_GPIO_DeInit+0x1d8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00d      	beq.n	8005fe0 <HAL_GPIO_DeInit+0x8c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a5a      	ldr	r2, [pc, #360]	; (8006130 <HAL_GPIO_DeInit+0x1dc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <HAL_GPIO_DeInit+0x88>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a59      	ldr	r2, [pc, #356]	; (8006134 <HAL_GPIO_DeInit+0x1e0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d101      	bne.n	8005fd8 <HAL_GPIO_DeInit+0x84>
 8005fd4:	2306      	movs	r3, #6
 8005fd6:	e00c      	b.n	8005ff2 <HAL_GPIO_DeInit+0x9e>
 8005fd8:	2307      	movs	r3, #7
 8005fda:	e00a      	b.n	8005ff2 <HAL_GPIO_DeInit+0x9e>
 8005fdc:	2305      	movs	r3, #5
 8005fde:	e008      	b.n	8005ff2 <HAL_GPIO_DeInit+0x9e>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	e006      	b.n	8005ff2 <HAL_GPIO_DeInit+0x9e>
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e004      	b.n	8005ff2 <HAL_GPIO_DeInit+0x9e>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e002      	b.n	8005ff2 <HAL_GPIO_DeInit+0x9e>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_GPIO_DeInit+0x9e>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	f002 0203 	and.w	r2, r2, #3
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	4093      	lsls	r3, r2
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d132      	bne.n	8006068 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006002:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	43db      	mvns	r3, r3
 800600a:	494b      	ldr	r1, [pc, #300]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 800600c:	4013      	ands	r3, r2
 800600e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006010:	4b49      	ldr	r3, [pc, #292]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	43db      	mvns	r3, r3
 8006018:	4947      	ldr	r1, [pc, #284]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 800601a:	4013      	ands	r3, r2
 800601c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800601e:	4b46      	ldr	r3, [pc, #280]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	43db      	mvns	r3, r3
 8006026:	4944      	ldr	r1, [pc, #272]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 8006028:	4013      	ands	r3, r2
 800602a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800602c:	4b42      	ldr	r3, [pc, #264]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	43db      	mvns	r3, r3
 8006034:	4940      	ldr	r1, [pc, #256]	; (8006138 <HAL_GPIO_DeInit+0x1e4>)
 8006036:	4013      	ands	r3, r2
 8006038:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	220f      	movs	r2, #15
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800604a:	4a34      	ldr	r2, [pc, #208]	; (800611c <HAL_GPIO_DeInit+0x1c8>)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	089b      	lsrs	r3, r3, #2
 8006050:	3302      	adds	r3, #2
 8006052:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	43da      	mvns	r2, r3
 800605a:	4830      	ldr	r0, [pc, #192]	; (800611c <HAL_GPIO_DeInit+0x1c8>)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	089b      	lsrs	r3, r3, #2
 8006060:	400a      	ands	r2, r1
 8006062:	3302      	adds	r3, #2
 8006064:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	2103      	movs	r1, #3
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	08da      	lsrs	r2, r3, #3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3208      	adds	r2, #8
 8006084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	220f      	movs	r2, #15
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	43db      	mvns	r3, r3
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	08d2      	lsrs	r2, r2, #3
 800609c:	4019      	ands	r1, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3208      	adds	r2, #8
 80060a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	2103      	movs	r1, #3
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	401a      	ands	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	2101      	movs	r1, #1
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	fa01 f303 	lsl.w	r3, r1, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	401a      	ands	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	2103      	movs	r1, #3
 80060da:	fa01 f303 	lsl.w	r3, r1, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	401a      	ands	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ea:	2101      	movs	r1, #1
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	fa01 f303 	lsl.w	r3, r1, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	401a      	ands	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	3301      	adds	r3, #1
 80060fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	f47f af2b 	bne.w	8005f64 <HAL_GPIO_DeInit+0x10>
  }
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40010000 	.word	0x40010000
 8006120:	48000400 	.word	0x48000400
 8006124:	48000800 	.word	0x48000800
 8006128:	48000c00 	.word	0x48000c00
 800612c:	48001000 	.word	0x48001000
 8006130:	48001400 	.word	0x48001400
 8006134:	48001800 	.word	0x48001800
 8006138:	40010400 	.word	0x40010400

0800613c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
 8006158:	e001      	b.n	800615e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	807b      	strh	r3, [r7, #2]
 8006178:	4613      	mov	r3, r2
 800617a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800617c:	787b      	ldrb	r3, [r7, #1]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006182:	887a      	ldrh	r2, [r7, #2]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006188:	e002      	b.n	8006190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800618a:	887a      	ldrh	r2, [r7, #2]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e081      	b.n	80062b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8a8 	bl	8006318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	e006      	b.n	8006224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d104      	bne.n	8006236 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691a      	ldr	r2, [r3, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	ea42 0103 	orr.w	r1, r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e021      	b.n	8006310 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2224      	movs	r2, #36	; 0x24
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0201 	bic.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f821 	bl	800632c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	461a      	mov	r2, r3
 800634e:	4603      	mov	r3, r0
 8006350:	817b      	strh	r3, [r7, #10]
 8006352:	460b      	mov	r3, r1
 8006354:	813b      	strh	r3, [r7, #8]
 8006356:	4613      	mov	r3, r2
 8006358:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b20      	cmp	r3, #32
 8006364:	f040 80f9 	bne.w	800655a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_I2C_Mem_Write+0x34>
 800636e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e0ed      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_I2C_Mem_Write+0x4e>
 800638a:	2302      	movs	r3, #2
 800638c:	e0e6      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006396:	f7ff fa1f 	bl	80057d8 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	2319      	movs	r3, #25
 80063a2:	2201      	movs	r2, #1
 80063a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 ffe6 	bl	800737a <I2C_WaitOnFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0d1      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2221      	movs	r2, #33	; 0x21
 80063bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2240      	movs	r2, #64	; 0x40
 80063c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a3a      	ldr	r2, [r7, #32]
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063e0:	88f8      	ldrh	r0, [r7, #6]
 80063e2:	893a      	ldrh	r2, [r7, #8]
 80063e4:	8979      	ldrh	r1, [r7, #10]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4603      	mov	r3, r0
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fb9f 	bl	8006b34 <I2C_RequestMemoryWrite>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0a9      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2bff      	cmp	r3, #255	; 0xff
 8006410:	d90e      	bls.n	8006430 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	22ff      	movs	r2, #255	; 0xff
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	b2da      	uxtb	r2, r3
 800641e:	8979      	ldrh	r1, [r7, #10]
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f001 f8c9 	bl	80075c0 <I2C_TransferConfig>
 800642e:	e00f      	b.n	8006450 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643e:	b2da      	uxtb	r2, r3
 8006440:	8979      	ldrh	r1, [r7, #10]
 8006442:	2300      	movs	r3, #0
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f001 f8b8 	bl	80075c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 ffd0 	bl	80073fa <I2C_WaitOnTXISFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e07b      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d034      	beq.n	8006508 <HAL_I2C_Mem_Write+0x1c8>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d130      	bne.n	8006508 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2200      	movs	r2, #0
 80064ae:	2180      	movs	r1, #128	; 0x80
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 ff62 	bl	800737a <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e04d      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2bff      	cmp	r3, #255	; 0xff
 80064c8:	d90e      	bls.n	80064e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	8979      	ldrh	r1, [r7, #10]
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f001 f86d 	bl	80075c0 <I2C_TransferConfig>
 80064e6:	e00f      	b.n	8006508 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	8979      	ldrh	r1, [r7, #10]
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f001 f85c 	bl	80075c0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d19e      	bne.n	8006450 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 ffaf 	bl	800747a <I2C_WaitOnSTOPFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e01a      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2220      	movs	r2, #32
 800652c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6859      	ldr	r1, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <HAL_I2C_Mem_Write+0x224>)
 800653a:	400b      	ands	r3, r1
 800653c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	fe00e800 	.word	0xfe00e800

08006568 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	4608      	mov	r0, r1
 8006572:	4611      	mov	r1, r2
 8006574:	461a      	mov	r2, r3
 8006576:	4603      	mov	r3, r0
 8006578:	817b      	strh	r3, [r7, #10]
 800657a:	460b      	mov	r3, r1
 800657c:	813b      	strh	r3, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b20      	cmp	r3, #32
 800658c:	f040 80fd 	bne.w	800678a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_I2C_Mem_Read+0x34>
 8006596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0f1      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_I2C_Mem_Read+0x4e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0ea      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065be:	f7ff f90b 	bl	80057d8 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	2319      	movs	r3, #25
 80065ca:	2201      	movs	r2, #1
 80065cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fed2 	bl	800737a <I2C_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0d5      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2222      	movs	r2, #34	; 0x22
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2240      	movs	r2, #64	; 0x40
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006608:	88f8      	ldrh	r0, [r7, #6]
 800660a:	893a      	ldrh	r2, [r7, #8]
 800660c:	8979      	ldrh	r1, [r7, #10]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4603      	mov	r3, r0
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fadf 	bl	8006bdc <I2C_RequestMemoryRead>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e0ad      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2bff      	cmp	r3, #255	; 0xff
 8006638:	d90e      	bls.n	8006658 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006644:	b2da      	uxtb	r2, r3
 8006646:	8979      	ldrh	r1, [r7, #10]
 8006648:	4b52      	ldr	r3, [pc, #328]	; (8006794 <HAL_I2C_Mem_Read+0x22c>)
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 ffb5 	bl	80075c0 <I2C_TransferConfig>
 8006656:	e00f      	b.n	8006678 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	b2da      	uxtb	r2, r3
 8006668:	8979      	ldrh	r1, [r7, #10]
 800666a:	4b4a      	ldr	r3, [pc, #296]	; (8006794 <HAL_I2C_Mem_Read+0x22c>)
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 ffa4 	bl	80075c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	2200      	movs	r2, #0
 8006680:	2104      	movs	r1, #4
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fe79 	bl	800737a <I2C_WaitOnFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e07c      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d034      	beq.n	8006738 <HAL_I2C_Mem_Read+0x1d0>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d130      	bne.n	8006738 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	2200      	movs	r2, #0
 80066de:	2180      	movs	r1, #128	; 0x80
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fe4a 	bl	800737a <I2C_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e04d      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2bff      	cmp	r3, #255	; 0xff
 80066f8:	d90e      	bls.n	8006718 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	22ff      	movs	r2, #255	; 0xff
 80066fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	b2da      	uxtb	r2, r3
 8006706:	8979      	ldrh	r1, [r7, #10]
 8006708:	2300      	movs	r3, #0
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 ff55 	bl	80075c0 <I2C_TransferConfig>
 8006716:	e00f      	b.n	8006738 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	b2da      	uxtb	r2, r3
 8006728:	8979      	ldrh	r1, [r7, #10]
 800672a:	2300      	movs	r3, #0
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 ff44 	bl	80075c0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d19a      	bne.n	8006678 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fe97 	bl	800747a <I2C_WaitOnSTOPFlagUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e01a      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2220      	movs	r2, #32
 800675c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <HAL_I2C_Mem_Read+0x230>)
 800676a:	400b      	ands	r3, r1
 800676c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	e000      	b.n	800678c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800678a:	2302      	movs	r3, #2
  }
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	80002400 	.word	0x80002400
 8006798:	fe00e800 	.word	0xfe00e800

0800679c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
  }
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <HAL_I2C_ER_IRQHandler+0x46>
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	09db      	lsrs	r3, r3, #7
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006804:	f043 0201 	orr.w	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006814:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	0a9b      	lsrs	r3, r3, #10
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <HAL_I2C_ER_IRQHandler+0x74>
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	09db      	lsrs	r3, r3, #7
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	f043 0208 	orr.w	r2, r3, #8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006842:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	0a5b      	lsrs	r3, r3, #9
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <HAL_I2C_ER_IRQHandler+0xa2>
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	09db      	lsrs	r3, r3, #7
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	f043 0202 	orr.w	r2, r3, #2
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006870:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 030b 	and.w	r3, r3, #11
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fc3f 	bl	8007108 <I2C_ITError>
  }
}
 800688a:	bf00      	nop
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
 80068c6:	4613      	mov	r3, r2
 80068c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006920:	b2db      	uxtb	r3, r3
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <I2C_Slave_ISR_IT+0x24>
 800694e:	2302      	movs	r3, #2
 8006950:	e0ec      	b.n	8006b2c <I2C_Slave_ISR_IT+0x1fe>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <I2C_Slave_ISR_IT+0x4c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006972:	6939      	ldr	r1, [r7, #16]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fa67 	bl	8006e48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04d      	beq.n	8006a22 <I2C_Slave_ISR_IT+0xf4>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d047      	beq.n	8006a22 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d128      	bne.n	80069ee <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b28      	cmp	r3, #40	; 0x28
 80069a6:	d108      	bne.n	80069ba <I2C_Slave_ISR_IT+0x8c>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ae:	d104      	bne.n	80069ba <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80069b0:	6939      	ldr	r1, [r7, #16]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 fb52 	bl	800705c <I2C_ITListenCplt>
 80069b8:	e032      	b.n	8006a20 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b29      	cmp	r3, #41	; 0x29
 80069c4:	d10e      	bne.n	80069e4 <I2C_Slave_ISR_IT+0xb6>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069cc:	d00a      	beq.n	80069e4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2210      	movs	r2, #16
 80069d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fc8d 	bl	80072f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f9d5 	bl	8006d8c <I2C_ITSlaveSeqCplt>
 80069e2:	e01d      	b.n	8006a20 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2210      	movs	r2, #16
 80069ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80069ec:	e096      	b.n	8006b1c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2210      	movs	r2, #16
 80069f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	f043 0204 	orr.w	r2, r3, #4
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <I2C_Slave_ISR_IT+0xe4>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a0e:	f040 8085 	bne.w	8006b1c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a16:	4619      	mov	r1, r3
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 fb75 	bl	8007108 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a1e:	e07d      	b.n	8006b1c <I2C_Slave_ISR_IT+0x1ee>
 8006a20:	e07c      	b.n	8006b1c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	089b      	lsrs	r3, r3, #2
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d030      	beq.n	8006a90 <I2C_Slave_ISR_IT+0x162>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	089b      	lsrs	r3, r3, #2
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d02a      	beq.n	8006a90 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d018      	beq.n	8006a76 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d14f      	bne.n	8006b20 <I2C_Slave_ISR_IT+0x1f2>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a86:	d04b      	beq.n	8006b20 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f97f 	bl	8006d8c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006a8e:	e047      	b.n	8006b20 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	08db      	lsrs	r3, r3, #3
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	08db      	lsrs	r3, r3, #3
 8006aa0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006aa8:	6939      	ldr	r1, [r7, #16]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f8ea 	bl	8006c84 <I2C_ITAddrCplt>
 8006ab0:	e037      	b.n	8006b22 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d031      	beq.n	8006b22 <I2C_Slave_ISR_IT+0x1f4>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d02b      	beq.n	8006b22 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d018      	beq.n	8006b06 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b04:	e00d      	b.n	8006b22 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b0c:	d002      	beq.n	8006b14 <I2C_Slave_ISR_IT+0x1e6>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f939 	bl	8006d8c <I2C_ITSlaveSeqCplt>
 8006b1a:	e002      	b.n	8006b22 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006b20:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	817b      	strh	r3, [r7, #10]
 8006b46:	460b      	mov	r3, r1
 8006b48:	813b      	strh	r3, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	8979      	ldrh	r1, [r7, #10]
 8006b54:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <I2C_RequestMemoryWrite+0xa4>)
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fd2f 	bl	80075c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	69b9      	ldr	r1, [r7, #24]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fc47 	bl	80073fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e02c      	b.n	8006bd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d105      	bne.n	8006b88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b7c:	893b      	ldrh	r3, [r7, #8]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	629a      	str	r2, [r3, #40]	; 0x28
 8006b86:	e015      	b.n	8006bb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b88:	893b      	ldrh	r3, [r7, #8]
 8006b8a:	0a1b      	lsrs	r3, r3, #8
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fc2d 	bl	80073fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e012      	b.n	8006bd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006baa:	893b      	ldrh	r3, [r7, #8]
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fbdb 	bl	800737a <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	80002000 	.word	0x80002000

08006bdc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	4608      	mov	r0, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	461a      	mov	r2, r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	817b      	strh	r3, [r7, #10]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	813b      	strh	r3, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	8979      	ldrh	r1, [r7, #10]
 8006bfc:	4b20      	ldr	r3, [pc, #128]	; (8006c80 <I2C_RequestMemoryRead+0xa4>)
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	2300      	movs	r3, #0
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fcdc 	bl	80075c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	69b9      	ldr	r1, [r7, #24]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fbf4 	bl	80073fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e02c      	b.n	8006c76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c22:	893b      	ldrh	r3, [r7, #8]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c2c:	e015      	b.n	8006c5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c2e:	893b      	ldrh	r3, [r7, #8]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	69b9      	ldr	r1, [r7, #24]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fbda 	bl	80073fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e012      	b.n	8006c76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c50:	893b      	ldrh	r3, [r7, #8]
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2140      	movs	r1, #64	; 0x40
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fb88 	bl	800737a <I2C_WaitOnFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	80002000 	.word	0x80002000

08006c84 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c9a:	2b28      	cmp	r3, #40	; 0x28
 8006c9c:	d16a      	bne.n	8006d74 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	0c1b      	lsrs	r3, r3, #16
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	0c1b      	lsrs	r3, r3, #16
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006cbc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006cd8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d138      	bne.n	8006d54 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006ce2:	897b      	ldrh	r3, [r7, #10]
 8006ce4:	09db      	lsrs	r3, r3, #7
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	89bb      	ldrh	r3, [r7, #12]
 8006cea:	4053      	eors	r3, r2
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f003 0306 	and.w	r3, r3, #6
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d11c      	bne.n	8006d30 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006cf6:	897b      	ldrh	r3, [r7, #10]
 8006cf8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d13b      	bne.n	8006d84 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2208      	movs	r2, #8
 8006d18:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d22:	89ba      	ldrh	r2, [r7, #12]
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fdc6 	bl	80068ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d2e:	e029      	b.n	8006d84 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006d30:	893b      	ldrh	r3, [r7, #8]
 8006d32:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fc6f 	bl	800761c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d46:	89ba      	ldrh	r2, [r7, #12]
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fdb4 	bl	80068ba <HAL_I2C_AddrCallback>
}
 8006d52:	e017      	b.n	8006d84 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc5f 	bl	800761c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d66:	89ba      	ldrh	r2, [r7, #12]
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fda4 	bl	80068ba <HAL_I2C_AddrCallback>
}
 8006d72:	e007      	b.n	8006d84 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	0b9b      	lsrs	r3, r3, #14
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e00d      	b.n	8006dde <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	0bdb      	lsrs	r3, r3, #15
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ddc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b29      	cmp	r3, #41	; 0x29
 8006de8:	d112      	bne.n	8006e10 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2228      	movs	r2, #40	; 0x28
 8006dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2221      	movs	r2, #33	; 0x21
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006df8:	2101      	movs	r1, #1
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fc0e 	bl	800761c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff fd42 	bl	8006892 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e0e:	e017      	b.n	8006e40 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b2a      	cmp	r3, #42	; 0x2a
 8006e1a:	d111      	bne.n	8006e40 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2228      	movs	r2, #40	; 0x28
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2222      	movs	r2, #34	; 0x22
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e2a:	2102      	movs	r1, #2
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fbf5 	bl	800761c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff fd33 	bl	80068a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e64:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b21      	cmp	r3, #33	; 0x21
 8006e72:	d002      	beq.n	8006e7a <I2C_ITSlaveCplt+0x32>
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b29      	cmp	r3, #41	; 0x29
 8006e78:	d108      	bne.n	8006e8c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006e7a:	f248 0101 	movw	r1, #32769	; 0x8001
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fbcc 	bl	800761c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2221      	movs	r2, #33	; 0x21
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
 8006e8a:	e00d      	b.n	8006ea8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b22      	cmp	r3, #34	; 0x22
 8006e90:	d002      	beq.n	8006e98 <I2C_ITSlaveCplt+0x50>
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b2a      	cmp	r3, #42	; 0x2a
 8006e96:	d107      	bne.n	8006ea8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006e98:	f248 0102 	movw	r1, #32770	; 0x8002
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fbbd 	bl	800761c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2222      	movs	r2, #34	; 0x22
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b64      	ldr	r3, [pc, #400]	; (8007054 <I2C_ITSlaveCplt+0x20c>)
 8006ec4:	400b      	ands	r3, r1
 8006ec6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa14 	bl	80072f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	0b9b      	lsrs	r3, r3, #14
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d013      	beq.n	8006f02 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ee8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d020      	beq.n	8006f34 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f00:	e018      	b.n	8006f34 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	0bdb      	lsrs	r3, r3, #15
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d012      	beq.n	8006f34 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d006      	beq.n	8006f34 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	089b      	lsrs	r3, r3, #2
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d020      	beq.n	8006f82 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 0304 	bic.w	r3, r3, #4
 8006f46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00c      	beq.n	8006f82 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f90:	f043 0204 	orr.w	r2, r3, #4
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d010      	beq.n	8006fd0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8a7 	bl	8007108 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b28      	cmp	r3, #40	; 0x28
 8006fc4:	d141      	bne.n	800704a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006fc6:	6979      	ldr	r1, [r7, #20]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f847 	bl	800705c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fce:	e03c      	b.n	800704a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fd8:	d014      	beq.n	8007004 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fed6 	bl	8006d8c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <I2C_ITSlaveCplt+0x210>)
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fc6a 	bl	80068d6 <HAL_I2C_ListenCpltCallback>
}
 8007002:	e022      	b.n	800704a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b22      	cmp	r3, #34	; 0x22
 800700e:	d10e      	bne.n	800702e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fc3d 	bl	80068a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800702c:	e00d      	b.n	800704a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fc24 	bl	8006892 <HAL_I2C_SlaveTxCpltCallback>
}
 800704a:	bf00      	nop
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	fe00e800 	.word	0xfe00e800
 8007058:	ffff0000 	.word	0xffff0000

0800705c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a26      	ldr	r2, [pc, #152]	; (8007104 <I2C_ITListenCplt+0xa8>)
 800706a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	089b      	lsrs	r3, r3, #2
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d022      	beq.n	80070da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d012      	beq.n	80070da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d2:	f043 0204 	orr.w	r2, r3, #4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070da:	f248 0103 	movw	r1, #32771	; 0x8003
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa9c 	bl	800761c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2210      	movs	r2, #16
 80070ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fbee 	bl	80068d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	ffff0000 	.word	0xffff0000

08007108 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a5d      	ldr	r2, [pc, #372]	; (800729c <I2C_ITError+0x194>)
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b28      	cmp	r3, #40	; 0x28
 800713e:	d005      	beq.n	800714c <I2C_ITError+0x44>
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b29      	cmp	r3, #41	; 0x29
 8007144:	d002      	beq.n	800714c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b2a      	cmp	r3, #42	; 0x2a
 800714a:	d10b      	bne.n	8007164 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800714c:	2103      	movs	r1, #3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa64 	bl	800761c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2228      	movs	r2, #40	; 0x28
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a50      	ldr	r2, [pc, #320]	; (80072a0 <I2C_ITError+0x198>)
 8007160:	635a      	str	r2, [r3, #52]	; 0x34
 8007162:	e011      	b.n	8007188 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007164:	f248 0103 	movw	r1, #32771	; 0x8003
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa57 	bl	800761c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b60      	cmp	r3, #96	; 0x60
 8007178:	d003      	beq.n	8007182 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2220      	movs	r2, #32
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d039      	beq.n	800720a <I2C_ITError+0x102>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b11      	cmp	r3, #17
 800719a:	d002      	beq.n	80071a2 <I2C_ITError+0x9a>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b21      	cmp	r3, #33	; 0x21
 80071a0:	d133      	bne.n	800720a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b0:	d107      	bne.n	80071c2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fcad 	bl	8005b26 <HAL_DMA_GetState>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d017      	beq.n	8007202 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	4a33      	ldr	r2, [pc, #204]	; (80072a4 <I2C_ITError+0x19c>)
 80071d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fc5c 	bl	8005aa4 <HAL_DMA_Abort_IT>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04d      	beq.n	800728e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071fc:	4610      	mov	r0, r2
 80071fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007200:	e045      	b.n	800728e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f850 	bl	80072a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007208:	e041      	b.n	800728e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d039      	beq.n	8007286 <I2C_ITError+0x17e>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b12      	cmp	r3, #18
 8007216:	d002      	beq.n	800721e <I2C_ITError+0x116>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b22      	cmp	r3, #34	; 0x22
 800721c:	d133      	bne.n	8007286 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800722c:	d107      	bne.n	800723e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800723c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fc6f 	bl	8005b26 <HAL_DMA_GetState>
 8007248:	4603      	mov	r3, r0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d017      	beq.n	800727e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	4a14      	ldr	r2, [pc, #80]	; (80072a4 <I2C_ITError+0x19c>)
 8007254:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fc1e 	bl	8005aa4 <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d011      	beq.n	8007292 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800727c:	e009      	b.n	8007292 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f812 	bl	80072a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007284:	e005      	b.n	8007292 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f80e 	bl	80072a8 <I2C_TreatErrorCallback>
  }
}
 800728c:	e002      	b.n	8007294 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800728e:	bf00      	nop
 8007290:	e000      	b.n	8007294 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007292:	bf00      	nop
}
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	ffff0000 	.word	0xffff0000
 80072a0:	0800692f 	.word	0x0800692f
 80072a4:	0800733f 	.word	0x0800733f

080072a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b60      	cmp	r3, #96	; 0x60
 80072ba:	d10e      	bne.n	80072da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff fb13 	bl	80068fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072d8:	e009      	b.n	80072ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff fafe 	bl	80068ea <HAL_I2C_ErrorCallback>
}
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d103      	bne.n	8007314 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2200      	movs	r2, #0
 8007312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b01      	cmp	r3, #1
 8007320:	d007      	beq.n	8007332 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699a      	ldr	r2, [r3, #24]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0201 	orr.w	r2, r2, #1
 8007330:	619a      	str	r2, [r3, #24]
  }
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	2200      	movs	r2, #0
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007368:	2200      	movs	r2, #0
 800736a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff ff9b 	bl	80072a8 <I2C_TreatErrorCallback>
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800738a:	e022      	b.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007392:	d01e      	beq.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007394:	f7fe fa20 	bl	80057d8 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <I2C_WaitOnFlagUntilTimeout+0x30>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d113      	bne.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	f043 0220 	orr.w	r2, r3, #32
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e00f      	b.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699a      	ldr	r2, [r3, #24]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4013      	ands	r3, r2
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	429a      	cmp	r2, r3
 80073e0:	bf0c      	ite	eq
 80073e2:	2301      	moveq	r3, #1
 80073e4:	2300      	movne	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d0cd      	beq.n	800738c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007406:	e02c      	b.n	8007462 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f871 	bl	80074f4 <I2C_IsAcknowledgeFailed>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e02a      	b.n	8007472 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d01e      	beq.n	8007462 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007424:	f7fe f9d8 	bl	80057d8 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	429a      	cmp	r2, r3
 8007432:	d302      	bcc.n	800743a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d113      	bne.n	8007462 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e007      	b.n	8007472 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b02      	cmp	r3, #2
 800746e:	d1cb      	bne.n	8007408 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007486:	e028      	b.n	80074da <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f831 	bl	80074f4 <I2C_IsAcknowledgeFailed>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e026      	b.n	80074ea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749c:	f7fe f99c 	bl	80057d8 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d302      	bcc.n	80074b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d113      	bne.n	80074da <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b6:	f043 0220 	orr.w	r2, r3, #32
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e007      	b.n	80074ea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d1cf      	bne.n	8007488 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b10      	cmp	r3, #16
 800750c:	d151      	bne.n	80075b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800750e:	e022      	b.n	8007556 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007516:	d01e      	beq.n	8007556 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007518:	f7fe f95e 	bl	80057d8 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	d302      	bcc.n	800752e <I2C_IsAcknowledgeFailed+0x3a>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d113      	bne.n	8007556 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	f043 0220 	orr.w	r2, r3, #32
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e02e      	b.n	80075b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b20      	cmp	r3, #32
 8007562:	d1d5      	bne.n	8007510 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2210      	movs	r2, #16
 800756a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2220      	movs	r2, #32
 8007572:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff febe 	bl	80072f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <I2C_IsAcknowledgeFailed+0xc8>)
 8007586:	400b      	ands	r3, r1
 8007588:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f043 0204 	orr.w	r2, r3, #4
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	fe00e800 	.word	0xfe00e800

080075c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	607b      	str	r3, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	817b      	strh	r3, [r7, #10]
 80075ce:	4613      	mov	r3, r2
 80075d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	0d5b      	lsrs	r3, r3, #21
 80075dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <I2C_TransferConfig+0x58>)
 80075e2:	430b      	orrs	r3, r1
 80075e4:	43db      	mvns	r3, r3
 80075e6:	ea02 0103 	and.w	r1, r2, r3
 80075ea:	897b      	ldrh	r3, [r7, #10]
 80075ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075f0:	7a7b      	ldrb	r3, [r7, #9]
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	03ff63ff 	.word	0x03ff63ff

0800761c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800762c:	887b      	ldrh	r3, [r7, #2]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00f      	beq.n	8007656 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800763c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007644:	b2db      	uxtb	r3, r3
 8007646:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800764a:	2b28      	cmp	r3, #40	; 0x28
 800764c:	d003      	beq.n	8007656 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007654:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007656:	887b      	ldrh	r3, [r7, #2]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00f      	beq.n	8007680 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007666:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007674:	2b28      	cmp	r3, #40	; 0x28
 8007676:	d003      	beq.n	8007680 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800767e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007680:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007684:	2b00      	cmp	r3, #0
 8007686:	da03      	bge.n	8007690 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800768e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007690:	887b      	ldrh	r3, [r7, #2]
 8007692:	2b10      	cmp	r3, #16
 8007694:	d103      	bne.n	800769e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800769c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800769e:	887b      	ldrh	r3, [r7, #2]
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d103      	bne.n	80076ac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f043 0320 	orr.w	r3, r3, #32
 80076aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d103      	bne.n	80076ba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	43da      	mvns	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	400a      	ands	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]
}
 80076cc:	bf00      	nop
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80076d8:	b590      	push	{r4, r7, lr}
 80076da:	b08d      	sub	sp, #52	; 0x34
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f004 fd81 	bl	800c1f6 <USB_GetMode>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f040 838f 	bne.w	8007e1a <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f004 fce5 	bl	800c0d0 <USB_ReadInterrupts>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8385 	beq.w	8007e18 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f004 fcdc 	bl	800c0d0 <USB_ReadInterrupts>
 8007718:	4603      	mov	r3, r0
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b02      	cmp	r3, #2
 8007720:	d107      	bne.n	8007732 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695a      	ldr	r2, [r3, #20]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f002 0202 	and.w	r2, r2, #2
 8007730:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f004 fcca 	bl	800c0d0 <USB_ReadInterrupts>
 800773c:	4603      	mov	r3, r0
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b10      	cmp	r3, #16
 8007744:	d161      	bne.n	800780a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699a      	ldr	r2, [r3, #24]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0210 	bic.w	r2, r2, #16
 8007754:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f003 020f 	and.w	r2, r3, #15
 8007762:	4613      	mov	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	4413      	add	r3, r2
 8007772:	3304      	adds	r3, #4
 8007774:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	0c5b      	lsrs	r3, r3, #17
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	2b02      	cmp	r3, #2
 8007780:	d124      	bne.n	80077cc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007788:	4013      	ands	r3, r2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d035      	beq.n	80077fa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	091b      	lsrs	r3, r3, #4
 8007796:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800779c:	b29b      	uxth	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	6a38      	ldr	r0, [r7, #32]
 80077a2:	f004 fb72 	bl	800be8a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077b2:	441a      	add	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	091b      	lsrs	r3, r3, #4
 80077c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077c4:	441a      	add	r2, r3
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	619a      	str	r2, [r3, #24]
 80077ca:	e016      	b.n	80077fa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	0c5b      	lsrs	r3, r3, #17
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	2b06      	cmp	r3, #6
 80077d6:	d110      	bne.n	80077fa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077de:	2208      	movs	r2, #8
 80077e0:	4619      	mov	r1, r3
 80077e2:	6a38      	ldr	r0, [r7, #32]
 80077e4:	f004 fb51 	bl	800be8a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	091b      	lsrs	r3, r3, #4
 80077f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077f4:	441a      	add	r2, r3
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0210 	orr.w	r2, r2, #16
 8007808:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f004 fc5e 	bl	800c0d0 <USB_ReadInterrupts>
 8007814:	4603      	mov	r3, r0
 8007816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800781a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800781e:	d16e      	bne.n	80078fe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f004 fc64 	bl	800c0f6 <USB_ReadDevAllOutEpInterrupt>
 800782e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007830:	e062      	b.n	80078f8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d057      	beq.n	80078ec <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f004 fc89 	bl	800c15e <USB_ReadDevOutEPInterrupt>
 800784c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00c      	beq.n	8007872 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	461a      	mov	r2, r3
 8007866:	2301      	movs	r3, #1
 8007868:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800786a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fd1f 	bl	80082b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00c      	beq.n	8007896 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007888:	461a      	mov	r2, r3
 800788a:	2308      	movs	r3, #8
 800788c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800788e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fd5b 	bl	800834c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	d008      	beq.n	80078b2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ac:	461a      	mov	r2, r3
 80078ae:	2310      	movs	r3, #16
 80078b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	461a      	mov	r2, r3
 80078ca:	2320      	movs	r3, #32
 80078cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	461a      	mov	r2, r3
 80078e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	085b      	lsrs	r3, r3, #1
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d199      	bne.n	8007832 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f004 fbe4 	bl	800c0d0 <USB_ReadInterrupts>
 8007908:	4603      	mov	r3, r0
 800790a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800790e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007912:	f040 8087 	bne.w	8007a24 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f004 fc05 	bl	800c12a <USB_ReadDevAllInEpInterrupt>
 8007920:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007926:	e07a      	b.n	8007a1e <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d06f      	beq.n	8007a12 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f004 fc2c 	bl	800c19a <USB_ReadDevInEPInterrupt>
 8007942:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d020      	beq.n	8007990 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	f003 030f 	and.w	r3, r3, #15
 8007954:	2201      	movs	r2, #1
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	43db      	mvns	r3, r3
 8007968:	69f9      	ldr	r1, [r7, #28]
 800796a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800796e:	4013      	ands	r3, r2
 8007970:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797e:	461a      	mov	r2, r3
 8007980:	2301      	movs	r3, #1
 8007982:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	b2db      	uxtb	r3, r3
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fb f869 	bl	8002a62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	461a      	mov	r2, r3
 80079a8:	2308      	movs	r3, #8
 80079aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d008      	beq.n	80079c8 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c2:	461a      	mov	r2, r3
 80079c4:	2310      	movs	r3, #16
 80079c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079de:	461a      	mov	r2, r3
 80079e0:	2340      	movs	r3, #64	; 0x40
 80079e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d008      	beq.n	8007a00 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fa:	461a      	mov	r2, r3
 80079fc:	2302      	movs	r3, #2
 80079fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fbc7 	bl	80081a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	3301      	adds	r3, #1
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d181      	bne.n	8007928 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f004 fb51 	bl	800c0d0 <USB_ReadInterrupts>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a38:	d122      	bne.n	8007a80 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d108      	bne.n	8007a6a <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007a60:	2100      	movs	r1, #0
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fca6 	bl	80083b4 <HAL_PCDEx_LPM_Callback>
 8007a68:	e002      	b.n	8007a70 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fb f844 	bl	8002af8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695a      	ldr	r2, [r3, #20]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f004 fb23 	bl	800c0d0 <USB_ReadInterrupts>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a94:	d112      	bne.n	8007abc <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d102      	bne.n	8007aac <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fb f818 	bl	8002adc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695a      	ldr	r2, [r3, #20]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f004 fb05 	bl	800c0d0 <USB_ReadInterrupts>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ad0:	d121      	bne.n	8007b16 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695a      	ldr	r2, [r3, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007ae0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d111      	bne.n	8007b10 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	089b      	lsrs	r3, r3, #2
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007b06:	2101      	movs	r1, #1
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc53 	bl	80083b4 <HAL_PCDEx_LPM_Callback>
 8007b0e:	e002      	b.n	8007b16 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fa ffe3 	bl	8002adc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f004 fad8 	bl	800c0d0 <USB_ReadInterrupts>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2a:	f040 80c5 	bne.w	8007cb8 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b3c:	f023 0301 	bic.w	r3, r3, #1
 8007b40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2110      	movs	r1, #16
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f003 fda7 	bl	800b69c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b4e:	2300      	movs	r3, #0
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b52:	e056      	b.n	8007c02 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	461a      	mov	r2, r3
 8007b62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b86:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ba6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bec:	0151      	lsls	r1, r2, #5
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	440a      	add	r2, r1
 8007bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bfa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	3301      	adds	r3, #1
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d3a3      	bcc.n	8007b54 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007c1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d016      	beq.n	8007c56 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c38:	f043 030b 	orr.w	r3, r3, #11
 8007c3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4e:	f043 030b 	orr.w	r3, r3, #11
 8007c52:	6453      	str	r3, [r2, #68]	; 0x44
 8007c54:	e015      	b.n	8007c82 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c68:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007c6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c7c:	f043 030b 	orr.w	r3, r3, #11
 8007c80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f004 fad8 	bl	800c258 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f004 fa07 	bl	800c0d0 <USB_ReadInterrupts>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ccc:	d124      	bne.n	8007d18 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f004 fa9d 	bl	800c212 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f003 fd03 	bl	800b6e8 <USB_GetDevSpeed>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681c      	ldr	r4, [r3, #0]
 8007cee:	f001 f8ef 	bl	8008ed0 <HAL_RCC_GetHCLKFreq>
 8007cf2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f003 fc31 	bl	800b564 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fa fed5 	bl	8002ab2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	695a      	ldr	r2, [r3, #20]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f004 f9d7 	bl	800c0d0 <USB_ReadInterrupts>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d10a      	bne.n	8007d42 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fa feb2 	bl	8002a96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695a      	ldr	r2, [r3, #20]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f002 0208 	and.w	r2, r2, #8
 8007d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f004 f9c2 	bl	800c0d0 <USB_ReadInterrupts>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d56:	d10f      	bne.n	8007d78 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fa fee8 	bl	8002b38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f004 f9a7 	bl	800c0d0 <USB_ReadInterrupts>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d8c:	d10f      	bne.n	8007dae <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fa febb 	bl	8002b14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695a      	ldr	r2, [r3, #20]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f004 f98c 	bl	800c0d0 <USB_ReadInterrupts>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc2:	d10a      	bne.n	8007dda <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7fa fec9 	bl	8002b5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	695a      	ldr	r2, [r3, #20]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f004 f976 	bl	800c0d0 <USB_ReadInterrupts>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d115      	bne.n	8007e1a <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fa feb9 	bl	8002b78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6859      	ldr	r1, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
 8007e16:	e000      	b.n	8007e1a <HAL_PCD_IRQHandler+0x742>
      return;
 8007e18:	bf00      	nop
    }
  }
}
 8007e1a:	3734      	adds	r7, #52	; 0x34
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd90      	pop	{r4, r7, pc}

08007e20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_PCD_SetAddress+0x1a>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e013      	b.n	8007e62 <HAL_PCD_SetAddress+0x42>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	78fa      	ldrb	r2, [r7, #3]
 8007e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	4611      	mov	r1, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f004 f916 	bl	800c084 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	4608      	mov	r0, r1
 8007e74:	4611      	mov	r1, r2
 8007e76:	461a      	mov	r2, r3
 8007e78:	4603      	mov	r3, r0
 8007e7a:	70fb      	strb	r3, [r7, #3]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	803b      	strh	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	da0f      	bge.n	8007eb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	f003 020f 	and.w	r2, r3, #15
 8007e96:	4613      	mov	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	3338      	adds	r3, #56	; 0x38
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	705a      	strb	r2, [r3, #1]
 8007eae:	e00f      	b.n	8007ed0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	f003 020f 	and.w	r2, r3, #15
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	f003 030f 	and.w	r3, r3, #15
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007edc:	883a      	ldrh	r2, [r7, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	78ba      	ldrb	r2, [r7, #2]
 8007ee6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007efa:	78bb      	ldrb	r3, [r7, #2]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d102      	bne.n	8007f06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_PCD_EP_Open+0xaa>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e00e      	b.n	8007f32 <HAL_PCD_EP_Open+0xc8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68f9      	ldr	r1, [r7, #12]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f003 fbff 	bl	800b726 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007f30:	7afb      	ldrb	r3, [r7, #11]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b086      	sub	sp, #24
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	460b      	mov	r3, r1
 8007f48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	f003 020f 	and.w	r2, r3, #15
 8007f50:	4613      	mov	r3, r2
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3304      	adds	r3, #4
 8007f62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6979      	ldr	r1, [r7, #20]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f003 fe27 	bl	800bbec <USB_EP0StartXfer>
 8007f9e:	e005      	b.n	8007fac <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6979      	ldr	r1, [r7, #20]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f003 fc44 	bl	800b834 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	4613      	mov	r3, r2
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	1a9b      	subs	r3, r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	3338      	adds	r3, #56	; 0x38
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	3304      	adds	r3, #4
 8007fdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2200      	movs	r2, #0
 8007fee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	2b00      	cmp	r3, #0
 800800a:	d106      	bne.n	800801a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6979      	ldr	r1, [r7, #20]
 8008012:	4618      	mov	r0, r3
 8008014:	f003 fdea 	bl	800bbec <USB_EP0StartXfer>
 8008018:	e005      	b.n	8008026 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	4618      	mov	r0, r3
 8008022:	f003 fc07 	bl	800b834 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	f003 020f 	and.w	r2, r3, #15
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d901      	bls.n	800804e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e04e      	b.n	80080ec <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800804e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008052:	2b00      	cmp	r3, #0
 8008054:	da0f      	bge.n	8008076 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	f003 020f 	and.w	r2, r3, #15
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	1a9b      	subs	r3, r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	3338      	adds	r3, #56	; 0x38
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	4413      	add	r3, r2
 800806a:	3304      	adds	r3, #4
 800806c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2201      	movs	r2, #1
 8008072:	705a      	strb	r2, [r3, #1]
 8008074:	e00d      	b.n	8008092 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	4613      	mov	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4413      	add	r3, r2
 8008088:	3304      	adds	r3, #4
 800808a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <HAL_PCD_EP_SetStall+0x82>
 80080ae:	2302      	movs	r3, #2
 80080b0:	e01c      	b.n	80080ec <HAL_PCD_EP_SetStall+0xbc>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f003 ff0b 	bl	800bedc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d108      	bne.n	80080e2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f004 f8bb 	bl	800c258 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	f003 020f 	and.w	r2, r3, #15
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	d901      	bls.n	8008112 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e042      	b.n	8008198 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008116:	2b00      	cmp	r3, #0
 8008118:	da0f      	bge.n	800813a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	3338      	adds	r3, #56	; 0x38
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	4413      	add	r3, r2
 800812e:	3304      	adds	r3, #4
 8008130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	705a      	strb	r2, [r3, #1]
 8008138:	e00f      	b.n	800815a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	4613      	mov	r3, r2
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	b2da      	uxtb	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_PCD_EP_ClrStall+0x86>
 8008176:	2302      	movs	r3, #2
 8008178:	e00e      	b.n	8008198 <HAL_PCD_EP_ClrStall+0xa4>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	4618      	mov	r0, r3
 800818a:	f003 ff15 	bl	800bfb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	3338      	adds	r3, #56	; 0x38
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	3304      	adds	r3, #4
 80081c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d901      	bls.n	80081d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e067      	b.n	80082a8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	695a      	ldr	r2, [r3, #20]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d902      	bls.n	80081f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	3303      	adds	r3, #3
 80081f8:	089b      	lsrs	r3, r3, #2
 80081fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081fc:	e026      	b.n	800824c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	695a      	ldr	r2, [r3, #20]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	429a      	cmp	r2, r3
 8008212:	d902      	bls.n	800821a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	3303      	adds	r3, #3
 800821e:	089b      	lsrs	r3, r3, #2
 8008220:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68d9      	ldr	r1, [r3, #12]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	b2da      	uxtb	r2, r3
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	b29b      	uxth	r3, r3
 800822e:	6978      	ldr	r0, [r7, #20]
 8008230:	f003 fdfa 	bl	800be28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	441a      	add	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	699a      	ldr	r2, [r3, #24]
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	b29b      	uxth	r3, r3
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	429a      	cmp	r2, r3
 8008260:	d809      	bhi.n	8008276 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800826a:	429a      	cmp	r2, r3
 800826c:	d203      	bcs.n	8008276 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1c3      	bne.n	80081fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	429a      	cmp	r2, r3
 8008280:	d811      	bhi.n	80082a6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	2201      	movs	r2, #1
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	43db      	mvns	r3, r3
 800829c:	6939      	ldr	r1, [r7, #16]
 800829e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082a2:	4013      	ands	r3, r2
 80082a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	333c      	adds	r3, #60	; 0x3c
 80082c8:	3304      	adds	r3, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a19      	ldr	r2, [pc, #100]	; (8008348 <PCD_EP_OutXfrComplete_int+0x98>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d124      	bne.n	8008330 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fc:	461a      	mov	r2, r3
 80082fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008302:	6093      	str	r3, [r2, #8]
 8008304:	e01a      	b.n	800833c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d008      	beq.n	8008322 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831c:	461a      	mov	r2, r3
 800831e:	2320      	movs	r3, #32
 8008320:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7fa fb7f 	bl	8002a2c <HAL_PCD_DataOutStageCallback>
 800832e:	e005      	b.n	800833c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fa fb78 	bl	8002a2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	4f54310a 	.word	0x4f54310a

0800834c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	333c      	adds	r3, #60	; 0x3c
 8008364:	3304      	adds	r3, #4
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a0c      	ldr	r2, [pc, #48]	; (80083b0 <PCD_EP_OutSetupPacket_int+0x64>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d90e      	bls.n	80083a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008398:	461a      	mov	r2, r3
 800839a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800839e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7fa fb31 	bl	8002a08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	4f54300a 	.word	0x4f54300a

080083b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a04      	ldr	r2, [pc, #16]	; (80083e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083da:	6013      	str	r3, [r2, #0]
}
 80083dc:	bf00      	nop
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40007000 	.word	0x40007000

080083ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80083f0:	4b04      	ldr	r3, [pc, #16]	; (8008404 <HAL_PWREx_GetVoltageRange+0x18>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40007000 	.word	0x40007000

08008408 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <HAL_PWREx_EnableVddIO2+0x1c>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4a04      	ldr	r2, [pc, #16]	; (8008424 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008416:	6053      	str	r3, [r2, #4]
}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	40007000 	.word	0x40007000

08008428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b088      	sub	sp, #32
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e3d4      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800843a:	4ba1      	ldr	r3, [pc, #644]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 030c 	and.w	r3, r3, #12
 8008442:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008444:	4b9e      	ldr	r3, [pc, #632]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0310 	and.w	r3, r3, #16
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 80e4 	beq.w	8008624 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <HAL_RCC_OscConfig+0x4a>
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b0c      	cmp	r3, #12
 8008466:	f040 808b 	bne.w	8008580 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b01      	cmp	r3, #1
 800846e:	f040 8087 	bne.w	8008580 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008472:	4b93      	ldr	r3, [pc, #588]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <HAL_RCC_OscConfig+0x62>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e3ac      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1a      	ldr	r2, [r3, #32]
 800848e:	4b8c      	ldr	r3, [pc, #560]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <HAL_RCC_OscConfig+0x7c>
 800849a:	4b89      	ldr	r3, [pc, #548]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084a2:	e005      	b.n	80084b0 <HAL_RCC_OscConfig+0x88>
 80084a4:	4b86      	ldr	r3, [pc, #536]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084aa:	091b      	lsrs	r3, r3, #4
 80084ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d223      	bcs.n	80084fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fd15 	bl	8008ee8 <RCC_SetFlashLatencyFromMSIRange>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e38d      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084c8:	4b7d      	ldr	r3, [pc, #500]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a7c      	ldr	r2, [pc, #496]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084ce:	f043 0308 	orr.w	r3, r3, #8
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	4b7a      	ldr	r3, [pc, #488]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	4977      	ldr	r1, [pc, #476]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084e6:	4b76      	ldr	r3, [pc, #472]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	4972      	ldr	r1, [pc, #456]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	604b      	str	r3, [r1, #4]
 80084fa:	e025      	b.n	8008548 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084fc:	4b70      	ldr	r3, [pc, #448]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a6f      	ldr	r2, [pc, #444]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008502:	f043 0308 	orr.w	r3, r3, #8
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	4b6d      	ldr	r3, [pc, #436]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	496a      	ldr	r1, [pc, #424]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008516:	4313      	orrs	r3, r2
 8008518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800851a:	4b69      	ldr	r3, [pc, #420]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	4965      	ldr	r1, [pc, #404]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800852a:	4313      	orrs	r3, r2
 800852c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d109      	bne.n	8008548 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fcd5 	bl	8008ee8 <RCC_SetFlashLatencyFromMSIRange>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e34d      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008548:	f000 fc36 	bl	8008db8 <HAL_RCC_GetSysClockFreq>
 800854c:	4602      	mov	r2, r0
 800854e:	4b5c      	ldr	r3, [pc, #368]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	091b      	lsrs	r3, r3, #4
 8008554:	f003 030f 	and.w	r3, r3, #15
 8008558:	495a      	ldr	r1, [pc, #360]	; (80086c4 <HAL_RCC_OscConfig+0x29c>)
 800855a:	5ccb      	ldrb	r3, [r1, r3]
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	fa22 f303 	lsr.w	r3, r2, r3
 8008564:	4a58      	ldr	r2, [pc, #352]	; (80086c8 <HAL_RCC_OscConfig+0x2a0>)
 8008566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008568:	4b58      	ldr	r3, [pc, #352]	; (80086cc <HAL_RCC_OscConfig+0x2a4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f7fd f8e3 	bl	8005738 <HAL_InitTick>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d052      	beq.n	8008622 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	e331      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d032      	beq.n	80085ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008588:	4b4d      	ldr	r3, [pc, #308]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a4c      	ldr	r2, [pc, #304]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008594:	f7fd f920 	bl	80057d8 <HAL_GetTick>
 8008598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800859a:	e008      	b.n	80085ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800859c:	f7fd f91c 	bl	80057d8 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e31a      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085ae:	4b44      	ldr	r3, [pc, #272]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0f0      	beq.n	800859c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085ba:	4b41      	ldr	r3, [pc, #260]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a40      	ldr	r2, [pc, #256]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085c0:	f043 0308 	orr.w	r3, r3, #8
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	4b3e      	ldr	r3, [pc, #248]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	493b      	ldr	r1, [pc, #236]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085d8:	4b39      	ldr	r3, [pc, #228]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	4936      	ldr	r1, [pc, #216]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	604b      	str	r3, [r1, #4]
 80085ec:	e01a      	b.n	8008624 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085ee:	4b34      	ldr	r3, [pc, #208]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a33      	ldr	r2, [pc, #204]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085fa:	f7fd f8ed 	bl	80057d8 <HAL_GetTick>
 80085fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008602:	f7fd f8e9 	bl	80057d8 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e2e7      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008614:	4b2a      	ldr	r3, [pc, #168]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1f0      	bne.n	8008602 <HAL_RCC_OscConfig+0x1da>
 8008620:	e000      	b.n	8008624 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008622:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d074      	beq.n	800871a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b08      	cmp	r3, #8
 8008634:	d005      	beq.n	8008642 <HAL_RCC_OscConfig+0x21a>
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b0c      	cmp	r3, #12
 800863a:	d10e      	bne.n	800865a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2b03      	cmp	r3, #3
 8008640:	d10b      	bne.n	800865a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008642:	4b1f      	ldr	r3, [pc, #124]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d064      	beq.n	8008718 <HAL_RCC_OscConfig+0x2f0>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d160      	bne.n	8008718 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e2c4      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008662:	d106      	bne.n	8008672 <HAL_RCC_OscConfig+0x24a>
 8008664:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a15      	ldr	r2, [pc, #84]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800866a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	e01d      	b.n	80086ae <HAL_RCC_OscConfig+0x286>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800867a:	d10c      	bne.n	8008696 <HAL_RCC_OscConfig+0x26e>
 800867c:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a0f      	ldr	r2, [pc, #60]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800868e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	e00b      	b.n	80086ae <HAL_RCC_OscConfig+0x286>
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 800869c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <HAL_RCC_OscConfig+0x298>)
 80086a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d01c      	beq.n	80086f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b6:	f7fd f88f 	bl	80057d8 <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086bc:	e011      	b.n	80086e2 <HAL_RCC_OscConfig+0x2ba>
 80086be:	bf00      	nop
 80086c0:	40021000 	.word	0x40021000
 80086c4:	0800f564 	.word	0x0800f564
 80086c8:	20000004 	.word	0x20000004
 80086cc:	20000094 	.word	0x20000094
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086d0:	f7fd f882 	bl	80057d8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b64      	cmp	r3, #100	; 0x64
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e280      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086e2:	4baf      	ldr	r3, [pc, #700]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0f0      	beq.n	80086d0 <HAL_RCC_OscConfig+0x2a8>
 80086ee:	e014      	b.n	800871a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f0:	f7fd f872 	bl	80057d8 <HAL_GetTick>
 80086f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086f8:	f7fd f86e 	bl	80057d8 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b64      	cmp	r3, #100	; 0x64
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e26c      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800870a:	4ba5      	ldr	r3, [pc, #660]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1f0      	bne.n	80086f8 <HAL_RCC_OscConfig+0x2d0>
 8008716:	e000      	b.n	800871a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d060      	beq.n	80087e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b04      	cmp	r3, #4
 800872a:	d005      	beq.n	8008738 <HAL_RCC_OscConfig+0x310>
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	2b0c      	cmp	r3, #12
 8008730:	d119      	bne.n	8008766 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d116      	bne.n	8008766 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008738:	4b99      	ldr	r3, [pc, #612]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <HAL_RCC_OscConfig+0x328>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e249      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008750:	4b93      	ldr	r3, [pc, #588]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	061b      	lsls	r3, r3, #24
 800875e:	4990      	ldr	r1, [pc, #576]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008760:	4313      	orrs	r3, r2
 8008762:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008764:	e040      	b.n	80087e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d023      	beq.n	80087b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800876e:	4b8c      	ldr	r3, [pc, #560]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a8b      	ldr	r2, [pc, #556]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877a:	f7fd f82d 	bl	80057d8 <HAL_GetTick>
 800877e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008782:	f7fd f829 	bl	80057d8 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e227      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008794:	4b82      	ldr	r3, [pc, #520]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f0      	beq.n	8008782 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087a0:	4b7f      	ldr	r3, [pc, #508]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	061b      	lsls	r3, r3, #24
 80087ae:	497c      	ldr	r1, [pc, #496]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	604b      	str	r3, [r1, #4]
 80087b4:	e018      	b.n	80087e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087b6:	4b7a      	ldr	r3, [pc, #488]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a79      	ldr	r2, [pc, #484]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80087bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c2:	f7fd f809 	bl	80057d8 <HAL_GetTick>
 80087c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087c8:	e008      	b.n	80087dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087ca:	f7fd f805 	bl	80057d8 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d901      	bls.n	80087dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e203      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087dc:	4b70      	ldr	r3, [pc, #448]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f0      	bne.n	80087ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d03c      	beq.n	800886e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01c      	beq.n	8008836 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087fc:	4b68      	ldr	r3, [pc, #416]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80087fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008802:	4a67      	ldr	r2, [pc, #412]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008804:	f043 0301 	orr.w	r3, r3, #1
 8008808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880c:	f7fc ffe4 	bl	80057d8 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008814:	f7fc ffe0 	bl	80057d8 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e1de      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008826:	4b5e      	ldr	r3, [pc, #376]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0ef      	beq.n	8008814 <HAL_RCC_OscConfig+0x3ec>
 8008834:	e01b      	b.n	800886e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008836:	4b5a      	ldr	r3, [pc, #360]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800883c:	4a58      	ldr	r2, [pc, #352]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008846:	f7fc ffc7 	bl	80057d8 <HAL_GetTick>
 800884a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800884c:	e008      	b.n	8008860 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800884e:	f7fc ffc3 	bl	80057d8 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e1c1      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008860:	4b4f      	ldr	r3, [pc, #316]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1ef      	bne.n	800884e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80a6 	beq.w	80089c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800887c:	2300      	movs	r3, #0
 800887e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008880:	4b47      	ldr	r3, [pc, #284]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10d      	bne.n	80088a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800888c:	4b44      	ldr	r3, [pc, #272]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	4a43      	ldr	r2, [pc, #268]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008896:	6593      	str	r3, [r2, #88]	; 0x58
 8008898:	4b41      	ldr	r3, [pc, #260]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800889a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088a0:	60bb      	str	r3, [r7, #8]
 80088a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088a4:	2301      	movs	r3, #1
 80088a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088a8:	4b3e      	ldr	r3, [pc, #248]	; (80089a4 <HAL_RCC_OscConfig+0x57c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d118      	bne.n	80088e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088b4:	4b3b      	ldr	r3, [pc, #236]	; (80089a4 <HAL_RCC_OscConfig+0x57c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a3a      	ldr	r2, [pc, #232]	; (80089a4 <HAL_RCC_OscConfig+0x57c>)
 80088ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088c0:	f7fc ff8a 	bl	80057d8 <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088c8:	f7fc ff86 	bl	80057d8 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e184      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088da:	4b32      	ldr	r3, [pc, #200]	; (80089a4 <HAL_RCC_OscConfig+0x57c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0f0      	beq.n	80088c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d108      	bne.n	8008900 <HAL_RCC_OscConfig+0x4d8>
 80088ee:	4b2c      	ldr	r3, [pc, #176]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80088f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f4:	4a2a      	ldr	r2, [pc, #168]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088fe:	e024      	b.n	800894a <HAL_RCC_OscConfig+0x522>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b05      	cmp	r3, #5
 8008906:	d110      	bne.n	800892a <HAL_RCC_OscConfig+0x502>
 8008908:	4b25      	ldr	r3, [pc, #148]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800890a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890e:	4a24      	ldr	r2, [pc, #144]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008910:	f043 0304 	orr.w	r3, r3, #4
 8008914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008918:	4b21      	ldr	r3, [pc, #132]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800891a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891e:	4a20      	ldr	r2, [pc, #128]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008928:	e00f      	b.n	800894a <HAL_RCC_OscConfig+0x522>
 800892a:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800892c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008930:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800893a:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 800893c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008940:	4a17      	ldr	r2, [pc, #92]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008942:	f023 0304 	bic.w	r3, r3, #4
 8008946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d016      	beq.n	8008980 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008952:	f7fc ff41 	bl	80057d8 <HAL_GetTick>
 8008956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008958:	e00a      	b.n	8008970 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800895a:	f7fc ff3d 	bl	80057d8 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	f241 3288 	movw	r2, #5000	; 0x1388
 8008968:	4293      	cmp	r3, r2
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e139      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <HAL_RCC_OscConfig+0x578>)
 8008972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0ed      	beq.n	800895a <HAL_RCC_OscConfig+0x532>
 800897e:	e01a      	b.n	80089b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008980:	f7fc ff2a 	bl	80057d8 <HAL_GetTick>
 8008984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008986:	e00f      	b.n	80089a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008988:	f7fc ff26 	bl	80057d8 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	f241 3288 	movw	r2, #5000	; 0x1388
 8008996:	4293      	cmp	r3, r2
 8008998:	d906      	bls.n	80089a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e122      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
 800899e:	bf00      	nop
 80089a0:	40021000 	.word	0x40021000
 80089a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089a8:	4b90      	ldr	r3, [pc, #576]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 80089aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e8      	bne.n	8008988 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089b6:	7ffb      	ldrb	r3, [r7, #31]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d105      	bne.n	80089c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089bc:	4b8b      	ldr	r3, [pc, #556]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 80089be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c0:	4a8a      	ldr	r2, [pc, #552]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 80089c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 8108 	beq.w	8008be2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	f040 80d0 	bne.w	8008b7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80089dc:	4b83      	ldr	r3, [pc, #524]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f003 0203 	and.w	r2, r3, #3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d130      	bne.n	8008a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	3b01      	subs	r3, #1
 80089fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d127      	bne.n	8008a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d11f      	bne.n	8008a52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a1c:	2a07      	cmp	r2, #7
 8008a1e:	bf14      	ite	ne
 8008a20:	2201      	movne	r2, #1
 8008a22:	2200      	moveq	r2, #0
 8008a24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d113      	bne.n	8008a52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a34:	085b      	lsrs	r3, r3, #1
 8008a36:	3b01      	subs	r3, #1
 8008a38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d109      	bne.n	8008a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d06e      	beq.n	8008b30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2b0c      	cmp	r3, #12
 8008a56:	d069      	beq.n	8008b2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008a58:	4b64      	ldr	r3, [pc, #400]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d105      	bne.n	8008a70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008a64:	4b61      	ldr	r3, [pc, #388]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0b7      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008a74:	4b5d      	ldr	r3, [pc, #372]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a5c      	ldr	r2, [pc, #368]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a80:	f7fc feaa 	bl	80057d8 <HAL_GetTick>
 8008a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a86:	e008      	b.n	8008a9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a88:	f7fc fea6 	bl	80057d8 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e0a4      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a9a:	4b54      	ldr	r3, [pc, #336]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1f0      	bne.n	8008a88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008aa6:	4b51      	ldr	r3, [pc, #324]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	4b51      	ldr	r3, [pc, #324]	; (8008bf0 <HAL_RCC_OscConfig+0x7c8>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ab6:	3a01      	subs	r2, #1
 8008ab8:	0112      	lsls	r2, r2, #4
 8008aba:	4311      	orrs	r1, r2
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ac0:	0212      	lsls	r2, r2, #8
 8008ac2:	4311      	orrs	r1, r2
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ac8:	0852      	lsrs	r2, r2, #1
 8008aca:	3a01      	subs	r2, #1
 8008acc:	0552      	lsls	r2, r2, #21
 8008ace:	4311      	orrs	r1, r2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008ad4:	0852      	lsrs	r2, r2, #1
 8008ad6:	3a01      	subs	r2, #1
 8008ad8:	0652      	lsls	r2, r2, #25
 8008ada:	4311      	orrs	r1, r2
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ae0:	0912      	lsrs	r2, r2, #4
 8008ae2:	0452      	lsls	r2, r2, #17
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	4941      	ldr	r1, [pc, #260]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008aec:	4b3f      	ldr	r3, [pc, #252]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a3e      	ldr	r2, [pc, #248]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008af6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008af8:	4b3c      	ldr	r3, [pc, #240]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	4a3b      	ldr	r2, [pc, #236]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b04:	f7fc fe68 	bl	80057d8 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b0c:	f7fc fe64 	bl	80057d8 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e062      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b1e:	4b33      	ldr	r3, [pc, #204]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0f0      	beq.n	8008b0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b2a:	e05a      	b.n	8008be2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e059      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b30:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d152      	bne.n	8008be2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008b3c:	4b2b      	ldr	r3, [pc, #172]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a2a      	ldr	r2, [pc, #168]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b48:	4b28      	ldr	r3, [pc, #160]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	4a27      	ldr	r2, [pc, #156]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b54:	f7fc fe40 	bl	80057d8 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b5a:	e008      	b.n	8008b6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b5c:	f7fc fe3c 	bl	80057d8 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e03a      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b6e:	4b1f      	ldr	r3, [pc, #124]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f0      	beq.n	8008b5c <HAL_RCC_OscConfig+0x734>
 8008b7a:	e032      	b.n	8008be2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	2b0c      	cmp	r3, #12
 8008b80:	d02d      	beq.n	8008bde <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b82:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a19      	ldr	r2, [pc, #100]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008b8e:	4b17      	ldr	r3, [pc, #92]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008b9a:	4b14      	ldr	r3, [pc, #80]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	4a13      	ldr	r2, [pc, #76]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008ba0:	f023 0303 	bic.w	r3, r3, #3
 8008ba4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	4a10      	ldr	r2, [pc, #64]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008bac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb6:	f7fc fe0f 	bl	80057d8 <HAL_GetTick>
 8008bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bbc:	e008      	b.n	8008bd0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bbe:	f7fc fe0b 	bl	80057d8 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e009      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bd0:	4b06      	ldr	r3, [pc, #24]	; (8008bec <HAL_RCC_OscConfig+0x7c4>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f0      	bne.n	8008bbe <HAL_RCC_OscConfig+0x796>
 8008bdc:	e001      	b.n	8008be2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3720      	adds	r7, #32
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40021000 	.word	0x40021000
 8008bf0:	f99d808c 	.word	0xf99d808c

08008bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e0c8      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c08:	4b66      	ldr	r3, [pc, #408]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d910      	bls.n	8008c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c16:	4b63      	ldr	r3, [pc, #396]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f023 0207 	bic.w	r2, r3, #7
 8008c1e:	4961      	ldr	r1, [pc, #388]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c26:	4b5f      	ldr	r3, [pc, #380]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d001      	beq.n	8008c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e0b0      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d04c      	beq.n	8008cde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d107      	bne.n	8008c5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c4c:	4b56      	ldr	r3, [pc, #344]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d121      	bne.n	8008c9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e09e      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d107      	bne.n	8008c74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c64:	4b50      	ldr	r3, [pc, #320]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d115      	bne.n	8008c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e092      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d107      	bne.n	8008c8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008c7c:	4b4a      	ldr	r3, [pc, #296]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e086      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c8c:	4b46      	ldr	r3, [pc, #280]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e07e      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c9c:	4b42      	ldr	r3, [pc, #264]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f023 0203 	bic.w	r2, r3, #3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	493f      	ldr	r1, [pc, #252]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cae:	f7fc fd93 	bl	80057d8 <HAL_GetTick>
 8008cb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cb4:	e00a      	b.n	8008ccc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cb6:	f7fc fd8f 	bl	80057d8 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d901      	bls.n	8008ccc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e066      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ccc:	4b36      	ldr	r3, [pc, #216]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 020c 	and.w	r2, r3, #12
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d1eb      	bne.n	8008cb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cea:	4b2f      	ldr	r3, [pc, #188]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	492c      	ldr	r1, [pc, #176]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cfc:	4b29      	ldr	r3, [pc, #164]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d210      	bcs.n	8008d2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d0a:	4b26      	ldr	r3, [pc, #152]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f023 0207 	bic.w	r2, r3, #7
 8008d12:	4924      	ldr	r1, [pc, #144]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d1a:	4b22      	ldr	r3, [pc, #136]	; (8008da4 <HAL_RCC_ClockConfig+0x1b0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0307 	and.w	r3, r3, #7
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d001      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e036      	b.n	8008d9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d38:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	4918      	ldr	r1, [pc, #96]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4910      	ldr	r1, [pc, #64]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d6a:	f000 f825 	bl	8008db8 <HAL_RCC_GetSysClockFreq>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <HAL_RCC_ClockConfig+0x1b4>)
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	091b      	lsrs	r3, r3, #4
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	490c      	ldr	r1, [pc, #48]	; (8008dac <HAL_RCC_ClockConfig+0x1b8>)
 8008d7c:	5ccb      	ldrb	r3, [r1, r3]
 8008d7e:	f003 031f 	and.w	r3, r3, #31
 8008d82:	fa22 f303 	lsr.w	r3, r2, r3
 8008d86:	4a0a      	ldr	r2, [pc, #40]	; (8008db0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <HAL_RCC_ClockConfig+0x1c0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fc fcd2 	bl	8005738 <HAL_InitTick>
 8008d94:	4603      	mov	r3, r0
 8008d96:	72fb      	strb	r3, [r7, #11]

  return status;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40022000 	.word	0x40022000
 8008da8:	40021000 	.word	0x40021000
 8008dac:	0800f564 	.word	0x0800f564
 8008db0:	20000004 	.word	0x20000004
 8008db4:	20000094 	.word	0x20000094

08008db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	61fb      	str	r3, [r7, #28]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc6:	4b3e      	ldr	r3, [pc, #248]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 030c 	and.w	r3, r3, #12
 8008dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008dd0:	4b3b      	ldr	r3, [pc, #236]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <HAL_RCC_GetSysClockFreq+0x34>
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b0c      	cmp	r3, #12
 8008de4:	d121      	bne.n	8008e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d11e      	bne.n	8008e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d107      	bne.n	8008e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008df8:	4b31      	ldr	r3, [pc, #196]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	61fb      	str	r3, [r7, #28]
 8008e06:	e005      	b.n	8008e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e08:	4b2d      	ldr	r3, [pc, #180]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008e14:	4a2b      	ldr	r2, [pc, #172]	; (8008ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10d      	bne.n	8008e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e28:	e00a      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d102      	bne.n	8008e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e30:	4b25      	ldr	r3, [pc, #148]	; (8008ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	e004      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d101      	bne.n	8008e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e3c:	4b23      	ldr	r3, [pc, #140]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8008e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b0c      	cmp	r3, #12
 8008e44:	d134      	bne.n	8008eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e46:	4b1e      	ldr	r3, [pc, #120]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d003      	beq.n	8008e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d003      	beq.n	8008e64 <HAL_RCC_GetSysClockFreq+0xac>
 8008e5c:	e005      	b.n	8008e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008e5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008e60:	617b      	str	r3, [r7, #20]
      break;
 8008e62:	e005      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008e64:	4b19      	ldr	r3, [pc, #100]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8008e66:	617b      	str	r3, [r7, #20]
      break;
 8008e68:	e002      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	617b      	str	r3, [r7, #20]
      break;
 8008e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	091b      	lsrs	r3, r3, #4
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	0a1b      	lsrs	r3, r3, #8
 8008e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	fb02 f203 	mul.w	r2, r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e96:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	0e5b      	lsrs	r3, r3, #25
 8008e9c:	f003 0303 	and.w	r3, r3, #3
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3724      	adds	r7, #36	; 0x24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	0800f574 	.word	0x0800f574
 8008ec8:	00f42400 	.word	0x00f42400
 8008ecc:	007a1200 	.word	0x007a1200

08008ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ed4:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000004 	.word	0x20000004

08008ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ef4:	4b2a      	ldr	r3, [pc, #168]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008f00:	f7ff fa74 	bl	80083ec <HAL_PWREx_GetVoltageRange>
 8008f04:	6178      	str	r0, [r7, #20]
 8008f06:	e014      	b.n	8008f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f08:	4b25      	ldr	r3, [pc, #148]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0c:	4a24      	ldr	r2, [pc, #144]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f12:	6593      	str	r3, [r2, #88]	; 0x58
 8008f14:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008f20:	f7ff fa64 	bl	80083ec <HAL_PWREx_GetVoltageRange>
 8008f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008f26:	4b1e      	ldr	r3, [pc, #120]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2a:	4a1d      	ldr	r2, [pc, #116]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f38:	d10b      	bne.n	8008f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b80      	cmp	r3, #128	; 0x80
 8008f3e:	d919      	bls.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2ba0      	cmp	r3, #160	; 0xa0
 8008f44:	d902      	bls.n	8008f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f46:	2302      	movs	r3, #2
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	e013      	b.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	613b      	str	r3, [r7, #16]
 8008f50:	e010      	b.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b80      	cmp	r3, #128	; 0x80
 8008f56:	d902      	bls.n	8008f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008f58:	2303      	movs	r3, #3
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	e00a      	b.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b80      	cmp	r3, #128	; 0x80
 8008f62:	d102      	bne.n	8008f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f64:	2302      	movs	r3, #2
 8008f66:	613b      	str	r3, [r7, #16]
 8008f68:	e004      	b.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b70      	cmp	r3, #112	; 0x70
 8008f6e:	d101      	bne.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f70:	2301      	movs	r3, #1
 8008f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f74:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f023 0207 	bic.w	r2, r3, #7
 8008f7c:	4909      	ldr	r1, [pc, #36]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008f84:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d001      	beq.n	8008f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	40021000 	.word	0x40021000
 8008fa4:	40022000 	.word	0x40022000

08008fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d041      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fcc:	d02a      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fd2:	d824      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fd8:	d008      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fde:	d81e      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fe8:	d010      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fea:	e018      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008fec:	4b86      	ldr	r3, [pc, #536]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	4a85      	ldr	r2, [pc, #532]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008ff8:	e015      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	2100      	movs	r1, #0
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fae3 	bl	80095cc <RCCEx_PLLSAI1_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800900a:	e00c      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3320      	adds	r3, #32
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fbce 	bl	80097b4 <RCCEx_PLLSAI2_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800901c:	e003      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	74fb      	strb	r3, [r7, #19]
      break;
 8009022:	e000      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009026:	7cfb      	ldrb	r3, [r7, #19]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10b      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800902c:	4b76      	ldr	r3, [pc, #472]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800902e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800903a:	4973      	ldr	r1, [pc, #460]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800903c:	4313      	orrs	r3, r2
 800903e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009042:	e001      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009044:	7cfb      	ldrb	r3, [r7, #19]
 8009046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d041      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800905c:	d02a      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800905e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009062:	d824      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009068:	d008      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800906a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906e:	d81e      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009078:	d010      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800907a:	e018      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800907c:	4b62      	ldr	r3, [pc, #392]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	4a61      	ldr	r2, [pc, #388]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009088:	e015      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3304      	adds	r3, #4
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fa9b 	bl	80095cc <RCCEx_PLLSAI1_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800909a:	e00c      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3320      	adds	r3, #32
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fb86 	bl	80097b4 <RCCEx_PLLSAI2_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80090ac:	e003      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	74fb      	strb	r3, [r7, #19]
      break;
 80090b2:	e000      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80090b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090b6:	7cfb      	ldrb	r3, [r7, #19]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10b      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80090bc:	4b52      	ldr	r3, [pc, #328]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ca:	494f      	ldr	r1, [pc, #316]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80090d2:	e001      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d4:	7cfb      	ldrb	r3, [r7, #19]
 80090d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 80a0 	beq.w	8009226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090e6:	2300      	movs	r3, #0
 80090e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80090ea:	4b47      	ldr	r3, [pc, #284]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e000      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80090fa:	2300      	movs	r3, #0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00d      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009100:	4b41      	ldr	r3, [pc, #260]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009104:	4a40      	ldr	r2, [pc, #256]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800910a:	6593      	str	r3, [r2, #88]	; 0x58
 800910c:	4b3e      	ldr	r3, [pc, #248]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009114:	60bb      	str	r3, [r7, #8]
 8009116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009118:	2301      	movs	r3, #1
 800911a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800911c:	4b3b      	ldr	r3, [pc, #236]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a3a      	ldr	r2, [pc, #232]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009128:	f7fc fb56 	bl	80057d8 <HAL_GetTick>
 800912c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800912e:	e009      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009130:	f7fc fb52 	bl	80057d8 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d902      	bls.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	74fb      	strb	r3, [r7, #19]
        break;
 8009142:	e005      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009144:	4b31      	ldr	r3, [pc, #196]	; (800920c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0ef      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009150:	7cfb      	ldrb	r3, [r7, #19]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d15c      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009156:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d01f      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	429a      	cmp	r2, r3
 8009172:	d019      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009174:	4b24      	ldr	r3, [pc, #144]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800917a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800917e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009180:	4b21      	ldr	r3, [pc, #132]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009186:	4a20      	ldr	r2, [pc, #128]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800918c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009190:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009196:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800919c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80091a0:	4a19      	ldr	r2, [pc, #100]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d016      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b2:	f7fc fb11 	bl	80057d8 <HAL_GetTick>
 80091b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091b8:	e00b      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091ba:	f7fc fb0d 	bl	80057d8 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d902      	bls.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	74fb      	strb	r3, [r7, #19]
            break;
 80091d0:	e006      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091d2:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0ec      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80091e0:	7cfb      	ldrb	r3, [r7, #19]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10c      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091e6:	4b08      	ldr	r3, [pc, #32]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f6:	4904      	ldr	r1, [pc, #16]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80091fe:	e009      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009200:	7cfb      	ldrb	r3, [r7, #19]
 8009202:	74bb      	strb	r3, [r7, #18]
 8009204:	e006      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009206:	bf00      	nop
 8009208:	40021000 	.word	0x40021000
 800920c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009210:	7cfb      	ldrb	r3, [r7, #19]
 8009212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009214:	7c7b      	ldrb	r3, [r7, #17]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d105      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800921a:	4b9e      	ldr	r3, [pc, #632]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800921c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921e:	4a9d      	ldr	r2, [pc, #628]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009232:	4b98      	ldr	r3, [pc, #608]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009238:	f023 0203 	bic.w	r2, r3, #3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009240:	4994      	ldr	r1, [pc, #592]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009242:	4313      	orrs	r3, r2
 8009244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009254:	4b8f      	ldr	r3, [pc, #572]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925a:	f023 020c 	bic.w	r2, r3, #12
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009262:	498c      	ldr	r1, [pc, #560]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009264:	4313      	orrs	r3, r2
 8009266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009276:	4b87      	ldr	r3, [pc, #540]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800927c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	4983      	ldr	r1, [pc, #524]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009286:	4313      	orrs	r3, r2
 8009288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0308 	and.w	r3, r3, #8
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009298:	4b7e      	ldr	r3, [pc, #504]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800929a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	497b      	ldr	r1, [pc, #492]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092ba:	4b76      	ldr	r3, [pc, #472]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c8:	4972      	ldr	r1, [pc, #456]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092dc:	4b6d      	ldr	r3, [pc, #436]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ea:	496a      	ldr	r1, [pc, #424]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092fe:	4b65      	ldr	r3, [pc, #404]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930c:	4961      	ldr	r1, [pc, #388]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800930e:	4313      	orrs	r3, r2
 8009310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009320:	4b5c      	ldr	r3, [pc, #368]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800932e:	4959      	ldr	r1, [pc, #356]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009330:	4313      	orrs	r3, r2
 8009332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009342:	4b54      	ldr	r3, [pc, #336]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009350:	4950      	ldr	r1, [pc, #320]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009352:	4313      	orrs	r3, r2
 8009354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00a      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009364:	4b4b      	ldr	r3, [pc, #300]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800936a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009372:	4948      	ldr	r1, [pc, #288]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009374:	4313      	orrs	r3, r2
 8009376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009386:	4b43      	ldr	r3, [pc, #268]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800938c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009394:	493f      	ldr	r1, [pc, #252]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009396:	4313      	orrs	r3, r2
 8009398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d028      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093a8:	4b3a      	ldr	r3, [pc, #232]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b6:	4937      	ldr	r1, [pc, #220]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093c6:	d106      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093c8:	4b32      	ldr	r3, [pc, #200]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	4a31      	ldr	r2, [pc, #196]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093d2:	60d3      	str	r3, [r2, #12]
 80093d4:	e011      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093de:	d10c      	bne.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3304      	adds	r3, #4
 80093e4:	2101      	movs	r1, #1
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f8f0 	bl	80095cc <RCCEx_PLLSAI1_Config>
 80093ec:	4603      	mov	r3, r0
 80093ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80093f0:	7cfb      	ldrb	r3, [r7, #19]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80093f6:	7cfb      	ldrb	r3, [r7, #19]
 80093f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d028      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009406:	4b23      	ldr	r3, [pc, #140]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009414:	491f      	ldr	r1, [pc, #124]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009416:	4313      	orrs	r3, r2
 8009418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009424:	d106      	bne.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009426:	4b1b      	ldr	r3, [pc, #108]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	4a1a      	ldr	r2, [pc, #104]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800942c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009430:	60d3      	str	r3, [r2, #12]
 8009432:	e011      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800943c:	d10c      	bne.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3304      	adds	r3, #4
 8009442:	2101      	movs	r1, #1
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f8c1 	bl	80095cc <RCCEx_PLLSAI1_Config>
 800944a:	4603      	mov	r3, r0
 800944c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800944e:	7cfb      	ldrb	r3, [r7, #19]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009454:	7cfb      	ldrb	r3, [r7, #19]
 8009456:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d02b      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009464:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009472:	4908      	ldr	r1, [pc, #32]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800947e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009482:	d109      	bne.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009484:	4b03      	ldr	r3, [pc, #12]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	4a02      	ldr	r2, [pc, #8]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800948a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800948e:	60d3      	str	r3, [r2, #12]
 8009490:	e014      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009492:	bf00      	nop
 8009494:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094a0:	d10c      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3304      	adds	r3, #4
 80094a6:	2101      	movs	r1, #1
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f88f 	bl	80095cc <RCCEx_PLLSAI1_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80094b2:	7cfb      	ldrb	r3, [r7, #19]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80094b8:	7cfb      	ldrb	r3, [r7, #19]
 80094ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d02f      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094c8:	4b2b      	ldr	r3, [pc, #172]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094d6:	4928      	ldr	r1, [pc, #160]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e6:	d10d      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3304      	adds	r3, #4
 80094ec:	2102      	movs	r1, #2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f86c 	bl	80095cc <RCCEx_PLLSAI1_Config>
 80094f4:	4603      	mov	r3, r0
 80094f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80094f8:	7cfb      	ldrb	r3, [r7, #19]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d014      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80094fe:	7cfb      	ldrb	r3, [r7, #19]
 8009500:	74bb      	strb	r3, [r7, #18]
 8009502:	e011      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800950c:	d10c      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3320      	adds	r3, #32
 8009512:	2102      	movs	r1, #2
 8009514:	4618      	mov	r0, r3
 8009516:	f000 f94d 	bl	80097b4 <RCCEx_PLLSAI2_Config>
 800951a:	4603      	mov	r3, r0
 800951c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800951e:	7cfb      	ldrb	r3, [r7, #19]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009524:	7cfb      	ldrb	r3, [r7, #19]
 8009526:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009534:	4b10      	ldr	r3, [pc, #64]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009542:	490d      	ldr	r1, [pc, #52]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009566:	4904      	ldr	r1, [pc, #16]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009568:	4313      	orrs	r3, r2
 800956a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800956e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	40021000 	.word	0x40021000

0800957c <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8009580:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8009582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009586:	4a08      	ldr	r2, [pc, #32]	; (80095a8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8009588:	f023 0320 	bic.w	r3, r3, #32
 800958c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	4a04      	ldr	r2, [pc, #16]	; (80095a8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8009596:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800959a:	6193      	str	r3, [r2, #24]
}
 800959c:	bf00      	nop
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40021000 	.word	0x40021000

080095ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80095b0:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a04      	ldr	r2, [pc, #16]	; (80095c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80095b6:	f043 0304 	orr.w	r3, r3, #4
 80095ba:	6013      	str	r3, [r2, #0]
}
 80095bc:	bf00      	nop
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40021000 	.word	0x40021000

080095cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80095da:	4b75      	ldr	r3, [pc, #468]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d018      	beq.n	8009618 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80095e6:	4b72      	ldr	r3, [pc, #456]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f003 0203 	and.w	r2, r3, #3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d10d      	bne.n	8009612 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
       ||
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d009      	beq.n	8009612 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80095fe:	4b6c      	ldr	r3, [pc, #432]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	091b      	lsrs	r3, r3, #4
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
       ||
 800960e:	429a      	cmp	r2, r3
 8009610:	d047      	beq.n	80096a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	73fb      	strb	r3, [r7, #15]
 8009616:	e044      	b.n	80096a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b03      	cmp	r3, #3
 800961e:	d018      	beq.n	8009652 <RCCEx_PLLSAI1_Config+0x86>
 8009620:	2b03      	cmp	r3, #3
 8009622:	d825      	bhi.n	8009670 <RCCEx_PLLSAI1_Config+0xa4>
 8009624:	2b01      	cmp	r3, #1
 8009626:	d002      	beq.n	800962e <RCCEx_PLLSAI1_Config+0x62>
 8009628:	2b02      	cmp	r3, #2
 800962a:	d009      	beq.n	8009640 <RCCEx_PLLSAI1_Config+0x74>
 800962c:	e020      	b.n	8009670 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800962e:	4b60      	ldr	r3, [pc, #384]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d11d      	bne.n	8009676 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800963e:	e01a      	b.n	8009676 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009640:	4b5b      	ldr	r3, [pc, #364]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009648:	2b00      	cmp	r3, #0
 800964a:	d116      	bne.n	800967a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009650:	e013      	b.n	800967a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009652:	4b57      	ldr	r3, [pc, #348]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10f      	bne.n	800967e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800965e:	4b54      	ldr	r3, [pc, #336]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d109      	bne.n	800967e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800966e:	e006      	b.n	800967e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
      break;
 8009674:	e004      	b.n	8009680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009676:	bf00      	nop
 8009678:	e002      	b.n	8009680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800967a:	bf00      	nop
 800967c:	e000      	b.n	8009680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800967e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10d      	bne.n	80096a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009686:	4b4a      	ldr	r3, [pc, #296]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6819      	ldr	r1, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	3b01      	subs	r3, #1
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	430b      	orrs	r3, r1
 800969c:	4944      	ldr	r1, [pc, #272]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d17d      	bne.n	80097a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80096a8:	4b41      	ldr	r3, [pc, #260]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a40      	ldr	r2, [pc, #256]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096b4:	f7fc f890 	bl	80057d8 <HAL_GetTick>
 80096b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80096ba:	e009      	b.n	80096d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80096bc:	f7fc f88c 	bl	80057d8 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d902      	bls.n	80096d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	73fb      	strb	r3, [r7, #15]
        break;
 80096ce:	e005      	b.n	80096dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80096d0:	4b37      	ldr	r3, [pc, #220]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1ef      	bne.n	80096bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d160      	bne.n	80097a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d111      	bne.n	800970c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80096e8:	4b31      	ldr	r3, [pc, #196]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80096f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	6892      	ldr	r2, [r2, #8]
 80096f8:	0211      	lsls	r1, r2, #8
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	68d2      	ldr	r2, [r2, #12]
 80096fe:	0912      	lsrs	r2, r2, #4
 8009700:	0452      	lsls	r2, r2, #17
 8009702:	430a      	orrs	r2, r1
 8009704:	492a      	ldr	r1, [pc, #168]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009706:	4313      	orrs	r3, r2
 8009708:	610b      	str	r3, [r1, #16]
 800970a:	e027      	b.n	800975c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d112      	bne.n	8009738 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009712:	4b27      	ldr	r3, [pc, #156]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800971a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	6892      	ldr	r2, [r2, #8]
 8009722:	0211      	lsls	r1, r2, #8
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6912      	ldr	r2, [r2, #16]
 8009728:	0852      	lsrs	r2, r2, #1
 800972a:	3a01      	subs	r2, #1
 800972c:	0552      	lsls	r2, r2, #21
 800972e:	430a      	orrs	r2, r1
 8009730:	491f      	ldr	r1, [pc, #124]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009732:	4313      	orrs	r3, r2
 8009734:	610b      	str	r3, [r1, #16]
 8009736:	e011      	b.n	800975c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009738:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009740:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	6892      	ldr	r2, [r2, #8]
 8009748:	0211      	lsls	r1, r2, #8
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	6952      	ldr	r2, [r2, #20]
 800974e:	0852      	lsrs	r2, r2, #1
 8009750:	3a01      	subs	r2, #1
 8009752:	0652      	lsls	r2, r2, #25
 8009754:	430a      	orrs	r2, r1
 8009756:	4916      	ldr	r1, [pc, #88]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009758:	4313      	orrs	r3, r2
 800975a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800975c:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009762:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009768:	f7fc f836 	bl	80057d8 <HAL_GetTick>
 800976c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800976e:	e009      	b.n	8009784 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009770:	f7fc f832 	bl	80057d8 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d902      	bls.n	8009784 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	73fb      	strb	r3, [r7, #15]
          break;
 8009782:	e005      	b.n	8009790 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009784:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0ef      	beq.n	8009770 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d106      	bne.n	80097a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009796:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	4904      	ldr	r1, [pc, #16]	; (80097b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	40021000 	.word	0x40021000

080097b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097c2:	4b6a      	ldr	r3, [pc, #424]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d018      	beq.n	8009800 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80097ce:	4b67      	ldr	r3, [pc, #412]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f003 0203 	and.w	r2, r3, #3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d10d      	bne.n	80097fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
       ||
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80097e6:	4b61      	ldr	r3, [pc, #388]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	091b      	lsrs	r3, r3, #4
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
       ||
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d047      	beq.n	800988a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	73fb      	strb	r3, [r7, #15]
 80097fe:	e044      	b.n	800988a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d018      	beq.n	800983a <RCCEx_PLLSAI2_Config+0x86>
 8009808:	2b03      	cmp	r3, #3
 800980a:	d825      	bhi.n	8009858 <RCCEx_PLLSAI2_Config+0xa4>
 800980c:	2b01      	cmp	r3, #1
 800980e:	d002      	beq.n	8009816 <RCCEx_PLLSAI2_Config+0x62>
 8009810:	2b02      	cmp	r3, #2
 8009812:	d009      	beq.n	8009828 <RCCEx_PLLSAI2_Config+0x74>
 8009814:	e020      	b.n	8009858 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009816:	4b55      	ldr	r3, [pc, #340]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d11d      	bne.n	800985e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009826:	e01a      	b.n	800985e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009828:	4b50      	ldr	r3, [pc, #320]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009830:	2b00      	cmp	r3, #0
 8009832:	d116      	bne.n	8009862 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009838:	e013      	b.n	8009862 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800983a:	4b4c      	ldr	r3, [pc, #304]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10f      	bne.n	8009866 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009846:	4b49      	ldr	r3, [pc, #292]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009856:	e006      	b.n	8009866 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	73fb      	strb	r3, [r7, #15]
      break;
 800985c:	e004      	b.n	8009868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800985e:	bf00      	nop
 8009860:	e002      	b.n	8009868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009862:	bf00      	nop
 8009864:	e000      	b.n	8009868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009866:	bf00      	nop
    }

    if(status == HAL_OK)
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10d      	bne.n	800988a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800986e:	4b3f      	ldr	r3, [pc, #252]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	3b01      	subs	r3, #1
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	430b      	orrs	r3, r1
 8009884:	4939      	ldr	r1, [pc, #228]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009886:	4313      	orrs	r3, r2
 8009888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d167      	bne.n	8009960 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a35      	ldr	r2, [pc, #212]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800989a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800989c:	f7fb ff9c 	bl	80057d8 <HAL_GetTick>
 80098a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80098a2:	e009      	b.n	80098b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80098a4:	f7fb ff98 	bl	80057d8 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d902      	bls.n	80098b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	73fb      	strb	r3, [r7, #15]
        break;
 80098b6:	e005      	b.n	80098c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80098b8:	4b2c      	ldr	r3, [pc, #176]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1ef      	bne.n	80098a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d14a      	bne.n	8009960 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d111      	bne.n	80098f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80098d0:	4b26      	ldr	r3, [pc, #152]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80098d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6892      	ldr	r2, [r2, #8]
 80098e0:	0211      	lsls	r1, r2, #8
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	68d2      	ldr	r2, [r2, #12]
 80098e6:	0912      	lsrs	r2, r2, #4
 80098e8:	0452      	lsls	r2, r2, #17
 80098ea:	430a      	orrs	r2, r1
 80098ec:	491f      	ldr	r1, [pc, #124]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	614b      	str	r3, [r1, #20]
 80098f2:	e011      	b.n	8009918 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80098f4:	4b1d      	ldr	r3, [pc, #116]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80098fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6892      	ldr	r2, [r2, #8]
 8009904:	0211      	lsls	r1, r2, #8
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	6912      	ldr	r2, [r2, #16]
 800990a:	0852      	lsrs	r2, r2, #1
 800990c:	3a01      	subs	r2, #1
 800990e:	0652      	lsls	r2, r2, #25
 8009910:	430a      	orrs	r2, r1
 8009912:	4916      	ldr	r1, [pc, #88]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009914:	4313      	orrs	r3, r2
 8009916:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009918:	4b14      	ldr	r3, [pc, #80]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a13      	ldr	r2, [pc, #76]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 800991e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009924:	f7fb ff58 	bl	80057d8 <HAL_GetTick>
 8009928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800992a:	e009      	b.n	8009940 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800992c:	f7fb ff54 	bl	80057d8 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	2b02      	cmp	r3, #2
 8009938:	d902      	bls.n	8009940 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	73fb      	strb	r3, [r7, #15]
          break;
 800993e:	e005      	b.n	800994c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0ef      	beq.n	800992c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009954:	695a      	ldr	r2, [r3, #20]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	4904      	ldr	r1, [pc, #16]	; (800996c <RCCEx_PLLSAI2_Config+0x1b8>)
 800995c:	4313      	orrs	r3, r2
 800995e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	40021000 	.word	0x40021000

08009970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e095      	b.n	8009aae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	2b00      	cmp	r3, #0
 8009988:	d108      	bne.n	800999c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009992:	d009      	beq.n	80099a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	61da      	str	r2, [r3, #28]
 800999a:	e005      	b.n	80099a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d106      	bne.n	80099c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f89f 	bl	8009b06 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099e8:	d902      	bls.n	80099f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	e002      	b.n	80099f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80099f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80099fe:	d007      	beq.n	8009a10 <HAL_SPI_Init+0xa0>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a08:	d002      	beq.n	8009a10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	431a      	orrs	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	ea42 0103 	orr.w	r1, r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	0c1b      	lsrs	r3, r3, #16
 8009a6c:	f003 0204 	and.w	r2, r3, #4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	f003 0310 	and.w	r3, r3, #16
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009a8c:	ea42 0103 	orr.w	r1, r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e01a      	b.n	8009afe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ade:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f81a 	bl	8009b1a <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8009b22:	bf00      	nop
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b088      	sub	sp, #32
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	603b      	str	r3, [r7, #0]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_SPI_Transmit+0x22>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e158      	b.n	8009e02 <HAL_SPI_Transmit+0x2d4>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b58:	f7fb fe3e 	bl	80057d8 <HAL_GetTick>
 8009b5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b5e:	88fb      	ldrh	r3, [r7, #6]
 8009b60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d002      	beq.n	8009b74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b6e:	2302      	movs	r3, #2
 8009b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b72:	e13d      	b.n	8009df0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <HAL_SPI_Transmit+0x52>
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b84:	e134      	b.n	8009df0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2203      	movs	r2, #3
 8009b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	88fa      	ldrh	r2, [r7, #6]
 8009b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	88fa      	ldrh	r2, [r7, #6]
 8009ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd0:	d10f      	bne.n	8009bf2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b40      	cmp	r3, #64	; 0x40
 8009bfe:	d007      	beq.n	8009c10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c18:	d94b      	bls.n	8009cb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <HAL_SPI_Transmit+0xfa>
 8009c22:	8afb      	ldrh	r3, [r7, #22]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d13e      	bne.n	8009ca6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	881a      	ldrh	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c38:	1c9a      	adds	r2, r3, #2
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c4c:	e02b      	b.n	8009ca6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d112      	bne.n	8009c82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c60:	881a      	ldrh	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	1c9a      	adds	r2, r3, #2
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c80:	e011      	b.n	8009ca6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c82:	f7fb fda9 	bl	80057d8 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d803      	bhi.n	8009c9a <HAL_SPI_Transmit+0x16c>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c98:	d102      	bne.n	8009ca0 <HAL_SPI_Transmit+0x172>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ca4:	e0a4      	b.n	8009df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1ce      	bne.n	8009c4e <HAL_SPI_Transmit+0x120>
 8009cb0:	e07c      	b.n	8009dac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <HAL_SPI_Transmit+0x192>
 8009cba:	8afb      	ldrh	r3, [r7, #22]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d170      	bne.n	8009da2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d912      	bls.n	8009cf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	881a      	ldrh	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	1c9a      	adds	r2, r3, #2
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b02      	subs	r3, #2
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009cee:	e058      	b.n	8009da2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	7812      	ldrb	r2, [r2, #0]
 8009cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009d16:	e044      	b.n	8009da2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d12b      	bne.n	8009d7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d912      	bls.n	8009d56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	881a      	ldrh	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	1c9a      	adds	r2, r3, #2
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	3b02      	subs	r3, #2
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d54:	e025      	b.n	8009da2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	7812      	ldrb	r2, [r2, #0]
 8009d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	3b01      	subs	r3, #1
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d7c:	e011      	b.n	8009da2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d7e:	f7fb fd2b 	bl	80057d8 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d803      	bhi.n	8009d96 <HAL_SPI_Transmit+0x268>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d94:	d102      	bne.n	8009d9c <HAL_SPI_Transmit+0x26e>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d102      	bne.n	8009da2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009da0:	e026      	b.n	8009df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1b5      	bne.n	8009d18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fb65 	bl	800a480 <SPI_EndRxTxTransaction>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10a      	bne.n	8009de0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dca:	2300      	movs	r3, #0
 8009dcc:	613b      	str	r3, [r7, #16]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	613b      	str	r3, [r7, #16]
 8009dde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	77fb      	strb	r3, [r7, #31]
 8009dec:	e000      	b.n	8009df0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3720      	adds	r7, #32
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b08a      	sub	sp, #40	; 0x28
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
 8009e16:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d101      	bne.n	8009e30 <HAL_SPI_TransmitReceive+0x26>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e1fb      	b.n	800a228 <HAL_SPI_TransmitReceive+0x41e>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e38:	f7fb fcce 	bl	80057d8 <HAL_GetTick>
 8009e3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009e4c:	887b      	ldrh	r3, [r7, #2]
 8009e4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009e50:	887b      	ldrh	r3, [r7, #2]
 8009e52:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e54:	7efb      	ldrb	r3, [r7, #27]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d00e      	beq.n	8009e78 <HAL_SPI_TransmitReceive+0x6e>
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e60:	d106      	bne.n	8009e70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <HAL_SPI_TransmitReceive+0x66>
 8009e6a:	7efb      	ldrb	r3, [r7, #27]
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d003      	beq.n	8009e78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009e70:	2302      	movs	r3, #2
 8009e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009e76:	e1cd      	b.n	800a214 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <HAL_SPI_TransmitReceive+0x80>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <HAL_SPI_TransmitReceive+0x80>
 8009e84:	887b      	ldrh	r3, [r7, #2]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d103      	bne.n	8009e92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009e90:	e1c0      	b.n	800a214 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d003      	beq.n	8009ea6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	887a      	ldrh	r2, [r7, #2]
 8009eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	887a      	ldrh	r2, [r7, #2]
 8009ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	887a      	ldrh	r2, [r7, #2]
 8009ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	887a      	ldrh	r2, [r7, #2]
 8009ed2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ee8:	d802      	bhi.n	8009ef0 <HAL_SPI_TransmitReceive+0xe6>
 8009eea:	8a3b      	ldrh	r3, [r7, #16]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d908      	bls.n	8009f02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009efe:	605a      	str	r2, [r3, #4]
 8009f00:	e007      	b.n	8009f12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	d007      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f38:	d97c      	bls.n	800a034 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_SPI_TransmitReceive+0x13e>
 8009f42:	8a7b      	ldrh	r3, [r7, #18]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d169      	bne.n	800a01c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4c:	881a      	ldrh	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	1c9a      	adds	r2, r3, #2
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f6c:	e056      	b.n	800a01c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d11b      	bne.n	8009fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d016      	beq.n	8009fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d113      	bne.n	8009fb4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	881a      	ldrh	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	1c9a      	adds	r2, r3, #2
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d11c      	bne.n	8009ffc <HAL_SPI_TransmitReceive+0x1f2>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d016      	beq.n	8009ffc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd8:	b292      	uxth	r2, r2
 8009fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe0:	1c9a      	adds	r2, r3, #2
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ffc:	f7fb fbec 	bl	80057d8 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a008:	429a      	cmp	r2, r3
 800a00a:	d807      	bhi.n	800a01c <HAL_SPI_TransmitReceive+0x212>
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a012:	d003      	beq.n	800a01c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a01a:	e0fb      	b.n	800a214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a020:	b29b      	uxth	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1a3      	bne.n	8009f6e <HAL_SPI_TransmitReceive+0x164>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d19d      	bne.n	8009f6e <HAL_SPI_TransmitReceive+0x164>
 800a032:	e0df      	b.n	800a1f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <HAL_SPI_TransmitReceive+0x23a>
 800a03c:	8a7b      	ldrh	r3, [r7, #18]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	f040 80cb 	bne.w	800a1da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a048:	b29b      	uxth	r3, r3
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d912      	bls.n	800a074 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a052:	881a      	ldrh	r2, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05e:	1c9a      	adds	r2, r3, #2
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b02      	subs	r3, #2
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a072:	e0b2      	b.n	800a1da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	330c      	adds	r3, #12
 800a07e:	7812      	ldrb	r2, [r2, #0]
 800a080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a090:	b29b      	uxth	r3, r3
 800a092:	3b01      	subs	r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a09a:	e09e      	b.n	800a1da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d134      	bne.n	800a114 <HAL_SPI_TransmitReceive+0x30a>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d02f      	beq.n	800a114 <HAL_SPI_TransmitReceive+0x30a>
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d12c      	bne.n	800a114 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d912      	bls.n	800a0ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	881a      	ldrh	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d4:	1c9a      	adds	r2, r3, #2
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b02      	subs	r3, #2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a0e8:	e012      	b.n	800a110 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	330c      	adds	r3, #12
 800a0f4:	7812      	ldrb	r2, [r2, #0]
 800a0f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a106:	b29b      	uxth	r3, r3
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d148      	bne.n	800a1b4 <HAL_SPI_TransmitReceive+0x3aa>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a128:	b29b      	uxth	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d042      	beq.n	800a1b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a134:	b29b      	uxth	r3, r3
 800a136:	2b01      	cmp	r3, #1
 800a138:	d923      	bls.n	800a182 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	b292      	uxth	r2, r2
 800a146:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14c:	1c9a      	adds	r2, r3, #2
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a158:	b29b      	uxth	r3, r3
 800a15a:	3b02      	subs	r3, #2
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d81f      	bhi.n	800a1b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a17e:	605a      	str	r2, [r3, #4]
 800a180:	e016      	b.n	800a1b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f103 020c 	add.w	r2, r3, #12
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	b2d2      	uxtb	r2, r2
 800a192:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a1b4:	f7fb fb10 	bl	80057d8 <HAL_GetTick>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d803      	bhi.n	800a1cc <HAL_SPI_TransmitReceive+0x3c2>
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ca:	d102      	bne.n	800a1d2 <HAL_SPI_TransmitReceive+0x3c8>
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a1d8:	e01c      	b.n	800a214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f47f af5b 	bne.w	800a09c <HAL_SPI_TransmitReceive+0x292>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f47f af54 	bne.w	800a09c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1f4:	69fa      	ldr	r2, [r7, #28]
 800a1f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f941 	bl	800a480 <SPI_EndRxTxTransaction>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d006      	beq.n	800a212 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	661a      	str	r2, [r3, #96]	; 0x60
 800a210:	e000      	b.n	800a214 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3728      	adds	r7, #40	; 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a23e:	b2db      	uxtb	r3, r3
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	603b      	str	r3, [r7, #0]
 800a258:	4613      	mov	r3, r2
 800a25a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a25c:	f7fb fabc 	bl	80057d8 <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	4413      	add	r3, r2
 800a26a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a26c:	f7fb fab4 	bl	80057d8 <HAL_GetTick>
 800a270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a272:	4b39      	ldr	r3, [pc, #228]	; (800a358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	015b      	lsls	r3, r3, #5
 800a278:	0d1b      	lsrs	r3, r3, #20
 800a27a:	69fa      	ldr	r2, [r7, #28]
 800a27c:	fb02 f303 	mul.w	r3, r2, r3
 800a280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a282:	e054      	b.n	800a32e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28a:	d050      	beq.n	800a32e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a28c:	f7fb faa4 	bl	80057d8 <HAL_GetTick>
 800a290:	4602      	mov	r2, r0
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d902      	bls.n	800a2a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d13d      	bne.n	800a31e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a2b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2ba:	d111      	bne.n	800a2e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2c4:	d004      	beq.n	800a2d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2ce:	d107      	bne.n	800a2e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e8:	d10f      	bne.n	800a30a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e017      	b.n	800a34e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a324:	2300      	movs	r3, #0
 800a326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	4013      	ands	r3, r2
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	bf0c      	ite	eq
 800a33e:	2301      	moveq	r3, #1
 800a340:	2300      	movne	r3, #0
 800a342:	b2db      	uxtb	r3, r3
 800a344:	461a      	mov	r2, r3
 800a346:	79fb      	ldrb	r3, [r7, #7]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d19b      	bne.n	800a284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000004 	.word	0x20000004

0800a35c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a36a:	f7fb fa35 	bl	80057d8 <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	1a9b      	subs	r3, r3, r2
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	4413      	add	r3, r2
 800a378:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a37a:	f7fb fa2d 	bl	80057d8 <HAL_GetTick>
 800a37e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a380:	4b3e      	ldr	r3, [pc, #248]	; (800a47c <SPI_WaitFifoStateUntilTimeout+0x120>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	00da      	lsls	r2, r3, #3
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	0d1b      	lsrs	r3, r3, #20
 800a390:	69fa      	ldr	r2, [r7, #28]
 800a392:	fb02 f303 	mul.w	r3, r2, r3
 800a396:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800a398:	e062      	b.n	800a460 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a3a0:	d109      	bne.n	800a3b6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	330c      	adds	r3, #12
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800a3b4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3bc:	d050      	beq.n	800a460 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3be:	f7fb fa0b 	bl	80057d8 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	69fa      	ldr	r2, [r7, #28]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d902      	bls.n	800a3d4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d13d      	bne.n	800a450 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a3e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3ec:	d111      	bne.n	800a412 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f6:	d004      	beq.n	800a402 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a400:	d107      	bne.n	800a412 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a410:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a41a:	d10f      	bne.n	800a43c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a43a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e010      	b.n	800a472 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4013      	ands	r3, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d194      	bne.n	800a39a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3720      	adds	r7, #32
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20000004 	.word	0x20000004

0800a480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af02      	add	r7, sp, #8
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff ff5f 	bl	800a35c <SPI_WaitFifoStateUntilTimeout>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d007      	beq.n	800a4b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4a8:	f043 0220 	orr.w	r2, r3, #32
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e027      	b.n	800a504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2180      	movs	r1, #128	; 0x80
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff fec4 	bl	800a24c <SPI_WaitFlagStateUntilTimeout>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d007      	beq.n	800a4da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ce:	f043 0220 	orr.w	r2, r3, #32
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e014      	b.n	800a504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7ff ff38 	bl	800a35c <SPI_WaitFifoStateUntilTimeout>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f6:	f043 0220 	orr.w	r2, r3, #32
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a4fe:	2303      	movs	r3, #3
 800a500:	e000      	b.n	800a504 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e049      	b.n	800a5b2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7f8 f904 	bl	8002740 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f000 fc56 	bl	800adfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <HAL_TIM_OC_Start_IT+0x24>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	bf14      	ite	ne
 800a5d8:	2301      	movne	r3, #1
 800a5da:	2300      	moveq	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	e03c      	b.n	800a65a <HAL_TIM_OC_Start_IT+0x9e>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d109      	bne.n	800a5fa <HAL_TIM_OC_Start_IT+0x3e>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	bf14      	ite	ne
 800a5f2:	2301      	movne	r3, #1
 800a5f4:	2300      	moveq	r3, #0
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	e02f      	b.n	800a65a <HAL_TIM_OC_Start_IT+0x9e>
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	d109      	bne.n	800a614 <HAL_TIM_OC_Start_IT+0x58>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b01      	cmp	r3, #1
 800a60a:	bf14      	ite	ne
 800a60c:	2301      	movne	r3, #1
 800a60e:	2300      	moveq	r3, #0
 800a610:	b2db      	uxtb	r3, r3
 800a612:	e022      	b.n	800a65a <HAL_TIM_OC_Start_IT+0x9e>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b0c      	cmp	r3, #12
 800a618:	d109      	bne.n	800a62e <HAL_TIM_OC_Start_IT+0x72>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b01      	cmp	r3, #1
 800a624:	bf14      	ite	ne
 800a626:	2301      	movne	r3, #1
 800a628:	2300      	moveq	r3, #0
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	e015      	b.n	800a65a <HAL_TIM_OC_Start_IT+0x9e>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b10      	cmp	r3, #16
 800a632:	d109      	bne.n	800a648 <HAL_TIM_OC_Start_IT+0x8c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	bf14      	ite	ne
 800a640:	2301      	movne	r3, #1
 800a642:	2300      	moveq	r3, #0
 800a644:	b2db      	uxtb	r3, r3
 800a646:	e008      	b.n	800a65a <HAL_TIM_OC_Start_IT+0x9e>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	bf14      	ite	ne
 800a654:	2301      	movne	r3, #1
 800a656:	2300      	moveq	r3, #0
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e0e2      	b.n	800a828 <HAL_TIM_OC_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d104      	bne.n	800a672 <HAL_TIM_OC_Start_IT+0xb6>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2202      	movs	r2, #2
 800a66c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a670:	e023      	b.n	800a6ba <HAL_TIM_OC_Start_IT+0xfe>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b04      	cmp	r3, #4
 800a676:	d104      	bne.n	800a682 <HAL_TIM_OC_Start_IT+0xc6>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a680:	e01b      	b.n	800a6ba <HAL_TIM_OC_Start_IT+0xfe>
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b08      	cmp	r3, #8
 800a686:	d104      	bne.n	800a692 <HAL_TIM_OC_Start_IT+0xd6>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a690:	e013      	b.n	800a6ba <HAL_TIM_OC_Start_IT+0xfe>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	2b0c      	cmp	r3, #12
 800a696:	d104      	bne.n	800a6a2 <HAL_TIM_OC_Start_IT+0xe6>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6a0:	e00b      	b.n	800a6ba <HAL_TIM_OC_Start_IT+0xfe>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d104      	bne.n	800a6b2 <HAL_TIM_OC_Start_IT+0xf6>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6b0:	e003      	b.n	800a6ba <HAL_TIM_OC_Start_IT+0xfe>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b0c      	cmp	r3, #12
 800a6be:	d841      	bhi.n	800a744 <HAL_TIM_OC_Start_IT+0x188>
 800a6c0:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <HAL_TIM_OC_Start_IT+0x10c>)
 800a6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c6:	bf00      	nop
 800a6c8:	0800a6fd 	.word	0x0800a6fd
 800a6cc:	0800a745 	.word	0x0800a745
 800a6d0:	0800a745 	.word	0x0800a745
 800a6d4:	0800a745 	.word	0x0800a745
 800a6d8:	0800a70f 	.word	0x0800a70f
 800a6dc:	0800a745 	.word	0x0800a745
 800a6e0:	0800a745 	.word	0x0800a745
 800a6e4:	0800a745 	.word	0x0800a745
 800a6e8:	0800a721 	.word	0x0800a721
 800a6ec:	0800a745 	.word	0x0800a745
 800a6f0:	0800a745 	.word	0x0800a745
 800a6f4:	0800a745 	.word	0x0800a745
 800a6f8:	0800a733 	.word	0x0800a733
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f042 0202 	orr.w	r2, r2, #2
 800a70a:	60da      	str	r2, [r3, #12]
      break;
 800a70c:	e01b      	b.n	800a746 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f042 0204 	orr.w	r2, r2, #4
 800a71c:	60da      	str	r2, [r3, #12]
      break;
 800a71e:	e012      	b.n	800a746 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68da      	ldr	r2, [r3, #12]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f042 0208 	orr.w	r2, r2, #8
 800a72e:	60da      	str	r2, [r3, #12]
      break;
 800a730:	e009      	b.n	800a746 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f042 0210 	orr.w	r2, r2, #16
 800a740:	60da      	str	r2, [r3, #12]
      break;
 800a742:	e000      	b.n	800a746 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 800a744:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2201      	movs	r2, #1
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fec4 	bl	800b4dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a35      	ldr	r2, [pc, #212]	; (800a830 <HAL_TIM_OC_Start_IT+0x274>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d013      	beq.n	800a786 <HAL_TIM_OC_Start_IT+0x1ca>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a34      	ldr	r2, [pc, #208]	; (800a834 <HAL_TIM_OC_Start_IT+0x278>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d00e      	beq.n	800a786 <HAL_TIM_OC_Start_IT+0x1ca>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a32      	ldr	r2, [pc, #200]	; (800a838 <HAL_TIM_OC_Start_IT+0x27c>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d009      	beq.n	800a786 <HAL_TIM_OC_Start_IT+0x1ca>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a31      	ldr	r2, [pc, #196]	; (800a83c <HAL_TIM_OC_Start_IT+0x280>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d004      	beq.n	800a786 <HAL_TIM_OC_Start_IT+0x1ca>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a2f      	ldr	r2, [pc, #188]	; (800a840 <HAL_TIM_OC_Start_IT+0x284>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d101      	bne.n	800a78a <HAL_TIM_OC_Start_IT+0x1ce>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <HAL_TIM_OC_Start_IT+0x1d0>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d007      	beq.n	800a7a0 <HAL_TIM_OC_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a79e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a22      	ldr	r2, [pc, #136]	; (800a830 <HAL_TIM_OC_Start_IT+0x274>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d01d      	beq.n	800a7e6 <HAL_TIM_OC_Start_IT+0x22a>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b2:	d018      	beq.n	800a7e6 <HAL_TIM_OC_Start_IT+0x22a>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a22      	ldr	r2, [pc, #136]	; (800a844 <HAL_TIM_OC_Start_IT+0x288>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d013      	beq.n	800a7e6 <HAL_TIM_OC_Start_IT+0x22a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a21      	ldr	r2, [pc, #132]	; (800a848 <HAL_TIM_OC_Start_IT+0x28c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00e      	beq.n	800a7e6 <HAL_TIM_OC_Start_IT+0x22a>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a1f      	ldr	r2, [pc, #124]	; (800a84c <HAL_TIM_OC_Start_IT+0x290>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d009      	beq.n	800a7e6 <HAL_TIM_OC_Start_IT+0x22a>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a17      	ldr	r2, [pc, #92]	; (800a834 <HAL_TIM_OC_Start_IT+0x278>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d004      	beq.n	800a7e6 <HAL_TIM_OC_Start_IT+0x22a>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a15      	ldr	r2, [pc, #84]	; (800a838 <HAL_TIM_OC_Start_IT+0x27c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d115      	bne.n	800a812 <HAL_TIM_OC_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689a      	ldr	r2, [r3, #8]
 800a7ec:	4b18      	ldr	r3, [pc, #96]	; (800a850 <HAL_TIM_OC_Start_IT+0x294>)
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b06      	cmp	r3, #6
 800a7f6:	d015      	beq.n	800a824 <HAL_TIM_OC_Start_IT+0x268>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7fe:	d011      	beq.n	800a824 <HAL_TIM_OC_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a810:	e008      	b.n	800a824 <HAL_TIM_OC_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f042 0201 	orr.w	r2, r2, #1
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	e000      	b.n	800a826 <HAL_TIM_OC_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40012c00 	.word	0x40012c00
 800a834:	40013400 	.word	0x40013400
 800a838:	40014000 	.word	0x40014000
 800a83c:	40014400 	.word	0x40014400
 800a840:	40014800 	.word	0x40014800
 800a844:	40000400 	.word	0x40000400
 800a848:	40000800 	.word	0x40000800
 800a84c:	40000c00 	.word	0x40000c00
 800a850:	00010007 	.word	0x00010007

0800a854 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b0c      	cmp	r3, #12
 800a862:	d841      	bhi.n	800a8e8 <HAL_TIM_OC_Stop_IT+0x94>
 800a864:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <HAL_TIM_OC_Stop_IT+0x18>)
 800a866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86a:	bf00      	nop
 800a86c:	0800a8a1 	.word	0x0800a8a1
 800a870:	0800a8e9 	.word	0x0800a8e9
 800a874:	0800a8e9 	.word	0x0800a8e9
 800a878:	0800a8e9 	.word	0x0800a8e9
 800a87c:	0800a8b3 	.word	0x0800a8b3
 800a880:	0800a8e9 	.word	0x0800a8e9
 800a884:	0800a8e9 	.word	0x0800a8e9
 800a888:	0800a8e9 	.word	0x0800a8e9
 800a88c:	0800a8c5 	.word	0x0800a8c5
 800a890:	0800a8e9 	.word	0x0800a8e9
 800a894:	0800a8e9 	.word	0x0800a8e9
 800a898:	0800a8e9 	.word	0x0800a8e9
 800a89c:	0800a8d7 	.word	0x0800a8d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f022 0202 	bic.w	r2, r2, #2
 800a8ae:	60da      	str	r2, [r3, #12]
      break;
 800a8b0:	e01b      	b.n	800a8ea <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68da      	ldr	r2, [r3, #12]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 0204 	bic.w	r2, r2, #4
 800a8c0:	60da      	str	r2, [r3, #12]
      break;
 800a8c2:	e012      	b.n	800a8ea <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68da      	ldr	r2, [r3, #12]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0208 	bic.w	r2, r2, #8
 800a8d2:	60da      	str	r2, [r3, #12]
      break;
 800a8d4:	e009      	b.n	800a8ea <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0210 	bic.w	r2, r2, #16
 800a8e4:	60da      	str	r2, [r3, #12]
      break;
 800a8e6:	e000      	b.n	800a8ea <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800a8e8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fdf2 	bl	800b4dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a3e      	ldr	r2, [pc, #248]	; (800a9f8 <HAL_TIM_OC_Stop_IT+0x1a4>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d013      	beq.n	800a92a <HAL_TIM_OC_Stop_IT+0xd6>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a3d      	ldr	r2, [pc, #244]	; (800a9fc <HAL_TIM_OC_Stop_IT+0x1a8>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00e      	beq.n	800a92a <HAL_TIM_OC_Stop_IT+0xd6>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a3b      	ldr	r2, [pc, #236]	; (800aa00 <HAL_TIM_OC_Stop_IT+0x1ac>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d009      	beq.n	800a92a <HAL_TIM_OC_Stop_IT+0xd6>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a3a      	ldr	r2, [pc, #232]	; (800aa04 <HAL_TIM_OC_Stop_IT+0x1b0>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d004      	beq.n	800a92a <HAL_TIM_OC_Stop_IT+0xd6>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a38      	ldr	r2, [pc, #224]	; (800aa08 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d101      	bne.n	800a92e <HAL_TIM_OC_Stop_IT+0xda>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e000      	b.n	800a930 <HAL_TIM_OC_Stop_IT+0xdc>
 800a92e:	2300      	movs	r3, #0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d017      	beq.n	800a964 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6a1a      	ldr	r2, [r3, #32]
 800a93a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a93e:	4013      	ands	r3, r2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10f      	bne.n	800a964 <HAL_TIM_OC_Stop_IT+0x110>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6a1a      	ldr	r2, [r3, #32]
 800a94a:	f240 4344 	movw	r3, #1092	; 0x444
 800a94e:	4013      	ands	r3, r2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d107      	bne.n	800a964 <HAL_TIM_OC_Stop_IT+0x110>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a962:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6a1a      	ldr	r2, [r3, #32]
 800a96a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a96e:	4013      	ands	r3, r2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10f      	bne.n	800a994 <HAL_TIM_OC_Stop_IT+0x140>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a1a      	ldr	r2, [r3, #32]
 800a97a:	f240 4344 	movw	r3, #1092	; 0x444
 800a97e:	4013      	ands	r3, r2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d107      	bne.n	800a994 <HAL_TIM_OC_Stop_IT+0x140>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f022 0201 	bic.w	r2, r2, #1
 800a992:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d104      	bne.n	800a9a4 <HAL_TIM_OC_Stop_IT+0x150>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9a2:	e023      	b.n	800a9ec <HAL_TIM_OC_Stop_IT+0x198>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d104      	bne.n	800a9b4 <HAL_TIM_OC_Stop_IT+0x160>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9b2:	e01b      	b.n	800a9ec <HAL_TIM_OC_Stop_IT+0x198>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b08      	cmp	r3, #8
 800a9b8:	d104      	bne.n	800a9c4 <HAL_TIM_OC_Stop_IT+0x170>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9c2:	e013      	b.n	800a9ec <HAL_TIM_OC_Stop_IT+0x198>
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b0c      	cmp	r3, #12
 800a9c8:	d104      	bne.n	800a9d4 <HAL_TIM_OC_Stop_IT+0x180>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9d2:	e00b      	b.n	800a9ec <HAL_TIM_OC_Stop_IT+0x198>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d104      	bne.n	800a9e4 <HAL_TIM_OC_Stop_IT+0x190>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9e2:	e003      	b.n	800a9ec <HAL_TIM_OC_Stop_IT+0x198>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40012c00 	.word	0x40012c00
 800a9fc:	40013400 	.word	0x40013400
 800aa00:	40014000 	.word	0x40014000
 800aa04:	40014400 	.word	0x40014400
 800aa08:	40014800 	.word	0x40014800

0800aa0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d122      	bne.n	800aa68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d11b      	bne.n	800aa68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f06f 0202 	mvn.w	r2, #2
 800aa38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f9b6 	bl	800adc0 <HAL_TIM_IC_CaptureCallback>
 800aa54:	e005      	b.n	800aa62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7f5 ff92 	bl	8000980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f9b9 	bl	800add4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d122      	bne.n	800aabc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d11b      	bne.n	800aabc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f06f 0204 	mvn.w	r2, #4
 800aa8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2202      	movs	r2, #2
 800aa92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f98c 	bl	800adc0 <HAL_TIM_IC_CaptureCallback>
 800aaa8:	e005      	b.n	800aab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7f5 ff68 	bl	8000980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f98f 	bl	800add4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f003 0308 	and.w	r3, r3, #8
 800aac6:	2b08      	cmp	r3, #8
 800aac8:	d122      	bne.n	800ab10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f003 0308 	and.w	r3, r3, #8
 800aad4:	2b08      	cmp	r3, #8
 800aad6:	d11b      	bne.n	800ab10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f06f 0208 	mvn.w	r2, #8
 800aae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2204      	movs	r2, #4
 800aae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	f003 0303 	and.w	r3, r3, #3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d003      	beq.n	800aafe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f962 	bl	800adc0 <HAL_TIM_IC_CaptureCallback>
 800aafc:	e005      	b.n	800ab0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7f5 ff3e 	bl	8000980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f965 	bl	800add4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	f003 0310 	and.w	r3, r3, #16
 800ab1a:	2b10      	cmp	r3, #16
 800ab1c:	d122      	bne.n	800ab64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f003 0310 	and.w	r3, r3, #16
 800ab28:	2b10      	cmp	r3, #16
 800ab2a:	d11b      	bne.n	800ab64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f06f 0210 	mvn.w	r2, #16
 800ab34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2208      	movs	r2, #8
 800ab3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f938 	bl	800adc0 <HAL_TIM_IC_CaptureCallback>
 800ab50:	e005      	b.n	800ab5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7f5 ff14 	bl	8000980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f93b 	bl	800add4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d10e      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d107      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f06f 0201 	mvn.w	r2, #1
 800ab88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7f5 ff1a 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab9a:	2b80      	cmp	r3, #128	; 0x80
 800ab9c:	d10e      	bne.n	800abbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba8:	2b80      	cmp	r3, #128	; 0x80
 800abaa:	d107      	bne.n	800abbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fcbf 	bl	800b53a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abca:	d10e      	bne.n	800abea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd6:	2b80      	cmp	r3, #128	; 0x80
 800abd8:	d107      	bne.n	800abea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800abe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fcb2 	bl	800b54e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf4:	2b40      	cmp	r3, #64	; 0x40
 800abf6:	d10e      	bne.n	800ac16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac02:	2b40      	cmp	r3, #64	; 0x40
 800ac04:	d107      	bne.n	800ac16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f8e9 	bl	800ade8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	f003 0320 	and.w	r3, r3, #32
 800ac20:	2b20      	cmp	r3, #32
 800ac22:	d10e      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f003 0320 	and.w	r3, r3, #32
 800ac2e:	2b20      	cmp	r3, #32
 800ac30:	d107      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f06f 0220 	mvn.w	r2, #32
 800ac3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fc72 	bl	800b526 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d101      	bne.n	800ac66 <HAL_TIM_OC_ConfigChannel+0x1a>
 800ac62:	2302      	movs	r3, #2
 800ac64:	e064      	b.n	800ad30 <HAL_TIM_OC_ConfigChannel+0xe4>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b14      	cmp	r3, #20
 800ac72:	d857      	bhi.n	800ad24 <HAL_TIM_OC_ConfigChannel+0xd8>
 800ac74:	a201      	add	r2, pc, #4	; (adr r2, 800ac7c <HAL_TIM_OC_ConfigChannel+0x30>)
 800ac76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7a:	bf00      	nop
 800ac7c:	0800acd1 	.word	0x0800acd1
 800ac80:	0800ad25 	.word	0x0800ad25
 800ac84:	0800ad25 	.word	0x0800ad25
 800ac88:	0800ad25 	.word	0x0800ad25
 800ac8c:	0800acdf 	.word	0x0800acdf
 800ac90:	0800ad25 	.word	0x0800ad25
 800ac94:	0800ad25 	.word	0x0800ad25
 800ac98:	0800ad25 	.word	0x0800ad25
 800ac9c:	0800aced 	.word	0x0800aced
 800aca0:	0800ad25 	.word	0x0800ad25
 800aca4:	0800ad25 	.word	0x0800ad25
 800aca8:	0800ad25 	.word	0x0800ad25
 800acac:	0800acfb 	.word	0x0800acfb
 800acb0:	0800ad25 	.word	0x0800ad25
 800acb4:	0800ad25 	.word	0x0800ad25
 800acb8:	0800ad25 	.word	0x0800ad25
 800acbc:	0800ad09 	.word	0x0800ad09
 800acc0:	0800ad25 	.word	0x0800ad25
 800acc4:	0800ad25 	.word	0x0800ad25
 800acc8:	0800ad25 	.word	0x0800ad25
 800accc:	0800ad17 	.word	0x0800ad17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f92a 	bl	800af30 <TIM_OC1_SetConfig>
      break;
 800acdc:	e023      	b.n	800ad26 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68b9      	ldr	r1, [r7, #8]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f9b3 	bl	800b050 <TIM_OC2_SetConfig>
      break;
 800acea:	e01c      	b.n	800ad26 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68b9      	ldr	r1, [r7, #8]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 fa36 	bl	800b164 <TIM_OC3_SetConfig>
      break;
 800acf8:	e015      	b.n	800ad26 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68b9      	ldr	r1, [r7, #8]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fab7 	bl	800b274 <TIM_OC4_SetConfig>
      break;
 800ad06:	e00e      	b.n	800ad26 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fb1a 	bl	800b348 <TIM_OC5_SetConfig>
      break;
 800ad14:	e007      	b.n	800ad26 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fb77 	bl	800b410 <TIM_OC6_SetConfig>
      break;
 800ad22:	e000      	b.n	800ad26 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800ad24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b0c      	cmp	r3, #12
 800ad4a:	d831      	bhi.n	800adb0 <HAL_TIM_ReadCapturedValue+0x78>
 800ad4c:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <HAL_TIM_ReadCapturedValue+0x1c>)
 800ad4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad52:	bf00      	nop
 800ad54:	0800ad89 	.word	0x0800ad89
 800ad58:	0800adb1 	.word	0x0800adb1
 800ad5c:	0800adb1 	.word	0x0800adb1
 800ad60:	0800adb1 	.word	0x0800adb1
 800ad64:	0800ad93 	.word	0x0800ad93
 800ad68:	0800adb1 	.word	0x0800adb1
 800ad6c:	0800adb1 	.word	0x0800adb1
 800ad70:	0800adb1 	.word	0x0800adb1
 800ad74:	0800ad9d 	.word	0x0800ad9d
 800ad78:	0800adb1 	.word	0x0800adb1
 800ad7c:	0800adb1 	.word	0x0800adb1
 800ad80:	0800adb1 	.word	0x0800adb1
 800ad84:	0800ada7 	.word	0x0800ada7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8e:	60fb      	str	r3, [r7, #12]

      break;
 800ad90:	e00f      	b.n	800adb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad98:	60fb      	str	r3, [r7, #12]

      break;
 800ad9a:	e00a      	b.n	800adb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada2:	60fb      	str	r3, [r7, #12]

      break;
 800ada4:	e005      	b.n	800adb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	60fb      	str	r3, [r7, #12]

      break;
 800adae:	e000      	b.n	800adb2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800adb0:	bf00      	nop
  }

  return tmpreg;
 800adb2:	68fb      	ldr	r3, [r7, #12]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a40      	ldr	r2, [pc, #256]	; (800af10 <TIM_Base_SetConfig+0x114>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d013      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae1a:	d00f      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a3d      	ldr	r2, [pc, #244]	; (800af14 <TIM_Base_SetConfig+0x118>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d00b      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a3c      	ldr	r2, [pc, #240]	; (800af18 <TIM_Base_SetConfig+0x11c>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d007      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a3b      	ldr	r2, [pc, #236]	; (800af1c <TIM_Base_SetConfig+0x120>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d003      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a3a      	ldr	r2, [pc, #232]	; (800af20 <TIM_Base_SetConfig+0x124>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d108      	bne.n	800ae4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a2f      	ldr	r2, [pc, #188]	; (800af10 <TIM_Base_SetConfig+0x114>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d01f      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5c:	d01b      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a2c      	ldr	r2, [pc, #176]	; (800af14 <TIM_Base_SetConfig+0x118>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d017      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <TIM_Base_SetConfig+0x11c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d013      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a2a      	ldr	r2, [pc, #168]	; (800af1c <TIM_Base_SetConfig+0x120>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d00f      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a29      	ldr	r2, [pc, #164]	; (800af20 <TIM_Base_SetConfig+0x124>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00b      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a28      	ldr	r2, [pc, #160]	; (800af24 <TIM_Base_SetConfig+0x128>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d007      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a27      	ldr	r2, [pc, #156]	; (800af28 <TIM_Base_SetConfig+0x12c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d003      	beq.n	800ae96 <TIM_Base_SetConfig+0x9a>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a26      	ldr	r2, [pc, #152]	; (800af2c <TIM_Base_SetConfig+0x130>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d108      	bne.n	800aea8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a10      	ldr	r2, [pc, #64]	; (800af10 <TIM_Base_SetConfig+0x114>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d00f      	beq.n	800aef4 <TIM_Base_SetConfig+0xf8>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a12      	ldr	r2, [pc, #72]	; (800af20 <TIM_Base_SetConfig+0x124>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d00b      	beq.n	800aef4 <TIM_Base_SetConfig+0xf8>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a11      	ldr	r2, [pc, #68]	; (800af24 <TIM_Base_SetConfig+0x128>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d007      	beq.n	800aef4 <TIM_Base_SetConfig+0xf8>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a10      	ldr	r2, [pc, #64]	; (800af28 <TIM_Base_SetConfig+0x12c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d003      	beq.n	800aef4 <TIM_Base_SetConfig+0xf8>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a0f      	ldr	r2, [pc, #60]	; (800af2c <TIM_Base_SetConfig+0x130>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d103      	bne.n	800aefc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	691a      	ldr	r2, [r3, #16]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	615a      	str	r2, [r3, #20]
}
 800af02:	bf00      	nop
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	40012c00 	.word	0x40012c00
 800af14:	40000400 	.word	0x40000400
 800af18:	40000800 	.word	0x40000800
 800af1c:	40000c00 	.word	0x40000c00
 800af20:	40013400 	.word	0x40013400
 800af24:	40014000 	.word	0x40014000
 800af28:	40014400 	.word	0x40014400
 800af2c:	40014800 	.word	0x40014800

0800af30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af30:	b480      	push	{r7}
 800af32:	b087      	sub	sp, #28
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	f023 0201 	bic.w	r2, r3, #1
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f023 0303 	bic.w	r3, r3, #3
 800af6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	4313      	orrs	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f023 0302 	bic.w	r3, r3, #2
 800af7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	4313      	orrs	r3, r2
 800af86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a2c      	ldr	r2, [pc, #176]	; (800b03c <TIM_OC1_SetConfig+0x10c>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d00f      	beq.n	800afb0 <TIM_OC1_SetConfig+0x80>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a2b      	ldr	r2, [pc, #172]	; (800b040 <TIM_OC1_SetConfig+0x110>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00b      	beq.n	800afb0 <TIM_OC1_SetConfig+0x80>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a2a      	ldr	r2, [pc, #168]	; (800b044 <TIM_OC1_SetConfig+0x114>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d007      	beq.n	800afb0 <TIM_OC1_SetConfig+0x80>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a29      	ldr	r2, [pc, #164]	; (800b048 <TIM_OC1_SetConfig+0x118>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d003      	beq.n	800afb0 <TIM_OC1_SetConfig+0x80>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a28      	ldr	r2, [pc, #160]	; (800b04c <TIM_OC1_SetConfig+0x11c>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d10c      	bne.n	800afca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f023 0308 	bic.w	r3, r3, #8
 800afb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f023 0304 	bic.w	r3, r3, #4
 800afc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a1b      	ldr	r2, [pc, #108]	; (800b03c <TIM_OC1_SetConfig+0x10c>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00f      	beq.n	800aff2 <TIM_OC1_SetConfig+0xc2>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a1a      	ldr	r2, [pc, #104]	; (800b040 <TIM_OC1_SetConfig+0x110>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00b      	beq.n	800aff2 <TIM_OC1_SetConfig+0xc2>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a19      	ldr	r2, [pc, #100]	; (800b044 <TIM_OC1_SetConfig+0x114>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d007      	beq.n	800aff2 <TIM_OC1_SetConfig+0xc2>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a18      	ldr	r2, [pc, #96]	; (800b048 <TIM_OC1_SetConfig+0x118>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d003      	beq.n	800aff2 <TIM_OC1_SetConfig+0xc2>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a17      	ldr	r2, [pc, #92]	; (800b04c <TIM_OC1_SetConfig+0x11c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d111      	bne.n	800b016 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	4313      	orrs	r3, r2
 800b00a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	4313      	orrs	r3, r2
 800b014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	621a      	str	r2, [r3, #32]
}
 800b030:	bf00      	nop
 800b032:	371c      	adds	r7, #28
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr
 800b03c:	40012c00 	.word	0x40012c00
 800b040:	40013400 	.word	0x40013400
 800b044:	40014000 	.word	0x40014000
 800b048:	40014400 	.word	0x40014400
 800b04c:	40014800 	.word	0x40014800

0800b050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	f023 0210 	bic.w	r2, r3, #16
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f023 0320 	bic.w	r3, r3, #32
 800b09e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a28      	ldr	r2, [pc, #160]	; (800b150 <TIM_OC2_SetConfig+0x100>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d003      	beq.n	800b0bc <TIM_OC2_SetConfig+0x6c>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a27      	ldr	r2, [pc, #156]	; (800b154 <TIM_OC2_SetConfig+0x104>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d10d      	bne.n	800b0d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a1d      	ldr	r2, [pc, #116]	; (800b150 <TIM_OC2_SetConfig+0x100>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d00f      	beq.n	800b100 <TIM_OC2_SetConfig+0xb0>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a1c      	ldr	r2, [pc, #112]	; (800b154 <TIM_OC2_SetConfig+0x104>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d00b      	beq.n	800b100 <TIM_OC2_SetConfig+0xb0>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a1b      	ldr	r2, [pc, #108]	; (800b158 <TIM_OC2_SetConfig+0x108>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d007      	beq.n	800b100 <TIM_OC2_SetConfig+0xb0>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a1a      	ldr	r2, [pc, #104]	; (800b15c <TIM_OC2_SetConfig+0x10c>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d003      	beq.n	800b100 <TIM_OC2_SetConfig+0xb0>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a19      	ldr	r2, [pc, #100]	; (800b160 <TIM_OC2_SetConfig+0x110>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d113      	bne.n	800b128 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b10e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	4313      	orrs	r3, r2
 800b11a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	4313      	orrs	r3, r2
 800b126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	621a      	str	r2, [r3, #32]
}
 800b142:	bf00      	nop
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	40012c00 	.word	0x40012c00
 800b154:	40013400 	.word	0x40013400
 800b158:	40014000 	.word	0x40014000
 800b15c:	40014400 	.word	0x40014400
 800b160:	40014800 	.word	0x40014800

0800b164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	69db      	ldr	r3, [r3, #28]
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f023 0303 	bic.w	r3, r3, #3
 800b19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a27      	ldr	r2, [pc, #156]	; (800b260 <TIM_OC3_SetConfig+0xfc>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d003      	beq.n	800b1ce <TIM_OC3_SetConfig+0x6a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a26      	ldr	r2, [pc, #152]	; (800b264 <TIM_OC3_SetConfig+0x100>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d10d      	bne.n	800b1ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	697a      	ldr	r2, [r7, #20]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a1c      	ldr	r2, [pc, #112]	; (800b260 <TIM_OC3_SetConfig+0xfc>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d00f      	beq.n	800b212 <TIM_OC3_SetConfig+0xae>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a1b      	ldr	r2, [pc, #108]	; (800b264 <TIM_OC3_SetConfig+0x100>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00b      	beq.n	800b212 <TIM_OC3_SetConfig+0xae>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a1a      	ldr	r2, [pc, #104]	; (800b268 <TIM_OC3_SetConfig+0x104>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d007      	beq.n	800b212 <TIM_OC3_SetConfig+0xae>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a19      	ldr	r2, [pc, #100]	; (800b26c <TIM_OC3_SetConfig+0x108>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d003      	beq.n	800b212 <TIM_OC3_SetConfig+0xae>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a18      	ldr	r2, [pc, #96]	; (800b270 <TIM_OC3_SetConfig+0x10c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d113      	bne.n	800b23a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	011b      	lsls	r3, r3, #4
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	011b      	lsls	r3, r3, #4
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	4313      	orrs	r3, r2
 800b238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	621a      	str	r2, [r3, #32]
}
 800b254:	bf00      	nop
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	40012c00 	.word	0x40012c00
 800b264:	40013400 	.word	0x40013400
 800b268:	40014000 	.word	0x40014000
 800b26c:	40014400 	.word	0x40014400
 800b270:	40014800 	.word	0x40014800

0800b274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	021b      	lsls	r3, r3, #8
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	031b      	lsls	r3, r3, #12
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a18      	ldr	r2, [pc, #96]	; (800b334 <TIM_OC4_SetConfig+0xc0>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d00f      	beq.n	800b2f8 <TIM_OC4_SetConfig+0x84>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a17      	ldr	r2, [pc, #92]	; (800b338 <TIM_OC4_SetConfig+0xc4>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d00b      	beq.n	800b2f8 <TIM_OC4_SetConfig+0x84>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a16      	ldr	r2, [pc, #88]	; (800b33c <TIM_OC4_SetConfig+0xc8>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d007      	beq.n	800b2f8 <TIM_OC4_SetConfig+0x84>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a15      	ldr	r2, [pc, #84]	; (800b340 <TIM_OC4_SetConfig+0xcc>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d003      	beq.n	800b2f8 <TIM_OC4_SetConfig+0x84>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a14      	ldr	r2, [pc, #80]	; (800b344 <TIM_OC4_SetConfig+0xd0>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d109      	bne.n	800b30c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	019b      	lsls	r3, r3, #6
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4313      	orrs	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	621a      	str	r2, [r3, #32]
}
 800b326:	bf00      	nop
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	40012c00 	.word	0x40012c00
 800b338:	40013400 	.word	0x40013400
 800b33c:	40014000 	.word	0x40014000
 800b340:	40014400 	.word	0x40014400
 800b344:	40014800 	.word	0x40014800

0800b348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	4313      	orrs	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b38c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	041b      	lsls	r3, r3, #16
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	4313      	orrs	r3, r2
 800b398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a17      	ldr	r2, [pc, #92]	; (800b3fc <TIM_OC5_SetConfig+0xb4>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d00f      	beq.n	800b3c2 <TIM_OC5_SetConfig+0x7a>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a16      	ldr	r2, [pc, #88]	; (800b400 <TIM_OC5_SetConfig+0xb8>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d00b      	beq.n	800b3c2 <TIM_OC5_SetConfig+0x7a>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a15      	ldr	r2, [pc, #84]	; (800b404 <TIM_OC5_SetConfig+0xbc>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d007      	beq.n	800b3c2 <TIM_OC5_SetConfig+0x7a>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a14      	ldr	r2, [pc, #80]	; (800b408 <TIM_OC5_SetConfig+0xc0>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d003      	beq.n	800b3c2 <TIM_OC5_SetConfig+0x7a>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a13      	ldr	r2, [pc, #76]	; (800b40c <TIM_OC5_SetConfig+0xc4>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d109      	bne.n	800b3d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	621a      	str	r2, [r3, #32]
}
 800b3f0:	bf00      	nop
 800b3f2:	371c      	adds	r7, #28
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	40012c00 	.word	0x40012c00
 800b400:	40013400 	.word	0x40013400
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800

0800b410 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b43e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	021b      	lsls	r3, r3, #8
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	051b      	lsls	r3, r3, #20
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	4313      	orrs	r3, r2
 800b462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <TIM_OC6_SetConfig+0xb8>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d00f      	beq.n	800b48c <TIM_OC6_SetConfig+0x7c>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a17      	ldr	r2, [pc, #92]	; (800b4cc <TIM_OC6_SetConfig+0xbc>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d00b      	beq.n	800b48c <TIM_OC6_SetConfig+0x7c>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a16      	ldr	r2, [pc, #88]	; (800b4d0 <TIM_OC6_SetConfig+0xc0>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d007      	beq.n	800b48c <TIM_OC6_SetConfig+0x7c>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a15      	ldr	r2, [pc, #84]	; (800b4d4 <TIM_OC6_SetConfig+0xc4>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d003      	beq.n	800b48c <TIM_OC6_SetConfig+0x7c>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a14      	ldr	r2, [pc, #80]	; (800b4d8 <TIM_OC6_SetConfig+0xc8>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d109      	bne.n	800b4a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b492:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	029b      	lsls	r3, r3, #10
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	621a      	str	r2, [r3, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	371c      	adds	r7, #28
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	40012c00 	.word	0x40012c00
 800b4cc:	40013400 	.word	0x40013400
 800b4d0:	40014000 	.word	0x40014000
 800b4d4:	40014400 	.word	0x40014400
 800b4d8:	40014800 	.word	0x40014800

0800b4dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f003 031f 	and.w	r3, r3, #31
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a1a      	ldr	r2, [r3, #32]
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	43db      	mvns	r3, r3
 800b4fe:	401a      	ands	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6a1a      	ldr	r2, [r3, #32]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f003 031f 	and.w	r3, r3, #31
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	fa01 f303 	lsl.w	r3, r1, r3
 800b514:	431a      	orrs	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	621a      	str	r2, [r3, #32]
}
 800b51a:	bf00      	nop
 800b51c:	371c      	adds	r7, #28
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b526:	b480      	push	{r7}
 800b528:	b083      	sub	sp, #12
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b52e:	bf00      	nop
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b556:	bf00      	nop
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
	...

0800b564 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	4613      	mov	r3, r2
 800b570:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	2b02      	cmp	r3, #2
 800b576:	d165      	bne.n	800b644 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	4a3e      	ldr	r2, [pc, #248]	; (800b674 <USB_SetTurnaroundTime+0x110>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d906      	bls.n	800b58e <USB_SetTurnaroundTime+0x2a>
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4a3d      	ldr	r2, [pc, #244]	; (800b678 <USB_SetTurnaroundTime+0x114>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d202      	bcs.n	800b58e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b588:	230f      	movs	r3, #15
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	e05c      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	4a39      	ldr	r2, [pc, #228]	; (800b678 <USB_SetTurnaroundTime+0x114>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d306      	bcc.n	800b5a4 <USB_SetTurnaroundTime+0x40>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a38      	ldr	r2, [pc, #224]	; (800b67c <USB_SetTurnaroundTime+0x118>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d202      	bcs.n	800b5a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b59e:	230e      	movs	r3, #14
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	e051      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	4a35      	ldr	r2, [pc, #212]	; (800b67c <USB_SetTurnaroundTime+0x118>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d306      	bcc.n	800b5ba <USB_SetTurnaroundTime+0x56>
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4a34      	ldr	r2, [pc, #208]	; (800b680 <USB_SetTurnaroundTime+0x11c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d202      	bcs.n	800b5ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b5b4:	230d      	movs	r3, #13
 800b5b6:	617b      	str	r3, [r7, #20]
 800b5b8:	e046      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	4a30      	ldr	r2, [pc, #192]	; (800b680 <USB_SetTurnaroundTime+0x11c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d306      	bcc.n	800b5d0 <USB_SetTurnaroundTime+0x6c>
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	4a2f      	ldr	r2, [pc, #188]	; (800b684 <USB_SetTurnaroundTime+0x120>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d802      	bhi.n	800b5d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b5ca:	230c      	movs	r3, #12
 800b5cc:	617b      	str	r3, [r7, #20]
 800b5ce:	e03b      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	4a2c      	ldr	r2, [pc, #176]	; (800b684 <USB_SetTurnaroundTime+0x120>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d906      	bls.n	800b5e6 <USB_SetTurnaroundTime+0x82>
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	4a2b      	ldr	r2, [pc, #172]	; (800b688 <USB_SetTurnaroundTime+0x124>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d802      	bhi.n	800b5e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b5e0:	230b      	movs	r3, #11
 800b5e2:	617b      	str	r3, [r7, #20]
 800b5e4:	e030      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	4a27      	ldr	r2, [pc, #156]	; (800b688 <USB_SetTurnaroundTime+0x124>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d906      	bls.n	800b5fc <USB_SetTurnaroundTime+0x98>
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	4a26      	ldr	r2, [pc, #152]	; (800b68c <USB_SetTurnaroundTime+0x128>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d802      	bhi.n	800b5fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b5f6:	230a      	movs	r3, #10
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	e025      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	4a23      	ldr	r2, [pc, #140]	; (800b68c <USB_SetTurnaroundTime+0x128>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d906      	bls.n	800b612 <USB_SetTurnaroundTime+0xae>
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4a22      	ldr	r2, [pc, #136]	; (800b690 <USB_SetTurnaroundTime+0x12c>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d202      	bcs.n	800b612 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b60c:	2309      	movs	r3, #9
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	e01a      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	4a1e      	ldr	r2, [pc, #120]	; (800b690 <USB_SetTurnaroundTime+0x12c>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d306      	bcc.n	800b628 <USB_SetTurnaroundTime+0xc4>
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	4a1d      	ldr	r2, [pc, #116]	; (800b694 <USB_SetTurnaroundTime+0x130>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d802      	bhi.n	800b628 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b622:	2308      	movs	r3, #8
 800b624:	617b      	str	r3, [r7, #20]
 800b626:	e00f      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	4a1a      	ldr	r2, [pc, #104]	; (800b694 <USB_SetTurnaroundTime+0x130>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d906      	bls.n	800b63e <USB_SetTurnaroundTime+0xda>
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	4a19      	ldr	r2, [pc, #100]	; (800b698 <USB_SetTurnaroundTime+0x134>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d202      	bcs.n	800b63e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b638:	2307      	movs	r3, #7
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	e004      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b63e:	2306      	movs	r3, #6
 800b640:	617b      	str	r3, [r7, #20]
 800b642:	e001      	b.n	800b648 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b644:	2309      	movs	r3, #9
 800b646:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	68da      	ldr	r2, [r3, #12]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	029b      	lsls	r3, r3, #10
 800b65c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b660:	431a      	orrs	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	371c      	adds	r7, #28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	00d8acbf 	.word	0x00d8acbf
 800b678:	00e4e1c0 	.word	0x00e4e1c0
 800b67c:	00f42400 	.word	0x00f42400
 800b680:	01067380 	.word	0x01067380
 800b684:	011a499f 	.word	0x011a499f
 800b688:	01312cff 	.word	0x01312cff
 800b68c:	014ca43f 	.word	0x014ca43f
 800b690:	016e3600 	.word	0x016e3600
 800b694:	01a6ab1f 	.word	0x01a6ab1f
 800b698:	01e84800 	.word	0x01e84800

0800b69c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	019b      	lsls	r3, r3, #6
 800b6ae:	f043 0220 	orr.w	r2, r3, #32
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4a09      	ldr	r2, [pc, #36]	; (800b6e4 <USB_FlushTxFifo+0x48>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d901      	bls.n	800b6c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e006      	b.n	800b6d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	f003 0320 	and.w	r3, r3, #32
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	d0f0      	beq.n	800b6b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	00030d40 	.word	0x00030d40

0800b6e8 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	f003 0306 	and.w	r3, r3, #6
 800b700:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b02      	cmp	r3, #2
 800b706:	d002      	beq.n	800b70e <USB_GetDevSpeed+0x26>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b06      	cmp	r3, #6
 800b70c:	d102      	bne.n	800b714 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b70e:	2302      	movs	r3, #2
 800b710:	75fb      	strb	r3, [r7, #23]
 800b712:	e001      	b.n	800b718 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b714:	230f      	movs	r3, #15
 800b716:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b718:	7dfb      	ldrb	r3, [r7, #23]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b726:	b480      	push	{r7}
 800b728:	b085      	sub	sp, #20
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d13a      	bne.n	800b7b8 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b748:	69da      	ldr	r2, [r3, #28]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	f003 030f 	and.w	r3, r3, #15
 800b752:	2101      	movs	r1, #1
 800b754:	fa01 f303 	lsl.w	r3, r1, r3
 800b758:	b29b      	uxth	r3, r3
 800b75a:	68f9      	ldr	r1, [r7, #12]
 800b75c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b760:	4313      	orrs	r3, r2
 800b762:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d155      	bne.n	800b826 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	015a      	lsls	r2, r3, #5
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4413      	add	r3, r2
 800b782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	78db      	ldrb	r3, [r3, #3]
 800b794:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b796:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	059b      	lsls	r3, r3, #22
 800b79c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	e036      	b.n	800b826 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7be:	69da      	ldr	r2, [r3, #28]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	f003 030f 	and.w	r3, r3, #15
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ce:	041b      	lsls	r3, r3, #16
 800b7d0:	68f9      	ldr	r1, [r7, #12]
 800b7d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	015a      	lsls	r2, r3, #5
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d11a      	bne.n	800b826 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	78db      	ldrb	r3, [r3, #3]
 800b80a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b80c:	430b      	orrs	r3, r1
 800b80e:	4313      	orrs	r3, r2
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	0151      	lsls	r1, r2, #5
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	440a      	add	r2, r1
 800b818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b824:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	785b      	ldrb	r3, [r3, #1]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	f040 810a 	bne.w	800ba66 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d132      	bne.n	800b8c0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	015a      	lsls	r2, r3, #5
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	0151      	lsls	r1, r2, #5
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	440a      	add	r2, r1
 800b870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b87c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	0151      	lsls	r1, r2, #5
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	440a      	add	r2, r1
 800b894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b89c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	0151      	lsls	r1, r2, #5
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	440a      	add	r2, r1
 800b8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8b8:	0cdb      	lsrs	r3, r3, #19
 800b8ba:	04db      	lsls	r3, r3, #19
 800b8bc:	6113      	str	r3, [r2, #16]
 800b8be:	e074      	b.n	800b9aa <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8da:	0cdb      	lsrs	r3, r3, #19
 800b8dc:	04db      	lsls	r3, r3, #19
 800b8de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	0151      	lsls	r1, r2, #5
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	440a      	add	r2, r1
 800b8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b902:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b910:	691a      	ldr	r2, [r3, #16]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	6959      	ldr	r1, [r3, #20]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	440b      	add	r3, r1
 800b91c:	1e59      	subs	r1, r3, #1
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	fbb1 f3f3 	udiv	r3, r1, r3
 800b926:	04d9      	lsls	r1, r3, #19
 800b928:	4baf      	ldr	r3, [pc, #700]	; (800bbe8 <USB_EPStartXfer+0x3b4>)
 800b92a:	400b      	ands	r3, r1
 800b92c:	6939      	ldr	r1, [r7, #16]
 800b92e:	0148      	lsls	r0, r1, #5
 800b930:	6979      	ldr	r1, [r7, #20]
 800b932:	4401      	add	r1, r0
 800b934:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b938:	4313      	orrs	r3, r2
 800b93a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	015a      	lsls	r2, r3, #5
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	4413      	add	r3, r2
 800b944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b948:	691a      	ldr	r2, [r3, #16]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b952:	6939      	ldr	r1, [r7, #16]
 800b954:	0148      	lsls	r0, r1, #5
 800b956:	6979      	ldr	r1, [r7, #20]
 800b958:	4401      	add	r1, r0
 800b95a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b95e:	4313      	orrs	r3, r2
 800b960:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	78db      	ldrb	r3, [r3, #3]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d11f      	bne.n	800b9aa <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	0151      	lsls	r1, r2, #5
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	440a      	add	r2, r1
 800b980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b984:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b988:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	015a      	lsls	r2, r3, #5
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	4413      	add	r3, r2
 800b992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	0151      	lsls	r1, r2, #5
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	440a      	add	r2, r1
 800b9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9a8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	0151      	lsls	r1, r2, #5
 800b9bc:	697a      	ldr	r2, [r7, #20]
 800b9be:	440a      	add	r2, r1
 800b9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9c8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	78db      	ldrb	r3, [r3, #3]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d015      	beq.n	800b9fe <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 8100 	beq.w	800bbdc <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	f003 030f 	and.w	r3, r3, #15
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b9f2:	6979      	ldr	r1, [r7, #20]
 800b9f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	634b      	str	r3, [r1, #52]	; 0x34
 800b9fc:	e0ee      	b.n	800bbdc <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d110      	bne.n	800ba30 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	0151      	lsls	r1, r2, #5
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	440a      	add	r2, r1
 800ba24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	e00f      	b.n	800ba50 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	015a      	lsls	r2, r3, #5
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	4413      	add	r3, r2
 800ba38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	0151      	lsls	r1, r2, #5
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	440a      	add	r2, r1
 800ba46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba4e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	68d9      	ldr	r1, [r3, #12]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	781a      	ldrb	r2, [r3, #0]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f9e2 	bl	800be28 <USB_WritePacket>
 800ba64:	e0ba      	b.n	800bbdc <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	0151      	lsls	r1, r2, #5
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	440a      	add	r2, r1
 800ba7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba80:	0cdb      	lsrs	r3, r3, #19
 800ba82:	04db      	lsls	r3, r3, #19
 800ba84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	015a      	lsls	r2, r3, #5
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	0151      	lsls	r1, r2, #5
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	440a      	add	r2, r1
 800ba9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800baa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800baa8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d123      	bne.n	800bafa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babe:	691a      	ldr	r2, [r3, #16]
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bac8:	6939      	ldr	r1, [r7, #16]
 800baca:	0148      	lsls	r0, r1, #5
 800bacc:	6979      	ldr	r1, [r7, #20]
 800bace:	4401      	add	r1, r0
 800bad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bad4:	4313      	orrs	r3, r2
 800bad6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	0151      	lsls	r1, r2, #5
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	440a      	add	r2, r1
 800baee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800baf6:	6113      	str	r3, [r2, #16]
 800baf8:	e033      	b.n	800bb62 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	695a      	ldr	r2, [r3, #20]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	4413      	add	r3, r2
 800bb04:	1e5a      	subs	r2, r3, #1
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1c:	691a      	ldr	r2, [r3, #16]
 800bb1e:	89fb      	ldrh	r3, [r7, #14]
 800bb20:	04d9      	lsls	r1, r3, #19
 800bb22:	4b31      	ldr	r3, [pc, #196]	; (800bbe8 <USB_EPStartXfer+0x3b4>)
 800bb24:	400b      	ands	r3, r1
 800bb26:	6939      	ldr	r1, [r7, #16]
 800bb28:	0148      	lsls	r0, r1, #5
 800bb2a:	6979      	ldr	r1, [r7, #20]
 800bb2c:	4401      	add	r1, r0
 800bb2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb32:	4313      	orrs	r3, r2
 800bb34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb42:	691a      	ldr	r2, [r3, #16]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	89f9      	ldrh	r1, [r7, #14]
 800bb4a:	fb01 f303 	mul.w	r3, r1, r3
 800bb4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb52:	6939      	ldr	r1, [r7, #16]
 800bb54:	0148      	lsls	r0, r1, #5
 800bb56:	6979      	ldr	r1, [r7, #20]
 800bb58:	4401      	add	r1, r0
 800bb5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	78db      	ldrb	r3, [r3, #3]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d128      	bne.n	800bbbc <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d110      	bne.n	800bb9c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	015a      	lsls	r2, r3, #5
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	4413      	add	r3, r2
 800bb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	0151      	lsls	r1, r2, #5
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	440a      	add	r2, r1
 800bb90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb98:	6013      	str	r3, [r2, #0]
 800bb9a:	e00f      	b.n	800bbbc <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	0151      	lsls	r1, r2, #5
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	440a      	add	r2, r1
 800bbb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	015a      	lsls	r2, r3, #5
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	0151      	lsls	r1, r2, #5
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	440a      	add	r2, r1
 800bbd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	1ff80000 	.word	0x1ff80000

0800bbec <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	785b      	ldrb	r3, [r3, #1]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	f040 80ab 	bne.w	800bd60 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d132      	bne.n	800bc78 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	0151      	lsls	r1, r2, #5
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	440a      	add	r2, r1
 800bc28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	0151      	lsls	r1, r2, #5
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	440a      	add	r2, r1
 800bc4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	0151      	lsls	r1, r2, #5
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	440a      	add	r2, r1
 800bc6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc70:	0cdb      	lsrs	r3, r3, #19
 800bc72:	04db      	lsls	r3, r3, #19
 800bc74:	6113      	str	r3, [r2, #16]
 800bc76:	e04e      	b.n	800bd16 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	0151      	lsls	r1, r2, #5
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	440a      	add	r2, r1
 800bc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc92:	0cdb      	lsrs	r3, r3, #19
 800bc94:	04db      	lsls	r3, r3, #19
 800bc96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	0151      	lsls	r1, r2, #5
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	440a      	add	r2, r1
 800bcae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	695a      	ldr	r2, [r3, #20]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d903      	bls.n	800bcd0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	689a      	ldr	r2, [r3, #8]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	0151      	lsls	r1, r2, #5
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	440a      	add	r2, r1
 800bce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfc:	691a      	ldr	r2, [r3, #16]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd06:	68b9      	ldr	r1, [r7, #8]
 800bd08:	0148      	lsls	r0, r1, #5
 800bd0a:	68f9      	ldr	r1, [r7, #12]
 800bd0c:	4401      	add	r1, r0
 800bd0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd12:	4313      	orrs	r3, r2
 800bd14:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	0151      	lsls	r1, r2, #5
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	440a      	add	r2, r1
 800bd2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd34:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d06d      	beq.n	800be1a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	2101      	movs	r1, #1
 800bd50:	fa01 f303 	lsl.w	r3, r1, r3
 800bd54:	68f9      	ldr	r1, [r7, #12]
 800bd56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	634b      	str	r3, [r1, #52]	; 0x34
 800bd5e:	e05c      	b.n	800be1a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	015a      	lsls	r2, r3, #5
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	4413      	add	r3, r2
 800bd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	0151      	lsls	r1, r2, #5
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	440a      	add	r2, r1
 800bd76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd7a:	0cdb      	lsrs	r3, r3, #19
 800bd7c:	04db      	lsls	r3, r3, #19
 800bd7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	0151      	lsls	r1, r2, #5
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	440a      	add	r2, r1
 800bd96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bda2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	0151      	lsls	r1, r2, #5
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	440a      	add	r2, r1
 800bdca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde0:	691a      	ldr	r2, [r3, #16]
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdea:	68b9      	ldr	r1, [r7, #8]
 800bdec:	0148      	lsls	r0, r1, #5
 800bdee:	68f9      	ldr	r1, [r7, #12]
 800bdf0:	4401      	add	r1, r0
 800bdf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	4413      	add	r3, r2
 800be02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	0151      	lsls	r1, r2, #5
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	440a      	add	r2, r1
 800be10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800be28:	b480      	push	{r7}
 800be2a:	b089      	sub	sp, #36	; 0x24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4611      	mov	r1, r2
 800be34:	461a      	mov	r2, r3
 800be36:	460b      	mov	r3, r1
 800be38:	71fb      	strb	r3, [r7, #7]
 800be3a:	4613      	mov	r3, r2
 800be3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800be46:	88bb      	ldrh	r3, [r7, #4]
 800be48:	3303      	adds	r3, #3
 800be4a:	089b      	lsrs	r3, r3, #2
 800be4c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800be4e:	2300      	movs	r3, #0
 800be50:	61bb      	str	r3, [r7, #24]
 800be52:	e00f      	b.n	800be74 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	031a      	lsls	r2, r3, #12
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be60:	461a      	mov	r2, r3
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6013      	str	r3, [r2, #0]
    pSrc++;
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	3304      	adds	r3, #4
 800be6c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	3301      	adds	r3, #1
 800be72:	61bb      	str	r3, [r7, #24]
 800be74:	69ba      	ldr	r2, [r7, #24]
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d3eb      	bcc.n	800be54 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3724      	adds	r7, #36	; 0x24
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b089      	sub	sp, #36	; 0x24
 800be8e:	af00      	add	r7, sp, #0
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	4613      	mov	r3, r2
 800be96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bea0:	88fb      	ldrh	r3, [r7, #6]
 800bea2:	3303      	adds	r3, #3
 800bea4:	089b      	lsrs	r3, r3, #2
 800bea6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bea8:	2300      	movs	r3, #0
 800beaa:	61bb      	str	r3, [r7, #24]
 800beac:	e00b      	b.n	800bec6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	601a      	str	r2, [r3, #0]
    pDest++;
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	3304      	adds	r3, #4
 800bebe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	3301      	adds	r3, #1
 800bec4:	61bb      	str	r3, [r7, #24]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	429a      	cmp	r2, r3
 800becc:	d3ef      	bcc.n	800beae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bece:	69fb      	ldr	r3, [r7, #28]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3724      	adds	r7, #36	; 0x24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d12c      	bne.n	800bf52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	015a      	lsls	r2, r3, #5
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	4413      	add	r3, r2
 800bf00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	db12      	blt.n	800bf30 <USB_EPSetStall+0x54>
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00f      	beq.n	800bf30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	0151      	lsls	r1, r2, #5
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	440a      	add	r2, r1
 800bf26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bf2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	015a      	lsls	r2, r3, #5
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	4413      	add	r3, r2
 800bf38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	0151      	lsls	r1, r2, #5
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	440a      	add	r2, r1
 800bf46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	e02b      	b.n	800bfaa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	db12      	blt.n	800bf8a <USB_EPSetStall+0xae>
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00f      	beq.n	800bf8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	015a      	lsls	r2, r3, #5
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	0151      	lsls	r1, r2, #5
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	440a      	add	r2, r1
 800bf80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bf88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	015a      	lsls	r2, r3, #5
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	4413      	add	r3, r2
 800bf92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	0151      	lsls	r1, r2, #5
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	440a      	add	r2, r1
 800bfa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfa8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	785b      	ldrb	r3, [r3, #1]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d128      	bne.n	800c026 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	0151      	lsls	r1, r2, #5
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	440a      	add	r2, r1
 800bfea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bff2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	78db      	ldrb	r3, [r3, #3]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d003      	beq.n	800c004 <USB_EPClearStall+0x4c>
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	78db      	ldrb	r3, [r3, #3]
 800c000:	2b02      	cmp	r3, #2
 800c002:	d138      	bne.n	800c076 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	015a      	lsls	r2, r3, #5
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	4413      	add	r3, r2
 800c00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	0151      	lsls	r1, r2, #5
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	440a      	add	r2, r1
 800c01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c01e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c022:	6013      	str	r3, [r2, #0]
 800c024:	e027      	b.n	800c076 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	0151      	lsls	r1, r2, #5
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	440a      	add	r2, r1
 800c03c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c040:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c044:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	78db      	ldrb	r3, [r3, #3]
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d003      	beq.n	800c056 <USB_EPClearStall+0x9e>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	78db      	ldrb	r3, [r3, #3]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d10f      	bne.n	800c076 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c074:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c0a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	78fb      	ldrb	r3, [r7, #3]
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c0b8:	68f9      	ldr	r1, [r7, #12]
 800c0ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	699b      	ldr	r3, [r3, #24]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b085      	sub	sp, #20
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c112:	69db      	ldr	r3, [r3, #28]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	4013      	ands	r3, r2
 800c118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	0c1b      	lsrs	r3, r3, #16
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b085      	sub	sp, #20
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	4013      	ands	r3, r2
 800c14c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	b29b      	uxth	r3, r3
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c15e:	b480      	push	{r7}
 800c160:	b085      	sub	sp, #20
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	460b      	mov	r3, r1
 800c168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c16e:	78fb      	ldrb	r3, [r7, #3]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	4013      	ands	r3, r2
 800c18a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c18c:	68bb      	ldr	r3, [r7, #8]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b087      	sub	sp, #28
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	f003 030f 	and.w	r3, r3, #15
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ca:	01db      	lsls	r3, r3, #7
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c1d4:	78fb      	ldrb	r3, [r7, #3]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1e8:	68bb      	ldr	r3, [r7, #8]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	695b      	ldr	r3, [r3, #20]
 800c202:	f003 0301 	and.w	r3, r3, #1
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c212:	b480      	push	{r7}
 800c214:	b085      	sub	sp, #20
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c22c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c230:	f023 0307 	bic.w	r3, r3, #7
 800c234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	333c      	adds	r3, #60	; 0x3c
 800c26a:	3304      	adds	r3, #4
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	4a1c      	ldr	r2, [pc, #112]	; (800c2e4 <USB_EP0_OutStart+0x8c>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d90a      	bls.n	800c28e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c288:	d101      	bne.n	800c28e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	e024      	b.n	800c2d8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c294:	461a      	mov	r2, r3
 800c296:	2300      	movs	r3, #0
 800c298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2bc:	f043 0318 	orr.w	r3, r3, #24
 800c2c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c2d4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	4f54300a 	.word	0x4f54300a

0800c2e8 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c302:	2303      	movs	r3, #3
 800c304:	e008      	b.n	800c318 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	371c      	adds	r7, #28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c332:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c334:	2301      	movs	r3, #1
 800c336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c342:	2303      	movs	r3, #3
 800c344:	e01a      	b.n	800c37c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d114      	bne.n	800c37a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2201      	movs	r2, #1
 800c354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c36e:	2181      	movs	r1, #129	; 0x81
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7f6 fc8e 	bl	8002c92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d009      	beq.n	800c3c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	78fa      	ldrb	r2, [r7, #3]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	4798      	blx	r3
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	460b      	mov	r3, r1
 800c3dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d007      	beq.n	800c3f8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	78fa      	ldrb	r2, [r7, #3]
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	4798      	blx	r3
  }

  return USBD_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	4618      	mov	r0, r3
 800c416:	f000 ff8f 	bl	800d338 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c428:	461a      	mov	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c436:	f003 031f 	and.w	r3, r3, #31
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d01a      	beq.n	800c474 <USBD_LL_SetupStage+0x72>
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d822      	bhi.n	800c488 <USBD_LL_SetupStage+0x86>
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <USBD_LL_SetupStage+0x4a>
 800c446:	2b01      	cmp	r3, #1
 800c448:	d00a      	beq.n	800c460 <USBD_LL_SetupStage+0x5e>
 800c44a:	e01d      	b.n	800c488 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c452:	4619      	mov	r1, r3
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fa61 	bl	800c91c <USBD_StdDevReq>
 800c45a:	4603      	mov	r3, r0
 800c45c:	73fb      	strb	r3, [r7, #15]
      break;
 800c45e:	e020      	b.n	800c4a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fac5 	bl	800c9f8 <USBD_StdItfReq>
 800c46e:	4603      	mov	r3, r0
 800c470:	73fb      	strb	r3, [r7, #15]
      break;
 800c472:	e016      	b.n	800c4a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c47a:	4619      	mov	r1, r3
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fb04 	bl	800ca8a <USBD_StdEPReq>
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]
      break;
 800c486:	e00c      	b.n	800c4a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c48e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c492:	b2db      	uxtb	r3, r3
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7f6 fb96 	bl	8002bc8 <USBD_LL_StallEP>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
      break;
 800c4a0:	bf00      	nop
  }

  return ret;
 800c4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c4ba:	7afb      	ldrb	r3, [r7, #11]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d138      	bne.n	800c532 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c4c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d14a      	bne.n	800c568 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	689a      	ldr	r2, [r3, #8]
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d913      	bls.n	800c506 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	689a      	ldr	r2, [r3, #8]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	1ad2      	subs	r2, r2, r3
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	68da      	ldr	r2, [r3, #12]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	bf28      	it	cs
 800c4f8:	4613      	movcs	r3, r2
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f000 ff91 	bl	800d426 <USBD_CtlContinueRx>
 800c504:	e030      	b.n	800c568 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d10b      	bne.n	800c52a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d005      	beq.n	800c52a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f000 ff8c 	bl	800d448 <USBD_CtlSendStatus>
 800c530:	e01a      	b.n	800c568 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d114      	bne.n	800c568 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00e      	beq.n	800c568 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	7afa      	ldrb	r2, [r7, #11]
 800c554:	4611      	mov	r1, r2
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	4798      	blx	r3
 800c55a:	4603      	mov	r3, r0
 800c55c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	e000      	b.n	800c56a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b086      	sub	sp, #24
 800c576:	af00      	add	r7, sp, #0
 800c578:	60f8      	str	r0, [r7, #12]
 800c57a:	460b      	mov	r3, r1
 800c57c:	607a      	str	r2, [r7, #4]
 800c57e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d16b      	bne.n	800c65e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3314      	adds	r3, #20
 800c58a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c592:	2b02      	cmp	r3, #2
 800c594:	d156      	bne.n	800c644 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	689a      	ldr	r2, [r3, #8]
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d914      	bls.n	800c5cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	689a      	ldr	r2, [r3, #8]
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	1ad2      	subs	r2, r2, r3
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 ff23 	bl	800d404 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5be:	2300      	movs	r3, #0
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f7f6 fb79 	bl	8002cbc <USBD_LL_PrepareReceive>
 800c5ca:	e03b      	b.n	800c644 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	68da      	ldr	r2, [r3, #12]
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d11c      	bne.n	800c612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d316      	bcc.n	800c612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	685a      	ldr	r2, [r3, #4]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d20f      	bcs.n	800c612 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 ff04 	bl	800d404 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c604:	2300      	movs	r3, #0
 800c606:	2200      	movs	r2, #0
 800c608:	2100      	movs	r1, #0
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7f6 fb56 	bl	8002cbc <USBD_LL_PrepareReceive>
 800c610:	e018      	b.n	800c644 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d10b      	bne.n	800c636 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d005      	beq.n	800c636 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c636:	2180      	movs	r1, #128	; 0x80
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7f6 fac5 	bl	8002bc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 ff15 	bl	800d46e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d122      	bne.n	800c694 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7ff fe98 	bl	800c384 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c65c:	e01a      	b.n	800c694 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b03      	cmp	r3, #3
 800c668:	d114      	bne.n	800c694 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00e      	beq.n	800c694 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67c:	695b      	ldr	r3, [r3, #20]
 800c67e:	7afa      	ldrb	r2, [r7, #11]
 800c680:	4611      	mov	r1, r2
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	4798      	blx	r3
 800c686:	4603      	mov	r3, r0
 800c688:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d001      	beq.n	800c694 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c690:	7dfb      	ldrb	r3, [r7, #23]
 800c692:	e000      	b.n	800c696 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e02f      	b.n	800c732 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00f      	beq.n	800c6fc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d009      	beq.n	800c6fc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	6852      	ldr	r2, [r2, #4]
 800c6f4:	b2d2      	uxtb	r2, r2
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6fc:	2340      	movs	r3, #64	; 0x40
 800c6fe:	2200      	movs	r2, #0
 800c700:	2100      	movs	r1, #0
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7f6 fa46 	bl	8002b94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2240      	movs	r2, #64	; 0x40
 800c714:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	2200      	movs	r2, #0
 800c71c:	2180      	movs	r1, #128	; 0x80
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7f6 fa38 	bl	8002b94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2201      	movs	r2, #1
 800c728:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2240      	movs	r2, #64	; 0x40
 800c72e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b083      	sub	sp, #12
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	460b      	mov	r3, r1
 800c744:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	78fa      	ldrb	r2, [r7, #3]
 800c74a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2204      	movs	r2, #4
 800c774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c786:	b480      	push	{r7}
 800c788:	b083      	sub	sp, #12
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b04      	cmp	r3, #4
 800c798:	d106      	bne.n	800c7a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e012      	b.n	800c7f2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d10b      	bne.n	800c7f0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7de:	69db      	ldr	r3, [r3, #28]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d005      	beq.n	800c7f0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ea:	69db      	ldr	r3, [r3, #28]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c810:	2303      	movs	r3, #3
 800c812:	e014      	b.n	800c83e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b03      	cmp	r3, #3
 800c81e:	d10d      	bne.n	800c83c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c826:	6a1b      	ldr	r3, [r3, #32]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d007      	beq.n	800c83c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	78fa      	ldrb	r2, [r7, #3]
 800c836:	4611      	mov	r1, r2
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	460b      	mov	r3, r1
 800c850:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c85c:	2303      	movs	r3, #3
 800c85e:	e014      	b.n	800c88a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d10d      	bne.n	800c888 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c874:	2b00      	cmp	r3, #0
 800c876:	d007      	beq.n	800c888 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	78fa      	ldrb	r2, [r7, #3]
 800c882:	4611      	mov	r1, r2
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c892:	b480      	push	{r7}
 800c894:	b083      	sub	sp, #12
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d009      	beq.n	800c8d6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	6852      	ldr	r2, [r2, #4]
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	4798      	blx	r3
  }

  return USBD_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8fe:	8a3b      	ldrh	r3, [r7, #16]
 800c900:	021b      	lsls	r3, r3, #8
 800c902:	b21a      	sxth	r2, r3
 800c904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c908:	4313      	orrs	r3, r2
 800c90a:	b21b      	sxth	r3, r3
 800c90c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c90e:	89fb      	ldrh	r3, [r7, #14]
}
 800c910:	4618      	mov	r0, r3
 800c912:	371c      	adds	r7, #28
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c926:	2300      	movs	r3, #0
 800c928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c932:	2b40      	cmp	r3, #64	; 0x40
 800c934:	d005      	beq.n	800c942 <USBD_StdDevReq+0x26>
 800c936:	2b40      	cmp	r3, #64	; 0x40
 800c938:	d853      	bhi.n	800c9e2 <USBD_StdDevReq+0xc6>
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00b      	beq.n	800c956 <USBD_StdDevReq+0x3a>
 800c93e:	2b20      	cmp	r3, #32
 800c940:	d14f      	bne.n	800c9e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	4798      	blx	r3
 800c950:	4603      	mov	r3, r0
 800c952:	73fb      	strb	r3, [r7, #15]
      break;
 800c954:	e04a      	b.n	800c9ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	785b      	ldrb	r3, [r3, #1]
 800c95a:	2b09      	cmp	r3, #9
 800c95c:	d83b      	bhi.n	800c9d6 <USBD_StdDevReq+0xba>
 800c95e:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <USBD_StdDevReq+0x48>)
 800c960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c964:	0800c9b9 	.word	0x0800c9b9
 800c968:	0800c9cd 	.word	0x0800c9cd
 800c96c:	0800c9d7 	.word	0x0800c9d7
 800c970:	0800c9c3 	.word	0x0800c9c3
 800c974:	0800c9d7 	.word	0x0800c9d7
 800c978:	0800c997 	.word	0x0800c997
 800c97c:	0800c98d 	.word	0x0800c98d
 800c980:	0800c9d7 	.word	0x0800c9d7
 800c984:	0800c9af 	.word	0x0800c9af
 800c988:	0800c9a1 	.word	0x0800c9a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f9de 	bl	800cd50 <USBD_GetDescriptor>
          break;
 800c994:	e024      	b.n	800c9e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fb43 	bl	800d024 <USBD_SetAddress>
          break;
 800c99e:	e01f      	b.n	800c9e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fb82 	bl	800d0ac <USBD_SetConfig>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73fb      	strb	r3, [r7, #15]
          break;
 800c9ac:	e018      	b.n	800c9e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fc21 	bl	800d1f8 <USBD_GetConfig>
          break;
 800c9b6:	e013      	b.n	800c9e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c9b8:	6839      	ldr	r1, [r7, #0]
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 fc52 	bl	800d264 <USBD_GetStatus>
          break;
 800c9c0:	e00e      	b.n	800c9e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fc81 	bl	800d2cc <USBD_SetFeature>
          break;
 800c9ca:	e009      	b.n	800c9e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fc90 	bl	800d2f4 <USBD_ClrFeature>
          break;
 800c9d4:	e004      	b.n	800c9e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fce7 	bl	800d3ac <USBD_CtlError>
          break;
 800c9de:	bf00      	nop
      }
      break;
 800c9e0:	e004      	b.n	800c9ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fce1 	bl	800d3ac <USBD_CtlError>
      break;
 800c9ea:	bf00      	nop
  }

  return ret;
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop

0800c9f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca0e:	2b40      	cmp	r3, #64	; 0x40
 800ca10:	d005      	beq.n	800ca1e <USBD_StdItfReq+0x26>
 800ca12:	2b40      	cmp	r3, #64	; 0x40
 800ca14:	d82f      	bhi.n	800ca76 <USBD_StdItfReq+0x7e>
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d001      	beq.n	800ca1e <USBD_StdItfReq+0x26>
 800ca1a:	2b20      	cmp	r3, #32
 800ca1c:	d12b      	bne.n	800ca76 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	3b01      	subs	r3, #1
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d81d      	bhi.n	800ca68 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	889b      	ldrh	r3, [r3, #4]
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d813      	bhi.n	800ca5e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	4798      	blx	r3
 800ca44:	4603      	mov	r3, r0
 800ca46:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	88db      	ldrh	r3, [r3, #6]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d110      	bne.n	800ca72 <USBD_StdItfReq+0x7a>
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10d      	bne.n	800ca72 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fcf6 	bl	800d448 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca5c:	e009      	b.n	800ca72 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 fca3 	bl	800d3ac <USBD_CtlError>
          break;
 800ca66:	e004      	b.n	800ca72 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fc9e 	bl	800d3ac <USBD_CtlError>
          break;
 800ca70:	e000      	b.n	800ca74 <USBD_StdItfReq+0x7c>
          break;
 800ca72:	bf00      	nop
      }
      break;
 800ca74:	e004      	b.n	800ca80 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fc97 	bl	800d3ac <USBD_CtlError>
      break;
 800ca7e:	bf00      	nop
  }

  return ret;
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	889b      	ldrh	r3, [r3, #4]
 800ca9c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800caa6:	2b40      	cmp	r3, #64	; 0x40
 800caa8:	d007      	beq.n	800caba <USBD_StdEPReq+0x30>
 800caaa:	2b40      	cmp	r3, #64	; 0x40
 800caac:	f200 8145 	bhi.w	800cd3a <USBD_StdEPReq+0x2b0>
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00c      	beq.n	800cace <USBD_StdEPReq+0x44>
 800cab4:	2b20      	cmp	r3, #32
 800cab6:	f040 8140 	bne.w	800cd3a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	4798      	blx	r3
 800cac8:	4603      	mov	r3, r0
 800caca:	73fb      	strb	r3, [r7, #15]
      break;
 800cacc:	e13a      	b.n	800cd44 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	785b      	ldrb	r3, [r3, #1]
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d007      	beq.n	800cae6 <USBD_StdEPReq+0x5c>
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	f300 8129 	bgt.w	800cd2e <USBD_StdEPReq+0x2a4>
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d07f      	beq.n	800cbe0 <USBD_StdEPReq+0x156>
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d03c      	beq.n	800cb5e <USBD_StdEPReq+0xd4>
 800cae4:	e123      	b.n	800cd2e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caec:	b2db      	uxtb	r3, r3
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d002      	beq.n	800caf8 <USBD_StdEPReq+0x6e>
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d016      	beq.n	800cb24 <USBD_StdEPReq+0x9a>
 800caf6:	e02c      	b.n	800cb52 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00d      	beq.n	800cb1a <USBD_StdEPReq+0x90>
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	2b80      	cmp	r3, #128	; 0x80
 800cb02:	d00a      	beq.n	800cb1a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7f6 f85d 	bl	8002bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb0e:	2180      	movs	r1, #128	; 0x80
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7f6 f859 	bl	8002bc8 <USBD_LL_StallEP>
 800cb16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb18:	e020      	b.n	800cb5c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fc45 	bl	800d3ac <USBD_CtlError>
              break;
 800cb22:	e01b      	b.n	800cb5c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	885b      	ldrh	r3, [r3, #2]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d10e      	bne.n	800cb4a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00b      	beq.n	800cb4a <USBD_StdEPReq+0xc0>
 800cb32:	7bbb      	ldrb	r3, [r7, #14]
 800cb34:	2b80      	cmp	r3, #128	; 0x80
 800cb36:	d008      	beq.n	800cb4a <USBD_StdEPReq+0xc0>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	88db      	ldrh	r3, [r3, #6]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d104      	bne.n	800cb4a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb40:	7bbb      	ldrb	r3, [r7, #14]
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7f6 f83f 	bl	8002bc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fc7c 	bl	800d448 <USBD_CtlSendStatus>

              break;
 800cb50:	e004      	b.n	800cb5c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fc29 	bl	800d3ac <USBD_CtlError>
              break;
 800cb5a:	bf00      	nop
          }
          break;
 800cb5c:	e0ec      	b.n	800cd38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d002      	beq.n	800cb70 <USBD_StdEPReq+0xe6>
 800cb6a:	2b03      	cmp	r3, #3
 800cb6c:	d016      	beq.n	800cb9c <USBD_StdEPReq+0x112>
 800cb6e:	e030      	b.n	800cbd2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb70:	7bbb      	ldrb	r3, [r7, #14]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00d      	beq.n	800cb92 <USBD_StdEPReq+0x108>
 800cb76:	7bbb      	ldrb	r3, [r7, #14]
 800cb78:	2b80      	cmp	r3, #128	; 0x80
 800cb7a:	d00a      	beq.n	800cb92 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb7c:	7bbb      	ldrb	r3, [r7, #14]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7f6 f821 	bl	8002bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb86:	2180      	movs	r1, #128	; 0x80
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7f6 f81d 	bl	8002bc8 <USBD_LL_StallEP>
 800cb8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb90:	e025      	b.n	800cbde <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fc09 	bl	800d3ac <USBD_CtlError>
              break;
 800cb9a:	e020      	b.n	800cbde <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	885b      	ldrh	r3, [r3, #2]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d11b      	bne.n	800cbdc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
 800cba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d004      	beq.n	800cbb8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cbae:	7bbb      	ldrb	r3, [r7, #14]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7f6 f81b 	bl	8002bee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fc45 	bl	800d448 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	4798      	blx	r3
 800cbcc:	4603      	mov	r3, r0
 800cbce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cbd0:	e004      	b.n	800cbdc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cbd2:	6839      	ldr	r1, [r7, #0]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 fbe9 	bl	800d3ac <USBD_CtlError>
              break;
 800cbda:	e000      	b.n	800cbde <USBD_StdEPReq+0x154>
              break;
 800cbdc:	bf00      	nop
          }
          break;
 800cbde:	e0ab      	b.n	800cd38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d002      	beq.n	800cbf2 <USBD_StdEPReq+0x168>
 800cbec:	2b03      	cmp	r3, #3
 800cbee:	d032      	beq.n	800cc56 <USBD_StdEPReq+0x1cc>
 800cbf0:	e097      	b.n	800cd22 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbf2:	7bbb      	ldrb	r3, [r7, #14]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d007      	beq.n	800cc08 <USBD_StdEPReq+0x17e>
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	2b80      	cmp	r3, #128	; 0x80
 800cbfc:	d004      	beq.n	800cc08 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fbd3 	bl	800d3ac <USBD_CtlError>
                break;
 800cc06:	e091      	b.n	800cd2c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da0b      	bge.n	800cc28 <USBD_StdEPReq+0x19e>
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	3310      	adds	r3, #16
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	4413      	add	r3, r2
 800cc24:	3304      	adds	r3, #4
 800cc26:	e00b      	b.n	800cc40 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc2e:	4613      	mov	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4413      	add	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	3304      	adds	r3, #4
 800cc40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2200      	movs	r2, #0
 800cc46:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fbbd 	bl	800d3ce <USBD_CtlSendData>
              break;
 800cc54:	e06a      	b.n	800cd2c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	da11      	bge.n	800cc82 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
 800cc60:	f003 020f 	and.w	r2, r3, #15
 800cc64:	6879      	ldr	r1, [r7, #4]
 800cc66:	4613      	mov	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	440b      	add	r3, r1
 800cc70:	3324      	adds	r3, #36	; 0x24
 800cc72:	881b      	ldrh	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d117      	bne.n	800cca8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fb96 	bl	800d3ac <USBD_CtlError>
                  break;
 800cc80:	e054      	b.n	800cd2c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	f003 020f 	and.w	r2, r3, #15
 800cc88:	6879      	ldr	r1, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	440b      	add	r3, r1
 800cc94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d104      	bne.n	800cca8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fb83 	bl	800d3ac <USBD_CtlError>
                  break;
 800cca6:	e041      	b.n	800cd2c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	da0b      	bge.n	800ccc8 <USBD_StdEPReq+0x23e>
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	3310      	adds	r3, #16
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	e00b      	b.n	800cce0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
 800ccca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccce:	4613      	mov	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	3304      	adds	r3, #4
 800cce0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <USBD_StdEPReq+0x264>
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	2b80      	cmp	r3, #128	; 0x80
 800ccec:	d103      	bne.n	800ccf6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	e00e      	b.n	800cd14 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ccf6:	7bbb      	ldrb	r3, [r7, #14]
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7f5 ff8a 	bl	8002c14 <USBD_LL_IsStallEP>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d003      	beq.n	800cd0e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	e002      	b.n	800cd14 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2202      	movs	r2, #2
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fb57 	bl	800d3ce <USBD_CtlSendData>
              break;
 800cd20:	e004      	b.n	800cd2c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 fb41 	bl	800d3ac <USBD_CtlError>
              break;
 800cd2a:	bf00      	nop
          }
          break;
 800cd2c:	e004      	b.n	800cd38 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fb3b 	bl	800d3ac <USBD_CtlError>
          break;
 800cd36:	bf00      	nop
      }
      break;
 800cd38:	e004      	b.n	800cd44 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fb35 	bl	800d3ac <USBD_CtlError>
      break;
 800cd42:	bf00      	nop
  }

  return ret;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
	...

0800cd50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	885b      	ldrh	r3, [r3, #2]
 800cd6a:	0a1b      	lsrs	r3, r3, #8
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	2b06      	cmp	r3, #6
 800cd72:	f200 8128 	bhi.w	800cfc6 <USBD_GetDescriptor+0x276>
 800cd76:	a201      	add	r2, pc, #4	; (adr r2, 800cd7c <USBD_GetDescriptor+0x2c>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cd99 	.word	0x0800cd99
 800cd80:	0800cdb1 	.word	0x0800cdb1
 800cd84:	0800cdf1 	.word	0x0800cdf1
 800cd88:	0800cfc7 	.word	0x0800cfc7
 800cd8c:	0800cfc7 	.word	0x0800cfc7
 800cd90:	0800cf67 	.word	0x0800cf67
 800cd94:	0800cf93 	.word	0x0800cf93
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	7c12      	ldrb	r2, [r2, #16]
 800cda4:	f107 0108 	add.w	r1, r7, #8
 800cda8:	4610      	mov	r0, r2
 800cdaa:	4798      	blx	r3
 800cdac:	60f8      	str	r0, [r7, #12]
      break;
 800cdae:	e112      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	7c1b      	ldrb	r3, [r3, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10d      	bne.n	800cdd4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc0:	f107 0208 	add.w	r2, r7, #8
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	4798      	blx	r3
 800cdc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	2202      	movs	r2, #2
 800cdd0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cdd2:	e100      	b.n	800cfd6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cddc:	f107 0208 	add.w	r2, r7, #8
 800cde0:	4610      	mov	r0, r2
 800cde2:	4798      	blx	r3
 800cde4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	3301      	adds	r3, #1
 800cdea:	2202      	movs	r2, #2
 800cdec:	701a      	strb	r2, [r3, #0]
      break;
 800cdee:	e0f2      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	885b      	ldrh	r3, [r3, #2]
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	f200 80ac 	bhi.w	800cf54 <USBD_GetDescriptor+0x204>
 800cdfc:	a201      	add	r2, pc, #4	; (adr r2, 800ce04 <USBD_GetDescriptor+0xb4>)
 800cdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce02:	bf00      	nop
 800ce04:	0800ce1d 	.word	0x0800ce1d
 800ce08:	0800ce51 	.word	0x0800ce51
 800ce0c:	0800ce85 	.word	0x0800ce85
 800ce10:	0800ceb9 	.word	0x0800ceb9
 800ce14:	0800ceed 	.word	0x0800ceed
 800ce18:	0800cf21 	.word	0x0800cf21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00b      	beq.n	800ce40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	7c12      	ldrb	r2, [r2, #16]
 800ce34:	f107 0108 	add.w	r1, r7, #8
 800ce38:	4610      	mov	r0, r2
 800ce3a:	4798      	blx	r3
 800ce3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce3e:	e091      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fab2 	bl	800d3ac <USBD_CtlError>
            err++;
 800ce48:	7afb      	ldrb	r3, [r7, #11]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce4e:	e089      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	7c12      	ldrb	r2, [r2, #16]
 800ce68:	f107 0108 	add.w	r1, r7, #8
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	4798      	blx	r3
 800ce70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce72:	e077      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fa98 	bl	800d3ac <USBD_CtlError>
            err++;
 800ce7c:	7afb      	ldrb	r3, [r7, #11]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	72fb      	strb	r3, [r7, #11]
          break;
 800ce82:	e06f      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	7c12      	ldrb	r2, [r2, #16]
 800ce9c:	f107 0108 	add.w	r1, r7, #8
 800cea0:	4610      	mov	r0, r2
 800cea2:	4798      	blx	r3
 800cea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cea6:	e05d      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fa7e 	bl	800d3ac <USBD_CtlError>
            err++;
 800ceb0:	7afb      	ldrb	r3, [r7, #11]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ceb6:	e055      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	7c12      	ldrb	r2, [r2, #16]
 800ced0:	f107 0108 	add.w	r1, r7, #8
 800ced4:	4610      	mov	r0, r2
 800ced6:	4798      	blx	r3
 800ced8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceda:	e043      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fa64 	bl	800d3ac <USBD_CtlError>
            err++;
 800cee4:	7afb      	ldrb	r3, [r7, #11]
 800cee6:	3301      	adds	r3, #1
 800cee8:	72fb      	strb	r3, [r7, #11]
          break;
 800ceea:	e03b      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cef2:	695b      	ldr	r3, [r3, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	7c12      	ldrb	r2, [r2, #16]
 800cf04:	f107 0108 	add.w	r1, r7, #8
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf0e:	e029      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fa4a 	bl	800d3ac <USBD_CtlError>
            err++;
 800cf18:	7afb      	ldrb	r3, [r7, #11]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf1e:	e021      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00b      	beq.n	800cf44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	7c12      	ldrb	r2, [r2, #16]
 800cf38:	f107 0108 	add.w	r1, r7, #8
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	4798      	blx	r3
 800cf40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf42:	e00f      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa30 	bl	800d3ac <USBD_CtlError>
            err++;
 800cf4c:	7afb      	ldrb	r3, [r7, #11]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	72fb      	strb	r3, [r7, #11]
          break;
 800cf52:	e007      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fa28 	bl	800d3ac <USBD_CtlError>
          err++;
 800cf5c:	7afb      	ldrb	r3, [r7, #11]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cf62:	bf00      	nop
      }
      break;
 800cf64:	e037      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	7c1b      	ldrb	r3, [r3, #16]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d109      	bne.n	800cf82 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf76:	f107 0208 	add.w	r2, r7, #8
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	4798      	blx	r3
 800cf7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf80:	e029      	b.n	800cfd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fa11 	bl	800d3ac <USBD_CtlError>
        err++;
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf90:	e021      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	7c1b      	ldrb	r3, [r3, #16]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10d      	bne.n	800cfb6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	f107 0208 	add.w	r2, r7, #8
 800cfa6:	4610      	mov	r0, r2
 800cfa8:	4798      	blx	r3
 800cfaa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	2207      	movs	r2, #7
 800cfb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfb4:	e00f      	b.n	800cfd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f9f7 	bl	800d3ac <USBD_CtlError>
        err++;
 800cfbe:	7afb      	ldrb	r3, [r7, #11]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	72fb      	strb	r3, [r7, #11]
      break;
 800cfc4:	e007      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f9ef 	bl	800d3ac <USBD_CtlError>
      err++;
 800cfce:	7afb      	ldrb	r3, [r7, #11]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	72fb      	strb	r3, [r7, #11]
      break;
 800cfd4:	bf00      	nop
  }

  if (err != 0U)
 800cfd6:	7afb      	ldrb	r3, [r7, #11]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d11e      	bne.n	800d01a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	88db      	ldrh	r3, [r3, #6]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d016      	beq.n	800d012 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cfe4:	893b      	ldrh	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00e      	beq.n	800d008 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	88da      	ldrh	r2, [r3, #6]
 800cfee:	893b      	ldrh	r3, [r7, #8]
 800cff0:	4293      	cmp	r3, r2
 800cff2:	bf28      	it	cs
 800cff4:	4613      	movcs	r3, r2
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cffa:	893b      	ldrh	r3, [r7, #8]
 800cffc:	461a      	mov	r2, r3
 800cffe:	68f9      	ldr	r1, [r7, #12]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 f9e4 	bl	800d3ce <USBD_CtlSendData>
 800d006:	e009      	b.n	800d01c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f9ce 	bl	800d3ac <USBD_CtlError>
 800d010:	e004      	b.n	800d01c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fa18 	bl	800d448 <USBD_CtlSendStatus>
 800d018:	e000      	b.n	800d01c <USBD_GetDescriptor+0x2cc>
    return;
 800d01a:	bf00      	nop
  }
}
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop

0800d024 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	889b      	ldrh	r3, [r3, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d131      	bne.n	800d09a <USBD_SetAddress+0x76>
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	88db      	ldrh	r3, [r3, #6]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d12d      	bne.n	800d09a <USBD_SetAddress+0x76>
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	885b      	ldrh	r3, [r3, #2]
 800d042:	2b7f      	cmp	r3, #127	; 0x7f
 800d044:	d829      	bhi.n	800d09a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	885b      	ldrh	r3, [r3, #2]
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d050:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b03      	cmp	r3, #3
 800d05c:	d104      	bne.n	800d068 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f9a3 	bl	800d3ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d066:	e01d      	b.n	800d0a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	7bfa      	ldrb	r2, [r7, #15]
 800d06c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7f5 fdf9 	bl	8002c6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f9e4 	bl	800d448 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d080:	7bfb      	ldrb	r3, [r7, #15]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d004      	beq.n	800d090 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2202      	movs	r2, #2
 800d08a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d08e:	e009      	b.n	800d0a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d098:	e004      	b.n	800d0a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f985 	bl	800d3ac <USBD_CtlError>
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	bf00      	nop
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	885b      	ldrh	r3, [r3, #2]
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	4b4c      	ldr	r3, [pc, #304]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d0c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0c4:	4b4b      	ldr	r3, [pc, #300]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d905      	bls.n	800d0d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f96c 	bl	800d3ac <USBD_CtlError>
    return USBD_FAIL;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e088      	b.n	800d1ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d002      	beq.n	800d0ea <USBD_SetConfig+0x3e>
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d025      	beq.n	800d134 <USBD_SetConfig+0x88>
 800d0e8:	e071      	b.n	800d1ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0ea:	4b42      	ldr	r3, [pc, #264]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d01c      	beq.n	800d12c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d0f2:	4b40      	ldr	r3, [pc, #256]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0fc:	4b3d      	ldr	r3, [pc, #244]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff f949 	bl	800c39a <USBD_SetClassConfig>
 800d108:	4603      	mov	r3, r0
 800d10a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d004      	beq.n	800d11c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f949 	bl	800d3ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d11a:	e065      	b.n	800d1e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f993 	bl	800d448 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2203      	movs	r2, #3
 800d126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d12a:	e05d      	b.n	800d1e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f98b 	bl	800d448 <USBD_CtlSendStatus>
      break;
 800d132:	e059      	b.n	800d1e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d134:	4b2f      	ldr	r3, [pc, #188]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d112      	bne.n	800d162 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d144:	4b2b      	ldr	r3, [pc, #172]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	461a      	mov	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d14e:	4b29      	ldr	r3, [pc, #164]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	4619      	mov	r1, r3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7ff f93c 	bl	800c3d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f974 	bl	800d448 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d160:	e042      	b.n	800d1e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d162:	4b24      	ldr	r3, [pc, #144]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	461a      	mov	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d02a      	beq.n	800d1c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	b2db      	uxtb	r3, r3
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff f92a 	bl	800c3d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d17e:	4b1d      	ldr	r3, [pc, #116]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d188:	4b1a      	ldr	r3, [pc, #104]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	4619      	mov	r1, r3
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff f903 	bl	800c39a <USBD_SetClassConfig>
 800d194:	4603      	mov	r3, r0
 800d196:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00f      	beq.n	800d1be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d19e:	6839      	ldr	r1, [r7, #0]
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f903 	bl	800d3ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff f90f 	bl	800c3d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d1bc:	e014      	b.n	800d1e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f942 	bl	800d448 <USBD_CtlSendStatus>
      break;
 800d1c4:	e010      	b.n	800d1e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f93e 	bl	800d448 <USBD_CtlSendStatus>
      break;
 800d1cc:	e00c      	b.n	800d1e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f8eb 	bl	800d3ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1d6:	4b07      	ldr	r3, [pc, #28]	; (800d1f4 <USBD_SetConfig+0x148>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7ff f8f8 	bl	800c3d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d1e6:	bf00      	nop
  }

  return ret;
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	200002f4 	.word	0x200002f4

0800d1f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	88db      	ldrh	r3, [r3, #6]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d004      	beq.n	800d214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d20a:	6839      	ldr	r1, [r7, #0]
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f8cd 	bl	800d3ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d212:	e023      	b.n	800d25c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	dc02      	bgt.n	800d226 <USBD_GetConfig+0x2e>
 800d220:	2b00      	cmp	r3, #0
 800d222:	dc03      	bgt.n	800d22c <USBD_GetConfig+0x34>
 800d224:	e015      	b.n	800d252 <USBD_GetConfig+0x5a>
 800d226:	2b03      	cmp	r3, #3
 800d228:	d00b      	beq.n	800d242 <USBD_GetConfig+0x4a>
 800d22a:	e012      	b.n	800d252 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3308      	adds	r3, #8
 800d236:	2201      	movs	r2, #1
 800d238:	4619      	mov	r1, r3
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f8c7 	bl	800d3ce <USBD_CtlSendData>
        break;
 800d240:	e00c      	b.n	800d25c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	3304      	adds	r3, #4
 800d246:	2201      	movs	r2, #1
 800d248:	4619      	mov	r1, r3
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f8bf 	bl	800d3ce <USBD_CtlSendData>
        break;
 800d250:	e004      	b.n	800d25c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f8a9 	bl	800d3ac <USBD_CtlError>
        break;
 800d25a:	bf00      	nop
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d274:	b2db      	uxtb	r3, r3
 800d276:	3b01      	subs	r3, #1
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d81e      	bhi.n	800d2ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	88db      	ldrh	r3, [r3, #6]
 800d280:	2b02      	cmp	r3, #2
 800d282:	d004      	beq.n	800d28e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f890 	bl	800d3ac <USBD_CtlError>
        break;
 800d28c:	e01a      	b.n	800d2c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d005      	beq.n	800d2aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	f043 0202 	orr.w	r2, r3, #2
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	330c      	adds	r3, #12
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f88b 	bl	800d3ce <USBD_CtlSendData>
      break;
 800d2b8:	e004      	b.n	800d2c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f875 	bl	800d3ac <USBD_CtlError>
      break;
 800d2c2:	bf00      	nop
  }
}
 800d2c4:	bf00      	nop
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	885b      	ldrh	r3, [r3, #2]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d106      	bne.n	800d2ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f8ae 	bl	800d448 <USBD_CtlSendStatus>
  }
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d304:	b2db      	uxtb	r3, r3
 800d306:	3b01      	subs	r3, #1
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d80b      	bhi.n	800d324 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	885b      	ldrh	r3, [r3, #2]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d10c      	bne.n	800d32e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f893 	bl	800d448 <USBD_CtlSendStatus>
      }
      break;
 800d322:	e004      	b.n	800d32e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f840 	bl	800d3ac <USBD_CtlError>
      break;
 800d32c:	e000      	b.n	800d330 <USBD_ClrFeature+0x3c>
      break;
 800d32e:	bf00      	nop
  }
}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	781a      	ldrb	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3301      	adds	r3, #1
 800d352:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	781a      	ldrb	r2, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3301      	adds	r3, #1
 800d360:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f7ff fabc 	bl	800c8e0 <SWAPBYTE>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	3301      	adds	r3, #1
 800d374:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3301      	adds	r3, #1
 800d37a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7ff faaf 	bl	800c8e0 <SWAPBYTE>
 800d382:	4603      	mov	r3, r0
 800d384:	461a      	mov	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3301      	adds	r3, #1
 800d38e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	3301      	adds	r3, #1
 800d394:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f7ff faa2 	bl	800c8e0 <SWAPBYTE>
 800d39c:	4603      	mov	r3, r0
 800d39e:	461a      	mov	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	80da      	strh	r2, [r3, #6]
}
 800d3a4:	bf00      	nop
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3b6:	2180      	movs	r1, #128	; 0x80
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7f5 fc05 	bl	8002bc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3be:	2100      	movs	r1, #0
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7f5 fc01 	bl	8002bc8 <USBD_LL_StallEP>
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	60f8      	str	r0, [r7, #12]
 800d3d6:	60b9      	str	r1, [r7, #8]
 800d3d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2202      	movs	r2, #2
 800d3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	68f8      	ldr	r0, [r7, #12]
 800d3f6:	f7f5 fc4c 	bl	8002c92 <USBD_LL_Transmit>

  return USBD_OK;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	2100      	movs	r1, #0
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f7f5 fc3b 	bl	8002c92 <USBD_LL_Transmit>

  return USBD_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b084      	sub	sp, #16
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	2100      	movs	r1, #0
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f7f5 fc3f 	bl	8002cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2204      	movs	r2, #4
 800d454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d458:	2300      	movs	r3, #0
 800d45a:	2200      	movs	r2, #0
 800d45c:	2100      	movs	r1, #0
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7f5 fc17 	bl	8002c92 <USBD_LL_Transmit>

  return USBD_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2205      	movs	r2, #5
 800d47a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d47e:	2300      	movs	r3, #0
 800d480:	2200      	movs	r2, #0
 800d482:	2100      	movs	r1, #0
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7f5 fc19 	bl	8002cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08c      	sub	sp, #48	; 0x30
 800d498:	af00      	add	r7, sp, #0
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	4603      	mov	r3, r0
 800d49e:	71fb      	strb	r3, [r7, #7]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	71bb      	strb	r3, [r7, #6]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
 800d4aa:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800d4ac:	79bb      	ldrb	r3, [r7, #6]
 800d4ae:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800d4b0:	797b      	ldrb	r3, [r7, #5]
 800d4b2:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d4b4:	f107 030c 	add.w	r3, r7, #12
 800d4b8:	2207      	movs	r2, #7
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f001 f949 	bl	800e754 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d4c2:	f107 0318 	add.w	r3, r7, #24
 800d4c6:	2218      	movs	r2, #24
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f001 f942 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d4d0:	233f      	movs	r3, #63	; 0x3f
 800d4d2:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800d4d4:	238a      	movs	r3, #138	; 0x8a
 800d4d6:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800d4d8:	f107 0314 	add.w	r3, r7, #20
 800d4dc:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800d4de:	2303      	movs	r3, #3
 800d4e0:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800d4e2:	f107 030c 	add.w	r3, r7, #12
 800d4e6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800d4e8:	2307      	movs	r3, #7
 800d4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800d4ec:	f107 0318 	add.w	r3, r7, #24
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 fe4c 	bl	800e190 <hci_send_req>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	da01      	bge.n	800d502 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800d4fe:	23ff      	movs	r3, #255	; 0xff
 800d500:	e014      	b.n	800d52c <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800d502:	7b3b      	ldrb	r3, [r7, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d001      	beq.n	800d50c <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800d508:	7b3b      	ldrb	r3, [r7, #12]
 800d50a:	e00f      	b.n	800d52c <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800d50c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800d510:	b29a      	uxth	r2, r3
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800d516:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800d520:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800d524:	b29a      	uxth	r2, r3
 800d526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d528:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3730      	adds	r7, #48	; 0x30
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800d534:	b590      	push	{r4, r7, lr}
 800d536:	b095      	sub	sp, #84	; 0x54
 800d538:	af00      	add	r7, sp, #0
 800d53a:	4604      	mov	r4, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	4611      	mov	r1, r2
 800d540:	461a      	mov	r2, r3
 800d542:	4623      	mov	r3, r4
 800d544:	71fb      	strb	r3, [r7, #7]
 800d546:	4603      	mov	r3, r0
 800d548:	80bb      	strh	r3, [r7, #4]
 800d54a:	460b      	mov	r3, r1
 800d54c:	807b      	strh	r3, [r7, #2]
 800d54e:	4613      	mov	r3, r2
 800d550:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800d558:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800d55c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d560:	4413      	add	r3, r2
 800d562:	330e      	adds	r3, #14
 800d564:	2b28      	cmp	r3, #40	; 0x28
 800d566:	d901      	bls.n	800d56c <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800d568:	2342      	movs	r3, #66	; 0x42
 800d56a:	e0ce      	b.n	800d70a <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800d56c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d570:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d574:	4413      	add	r3, r2
 800d576:	79fa      	ldrb	r2, [r7, #7]
 800d578:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d57c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d580:	3301      	adds	r3, #1
 800d582:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800d586:	88bb      	ldrh	r3, [r7, #4]
 800d588:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800d58a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d58e:	f107 0208 	add.w	r2, r7, #8
 800d592:	4413      	add	r3, r2
 800d594:	88ba      	ldrh	r2, [r7, #4]
 800d596:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800d598:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d59c:	3302      	adds	r3, #2
 800d59e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800d5a2:	887b      	ldrh	r3, [r7, #2]
 800d5a4:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800d5a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5aa:	f107 0208 	add.w	r2, r7, #8
 800d5ae:	4413      	add	r3, r2
 800d5b0:	887a      	ldrh	r2, [r7, #2]
 800d5b2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800d5b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5b8:	3302      	adds	r3, #2
 800d5ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800d5be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d5c6:	4413      	add	r3, r2
 800d5c8:	79ba      	ldrb	r2, [r7, #6]
 800d5ca:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d5ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800d5d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800d5e6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d5ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800d5f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d5fc:	4413      	add	r3, r2
 800d5fe:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800d602:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d606:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d60a:	3301      	adds	r3, #1
 800d60c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800d610:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d614:	f107 0208 	add.w	r2, r7, #8
 800d618:	4413      	add	r3, r2
 800d61a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800d61e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d620:	4618      	mov	r0, r3
 800d622:	f001 f889 	bl	800e738 <memcpy>
  indx +=  LocalNameLen;
 800d626:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800d62a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d62e:	4413      	add	r3, r2
 800d630:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800d634:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d638:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d63c:	4413      	add	r3, r2
 800d63e:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800d642:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d646:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d64a:	3301      	adds	r3, #1
 800d64c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800d650:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d654:	f107 0208 	add.w	r2, r7, #8
 800d658:	4413      	add	r3, r2
 800d65a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800d65e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d660:	4618      	mov	r0, r3
 800d662:	f001 f869 	bl	800e738 <memcpy>
  indx +=  ServiceUUIDLen;  
 800d666:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800d66a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d66e:	4413      	add	r3, r2
 800d670:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800d674:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800d678:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800d67c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d680:	f107 0208 	add.w	r2, r7, #8
 800d684:	4413      	add	r3, r2
 800d686:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800d68a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800d68c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d690:	3302      	adds	r3, #2
 800d692:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800d696:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d69a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800d69e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6a2:	f107 0208 	add.w	r2, r7, #8
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800d6ac:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800d6ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6b2:	3302      	adds	r3, #2
 800d6b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d6b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d6bc:	2218      	movs	r2, #24
 800d6be:	2100      	movs	r1, #0
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f001 f847 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d6c6:	233f      	movs	r3, #63	; 0x3f
 800d6c8:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800d6ca:	2383      	movs	r3, #131	; 0x83
 800d6cc:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800d6ce:	f107 0308 	add.w	r3, r7, #8
 800d6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800d6d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6d8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800d6da:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800d6de:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800d6e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 fd50 	bl	800e190 <hci_send_req>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	da01      	bge.n	800d6fa <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800d6f6:	23ff      	movs	r3, #255	; 0xff
 800d6f8:	e007      	b.n	800d70a <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800d6fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <aci_gap_set_discoverable+0x1d4>
    return status;
 800d702:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d706:	e000      	b.n	800d70a <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3754      	adds	r7, #84	; 0x54
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd90      	pop	{r4, r7, pc}

0800d712 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800d712:	b590      	push	{r4, r7, lr}
 800d714:	b091      	sub	sp, #68	; 0x44
 800d716:	af00      	add	r7, sp, #0
 800d718:	603a      	str	r2, [r7, #0]
 800d71a:	461a      	mov	r2, r3
 800d71c:	4603      	mov	r3, r0
 800d71e:	71fb      	strb	r3, [r7, #7]
 800d720:	460b      	mov	r3, r1
 800d722:	71bb      	strb	r3, [r7, #6]
 800d724:	4613      	mov	r3, r2
 800d726:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800d72c:	79bb      	ldrb	r3, [r7, #6]
 800d72e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800d730:	79bb      	ldrb	r3, [r7, #6]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00a      	beq.n	800d74c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	f107 030e 	add.w	r3, r7, #14
 800d73c:	6814      	ldr	r4, [r2, #0]
 800d73e:	6850      	ldr	r0, [r2, #4]
 800d740:	6891      	ldr	r1, [r2, #8]
 800d742:	68d2      	ldr	r2, [r2, #12]
 800d744:	601c      	str	r4, [r3, #0]
 800d746:	6058      	str	r0, [r3, #4]
 800d748:	6099      	str	r1, [r3, #8]
 800d74a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800d74c:	797b      	ldrb	r3, [r7, #5]
 800d74e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800d750:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d754:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800d756:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d75a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800d75e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d760:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800d764:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d768:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d76c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d770:	2218      	movs	r2, #24
 800d772:	2100      	movs	r1, #0
 800d774:	4618      	mov	r0, r3
 800d776:	f000 ffed 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d77a:	233f      	movs	r3, #63	; 0x3f
 800d77c:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800d77e:	2386      	movs	r3, #134	; 0x86
 800d780:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800d782:	f107 030c 	add.w	r3, r7, #12
 800d786:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800d788:	231a      	movs	r3, #26
 800d78a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800d78c:	f107 030b 	add.w	r3, r7, #11
 800d790:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800d792:	2301      	movs	r3, #1
 800d794:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800d796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d79a:	2100      	movs	r1, #0
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 fcf7 	bl	800e190 <hci_send_req>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	da01      	bge.n	800d7ac <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800d7a8:	23ff      	movs	r3, #255	; 0xff
 800d7aa:	e005      	b.n	800d7b8 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800d7ac:	7afb      	ldrb	r3, [r7, #11]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	e000      	b.n	800d7b8 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3744      	adds	r7, #68	; 0x44
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd90      	pop	{r4, r7, pc}

0800d7c0 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b092      	sub	sp, #72	; 0x48
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	6039      	str	r1, [r7, #0]
 800d7ca:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	2b1f      	cmp	r3, #31
 800d7d6:	d901      	bls.n	800d7dc <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800d7d8:	2342      	movs	r3, #66	; 0x42
 800d7da:	e03f      	b.n	800d85c <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800d7dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d7e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d7e4:	4413      	add	r3, r2
 800d7e6:	79fa      	ldrb	r2, [r7, #7]
 800d7e8:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800d7ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800d7f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d7fa:	f107 0208 	add.w	r2, r7, #8
 800d7fe:	4413      	add	r3, r2
 800d800:	79fa      	ldrb	r2, [r7, #7]
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	4618      	mov	r0, r3
 800d806:	f000 ff97 	bl	800e738 <memcpy>
  indx +=  AdvLen;
 800d80a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d80e:	79fb      	ldrb	r3, [r7, #7]
 800d810:	4413      	add	r3, r2
 800d812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d81a:	2218      	movs	r2, #24
 800d81c:	2100      	movs	r1, #0
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 ff98 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d824:	233f      	movs	r3, #63	; 0x3f
 800d826:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800d828:	238e      	movs	r3, #142	; 0x8e
 800d82a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800d82c:	f107 0308 	add.w	r3, r7, #8
 800d830:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800d832:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d836:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800d838:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d83c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800d83e:	2301      	movs	r3, #1
 800d840:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800d842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d846:	2100      	movs	r1, #0
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fca1 	bl	800e190 <hci_send_req>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	da01      	bge.n	800d858 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800d854:	23ff      	movs	r3, #255	; 0xff
 800d856:	e001      	b.n	800d85c <aci_gap_update_adv_data+0x9c>
    
  return status;
 800d858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3748      	adds	r7, #72	; 0x48
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b088      	sub	sp, #32
 800d868:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	2218      	movs	r2, #24
 800d870:	2100      	movs	r1, #0
 800d872:	4618      	mov	r0, r3
 800d874:	f000 ff6e 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d878:	233f      	movs	r3, #63	; 0x3f
 800d87a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800d87c:	f240 1301 	movw	r3, #257	; 0x101
 800d880:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d882:	1dfb      	adds	r3, r7, #7
 800d884:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d886:	2301      	movs	r3, #1
 800d888:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800d88a:	f107 0308 	add.w	r3, r7, #8
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fc7d 	bl	800e190 <hci_send_req>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	da01      	bge.n	800d8a0 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800d89c:	23ff      	movs	r3, #255	; 0xff
 800d89e:	e000      	b.n	800d8a2 <aci_gatt_init+0x3e>

  return status;
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3720      	adds	r7, #32
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b090      	sub	sp, #64	; 0x40
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6039      	str	r1, [r7, #0]
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	71fb      	strb	r3, [r7, #7]
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	71bb      	strb	r3, [r7, #6]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800d8c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d8cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d8d0:	4413      	add	r3, r2
 800d8d2:	79fa      	ldrb	r2, [r7, #7]
 800d8d4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800d8d8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d8dc:	3301      	adds	r3, #1
 800d8de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800d8e2:	79fb      	ldrb	r3, [r7, #7]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d103      	bne.n	800d8f0 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d8ee:	e002      	b.n	800d8f6 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800d8f0:	2310      	movs	r3, #16
 800d8f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800d8f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d8fa:	f107 020c 	add.w	r2, r7, #12
 800d8fe:	4413      	add	r3, r2
 800d900:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 ff16 	bl	800e738 <memcpy>
  indx +=  uuid_len;
 800d90c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800d910:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d914:	4413      	add	r3, r2
 800d916:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800d91a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d91e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d922:	4413      	add	r3, r2
 800d924:	79ba      	ldrb	r2, [r7, #6]
 800d926:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800d92a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d92e:	3301      	adds	r3, #1
 800d930:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800d934:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d938:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d93c:	4413      	add	r3, r2
 800d93e:	797a      	ldrb	r2, [r7, #5]
 800d940:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800d944:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d948:	3301      	adds	r3, #1
 800d94a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d94e:	f107 0320 	add.w	r3, r7, #32
 800d952:	2203      	movs	r2, #3
 800d954:	2100      	movs	r1, #0
 800d956:	4618      	mov	r0, r3
 800d958:	f000 fefc 	bl	800e754 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d95c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d960:	2218      	movs	r2, #24
 800d962:	2100      	movs	r1, #0
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fef5 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d96a:	233f      	movs	r3, #63	; 0x3f
 800d96c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800d96e:	f44f 7381 	mov.w	r3, #258	; 0x102
 800d972:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800d974:	f107 030c 	add.w	r3, r7, #12
 800d978:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800d97a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d97e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800d980:	f107 0320 	add.w	r3, r7, #32
 800d984:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800d986:	2303      	movs	r3, #3
 800d988:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800d98a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d98e:	2100      	movs	r1, #0
 800d990:	4618      	mov	r0, r3
 800d992:	f000 fbfd 	bl	800e190 <hci_send_req>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	da01      	bge.n	800d9a0 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d99c:	23ff      	movs	r3, #255	; 0xff
 800d99e:	e00c      	b.n	800d9ba <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800d9a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <aci_gatt_add_serv+0x104>
    return resp.status;
 800d9a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d9ac:	e005      	b.n	800d9ba <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800d9ae:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9b6:	801a      	strh	r2, [r3, #0]

  return 0;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3740      	adds	r7, #64	; 0x40
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b092      	sub	sp, #72	; 0x48
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	603a      	str	r2, [r7, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	80fb      	strh	r3, [r7, #6]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	717b      	strb	r3, [r7, #5]
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800d9de:	88fb      	ldrh	r3, [r7, #6]
 800d9e0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800d9e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d9e6:	f107 020c 	add.w	r2, r7, #12
 800d9ea:	4413      	add	r3, r2
 800d9ec:	88fa      	ldrh	r2, [r7, #6]
 800d9ee:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800d9f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d9f4:	3302      	adds	r3, #2
 800d9f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800d9fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d9fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800da02:	4413      	add	r3, r2
 800da04:	797a      	ldrb	r2, [r7, #5]
 800da06:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800da0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da0e:	3301      	adds	r3, #1
 800da10:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800da14:	797b      	ldrb	r3, [r7, #5]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d103      	bne.n	800da22 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800da1a:	2302      	movs	r3, #2
 800da1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800da20:	e002      	b.n	800da28 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800da22:	2310      	movs	r3, #16
 800da24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800da28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da2c:	f107 020c 	add.w	r2, r7, #12
 800da30:	4413      	add	r3, r2
 800da32:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 fe7d 	bl	800e738 <memcpy>
  indx +=  uuid_len;
 800da3e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800da42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800da46:	4413      	add	r3, r2
 800da48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800da4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800da54:	4413      	add	r3, r2
 800da56:	793a      	ldrb	r2, [r7, #4]
 800da58:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800da5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da60:	3301      	adds	r3, #1
 800da62:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800da66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800da6e:	4413      	add	r3, r2
 800da70:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800da74:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800da78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da7c:	3301      	adds	r3, #1
 800da7e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800da82:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800da8a:	4413      	add	r3, r2
 800da8c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800da90:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800da94:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800da98:	3301      	adds	r3, #1
 800da9a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800da9e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800daa2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800daa6:	4413      	add	r3, r2
 800daa8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800daac:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800dab0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dab4:	3301      	adds	r3, #1
 800dab6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800daba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dabe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dac2:	4413      	add	r3, r2
 800dac4:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800dac8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800dacc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dad0:	3301      	adds	r3, #1
 800dad2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800dad6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dada:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dade:	4413      	add	r3, r2
 800dae0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800dae4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800dae8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800daec:	3301      	adds	r3, #1
 800daee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800daf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800daf6:	2203      	movs	r2, #3
 800daf8:	2100      	movs	r1, #0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f000 fe2a 	bl	800e754 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800db00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db04:	2218      	movs	r2, #24
 800db06:	2100      	movs	r1, #0
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 fe23 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800db0e:	233f      	movs	r3, #63	; 0x3f
 800db10:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800db12:	f44f 7382 	mov.w	r3, #260	; 0x104
 800db16:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800db18:	f107 030c 	add.w	r3, r7, #12
 800db1c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800db1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800db22:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800db24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db28:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800db2a:	2303      	movs	r3, #3
 800db2c:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800db2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db32:	2100      	movs	r1, #0
 800db34:	4618      	mov	r0, r3
 800db36:	f000 fb2b 	bl	800e190 <hci_send_req>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	da01      	bge.n	800db44 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800db40:	23ff      	movs	r3, #255	; 0xff
 800db42:	e00c      	b.n	800db5e <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800db44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <aci_gatt_add_char+0x190>
    return resp.status;
 800db4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db50:	e005      	b.n	800db5e <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800db52:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800db56:	b29a      	uxth	r2, r3
 800db58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db5a:	801a      	strh	r2, [r3, #0]

  return 0;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3748      	adds	r7, #72	; 0x48
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800db66:	b590      	push	{r4, r7, lr}
 800db68:	b0ab      	sub	sp, #172	; 0xac
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	4604      	mov	r4, r0
 800db6e:	4608      	mov	r0, r1
 800db70:	4611      	mov	r1, r2
 800db72:	461a      	mov	r2, r3
 800db74:	4623      	mov	r3, r4
 800db76:	80fb      	strh	r3, [r7, #6]
 800db78:	4603      	mov	r3, r0
 800db7a:	80bb      	strh	r3, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70fb      	strb	r3, [r7, #3]
 800db80:	4613      	mov	r3, r2
 800db82:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800db8a:	78bb      	ldrb	r3, [r7, #2]
 800db8c:	2b7a      	cmp	r3, #122	; 0x7a
 800db8e:	d901      	bls.n	800db94 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800db90:	2342      	movs	r3, #66	; 0x42
 800db92:	e076      	b.n	800dc82 <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 800db94:	88fb      	ldrh	r3, [r7, #6]
 800db96:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800db98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800db9c:	f107 0208 	add.w	r2, r7, #8
 800dba0:	4413      	add	r3, r2
 800dba2:	88fa      	ldrh	r2, [r7, #6]
 800dba4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800dba6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dbaa:	3302      	adds	r3, #2
 800dbac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800dbb0:	88bb      	ldrh	r3, [r7, #4]
 800dbb2:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800dbb4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dbb8:	f107 0208 	add.w	r2, r7, #8
 800dbbc:	4413      	add	r3, r2
 800dbbe:	88ba      	ldrh	r2, [r7, #4]
 800dbc0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800dbc2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dbc6:	3302      	adds	r3, #2
 800dbc8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800dbcc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dbd0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800dbd4:	4413      	add	r3, r2
 800dbd6:	78fa      	ldrb	r2, [r7, #3]
 800dbd8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800dbdc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800dbe6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dbea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800dbee:	4413      	add	r3, r2
 800dbf0:	78ba      	ldrb	r2, [r7, #2]
 800dbf2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800dbf6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800dc00:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dc04:	f107 0208 	add.w	r2, r7, #8
 800dc08:	4413      	add	r3, r2
 800dc0a:	78ba      	ldrb	r2, [r7, #2]
 800dc0c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 fd91 	bl	800e738 <memcpy>
  indx +=  charValueLen;
 800dc16:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800dc1a:	78bb      	ldrb	r3, [r7, #2]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dc22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dc26:	2218      	movs	r2, #24
 800dc28:	2100      	movs	r1, #0
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 fd92 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dc30:	233f      	movs	r3, #63	; 0x3f
 800dc32:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800dc36:	f44f 7383 	mov.w	r3, #262	; 0x106
 800dc3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800dc3e:	f107 0308 	add.w	r3, r7, #8
 800dc42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800dc46:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dc4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800dc4e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800dc52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800dc56:	2301      	movs	r3, #1
 800dc58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800dc5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dc60:	2100      	movs	r1, #0
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 fa94 	bl	800e190 <hci_send_req>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	da01      	bge.n	800dc72 <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 800dc6e:	23ff      	movs	r3, #255	; 0xff
 800dc70:	e007      	b.n	800dc82 <aci_gatt_update_char_value+0x11c>

  if (status) {
 800dc72:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <aci_gatt_update_char_value+0x11a>
    return status;
 800dc7a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800dc7e:	e000      	b.n	800dc82 <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	37ac      	adds	r7, #172	; 0xac
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd90      	pop	{r4, r7, pc}

0800dc8a <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b08a      	sub	sp, #40	; 0x28
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	4603      	mov	r3, r0
 800dc92:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800dc94:	88fb      	ldrh	r3, [r7, #6]
 800dc96:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800dc98:	f107 0310 	add.w	r3, r7, #16
 800dc9c:	2218      	movs	r2, #24
 800dc9e:	2100      	movs	r1, #0
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 fd57 	bl	800e754 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800dca6:	233f      	movs	r3, #63	; 0x3f
 800dca8:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800dcaa:	f240 1327 	movw	r3, #295	; 0x127
 800dcae:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800dcb0:	f107 030c 	add.w	r3, r7, #12
 800dcb4:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800dcb6:	2302      	movs	r3, #2
 800dcb8:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800dcba:	f107 030b 	add.w	r3, r7, #11
 800dcbe:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800dcc4:	f107 0310 	add.w	r3, r7, #16
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 fa60 	bl	800e190 <hci_send_req>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	da01      	bge.n	800dcda <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800dcd6:	23ff      	movs	r3, #255	; 0xff
 800dcd8:	e000      	b.n	800dcdc <aci_gatt_allow_read+0x52>

    return status;
 800dcda:	7afb      	ldrb	r3, [r7, #11]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3728      	adds	r7, #40	; 0x28
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08a      	sub	sp, #40	; 0x28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	460a      	mov	r2, r1
 800dcee:	71fb      	strb	r3, [r7, #7]
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800dcf4:	79fb      	ldrb	r3, [r7, #7]
 800dcf6:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800dcf8:	79bb      	ldrb	r3, [r7, #6]
 800dcfa:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dcfc:	f107 0310 	add.w	r3, r7, #16
 800dd00:	2218      	movs	r2, #24
 800dd02:	2100      	movs	r1, #0
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 fd25 	bl	800e754 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dd0a:	233f      	movs	r3, #63	; 0x3f
 800dd0c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800dd0e:	230f      	movs	r3, #15
 800dd10:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800dd12:	f107 030c 	add.w	r3, r7, #12
 800dd16:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800dd18:	2302      	movs	r3, #2
 800dd1a:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800dd1c:	f107 030b 	add.w	r3, r7, #11
 800dd20:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800dd22:	2301      	movs	r3, #1
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800dd26:	f107 0310 	add.w	r3, r7, #16
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f000 fa2f 	bl	800e190 <hci_send_req>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	da01      	bge.n	800dd3c <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800dd38:	23ff      	movs	r3, #255	; 0xff
 800dd3a:	e000      	b.n	800dd3e <aci_hal_set_tx_power_level+0x5a>

  return status;
 800dd3c:	7afb      	ldrb	r3, [r7, #11]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3728      	adds	r7, #40	; 0x28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800dd46:	b590      	push	{r4, r7, lr}
 800dd48:	b089      	sub	sp, #36	; 0x24
 800dd4a:	af02      	add	r7, sp, #8
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800dd50:	f107 0410 	add.w	r4, r7, #16
 800dd54:	f107 0215 	add.w	r2, r7, #21
 800dd58:	f107 0112 	add.w	r1, r7, #18
 800dd5c:	f107 0016 	add.w	r0, r7, #22
 800dd60:	f107 030e 	add.w	r3, r7, #14
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	4623      	mov	r3, r4
 800dd68:	f000 f853 	bl	800de12 <hci_le_read_local_version>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d126      	bne.n	800ddc4 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800dd76:	8a7b      	ldrh	r3, [r7, #18]
 800dd78:	0a1b      	lsrs	r3, r3, #8
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800dd82:	8a7b      	ldrh	r3, [r7, #18]
 800dd84:	021b      	lsls	r3, r3, #8
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	b21a      	sxth	r2, r3
 800dd92:	89fb      	ldrh	r3, [r7, #14]
 800dd94:	091b      	lsrs	r3, r3, #4
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	011b      	lsls	r3, r3, #4
 800dd9a:	b21b      	sxth	r3, r3
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	b21b      	sxth	r3, r3
 800dda0:	4313      	orrs	r3, r2
 800dda2:	b21b      	sxth	r3, r3
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	b21a      	sxth	r2, r3
 800ddb0:	89fb      	ldrh	r3, [r7, #14]
 800ddb2:	b21b      	sxth	r3, r3
 800ddb4:	f003 030f 	and.w	r3, r3, #15
 800ddb8:	b21b      	sxth	r3, r3
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	b21b      	sxth	r3, r3
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	371c      	adds	r7, #28
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd90      	pop	{r4, r7, pc}

0800ddce <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b088      	sub	sp, #32
 800ddd2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ddd4:	f107 0308 	add.w	r3, r7, #8
 800ddd8:	2218      	movs	r2, #24
 800ddda:	2100      	movs	r1, #0
 800dddc:	4618      	mov	r0, r3
 800ddde:	f000 fcb9 	bl	800e754 <memset>
  rq.ogf = OGF_HOST_CTL;
 800dde2:	2303      	movs	r3, #3
 800dde4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800dde6:	2303      	movs	r3, #3
 800dde8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ddea:	1dfb      	adds	r3, r7, #7
 800ddec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ddf2:	f107 0308 	add.w	r3, r7, #8
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f000 f9c9 	bl	800e190 <hci_send_req>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	da01      	bge.n	800de08 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800de04:	23ff      	movs	r3, #255	; 0xff
 800de06:	e000      	b.n	800de0a <hci_reset+0x3c>
  
  return status;  
 800de08:	79fb      	ldrb	r3, [r7, #7]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3720      	adds	r7, #32
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b08e      	sub	sp, #56	; 0x38
 800de16:	af00      	add	r7, sp, #0
 800de18:	60f8      	str	r0, [r7, #12]
 800de1a:	60b9      	str	r1, [r7, #8]
 800de1c:	607a      	str	r2, [r7, #4]
 800de1e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800de20:	f107 0314 	add.w	r3, r7, #20
 800de24:	2209      	movs	r2, #9
 800de26:	2100      	movs	r1, #0
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 fc93 	bl	800e754 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800de2e:	f107 0320 	add.w	r3, r7, #32
 800de32:	2218      	movs	r2, #24
 800de34:	2100      	movs	r1, #0
 800de36:	4618      	mov	r0, r3
 800de38:	f000 fc8c 	bl	800e754 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800de3c:	2304      	movs	r3, #4
 800de3e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800de40:	2301      	movs	r3, #1
 800de42:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800de44:	2300      	movs	r3, #0
 800de46:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800de4c:	f107 0314 	add.w	r3, r7, #20
 800de50:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800de52:	2309      	movs	r3, #9
 800de54:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800de56:	f107 0320 	add.w	r3, r7, #32
 800de5a:	2100      	movs	r1, #0
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 f997 	bl	800e190 <hci_send_req>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	da01      	bge.n	800de6c <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800de68:	23ff      	movs	r3, #255	; 0xff
 800de6a:	e018      	b.n	800de9e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800de6c:	7d3b      	ldrb	r3, [r7, #20]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <hci_le_read_local_version+0x64>
    return resp.status;
 800de72:	7d3b      	ldrb	r3, [r7, #20]
 800de74:	e013      	b.n	800de9e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800de76:	7d7a      	ldrb	r2, [r7, #21]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800de7c:	8afa      	ldrh	r2, [r7, #22]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800de82:	7e3a      	ldrb	r2, [r7, #24]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800de88:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800de92:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800de96:	b29a      	uxth	r2, r3
 800de98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de9a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3738      	adds	r7, #56	; 0x38
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b092      	sub	sp, #72	; 0x48
 800deaa:	af00      	add	r7, sp, #0
 800deac:	4603      	mov	r3, r0
 800deae:	6039      	str	r1, [r7, #0]
 800deb0:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800deb2:	f107 0310 	add.w	r3, r7, #16
 800deb6:	2220      	movs	r2, #32
 800deb8:	2100      	movs	r1, #0
 800deba:	4618      	mov	r0, r3
 800debc:	f000 fc4a 	bl	800e754 <memset>
  scan_resp_cp.length = length;
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	2b1f      	cmp	r3, #31
 800dec8:	bf28      	it	cs
 800deca:	231f      	movcs	r3, #31
 800decc:	b2db      	uxtb	r3, r3
 800dece:	461a      	mov	r2, r3
 800ded0:	f107 0310 	add.w	r3, r7, #16
 800ded4:	3301      	adds	r3, #1
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	4618      	mov	r0, r3
 800deda:	f000 fc2d 	bl	800e738 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dee2:	2218      	movs	r2, #24
 800dee4:	2100      	movs	r1, #0
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 fc34 	bl	800e754 <memset>
  rq.ogf = OGF_LE_CTL;
 800deec:	2308      	movs	r3, #8
 800deee:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800def0:	2309      	movs	r3, #9
 800def2:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800def4:	f107 0310 	add.w	r3, r7, #16
 800def8:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800defa:	2320      	movs	r3, #32
 800defc:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800defe:	f107 030f 	add.w	r3, r7, #15
 800df02:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800df04:	2301      	movs	r3, #1
 800df06:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800df08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df0c:	2100      	movs	r1, #0
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 f93e 	bl	800e190 <hci_send_req>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	da01      	bge.n	800df1e <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800df1a:	23ff      	movs	r3, #255	; 0xff
 800df1c:	e000      	b.n	800df20 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df20:	4618      	mov	r0, r3
 800df22:	3748      	adds	r7, #72	; 0x48
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <hci_le_set_random_address>:
  
  return 0;
}

int hci_le_set_random_address(tBDAddr bdaddr)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08c      	sub	sp, #48	; 0x30
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  le_set_random_address_cp set_rand_addr_cp;
  uint8_t status;
  
  BLUENRG_memset(&set_rand_addr_cp, 0, sizeof(set_rand_addr_cp));
 800df30:	f107 0310 	add.w	r3, r7, #16
 800df34:	2206      	movs	r2, #6
 800df36:	2100      	movs	r1, #0
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fc0b 	bl	800e754 <memset>
  BLUENRG_memcpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	f107 0310 	add.w	r3, r7, #16
 800df44:	6810      	ldr	r0, [r2, #0]
 800df46:	6018      	str	r0, [r3, #0]
 800df48:	8892      	ldrh	r2, [r2, #4]
 800df4a:	809a      	strh	r2, [r3, #4]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800df4c:	f107 0318 	add.w	r3, r7, #24
 800df50:	2218      	movs	r2, #24
 800df52:	2100      	movs	r1, #0
 800df54:	4618      	mov	r0, r3
 800df56:	f000 fbfd 	bl	800e754 <memset>
  rq.ogf = OGF_LE_CTL;
 800df5a:	2308      	movs	r3, #8
 800df5c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
 800df5e:	2305      	movs	r3, #5
 800df60:	837b      	strh	r3, [r7, #26]
  rq.cparam = &set_rand_addr_cp;
 800df62:	f107 0310 	add.w	r3, r7, #16
 800df66:	623b      	str	r3, [r7, #32]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 800df68:	2306      	movs	r3, #6
 800df6a:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &status;
 800df6c:	f107 030f 	add.w	r3, r7, #15
 800df70:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 800df72:	2301      	movs	r3, #1
 800df74:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800df76:	f107 0318 	add.w	r3, r7, #24
 800df7a:	2100      	movs	r1, #0
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 f907 	bl	800e190 <hci_send_req>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	da01      	bge.n	800df8c <hci_le_set_random_address+0x64>
    return BLE_STATUS_TIMEOUT;
 800df88:	23ff      	movs	r3, #255	; 0xff
 800df8a:	e000      	b.n	800df8e <hci_le_set_random_address+0x66>
  
  return status;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3730      	adds	r7, #48	; 0x30
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800df96:	b480      	push	{r7}
 800df98:	b085      	sub	sp, #20
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3308      	adds	r3, #8
 800dfa2:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	2b04      	cmp	r3, #4
 800dfaa:	d001      	beq.n	800dfb0 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800dfac:	2301      	movs	r3, #1
 800dfae:	e00c      	b.n	800dfca <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	3302      	adds	r3, #2
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800dfbe:	3b03      	subs	r3, #3
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d001      	beq.n	800dfc8 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	e000      	b.n	800dfca <verify_packet+0x34>
  
  return 0;      
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
	...

0800dfd8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b0a6      	sub	sp, #152	; 0x98
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	607b      	str	r3, [r7, #4]
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	81fb      	strh	r3, [r7, #14]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	81bb      	strh	r3, [r7, #12]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800dfec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dff4:	b21a      	sxth	r2, r3
 800dff6:	89fb      	ldrh	r3, [r7, #14]
 800dff8:	029b      	lsls	r3, r3, #10
 800dffa:	b21b      	sxth	r3, r3
 800dffc:	4313      	orrs	r3, r2
 800dffe:	b21b      	sxth	r3, r3
 800e000:	b29b      	uxth	r3, r3
 800e002:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800e004:	7afb      	ldrb	r3, [r7, #11]
 800e006:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800e008:	2301      	movs	r3, #1
 800e00a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800e00c:	f107 0318 	add.w	r3, r7, #24
 800e010:	3301      	adds	r3, #1
 800e012:	461a      	mov	r2, r3
 800e014:	f107 0314 	add.w	r3, r7, #20
 800e018:	8819      	ldrh	r1, [r3, #0]
 800e01a:	789b      	ldrb	r3, [r3, #2]
 800e01c:	8011      	strh	r1, [r2, #0]
 800e01e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800e020:	f107 0318 	add.w	r3, r7, #24
 800e024:	3304      	adds	r3, #4
 800e026:	7afa      	ldrb	r2, [r7, #11]
 800e028:	6879      	ldr	r1, [r7, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fb84 	bl	800e738 <memcpy>
  
  if (hciContext.io.Send)
 800e030:	4b08      	ldr	r3, [pc, #32]	; (800e054 <send_cmd+0x7c>)
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d009      	beq.n	800e04c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800e038:	4b06      	ldr	r3, [pc, #24]	; (800e054 <send_cmd+0x7c>)
 800e03a:	691b      	ldr	r3, [r3, #16]
 800e03c:	7afa      	ldrb	r2, [r7, #11]
 800e03e:	b292      	uxth	r2, r2
 800e040:	3204      	adds	r2, #4
 800e042:	b291      	uxth	r1, r2
 800e044:	f107 0218 	add.w	r2, r7, #24
 800e048:	4610      	mov	r0, r2
 800e04a:	4798      	blx	r3
  }
}
 800e04c:	bf00      	nop
 800e04e:	3798      	adds	r7, #152	; 0x98
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	200005b4 	.word	0x200005b4

0800e058 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800e062:	e00a      	b.n	800e07a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800e064:	f107 030c 	add.w	r3, r7, #12
 800e068:	4619      	mov	r1, r3
 800e06a:	6838      	ldr	r0, [r7, #0]
 800e06c:	f000 faea 	bl	800e644 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 fa51 	bl	800e51c <list_insert_head>
  while (!list_is_empty(src_list))
 800e07a:	6838      	ldr	r0, [r7, #0]
 800e07c:	f000 fa2c 	bl	800e4d8 <list_is_empty>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d0ee      	beq.n	800e064 <move_list+0xc>
  }
}
 800e086:	bf00      	nop
 800e088:	bf00      	nop
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800e096:	e009      	b.n	800e0ac <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800e098:	1d3b      	adds	r3, r7, #4
 800e09a:	4619      	mov	r1, r3
 800e09c:	4809      	ldr	r0, [pc, #36]	; (800e0c4 <free_event_list+0x34>)
 800e09e:	f000 faaa 	bl	800e5f6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4808      	ldr	r0, [pc, #32]	; (800e0c8 <free_event_list+0x38>)
 800e0a8:	f000 fa5e 	bl	800e568 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800e0ac:	4806      	ldr	r0, [pc, #24]	; (800e0c8 <free_event_list+0x38>)
 800e0ae:	f000 faf0 	bl	800e692 <list_get_size>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	ddef      	ble.n	800e098 <free_event_list+0x8>
  }
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	200027c4 	.word	0x200027c4
 800e0c8:	200027bc 	.word	0x200027bc

0800e0cc <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800e0dc:	4a18      	ldr	r2, [pc, #96]	; (800e140 <hci_init+0x74>)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800e0e2:	4818      	ldr	r0, [pc, #96]	; (800e144 <hci_init+0x78>)
 800e0e4:	f000 f9e8 	bl	800e4b8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800e0e8:	4817      	ldr	r0, [pc, #92]	; (800e148 <hci_init+0x7c>)
 800e0ea:	f000 f9e5 	bl	800e4b8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800e0ee:	f7f2 fb3d 	bl	800076c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	73fb      	strb	r3, [r7, #15]
 800e0f6:	e00c      	b.n	800e112 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	228c      	movs	r2, #140	; 0x8c
 800e0fc:	fb02 f303 	mul.w	r3, r2, r3
 800e100:	4a12      	ldr	r2, [pc, #72]	; (800e14c <hci_init+0x80>)
 800e102:	4413      	add	r3, r2
 800e104:	4619      	mov	r1, r3
 800e106:	480f      	ldr	r0, [pc, #60]	; (800e144 <hci_init+0x78>)
 800e108:	f000 fa2e 	bl	800e568 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	3301      	adds	r3, #1
 800e110:	73fb      	strb	r3, [r7, #15]
 800e112:	7bfb      	ldrb	r3, [r7, #15]
 800e114:	2b04      	cmp	r3, #4
 800e116:	d9ef      	bls.n	800e0f8 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800e118:	4b09      	ldr	r3, [pc, #36]	; (800e140 <hci_init+0x74>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d003      	beq.n	800e128 <hci_init+0x5c>
 800e120:	4b07      	ldr	r3, [pc, #28]	; (800e140 <hci_init+0x74>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2000      	movs	r0, #0
 800e126:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800e128:	4b05      	ldr	r3, [pc, #20]	; (800e140 <hci_init+0x74>)
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <hci_init+0x6a>
 800e130:	4b03      	ldr	r3, [pc, #12]	; (800e140 <hci_init+0x74>)
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	4798      	blx	r3
}
 800e136:	bf00      	nop
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	200005b4 	.word	0x200005b4
 800e144:	200027bc 	.word	0x200027bc
 800e148:	200027c4 	.word	0x200027c4
 800e14c:	200002f8 	.word	0x200002f8

0800e150 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a0b      	ldr	r2, [pc, #44]	; (800e18c <hci_register_io_bus+0x3c>)
 800e15e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	4a09      	ldr	r2, [pc, #36]	; (800e18c <hci_register_io_bus+0x3c>)
 800e166:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	691b      	ldr	r3, [r3, #16]
 800e16c:	4a07      	ldr	r2, [pc, #28]	; (800e18c <hci_register_io_bus+0x3c>)
 800e16e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	699b      	ldr	r3, [r3, #24]
 800e174:	4a05      	ldr	r2, [pc, #20]	; (800e18c <hci_register_io_bus+0x3c>)
 800e176:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	4a03      	ldr	r2, [pc, #12]	; (800e18c <hci_register_io_bus+0x3c>)
 800e17e:	6093      	str	r3, [r2, #8]
}
 800e180:	bf00      	nop
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	200005b4 	.word	0x200005b4

0800e190 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b08e      	sub	sp, #56	; 0x38
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	460b      	mov	r3, r1
 800e19a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	885b      	ldrh	r3, [r3, #2]
 800e1a0:	b21b      	sxth	r3, r3
 800e1a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1a6:	b21a      	sxth	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	881b      	ldrh	r3, [r3, #0]
 800e1ac:	029b      	lsls	r3, r3, #10
 800e1ae:	b21b      	sxth	r3, r3
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	b21b      	sxth	r3, r3
 800e1b4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800e1ba:	f107 0308 	add.w	r3, r7, #8
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f000 f97a 	bl	800e4b8 <list_init_head>

  free_event_list();
 800e1c4:	f7ff ff64 	bl	800e090 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	8818      	ldrh	r0, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	8859      	ldrh	r1, [r3, #2]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	f7ff fefd 	bl	800dfd8 <send_cmd>
  
  if (async)
 800e1de:	78fb      	ldrb	r3, [r7, #3]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <hci_send_req+0x58>
  {
    return 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	e0e5      	b.n	800e3b4 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800e1e8:	f7f7 faf6 	bl	80057d8 <HAL_GetTick>
 800e1ec:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800e1ee:	f7f7 faf3 	bl	80057d8 <HAL_GetTick>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1fc:	f200 80b6 	bhi.w	800e36c <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800e200:	486e      	ldr	r0, [pc, #440]	; (800e3bc <hci_send_req+0x22c>)
 800e202:	f000 f969 	bl	800e4d8 <list_is_empty>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d000      	beq.n	800e20e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800e20c:	e7ef      	b.n	800e1ee <hci_send_req+0x5e>
      {
        break;
 800e20e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800e210:	f107 0310 	add.w	r3, r7, #16
 800e214:	4619      	mov	r1, r3
 800e216:	4869      	ldr	r0, [pc, #420]	; (800e3bc <hci_send_req+0x22c>)
 800e218:	f000 f9ed 	bl	800e5f6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	3308      	adds	r3, #8
 800e220:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	2b04      	cmp	r3, #4
 800e228:	d17b      	bne.n	800e322 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	3301      	adds	r3, #1
 800e22e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	3308      	adds	r3, #8
 800e234:	3303      	adds	r3, #3
 800e236:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e23e:	3b03      	subs	r3, #3
 800e240:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	2b3e      	cmp	r3, #62	; 0x3e
 800e248:	d04d      	beq.n	800e2e6 <hci_send_req+0x156>
 800e24a:	2b3e      	cmp	r3, #62	; 0x3e
 800e24c:	dc6b      	bgt.n	800e326 <hci_send_req+0x196>
 800e24e:	2b10      	cmp	r3, #16
 800e250:	f000 808e 	beq.w	800e370 <hci_send_req+0x1e0>
 800e254:	2b10      	cmp	r3, #16
 800e256:	dc66      	bgt.n	800e326 <hci_send_req+0x196>
 800e258:	2b0e      	cmp	r3, #14
 800e25a:	d024      	beq.n	800e2a6 <hci_send_req+0x116>
 800e25c:	2b0f      	cmp	r3, #15
 800e25e:	d162      	bne.n	800e326 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	885b      	ldrh	r3, [r3, #2]
 800e268:	b29b      	uxth	r3, r3
 800e26a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e26c:	429a      	cmp	r2, r3
 800e26e:	f040 8081 	bne.w	800e374 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	2b0f      	cmp	r3, #15
 800e278:	d004      	beq.n	800e284 <hci_send_req+0xf4>
          if (cs->status) {
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d053      	beq.n	800e32a <hci_send_req+0x19a>
            goto failed;
 800e282:	e07a      	b.n	800e37a <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	695a      	ldr	r2, [r3, #20]
 800e288:	6a3b      	ldr	r3, [r7, #32]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	bf28      	it	cs
 800e28e:	461a      	movcs	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6918      	ldr	r0, [r3, #16]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	695b      	ldr	r3, [r3, #20]
 800e29c:	461a      	mov	r2, r3
 800e29e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2a0:	f000 fa4a 	bl	800e738 <memcpy>
        goto done;
 800e2a4:	e07a      	b.n	800e39c <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d15f      	bne.n	800e378 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	3303      	adds	r3, #3
 800e2bc:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	3b03      	subs	r3, #3
 800e2c2:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	695a      	ldr	r2, [r3, #20]
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	bf28      	it	cs
 800e2ce:	461a      	movcs	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6918      	ldr	r0, [r3, #16]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	695b      	ldr	r3, [r3, #20]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2e0:	f000 fa2a 	bl	800e738 <memcpy>
        goto done;
 800e2e4:	e05a      	b.n	800e39c <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d11a      	bne.n	800e32e <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	695a      	ldr	r2, [r3, #20]
 800e302:	6a3b      	ldr	r3, [r7, #32]
 800e304:	429a      	cmp	r2, r3
 800e306:	bf28      	it	cs
 800e308:	461a      	movcs	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6918      	ldr	r0, [r3, #16]
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	1c59      	adds	r1, r3, #1
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	461a      	mov	r2, r3
 800e31c:	f000 fa0c 	bl	800e738 <memcpy>
        goto done;
 800e320:	e03c      	b.n	800e39c <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800e322:	bf00      	nop
 800e324:	e004      	b.n	800e330 <hci_send_req+0x1a0>
        break;
 800e326:	bf00      	nop
 800e328:	e002      	b.n	800e330 <hci_send_req+0x1a0>
          break;
 800e32a:	bf00      	nop
 800e32c:	e000      	b.n	800e330 <hci_send_req+0x1a0>
          break;
 800e32e:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800e330:	4823      	ldr	r0, [pc, #140]	; (800e3c0 <hci_send_req+0x230>)
 800e332:	f000 f8d1 	bl	800e4d8 <list_is_empty>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00d      	beq.n	800e358 <hci_send_req+0x1c8>
 800e33c:	481f      	ldr	r0, [pc, #124]	; (800e3bc <hci_send_req+0x22c>)
 800e33e:	f000 f8cb 	bl	800e4d8 <list_is_empty>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d007      	beq.n	800e358 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	4619      	mov	r1, r3
 800e34c:	481c      	ldr	r0, [pc, #112]	; (800e3c0 <hci_send_req+0x230>)
 800e34e:	f000 f90b 	bl	800e568 <list_insert_tail>
      hciReadPacket=NULL;
 800e352:	2300      	movs	r3, #0
 800e354:	613b      	str	r3, [r7, #16]
 800e356:	e008      	b.n	800e36a <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800e358:	693a      	ldr	r2, [r7, #16]
 800e35a:	f107 0308 	add.w	r3, r7, #8
 800e35e:	4611      	mov	r1, r2
 800e360:	4618      	mov	r0, r3
 800e362:	f000 f901 	bl	800e568 <list_insert_tail>
      hciReadPacket=NULL;
 800e366:	2300      	movs	r3, #0
 800e368:	613b      	str	r3, [r7, #16]
  {
 800e36a:	e73d      	b.n	800e1e8 <hci_send_req+0x58>
        goto failed;
 800e36c:	bf00      	nop
 800e36e:	e004      	b.n	800e37a <hci_send_req+0x1ea>
        goto failed;
 800e370:	bf00      	nop
 800e372:	e002      	b.n	800e37a <hci_send_req+0x1ea>
          goto failed;
 800e374:	bf00      	nop
 800e376:	e000      	b.n	800e37a <hci_send_req+0x1ea>
          goto failed;
 800e378:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d004      	beq.n	800e38a <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	4619      	mov	r1, r3
 800e384:	480e      	ldr	r0, [pc, #56]	; (800e3c0 <hci_send_req+0x230>)
 800e386:	f000 f8c9 	bl	800e51c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800e38a:	f107 0308 	add.w	r3, r7, #8
 800e38e:	4619      	mov	r1, r3
 800e390:	480a      	ldr	r0, [pc, #40]	; (800e3bc <hci_send_req+0x22c>)
 800e392:	f7ff fe61 	bl	800e058 <move_list>

  return -1;
 800e396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e39a:	e00b      	b.n	800e3b4 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4807      	ldr	r0, [pc, #28]	; (800e3c0 <hci_send_req+0x230>)
 800e3a2:	f000 f8bb 	bl	800e51c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800e3a6:	f107 0308 	add.w	r3, r7, #8
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4803      	ldr	r0, [pc, #12]	; (800e3bc <hci_send_req+0x22c>)
 800e3ae:	f7ff fe53 	bl	800e058 <move_list>

  return 0;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3738      	adds	r7, #56	; 0x38
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	200027c4 	.word	0x200027c4
 800e3c0:	200027bc 	.word	0x200027bc

0800e3c4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800e3ce:	e013      	b.n	800e3f8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800e3d0:	1d3b      	adds	r3, r7, #4
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	480e      	ldr	r0, [pc, #56]	; (800e410 <hci_user_evt_proc+0x4c>)
 800e3d6:	f000 f90e 	bl	800e5f6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e3da:	4b0e      	ldr	r3, [pc, #56]	; (800e414 <hci_user_evt_proc+0x50>)
 800e3dc:	69db      	ldr	r3, [r3, #28]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d005      	beq.n	800e3ee <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800e3e2:	4b0c      	ldr	r3, [pc, #48]	; (800e414 <hci_user_evt_proc+0x50>)
 800e3e4:	69db      	ldr	r3, [r3, #28]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	3208      	adds	r2, #8
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4809      	ldr	r0, [pc, #36]	; (800e418 <hci_user_evt_proc+0x54>)
 800e3f4:	f000 f8b8 	bl	800e568 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800e3f8:	4805      	ldr	r0, [pc, #20]	; (800e410 <hci_user_evt_proc+0x4c>)
 800e3fa:	f000 f86d 	bl	800e4d8 <list_is_empty>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0e5      	beq.n	800e3d0 <hci_user_evt_proc+0xc>
  }
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	200027c4 	.word	0x200027c4
 800e414:	200005b4 	.word	0x200005b4
 800e418:	200027bc 	.word	0x200027bc

0800e41c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800e424:	2300      	movs	r3, #0
 800e426:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800e42c:	481f      	ldr	r0, [pc, #124]	; (800e4ac <hci_notify_asynch_evt+0x90>)
 800e42e:	f000 f853 	bl	800e4d8 <list_is_empty>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d132      	bne.n	800e49e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800e438:	f107 030c 	add.w	r3, r7, #12
 800e43c:	4619      	mov	r1, r3
 800e43e:	481b      	ldr	r0, [pc, #108]	; (800e4ac <hci_notify_asynch_evt+0x90>)
 800e440:	f000 f8d9 	bl	800e5f6 <list_remove_head>
    
    if (hciContext.io.Receive)
 800e444:	4b1a      	ldr	r3, [pc, #104]	; (800e4b0 <hci_notify_asynch_evt+0x94>)
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d02a      	beq.n	800e4a2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800e44c:	4b18      	ldr	r3, [pc, #96]	; (800e4b0 <hci_notify_asynch_evt+0x94>)
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	3208      	adds	r2, #8
 800e454:	2180      	movs	r1, #128	; 0x80
 800e456:	4610      	mov	r0, r2
 800e458:	4798      	blx	r3
 800e45a:	4603      	mov	r3, r0
 800e45c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800e45e:	7cfb      	ldrb	r3, [r7, #19]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d016      	beq.n	800e492 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	7cfa      	ldrb	r2, [r7, #19]
 800e468:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4618      	mov	r0, r3
 800e470:	f7ff fd91 	bl	800df96 <verify_packet>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d105      	bne.n	800e486 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	4619      	mov	r1, r3
 800e47e:	480d      	ldr	r0, [pc, #52]	; (800e4b4 <hci_notify_asynch_evt+0x98>)
 800e480:	f000 f872 	bl	800e568 <list_insert_tail>
 800e484:	e00d      	b.n	800e4a2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	4619      	mov	r1, r3
 800e48a:	4808      	ldr	r0, [pc, #32]	; (800e4ac <hci_notify_asynch_evt+0x90>)
 800e48c:	f000 f846 	bl	800e51c <list_insert_head>
 800e490:	e007      	b.n	800e4a2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	4619      	mov	r1, r3
 800e496:	4805      	ldr	r0, [pc, #20]	; (800e4ac <hci_notify_asynch_evt+0x90>)
 800e498:	f000 f840 	bl	800e51c <list_insert_head>
 800e49c:	e001      	b.n	800e4a2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800e4a2:	697b      	ldr	r3, [r7, #20]

}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	200027bc 	.word	0x200027bc
 800e4b0:	200005b4 	.word	0x200005b4
 800e4b4:	200027c4 	.word	0x200027c4

0800e4b8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	605a      	str	r2, [r3, #4]
}
 800e4cc:	bf00      	nop
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e4e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e4e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e4ea:	b672      	cpsid	i
}
 800e4ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d102      	bne.n	800e4fe <list_is_empty+0x26>
  {
    return_value = 1;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	75fb      	strb	r3, [r7, #23]
 800e4fc:	e001      	b.n	800e502 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800e4fe:	2300      	movs	r3, #0
 800e500:	75fb      	strb	r3, [r7, #23]
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	f383 8810 	msr	PRIMASK, r3
}
 800e50c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e510:	4618      	mov	r0, r3
 800e512:	371c      	adds	r7, #28
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b087      	sub	sp, #28
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e526:	f3ef 8310 	mrs	r3, PRIMASK
 800e52a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e52c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e52e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e530:	b672      	cpsid	i
}
 800e532:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	683a      	ldr	r2, [r7, #0]
 800e54e:	605a      	str	r2, [r3, #4]
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	f383 8810 	msr	PRIMASK, r3
}
 800e55a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e55c:	bf00      	nop
 800e55e:	371c      	adds	r7, #28
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800e568:	b480      	push	{r7}
 800e56a:	b087      	sub	sp, #28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e572:	f3ef 8310 	mrs	r3, PRIMASK
 800e576:	60fb      	str	r3, [r7, #12]
  return(result);
 800e578:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e57a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e57c:	b672      	cpsid	i
}
 800e57e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	f383 8810 	msr	PRIMASK, r3
}
 800e5a6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e5a8:	bf00      	nop
 800e5aa:	371c      	adds	r7, #28
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b087      	sub	sp, #28
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e5c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e5c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5c6:	b672      	cpsid	i
}
 800e5c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	6812      	ldr	r2, [r2, #0]
 800e5d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	6852      	ldr	r2, [r2, #4]
 800e5dc:	605a      	str	r2, [r3, #4]
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	f383 8810 	msr	PRIMASK, r3
}
 800e5e8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e5ea:	bf00      	nop
 800e5ec:	371c      	adds	r7, #28
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b086      	sub	sp, #24
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e600:	f3ef 8310 	mrs	r3, PRIMASK
 800e604:	60fb      	str	r3, [r7, #12]
  return(result);
 800e606:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e608:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e60a:	b672      	cpsid	i
}
 800e60c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff ffca 	bl	800e5b4 <list_remove_node>
  (*node)->next = NULL;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2200      	movs	r2, #0
 800e626:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2200      	movs	r2, #0
 800e62e:	605a      	str	r2, [r3, #4]
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	f383 8810 	msr	PRIMASK, r3
}
 800e63a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e63c:	bf00      	nop
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b086      	sub	sp, #24
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e64e:	f3ef 8310 	mrs	r3, PRIMASK
 800e652:	60fb      	str	r3, [r7, #12]
  return(result);
 800e654:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e658:	b672      	cpsid	i
}
 800e65a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	4618      	mov	r0, r3
 800e66a:	f7ff ffa3 	bl	800e5b4 <list_remove_node>
  (*node)->next = NULL;
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2200      	movs	r2, #0
 800e674:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2200      	movs	r2, #0
 800e67c:	605a      	str	r2, [r3, #4]
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	f383 8810 	msr	PRIMASK, r3
}
 800e688:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e68a:	bf00      	nop
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800e692:	b480      	push	{r7}
 800e694:	b089      	sub	sp, #36	; 0x24
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  int size = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e69e:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a2:	613b      	str	r3, [r7, #16]
  return(result);
 800e6a4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e6a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6a8:	b672      	cpsid	i
}
 800e6aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800e6b2:	e005      	b.n	800e6c0 <list_get_size+0x2e>
  {
    size++;
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800e6c0:	69ba      	ldr	r2, [r7, #24]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d1f5      	bne.n	800e6b4 <list_get_size+0x22>
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f383 8810 	msr	PRIMASK, r3
}
 800e6d2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800e6d4:	69fb      	ldr	r3, [r7, #28]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3724      	adds	r7, #36	; 0x24
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <__errno>:
 800e6e4:	4b01      	ldr	r3, [pc, #4]	; (800e6ec <__errno+0x8>)
 800e6e6:	6818      	ldr	r0, [r3, #0]
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	2000009c 	.word	0x2000009c

0800e6f0 <__libc_init_array>:
 800e6f0:	b570      	push	{r4, r5, r6, lr}
 800e6f2:	4d0d      	ldr	r5, [pc, #52]	; (800e728 <__libc_init_array+0x38>)
 800e6f4:	4c0d      	ldr	r4, [pc, #52]	; (800e72c <__libc_init_array+0x3c>)
 800e6f6:	1b64      	subs	r4, r4, r5
 800e6f8:	10a4      	asrs	r4, r4, #2
 800e6fa:	2600      	movs	r6, #0
 800e6fc:	42a6      	cmp	r6, r4
 800e6fe:	d109      	bne.n	800e714 <__libc_init_array+0x24>
 800e700:	4d0b      	ldr	r5, [pc, #44]	; (800e730 <__libc_init_array+0x40>)
 800e702:	4c0c      	ldr	r4, [pc, #48]	; (800e734 <__libc_init_array+0x44>)
 800e704:	f000 fc4e 	bl	800efa4 <_init>
 800e708:	1b64      	subs	r4, r4, r5
 800e70a:	10a4      	asrs	r4, r4, #2
 800e70c:	2600      	movs	r6, #0
 800e70e:	42a6      	cmp	r6, r4
 800e710:	d105      	bne.n	800e71e <__libc_init_array+0x2e>
 800e712:	bd70      	pop	{r4, r5, r6, pc}
 800e714:	f855 3b04 	ldr.w	r3, [r5], #4
 800e718:	4798      	blx	r3
 800e71a:	3601      	adds	r6, #1
 800e71c:	e7ee      	b.n	800e6fc <__libc_init_array+0xc>
 800e71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e722:	4798      	blx	r3
 800e724:	3601      	adds	r6, #1
 800e726:	e7f2      	b.n	800e70e <__libc_init_array+0x1e>
 800e728:	0800f5e0 	.word	0x0800f5e0
 800e72c:	0800f5e0 	.word	0x0800f5e0
 800e730:	0800f5e0 	.word	0x0800f5e0
 800e734:	0800f5e4 	.word	0x0800f5e4

0800e738 <memcpy>:
 800e738:	440a      	add	r2, r1
 800e73a:	4291      	cmp	r1, r2
 800e73c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e740:	d100      	bne.n	800e744 <memcpy+0xc>
 800e742:	4770      	bx	lr
 800e744:	b510      	push	{r4, lr}
 800e746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e74a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e74e:	4291      	cmp	r1, r2
 800e750:	d1f9      	bne.n	800e746 <memcpy+0xe>
 800e752:	bd10      	pop	{r4, pc}

0800e754 <memset>:
 800e754:	4402      	add	r2, r0
 800e756:	4603      	mov	r3, r0
 800e758:	4293      	cmp	r3, r2
 800e75a:	d100      	bne.n	800e75e <memset+0xa>
 800e75c:	4770      	bx	lr
 800e75e:	f803 1b01 	strb.w	r1, [r3], #1
 800e762:	e7f9      	b.n	800e758 <memset+0x4>

0800e764 <_free_r>:
 800e764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e766:	2900      	cmp	r1, #0
 800e768:	d048      	beq.n	800e7fc <_free_r+0x98>
 800e76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e76e:	9001      	str	r0, [sp, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	f1a1 0404 	sub.w	r4, r1, #4
 800e776:	bfb8      	it	lt
 800e778:	18e4      	addlt	r4, r4, r3
 800e77a:	f000 f8cd 	bl	800e918 <__malloc_lock>
 800e77e:	4a20      	ldr	r2, [pc, #128]	; (800e800 <_free_r+0x9c>)
 800e780:	9801      	ldr	r0, [sp, #4]
 800e782:	6813      	ldr	r3, [r2, #0]
 800e784:	4615      	mov	r5, r2
 800e786:	b933      	cbnz	r3, 800e796 <_free_r+0x32>
 800e788:	6063      	str	r3, [r4, #4]
 800e78a:	6014      	str	r4, [r2, #0]
 800e78c:	b003      	add	sp, #12
 800e78e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e792:	f000 b8c7 	b.w	800e924 <__malloc_unlock>
 800e796:	42a3      	cmp	r3, r4
 800e798:	d90b      	bls.n	800e7b2 <_free_r+0x4e>
 800e79a:	6821      	ldr	r1, [r4, #0]
 800e79c:	1862      	adds	r2, r4, r1
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	bf04      	itt	eq
 800e7a2:	681a      	ldreq	r2, [r3, #0]
 800e7a4:	685b      	ldreq	r3, [r3, #4]
 800e7a6:	6063      	str	r3, [r4, #4]
 800e7a8:	bf04      	itt	eq
 800e7aa:	1852      	addeq	r2, r2, r1
 800e7ac:	6022      	streq	r2, [r4, #0]
 800e7ae:	602c      	str	r4, [r5, #0]
 800e7b0:	e7ec      	b.n	800e78c <_free_r+0x28>
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	b10b      	cbz	r3, 800e7bc <_free_r+0x58>
 800e7b8:	42a3      	cmp	r3, r4
 800e7ba:	d9fa      	bls.n	800e7b2 <_free_r+0x4e>
 800e7bc:	6811      	ldr	r1, [r2, #0]
 800e7be:	1855      	adds	r5, r2, r1
 800e7c0:	42a5      	cmp	r5, r4
 800e7c2:	d10b      	bne.n	800e7dc <_free_r+0x78>
 800e7c4:	6824      	ldr	r4, [r4, #0]
 800e7c6:	4421      	add	r1, r4
 800e7c8:	1854      	adds	r4, r2, r1
 800e7ca:	42a3      	cmp	r3, r4
 800e7cc:	6011      	str	r1, [r2, #0]
 800e7ce:	d1dd      	bne.n	800e78c <_free_r+0x28>
 800e7d0:	681c      	ldr	r4, [r3, #0]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	6053      	str	r3, [r2, #4]
 800e7d6:	4421      	add	r1, r4
 800e7d8:	6011      	str	r1, [r2, #0]
 800e7da:	e7d7      	b.n	800e78c <_free_r+0x28>
 800e7dc:	d902      	bls.n	800e7e4 <_free_r+0x80>
 800e7de:	230c      	movs	r3, #12
 800e7e0:	6003      	str	r3, [r0, #0]
 800e7e2:	e7d3      	b.n	800e78c <_free_r+0x28>
 800e7e4:	6825      	ldr	r5, [r4, #0]
 800e7e6:	1961      	adds	r1, r4, r5
 800e7e8:	428b      	cmp	r3, r1
 800e7ea:	bf04      	itt	eq
 800e7ec:	6819      	ldreq	r1, [r3, #0]
 800e7ee:	685b      	ldreq	r3, [r3, #4]
 800e7f0:	6063      	str	r3, [r4, #4]
 800e7f2:	bf04      	itt	eq
 800e7f4:	1949      	addeq	r1, r1, r5
 800e7f6:	6021      	streq	r1, [r4, #0]
 800e7f8:	6054      	str	r4, [r2, #4]
 800e7fa:	e7c7      	b.n	800e78c <_free_r+0x28>
 800e7fc:	b003      	add	sp, #12
 800e7fe:	bd30      	pop	{r4, r5, pc}
 800e800:	200005d4 	.word	0x200005d4

0800e804 <_malloc_r>:
 800e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e806:	1ccd      	adds	r5, r1, #3
 800e808:	f025 0503 	bic.w	r5, r5, #3
 800e80c:	3508      	adds	r5, #8
 800e80e:	2d0c      	cmp	r5, #12
 800e810:	bf38      	it	cc
 800e812:	250c      	movcc	r5, #12
 800e814:	2d00      	cmp	r5, #0
 800e816:	4606      	mov	r6, r0
 800e818:	db01      	blt.n	800e81e <_malloc_r+0x1a>
 800e81a:	42a9      	cmp	r1, r5
 800e81c:	d903      	bls.n	800e826 <_malloc_r+0x22>
 800e81e:	230c      	movs	r3, #12
 800e820:	6033      	str	r3, [r6, #0]
 800e822:	2000      	movs	r0, #0
 800e824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e826:	f000 f877 	bl	800e918 <__malloc_lock>
 800e82a:	4921      	ldr	r1, [pc, #132]	; (800e8b0 <_malloc_r+0xac>)
 800e82c:	680a      	ldr	r2, [r1, #0]
 800e82e:	4614      	mov	r4, r2
 800e830:	b99c      	cbnz	r4, 800e85a <_malloc_r+0x56>
 800e832:	4f20      	ldr	r7, [pc, #128]	; (800e8b4 <_malloc_r+0xb0>)
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	b923      	cbnz	r3, 800e842 <_malloc_r+0x3e>
 800e838:	4621      	mov	r1, r4
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 f83c 	bl	800e8b8 <_sbrk_r>
 800e840:	6038      	str	r0, [r7, #0]
 800e842:	4629      	mov	r1, r5
 800e844:	4630      	mov	r0, r6
 800e846:	f000 f837 	bl	800e8b8 <_sbrk_r>
 800e84a:	1c43      	adds	r3, r0, #1
 800e84c:	d123      	bne.n	800e896 <_malloc_r+0x92>
 800e84e:	230c      	movs	r3, #12
 800e850:	6033      	str	r3, [r6, #0]
 800e852:	4630      	mov	r0, r6
 800e854:	f000 f866 	bl	800e924 <__malloc_unlock>
 800e858:	e7e3      	b.n	800e822 <_malloc_r+0x1e>
 800e85a:	6823      	ldr	r3, [r4, #0]
 800e85c:	1b5b      	subs	r3, r3, r5
 800e85e:	d417      	bmi.n	800e890 <_malloc_r+0x8c>
 800e860:	2b0b      	cmp	r3, #11
 800e862:	d903      	bls.n	800e86c <_malloc_r+0x68>
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	441c      	add	r4, r3
 800e868:	6025      	str	r5, [r4, #0]
 800e86a:	e004      	b.n	800e876 <_malloc_r+0x72>
 800e86c:	6863      	ldr	r3, [r4, #4]
 800e86e:	42a2      	cmp	r2, r4
 800e870:	bf0c      	ite	eq
 800e872:	600b      	streq	r3, [r1, #0]
 800e874:	6053      	strne	r3, [r2, #4]
 800e876:	4630      	mov	r0, r6
 800e878:	f000 f854 	bl	800e924 <__malloc_unlock>
 800e87c:	f104 000b 	add.w	r0, r4, #11
 800e880:	1d23      	adds	r3, r4, #4
 800e882:	f020 0007 	bic.w	r0, r0, #7
 800e886:	1ac2      	subs	r2, r0, r3
 800e888:	d0cc      	beq.n	800e824 <_malloc_r+0x20>
 800e88a:	1a1b      	subs	r3, r3, r0
 800e88c:	50a3      	str	r3, [r4, r2]
 800e88e:	e7c9      	b.n	800e824 <_malloc_r+0x20>
 800e890:	4622      	mov	r2, r4
 800e892:	6864      	ldr	r4, [r4, #4]
 800e894:	e7cc      	b.n	800e830 <_malloc_r+0x2c>
 800e896:	1cc4      	adds	r4, r0, #3
 800e898:	f024 0403 	bic.w	r4, r4, #3
 800e89c:	42a0      	cmp	r0, r4
 800e89e:	d0e3      	beq.n	800e868 <_malloc_r+0x64>
 800e8a0:	1a21      	subs	r1, r4, r0
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	f000 f808 	bl	800e8b8 <_sbrk_r>
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	d1dd      	bne.n	800e868 <_malloc_r+0x64>
 800e8ac:	e7cf      	b.n	800e84e <_malloc_r+0x4a>
 800e8ae:	bf00      	nop
 800e8b0:	200005d4 	.word	0x200005d4
 800e8b4:	200005d8 	.word	0x200005d8

0800e8b8 <_sbrk_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4d06      	ldr	r5, [pc, #24]	; (800e8d4 <_sbrk_r+0x1c>)
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4604      	mov	r4, r0
 800e8c0:	4608      	mov	r0, r1
 800e8c2:	602b      	str	r3, [r5, #0]
 800e8c4:	f7f3 ffc6 	bl	8002854 <_sbrk>
 800e8c8:	1c43      	adds	r3, r0, #1
 800e8ca:	d102      	bne.n	800e8d2 <_sbrk_r+0x1a>
 800e8cc:	682b      	ldr	r3, [r5, #0]
 800e8ce:	b103      	cbz	r3, 800e8d2 <_sbrk_r+0x1a>
 800e8d0:	6023      	str	r3, [r4, #0]
 800e8d2:	bd38      	pop	{r3, r4, r5, pc}
 800e8d4:	200027cc 	.word	0x200027cc

0800e8d8 <siprintf>:
 800e8d8:	b40e      	push	{r1, r2, r3}
 800e8da:	b500      	push	{lr}
 800e8dc:	b09c      	sub	sp, #112	; 0x70
 800e8de:	ab1d      	add	r3, sp, #116	; 0x74
 800e8e0:	9002      	str	r0, [sp, #8]
 800e8e2:	9006      	str	r0, [sp, #24]
 800e8e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e8e8:	4809      	ldr	r0, [pc, #36]	; (800e910 <siprintf+0x38>)
 800e8ea:	9107      	str	r1, [sp, #28]
 800e8ec:	9104      	str	r1, [sp, #16]
 800e8ee:	4909      	ldr	r1, [pc, #36]	; (800e914 <siprintf+0x3c>)
 800e8f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8f4:	9105      	str	r1, [sp, #20]
 800e8f6:	6800      	ldr	r0, [r0, #0]
 800e8f8:	9301      	str	r3, [sp, #4]
 800e8fa:	a902      	add	r1, sp, #8
 800e8fc:	f000 f874 	bl	800e9e8 <_svfiprintf_r>
 800e900:	9b02      	ldr	r3, [sp, #8]
 800e902:	2200      	movs	r2, #0
 800e904:	701a      	strb	r2, [r3, #0]
 800e906:	b01c      	add	sp, #112	; 0x70
 800e908:	f85d eb04 	ldr.w	lr, [sp], #4
 800e90c:	b003      	add	sp, #12
 800e90e:	4770      	bx	lr
 800e910:	2000009c 	.word	0x2000009c
 800e914:	ffff0208 	.word	0xffff0208

0800e918 <__malloc_lock>:
 800e918:	4801      	ldr	r0, [pc, #4]	; (800e920 <__malloc_lock+0x8>)
 800e91a:	f000 baf9 	b.w	800ef10 <__retarget_lock_acquire_recursive>
 800e91e:	bf00      	nop
 800e920:	200027d4 	.word	0x200027d4

0800e924 <__malloc_unlock>:
 800e924:	4801      	ldr	r0, [pc, #4]	; (800e92c <__malloc_unlock+0x8>)
 800e926:	f000 baf4 	b.w	800ef12 <__retarget_lock_release_recursive>
 800e92a:	bf00      	nop
 800e92c:	200027d4 	.word	0x200027d4

0800e930 <__ssputs_r>:
 800e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e934:	688e      	ldr	r6, [r1, #8]
 800e936:	429e      	cmp	r6, r3
 800e938:	4682      	mov	sl, r0
 800e93a:	460c      	mov	r4, r1
 800e93c:	4690      	mov	r8, r2
 800e93e:	461f      	mov	r7, r3
 800e940:	d838      	bhi.n	800e9b4 <__ssputs_r+0x84>
 800e942:	898a      	ldrh	r2, [r1, #12]
 800e944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e948:	d032      	beq.n	800e9b0 <__ssputs_r+0x80>
 800e94a:	6825      	ldr	r5, [r4, #0]
 800e94c:	6909      	ldr	r1, [r1, #16]
 800e94e:	eba5 0901 	sub.w	r9, r5, r1
 800e952:	6965      	ldr	r5, [r4, #20]
 800e954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e95c:	3301      	adds	r3, #1
 800e95e:	444b      	add	r3, r9
 800e960:	106d      	asrs	r5, r5, #1
 800e962:	429d      	cmp	r5, r3
 800e964:	bf38      	it	cc
 800e966:	461d      	movcc	r5, r3
 800e968:	0553      	lsls	r3, r2, #21
 800e96a:	d531      	bpl.n	800e9d0 <__ssputs_r+0xa0>
 800e96c:	4629      	mov	r1, r5
 800e96e:	f7ff ff49 	bl	800e804 <_malloc_r>
 800e972:	4606      	mov	r6, r0
 800e974:	b950      	cbnz	r0, 800e98c <__ssputs_r+0x5c>
 800e976:	230c      	movs	r3, #12
 800e978:	f8ca 3000 	str.w	r3, [sl]
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e982:	81a3      	strh	r3, [r4, #12]
 800e984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e98c:	6921      	ldr	r1, [r4, #16]
 800e98e:	464a      	mov	r2, r9
 800e990:	f7ff fed2 	bl	800e738 <memcpy>
 800e994:	89a3      	ldrh	r3, [r4, #12]
 800e996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e99e:	81a3      	strh	r3, [r4, #12]
 800e9a0:	6126      	str	r6, [r4, #16]
 800e9a2:	6165      	str	r5, [r4, #20]
 800e9a4:	444e      	add	r6, r9
 800e9a6:	eba5 0509 	sub.w	r5, r5, r9
 800e9aa:	6026      	str	r6, [r4, #0]
 800e9ac:	60a5      	str	r5, [r4, #8]
 800e9ae:	463e      	mov	r6, r7
 800e9b0:	42be      	cmp	r6, r7
 800e9b2:	d900      	bls.n	800e9b6 <__ssputs_r+0x86>
 800e9b4:	463e      	mov	r6, r7
 800e9b6:	4632      	mov	r2, r6
 800e9b8:	6820      	ldr	r0, [r4, #0]
 800e9ba:	4641      	mov	r1, r8
 800e9bc:	f000 faaa 	bl	800ef14 <memmove>
 800e9c0:	68a3      	ldr	r3, [r4, #8]
 800e9c2:	6822      	ldr	r2, [r4, #0]
 800e9c4:	1b9b      	subs	r3, r3, r6
 800e9c6:	4432      	add	r2, r6
 800e9c8:	60a3      	str	r3, [r4, #8]
 800e9ca:	6022      	str	r2, [r4, #0]
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	e7db      	b.n	800e988 <__ssputs_r+0x58>
 800e9d0:	462a      	mov	r2, r5
 800e9d2:	f000 fab9 	bl	800ef48 <_realloc_r>
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	d1e1      	bne.n	800e9a0 <__ssputs_r+0x70>
 800e9dc:	6921      	ldr	r1, [r4, #16]
 800e9de:	4650      	mov	r0, sl
 800e9e0:	f7ff fec0 	bl	800e764 <_free_r>
 800e9e4:	e7c7      	b.n	800e976 <__ssputs_r+0x46>
	...

0800e9e8 <_svfiprintf_r>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	4698      	mov	r8, r3
 800e9ee:	898b      	ldrh	r3, [r1, #12]
 800e9f0:	061b      	lsls	r3, r3, #24
 800e9f2:	b09d      	sub	sp, #116	; 0x74
 800e9f4:	4607      	mov	r7, r0
 800e9f6:	460d      	mov	r5, r1
 800e9f8:	4614      	mov	r4, r2
 800e9fa:	d50e      	bpl.n	800ea1a <_svfiprintf_r+0x32>
 800e9fc:	690b      	ldr	r3, [r1, #16]
 800e9fe:	b963      	cbnz	r3, 800ea1a <_svfiprintf_r+0x32>
 800ea00:	2140      	movs	r1, #64	; 0x40
 800ea02:	f7ff feff 	bl	800e804 <_malloc_r>
 800ea06:	6028      	str	r0, [r5, #0]
 800ea08:	6128      	str	r0, [r5, #16]
 800ea0a:	b920      	cbnz	r0, 800ea16 <_svfiprintf_r+0x2e>
 800ea0c:	230c      	movs	r3, #12
 800ea0e:	603b      	str	r3, [r7, #0]
 800ea10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea14:	e0d1      	b.n	800ebba <_svfiprintf_r+0x1d2>
 800ea16:	2340      	movs	r3, #64	; 0x40
 800ea18:	616b      	str	r3, [r5, #20]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1e:	2320      	movs	r3, #32
 800ea20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea28:	2330      	movs	r3, #48	; 0x30
 800ea2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ebd4 <_svfiprintf_r+0x1ec>
 800ea2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea32:	f04f 0901 	mov.w	r9, #1
 800ea36:	4623      	mov	r3, r4
 800ea38:	469a      	mov	sl, r3
 800ea3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea3e:	b10a      	cbz	r2, 800ea44 <_svfiprintf_r+0x5c>
 800ea40:	2a25      	cmp	r2, #37	; 0x25
 800ea42:	d1f9      	bne.n	800ea38 <_svfiprintf_r+0x50>
 800ea44:	ebba 0b04 	subs.w	fp, sl, r4
 800ea48:	d00b      	beq.n	800ea62 <_svfiprintf_r+0x7a>
 800ea4a:	465b      	mov	r3, fp
 800ea4c:	4622      	mov	r2, r4
 800ea4e:	4629      	mov	r1, r5
 800ea50:	4638      	mov	r0, r7
 800ea52:	f7ff ff6d 	bl	800e930 <__ssputs_r>
 800ea56:	3001      	adds	r0, #1
 800ea58:	f000 80aa 	beq.w	800ebb0 <_svfiprintf_r+0x1c8>
 800ea5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea5e:	445a      	add	r2, fp
 800ea60:	9209      	str	r2, [sp, #36]	; 0x24
 800ea62:	f89a 3000 	ldrb.w	r3, [sl]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f000 80a2 	beq.w	800ebb0 <_svfiprintf_r+0x1c8>
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea76:	f10a 0a01 	add.w	sl, sl, #1
 800ea7a:	9304      	str	r3, [sp, #16]
 800ea7c:	9307      	str	r3, [sp, #28]
 800ea7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea82:	931a      	str	r3, [sp, #104]	; 0x68
 800ea84:	4654      	mov	r4, sl
 800ea86:	2205      	movs	r2, #5
 800ea88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea8c:	4851      	ldr	r0, [pc, #324]	; (800ebd4 <_svfiprintf_r+0x1ec>)
 800ea8e:	f7f1 fb9f 	bl	80001d0 <memchr>
 800ea92:	9a04      	ldr	r2, [sp, #16]
 800ea94:	b9d8      	cbnz	r0, 800eace <_svfiprintf_r+0xe6>
 800ea96:	06d0      	lsls	r0, r2, #27
 800ea98:	bf44      	itt	mi
 800ea9a:	2320      	movmi	r3, #32
 800ea9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaa0:	0711      	lsls	r1, r2, #28
 800eaa2:	bf44      	itt	mi
 800eaa4:	232b      	movmi	r3, #43	; 0x2b
 800eaa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaaa:	f89a 3000 	ldrb.w	r3, [sl]
 800eaae:	2b2a      	cmp	r3, #42	; 0x2a
 800eab0:	d015      	beq.n	800eade <_svfiprintf_r+0xf6>
 800eab2:	9a07      	ldr	r2, [sp, #28]
 800eab4:	4654      	mov	r4, sl
 800eab6:	2000      	movs	r0, #0
 800eab8:	f04f 0c0a 	mov.w	ip, #10
 800eabc:	4621      	mov	r1, r4
 800eabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eac2:	3b30      	subs	r3, #48	; 0x30
 800eac4:	2b09      	cmp	r3, #9
 800eac6:	d94e      	bls.n	800eb66 <_svfiprintf_r+0x17e>
 800eac8:	b1b0      	cbz	r0, 800eaf8 <_svfiprintf_r+0x110>
 800eaca:	9207      	str	r2, [sp, #28]
 800eacc:	e014      	b.n	800eaf8 <_svfiprintf_r+0x110>
 800eace:	eba0 0308 	sub.w	r3, r0, r8
 800ead2:	fa09 f303 	lsl.w	r3, r9, r3
 800ead6:	4313      	orrs	r3, r2
 800ead8:	9304      	str	r3, [sp, #16]
 800eada:	46a2      	mov	sl, r4
 800eadc:	e7d2      	b.n	800ea84 <_svfiprintf_r+0x9c>
 800eade:	9b03      	ldr	r3, [sp, #12]
 800eae0:	1d19      	adds	r1, r3, #4
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	9103      	str	r1, [sp, #12]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	bfbb      	ittet	lt
 800eaea:	425b      	neglt	r3, r3
 800eaec:	f042 0202 	orrlt.w	r2, r2, #2
 800eaf0:	9307      	strge	r3, [sp, #28]
 800eaf2:	9307      	strlt	r3, [sp, #28]
 800eaf4:	bfb8      	it	lt
 800eaf6:	9204      	strlt	r2, [sp, #16]
 800eaf8:	7823      	ldrb	r3, [r4, #0]
 800eafa:	2b2e      	cmp	r3, #46	; 0x2e
 800eafc:	d10c      	bne.n	800eb18 <_svfiprintf_r+0x130>
 800eafe:	7863      	ldrb	r3, [r4, #1]
 800eb00:	2b2a      	cmp	r3, #42	; 0x2a
 800eb02:	d135      	bne.n	800eb70 <_svfiprintf_r+0x188>
 800eb04:	9b03      	ldr	r3, [sp, #12]
 800eb06:	1d1a      	adds	r2, r3, #4
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	9203      	str	r2, [sp, #12]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	bfb8      	it	lt
 800eb10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eb14:	3402      	adds	r4, #2
 800eb16:	9305      	str	r3, [sp, #20]
 800eb18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ebe4 <_svfiprintf_r+0x1fc>
 800eb1c:	7821      	ldrb	r1, [r4, #0]
 800eb1e:	2203      	movs	r2, #3
 800eb20:	4650      	mov	r0, sl
 800eb22:	f7f1 fb55 	bl	80001d0 <memchr>
 800eb26:	b140      	cbz	r0, 800eb3a <_svfiprintf_r+0x152>
 800eb28:	2340      	movs	r3, #64	; 0x40
 800eb2a:	eba0 000a 	sub.w	r0, r0, sl
 800eb2e:	fa03 f000 	lsl.w	r0, r3, r0
 800eb32:	9b04      	ldr	r3, [sp, #16]
 800eb34:	4303      	orrs	r3, r0
 800eb36:	3401      	adds	r4, #1
 800eb38:	9304      	str	r3, [sp, #16]
 800eb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb3e:	4826      	ldr	r0, [pc, #152]	; (800ebd8 <_svfiprintf_r+0x1f0>)
 800eb40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb44:	2206      	movs	r2, #6
 800eb46:	f7f1 fb43 	bl	80001d0 <memchr>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d038      	beq.n	800ebc0 <_svfiprintf_r+0x1d8>
 800eb4e:	4b23      	ldr	r3, [pc, #140]	; (800ebdc <_svfiprintf_r+0x1f4>)
 800eb50:	bb1b      	cbnz	r3, 800eb9a <_svfiprintf_r+0x1b2>
 800eb52:	9b03      	ldr	r3, [sp, #12]
 800eb54:	3307      	adds	r3, #7
 800eb56:	f023 0307 	bic.w	r3, r3, #7
 800eb5a:	3308      	adds	r3, #8
 800eb5c:	9303      	str	r3, [sp, #12]
 800eb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb60:	4433      	add	r3, r6
 800eb62:	9309      	str	r3, [sp, #36]	; 0x24
 800eb64:	e767      	b.n	800ea36 <_svfiprintf_r+0x4e>
 800eb66:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb6a:	460c      	mov	r4, r1
 800eb6c:	2001      	movs	r0, #1
 800eb6e:	e7a5      	b.n	800eabc <_svfiprintf_r+0xd4>
 800eb70:	2300      	movs	r3, #0
 800eb72:	3401      	adds	r4, #1
 800eb74:	9305      	str	r3, [sp, #20]
 800eb76:	4619      	mov	r1, r3
 800eb78:	f04f 0c0a 	mov.w	ip, #10
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb82:	3a30      	subs	r2, #48	; 0x30
 800eb84:	2a09      	cmp	r2, #9
 800eb86:	d903      	bls.n	800eb90 <_svfiprintf_r+0x1a8>
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d0c5      	beq.n	800eb18 <_svfiprintf_r+0x130>
 800eb8c:	9105      	str	r1, [sp, #20]
 800eb8e:	e7c3      	b.n	800eb18 <_svfiprintf_r+0x130>
 800eb90:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb94:	4604      	mov	r4, r0
 800eb96:	2301      	movs	r3, #1
 800eb98:	e7f0      	b.n	800eb7c <_svfiprintf_r+0x194>
 800eb9a:	ab03      	add	r3, sp, #12
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	462a      	mov	r2, r5
 800eba0:	4b0f      	ldr	r3, [pc, #60]	; (800ebe0 <_svfiprintf_r+0x1f8>)
 800eba2:	a904      	add	r1, sp, #16
 800eba4:	4638      	mov	r0, r7
 800eba6:	f3af 8000 	nop.w
 800ebaa:	1c42      	adds	r2, r0, #1
 800ebac:	4606      	mov	r6, r0
 800ebae:	d1d6      	bne.n	800eb5e <_svfiprintf_r+0x176>
 800ebb0:	89ab      	ldrh	r3, [r5, #12]
 800ebb2:	065b      	lsls	r3, r3, #25
 800ebb4:	f53f af2c 	bmi.w	800ea10 <_svfiprintf_r+0x28>
 800ebb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebba:	b01d      	add	sp, #116	; 0x74
 800ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc0:	ab03      	add	r3, sp, #12
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	462a      	mov	r2, r5
 800ebc6:	4b06      	ldr	r3, [pc, #24]	; (800ebe0 <_svfiprintf_r+0x1f8>)
 800ebc8:	a904      	add	r1, sp, #16
 800ebca:	4638      	mov	r0, r7
 800ebcc:	f000 f87a 	bl	800ecc4 <_printf_i>
 800ebd0:	e7eb      	b.n	800ebaa <_svfiprintf_r+0x1c2>
 800ebd2:	bf00      	nop
 800ebd4:	0800f5ac 	.word	0x0800f5ac
 800ebd8:	0800f5b6 	.word	0x0800f5b6
 800ebdc:	00000000 	.word	0x00000000
 800ebe0:	0800e931 	.word	0x0800e931
 800ebe4:	0800f5b2 	.word	0x0800f5b2

0800ebe8 <_printf_common>:
 800ebe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebec:	4616      	mov	r6, r2
 800ebee:	4699      	mov	r9, r3
 800ebf0:	688a      	ldr	r2, [r1, #8]
 800ebf2:	690b      	ldr	r3, [r1, #16]
 800ebf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	bfb8      	it	lt
 800ebfc:	4613      	movlt	r3, r2
 800ebfe:	6033      	str	r3, [r6, #0]
 800ec00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec04:	4607      	mov	r7, r0
 800ec06:	460c      	mov	r4, r1
 800ec08:	b10a      	cbz	r2, 800ec0e <_printf_common+0x26>
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	6033      	str	r3, [r6, #0]
 800ec0e:	6823      	ldr	r3, [r4, #0]
 800ec10:	0699      	lsls	r1, r3, #26
 800ec12:	bf42      	ittt	mi
 800ec14:	6833      	ldrmi	r3, [r6, #0]
 800ec16:	3302      	addmi	r3, #2
 800ec18:	6033      	strmi	r3, [r6, #0]
 800ec1a:	6825      	ldr	r5, [r4, #0]
 800ec1c:	f015 0506 	ands.w	r5, r5, #6
 800ec20:	d106      	bne.n	800ec30 <_printf_common+0x48>
 800ec22:	f104 0a19 	add.w	sl, r4, #25
 800ec26:	68e3      	ldr	r3, [r4, #12]
 800ec28:	6832      	ldr	r2, [r6, #0]
 800ec2a:	1a9b      	subs	r3, r3, r2
 800ec2c:	42ab      	cmp	r3, r5
 800ec2e:	dc26      	bgt.n	800ec7e <_printf_common+0x96>
 800ec30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec34:	1e13      	subs	r3, r2, #0
 800ec36:	6822      	ldr	r2, [r4, #0]
 800ec38:	bf18      	it	ne
 800ec3a:	2301      	movne	r3, #1
 800ec3c:	0692      	lsls	r2, r2, #26
 800ec3e:	d42b      	bmi.n	800ec98 <_printf_common+0xb0>
 800ec40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec44:	4649      	mov	r1, r9
 800ec46:	4638      	mov	r0, r7
 800ec48:	47c0      	blx	r8
 800ec4a:	3001      	adds	r0, #1
 800ec4c:	d01e      	beq.n	800ec8c <_printf_common+0xa4>
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	68e5      	ldr	r5, [r4, #12]
 800ec52:	6832      	ldr	r2, [r6, #0]
 800ec54:	f003 0306 	and.w	r3, r3, #6
 800ec58:	2b04      	cmp	r3, #4
 800ec5a:	bf08      	it	eq
 800ec5c:	1aad      	subeq	r5, r5, r2
 800ec5e:	68a3      	ldr	r3, [r4, #8]
 800ec60:	6922      	ldr	r2, [r4, #16]
 800ec62:	bf0c      	ite	eq
 800ec64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec68:	2500      	movne	r5, #0
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	bfc4      	itt	gt
 800ec6e:	1a9b      	subgt	r3, r3, r2
 800ec70:	18ed      	addgt	r5, r5, r3
 800ec72:	2600      	movs	r6, #0
 800ec74:	341a      	adds	r4, #26
 800ec76:	42b5      	cmp	r5, r6
 800ec78:	d11a      	bne.n	800ecb0 <_printf_common+0xc8>
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	e008      	b.n	800ec90 <_printf_common+0xa8>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	4652      	mov	r2, sl
 800ec82:	4649      	mov	r1, r9
 800ec84:	4638      	mov	r0, r7
 800ec86:	47c0      	blx	r8
 800ec88:	3001      	adds	r0, #1
 800ec8a:	d103      	bne.n	800ec94 <_printf_common+0xac>
 800ec8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec94:	3501      	adds	r5, #1
 800ec96:	e7c6      	b.n	800ec26 <_printf_common+0x3e>
 800ec98:	18e1      	adds	r1, r4, r3
 800ec9a:	1c5a      	adds	r2, r3, #1
 800ec9c:	2030      	movs	r0, #48	; 0x30
 800ec9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eca2:	4422      	add	r2, r4
 800eca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ecac:	3302      	adds	r3, #2
 800ecae:	e7c7      	b.n	800ec40 <_printf_common+0x58>
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	4649      	mov	r1, r9
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	47c0      	blx	r8
 800ecba:	3001      	adds	r0, #1
 800ecbc:	d0e6      	beq.n	800ec8c <_printf_common+0xa4>
 800ecbe:	3601      	adds	r6, #1
 800ecc0:	e7d9      	b.n	800ec76 <_printf_common+0x8e>
	...

0800ecc4 <_printf_i>:
 800ecc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc8:	460c      	mov	r4, r1
 800ecca:	4691      	mov	r9, r2
 800eccc:	7e27      	ldrb	r7, [r4, #24]
 800ecce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ecd0:	2f78      	cmp	r7, #120	; 0x78
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	469a      	mov	sl, r3
 800ecd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecda:	d807      	bhi.n	800ecec <_printf_i+0x28>
 800ecdc:	2f62      	cmp	r7, #98	; 0x62
 800ecde:	d80a      	bhi.n	800ecf6 <_printf_i+0x32>
 800ece0:	2f00      	cmp	r7, #0
 800ece2:	f000 80d8 	beq.w	800ee96 <_printf_i+0x1d2>
 800ece6:	2f58      	cmp	r7, #88	; 0x58
 800ece8:	f000 80a3 	beq.w	800ee32 <_printf_i+0x16e>
 800ecec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ecf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ecf4:	e03a      	b.n	800ed6c <_printf_i+0xa8>
 800ecf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecfa:	2b15      	cmp	r3, #21
 800ecfc:	d8f6      	bhi.n	800ecec <_printf_i+0x28>
 800ecfe:	a001      	add	r0, pc, #4	; (adr r0, 800ed04 <_printf_i+0x40>)
 800ed00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed04:	0800ed5d 	.word	0x0800ed5d
 800ed08:	0800ed71 	.word	0x0800ed71
 800ed0c:	0800eced 	.word	0x0800eced
 800ed10:	0800eced 	.word	0x0800eced
 800ed14:	0800eced 	.word	0x0800eced
 800ed18:	0800eced 	.word	0x0800eced
 800ed1c:	0800ed71 	.word	0x0800ed71
 800ed20:	0800eced 	.word	0x0800eced
 800ed24:	0800eced 	.word	0x0800eced
 800ed28:	0800eced 	.word	0x0800eced
 800ed2c:	0800eced 	.word	0x0800eced
 800ed30:	0800ee7d 	.word	0x0800ee7d
 800ed34:	0800eda1 	.word	0x0800eda1
 800ed38:	0800ee5f 	.word	0x0800ee5f
 800ed3c:	0800eced 	.word	0x0800eced
 800ed40:	0800eced 	.word	0x0800eced
 800ed44:	0800ee9f 	.word	0x0800ee9f
 800ed48:	0800eced 	.word	0x0800eced
 800ed4c:	0800eda1 	.word	0x0800eda1
 800ed50:	0800eced 	.word	0x0800eced
 800ed54:	0800eced 	.word	0x0800eced
 800ed58:	0800ee67 	.word	0x0800ee67
 800ed5c:	680b      	ldr	r3, [r1, #0]
 800ed5e:	1d1a      	adds	r2, r3, #4
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	600a      	str	r2, [r1, #0]
 800ed64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e0a3      	b.n	800eeb8 <_printf_i+0x1f4>
 800ed70:	6825      	ldr	r5, [r4, #0]
 800ed72:	6808      	ldr	r0, [r1, #0]
 800ed74:	062e      	lsls	r6, r5, #24
 800ed76:	f100 0304 	add.w	r3, r0, #4
 800ed7a:	d50a      	bpl.n	800ed92 <_printf_i+0xce>
 800ed7c:	6805      	ldr	r5, [r0, #0]
 800ed7e:	600b      	str	r3, [r1, #0]
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	da03      	bge.n	800ed8c <_printf_i+0xc8>
 800ed84:	232d      	movs	r3, #45	; 0x2d
 800ed86:	426d      	negs	r5, r5
 800ed88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed8c:	485e      	ldr	r0, [pc, #376]	; (800ef08 <_printf_i+0x244>)
 800ed8e:	230a      	movs	r3, #10
 800ed90:	e019      	b.n	800edc6 <_printf_i+0x102>
 800ed92:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ed96:	6805      	ldr	r5, [r0, #0]
 800ed98:	600b      	str	r3, [r1, #0]
 800ed9a:	bf18      	it	ne
 800ed9c:	b22d      	sxthne	r5, r5
 800ed9e:	e7ef      	b.n	800ed80 <_printf_i+0xbc>
 800eda0:	680b      	ldr	r3, [r1, #0]
 800eda2:	6825      	ldr	r5, [r4, #0]
 800eda4:	1d18      	adds	r0, r3, #4
 800eda6:	6008      	str	r0, [r1, #0]
 800eda8:	0628      	lsls	r0, r5, #24
 800edaa:	d501      	bpl.n	800edb0 <_printf_i+0xec>
 800edac:	681d      	ldr	r5, [r3, #0]
 800edae:	e002      	b.n	800edb6 <_printf_i+0xf2>
 800edb0:	0669      	lsls	r1, r5, #25
 800edb2:	d5fb      	bpl.n	800edac <_printf_i+0xe8>
 800edb4:	881d      	ldrh	r5, [r3, #0]
 800edb6:	4854      	ldr	r0, [pc, #336]	; (800ef08 <_printf_i+0x244>)
 800edb8:	2f6f      	cmp	r7, #111	; 0x6f
 800edba:	bf0c      	ite	eq
 800edbc:	2308      	moveq	r3, #8
 800edbe:	230a      	movne	r3, #10
 800edc0:	2100      	movs	r1, #0
 800edc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edc6:	6866      	ldr	r6, [r4, #4]
 800edc8:	60a6      	str	r6, [r4, #8]
 800edca:	2e00      	cmp	r6, #0
 800edcc:	bfa2      	ittt	ge
 800edce:	6821      	ldrge	r1, [r4, #0]
 800edd0:	f021 0104 	bicge.w	r1, r1, #4
 800edd4:	6021      	strge	r1, [r4, #0]
 800edd6:	b90d      	cbnz	r5, 800eddc <_printf_i+0x118>
 800edd8:	2e00      	cmp	r6, #0
 800edda:	d04d      	beq.n	800ee78 <_printf_i+0x1b4>
 800eddc:	4616      	mov	r6, r2
 800edde:	fbb5 f1f3 	udiv	r1, r5, r3
 800ede2:	fb03 5711 	mls	r7, r3, r1, r5
 800ede6:	5dc7      	ldrb	r7, [r0, r7]
 800ede8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800edec:	462f      	mov	r7, r5
 800edee:	42bb      	cmp	r3, r7
 800edf0:	460d      	mov	r5, r1
 800edf2:	d9f4      	bls.n	800edde <_printf_i+0x11a>
 800edf4:	2b08      	cmp	r3, #8
 800edf6:	d10b      	bne.n	800ee10 <_printf_i+0x14c>
 800edf8:	6823      	ldr	r3, [r4, #0]
 800edfa:	07df      	lsls	r7, r3, #31
 800edfc:	d508      	bpl.n	800ee10 <_printf_i+0x14c>
 800edfe:	6923      	ldr	r3, [r4, #16]
 800ee00:	6861      	ldr	r1, [r4, #4]
 800ee02:	4299      	cmp	r1, r3
 800ee04:	bfde      	ittt	le
 800ee06:	2330      	movle	r3, #48	; 0x30
 800ee08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee0c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ee10:	1b92      	subs	r2, r2, r6
 800ee12:	6122      	str	r2, [r4, #16]
 800ee14:	f8cd a000 	str.w	sl, [sp]
 800ee18:	464b      	mov	r3, r9
 800ee1a:	aa03      	add	r2, sp, #12
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4640      	mov	r0, r8
 800ee20:	f7ff fee2 	bl	800ebe8 <_printf_common>
 800ee24:	3001      	adds	r0, #1
 800ee26:	d14c      	bne.n	800eec2 <_printf_i+0x1fe>
 800ee28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee2c:	b004      	add	sp, #16
 800ee2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee32:	4835      	ldr	r0, [pc, #212]	; (800ef08 <_printf_i+0x244>)
 800ee34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	680e      	ldr	r6, [r1, #0]
 800ee3c:	061f      	lsls	r7, r3, #24
 800ee3e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ee42:	600e      	str	r6, [r1, #0]
 800ee44:	d514      	bpl.n	800ee70 <_printf_i+0x1ac>
 800ee46:	07d9      	lsls	r1, r3, #31
 800ee48:	bf44      	itt	mi
 800ee4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee4e:	6023      	strmi	r3, [r4, #0]
 800ee50:	b91d      	cbnz	r5, 800ee5a <_printf_i+0x196>
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	f023 0320 	bic.w	r3, r3, #32
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	2310      	movs	r3, #16
 800ee5c:	e7b0      	b.n	800edc0 <_printf_i+0xfc>
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	f043 0320 	orr.w	r3, r3, #32
 800ee64:	6023      	str	r3, [r4, #0]
 800ee66:	2378      	movs	r3, #120	; 0x78
 800ee68:	4828      	ldr	r0, [pc, #160]	; (800ef0c <_printf_i+0x248>)
 800ee6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee6e:	e7e3      	b.n	800ee38 <_printf_i+0x174>
 800ee70:	065e      	lsls	r6, r3, #25
 800ee72:	bf48      	it	mi
 800ee74:	b2ad      	uxthmi	r5, r5
 800ee76:	e7e6      	b.n	800ee46 <_printf_i+0x182>
 800ee78:	4616      	mov	r6, r2
 800ee7a:	e7bb      	b.n	800edf4 <_printf_i+0x130>
 800ee7c:	680b      	ldr	r3, [r1, #0]
 800ee7e:	6826      	ldr	r6, [r4, #0]
 800ee80:	6960      	ldr	r0, [r4, #20]
 800ee82:	1d1d      	adds	r5, r3, #4
 800ee84:	600d      	str	r5, [r1, #0]
 800ee86:	0635      	lsls	r5, r6, #24
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	d501      	bpl.n	800ee90 <_printf_i+0x1cc>
 800ee8c:	6018      	str	r0, [r3, #0]
 800ee8e:	e002      	b.n	800ee96 <_printf_i+0x1d2>
 800ee90:	0671      	lsls	r1, r6, #25
 800ee92:	d5fb      	bpl.n	800ee8c <_printf_i+0x1c8>
 800ee94:	8018      	strh	r0, [r3, #0]
 800ee96:	2300      	movs	r3, #0
 800ee98:	6123      	str	r3, [r4, #16]
 800ee9a:	4616      	mov	r6, r2
 800ee9c:	e7ba      	b.n	800ee14 <_printf_i+0x150>
 800ee9e:	680b      	ldr	r3, [r1, #0]
 800eea0:	1d1a      	adds	r2, r3, #4
 800eea2:	600a      	str	r2, [r1, #0]
 800eea4:	681e      	ldr	r6, [r3, #0]
 800eea6:	6862      	ldr	r2, [r4, #4]
 800eea8:	2100      	movs	r1, #0
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f7f1 f990 	bl	80001d0 <memchr>
 800eeb0:	b108      	cbz	r0, 800eeb6 <_printf_i+0x1f2>
 800eeb2:	1b80      	subs	r0, r0, r6
 800eeb4:	6060      	str	r0, [r4, #4]
 800eeb6:	6863      	ldr	r3, [r4, #4]
 800eeb8:	6123      	str	r3, [r4, #16]
 800eeba:	2300      	movs	r3, #0
 800eebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eec0:	e7a8      	b.n	800ee14 <_printf_i+0x150>
 800eec2:	6923      	ldr	r3, [r4, #16]
 800eec4:	4632      	mov	r2, r6
 800eec6:	4649      	mov	r1, r9
 800eec8:	4640      	mov	r0, r8
 800eeca:	47d0      	blx	sl
 800eecc:	3001      	adds	r0, #1
 800eece:	d0ab      	beq.n	800ee28 <_printf_i+0x164>
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	079b      	lsls	r3, r3, #30
 800eed4:	d413      	bmi.n	800eefe <_printf_i+0x23a>
 800eed6:	68e0      	ldr	r0, [r4, #12]
 800eed8:	9b03      	ldr	r3, [sp, #12]
 800eeda:	4298      	cmp	r0, r3
 800eedc:	bfb8      	it	lt
 800eede:	4618      	movlt	r0, r3
 800eee0:	e7a4      	b.n	800ee2c <_printf_i+0x168>
 800eee2:	2301      	movs	r3, #1
 800eee4:	4632      	mov	r2, r6
 800eee6:	4649      	mov	r1, r9
 800eee8:	4640      	mov	r0, r8
 800eeea:	47d0      	blx	sl
 800eeec:	3001      	adds	r0, #1
 800eeee:	d09b      	beq.n	800ee28 <_printf_i+0x164>
 800eef0:	3501      	adds	r5, #1
 800eef2:	68e3      	ldr	r3, [r4, #12]
 800eef4:	9903      	ldr	r1, [sp, #12]
 800eef6:	1a5b      	subs	r3, r3, r1
 800eef8:	42ab      	cmp	r3, r5
 800eefa:	dcf2      	bgt.n	800eee2 <_printf_i+0x21e>
 800eefc:	e7eb      	b.n	800eed6 <_printf_i+0x212>
 800eefe:	2500      	movs	r5, #0
 800ef00:	f104 0619 	add.w	r6, r4, #25
 800ef04:	e7f5      	b.n	800eef2 <_printf_i+0x22e>
 800ef06:	bf00      	nop
 800ef08:	0800f5bd 	.word	0x0800f5bd
 800ef0c:	0800f5ce 	.word	0x0800f5ce

0800ef10 <__retarget_lock_acquire_recursive>:
 800ef10:	4770      	bx	lr

0800ef12 <__retarget_lock_release_recursive>:
 800ef12:	4770      	bx	lr

0800ef14 <memmove>:
 800ef14:	4288      	cmp	r0, r1
 800ef16:	b510      	push	{r4, lr}
 800ef18:	eb01 0402 	add.w	r4, r1, r2
 800ef1c:	d902      	bls.n	800ef24 <memmove+0x10>
 800ef1e:	4284      	cmp	r4, r0
 800ef20:	4623      	mov	r3, r4
 800ef22:	d807      	bhi.n	800ef34 <memmove+0x20>
 800ef24:	1e43      	subs	r3, r0, #1
 800ef26:	42a1      	cmp	r1, r4
 800ef28:	d008      	beq.n	800ef3c <memmove+0x28>
 800ef2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef32:	e7f8      	b.n	800ef26 <memmove+0x12>
 800ef34:	4402      	add	r2, r0
 800ef36:	4601      	mov	r1, r0
 800ef38:	428a      	cmp	r2, r1
 800ef3a:	d100      	bne.n	800ef3e <memmove+0x2a>
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef46:	e7f7      	b.n	800ef38 <memmove+0x24>

0800ef48 <_realloc_r>:
 800ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4a:	4607      	mov	r7, r0
 800ef4c:	4614      	mov	r4, r2
 800ef4e:	460e      	mov	r6, r1
 800ef50:	b921      	cbnz	r1, 800ef5c <_realloc_r+0x14>
 800ef52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef56:	4611      	mov	r1, r2
 800ef58:	f7ff bc54 	b.w	800e804 <_malloc_r>
 800ef5c:	b922      	cbnz	r2, 800ef68 <_realloc_r+0x20>
 800ef5e:	f7ff fc01 	bl	800e764 <_free_r>
 800ef62:	4625      	mov	r5, r4
 800ef64:	4628      	mov	r0, r5
 800ef66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef68:	f000 f814 	bl	800ef94 <_malloc_usable_size_r>
 800ef6c:	42a0      	cmp	r0, r4
 800ef6e:	d20f      	bcs.n	800ef90 <_realloc_r+0x48>
 800ef70:	4621      	mov	r1, r4
 800ef72:	4638      	mov	r0, r7
 800ef74:	f7ff fc46 	bl	800e804 <_malloc_r>
 800ef78:	4605      	mov	r5, r0
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d0f2      	beq.n	800ef64 <_realloc_r+0x1c>
 800ef7e:	4631      	mov	r1, r6
 800ef80:	4622      	mov	r2, r4
 800ef82:	f7ff fbd9 	bl	800e738 <memcpy>
 800ef86:	4631      	mov	r1, r6
 800ef88:	4638      	mov	r0, r7
 800ef8a:	f7ff fbeb 	bl	800e764 <_free_r>
 800ef8e:	e7e9      	b.n	800ef64 <_realloc_r+0x1c>
 800ef90:	4635      	mov	r5, r6
 800ef92:	e7e7      	b.n	800ef64 <_realloc_r+0x1c>

0800ef94 <_malloc_usable_size_r>:
 800ef94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef98:	1f18      	subs	r0, r3, #4
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	bfbc      	itt	lt
 800ef9e:	580b      	ldrlt	r3, [r1, r0]
 800efa0:	18c0      	addlt	r0, r0, r3
 800efa2:	4770      	bx	lr

0800efa4 <_init>:
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	bf00      	nop
 800efa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efaa:	bc08      	pop	{r3}
 800efac:	469e      	mov	lr, r3
 800efae:	4770      	bx	lr

0800efb0 <_fini>:
 800efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb2:	bf00      	nop
 800efb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efb6:	bc08      	pop	{r3}
 800efb8:	469e      	mov	lr, r3
 800efba:	4770      	bx	lr
