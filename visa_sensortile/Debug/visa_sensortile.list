
visa_sensortile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  080107b8  080107b8  000207b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010de0  08010de0  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08010de0  08010de0  00020de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010de8  08010de8  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010de8  08010de8  00020de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dec  08010dec  00020dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08010df0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027b8  20000104  08010ef4  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028bc  08010ef4  000328bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046c91  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007400  00000000  00000000  00076dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  0007e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002800  00000000  00000000  00080c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a0e  00000000  00000000  00083468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000327d2  00000000  00000000  000b4e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bf06  00000000  00000000  000e7648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f354e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b7d8  00000000  00000000  001f35a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000104 	.word	0x20000104
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107a0 	.word	0x080107a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000108 	.word	0x20000108
 80001cc:	080107a0 	.word	0x080107a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  TargetType_t BoardType Nucleo/BlueCoin/SensorTile
  * @retval None
  */
void InitTargetPlatform(TargetType_t BoardType)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0c6      	sub	sp, #280	; 0x118
 800056c:	af02      	add	r7, sp, #8
 800056e:	4602      	mov	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
  TargetBoardFeatures.BoardType = BoardType;
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <InitTargetPlatform+0x68>)
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	7013      	strb	r3, [r2, #0]
   * for looking the MOTENV1 Initialization phase */
  HAL_Delay(10000);
#endif /* ENABLE_USB_DEBUG */
  
  /* Initialize LED */
  BSP_LED_Init( LED1 );
 800057c:	2000      	movs	r0, #0
 800057e:	f004 fa77 	bl	8004a70 <BSP_LED_Init>

  STLBLE_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 8000582:	f107 000c 	add.w	r0, r7, #12
 8000586:	2330      	movs	r3, #48	; 0x30
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2335      	movs	r3, #53	; 0x35
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2332      	movs	r3, #50	; 0x32
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <InitTargetPlatform+0x6c>)
 8000592:	4911      	ldr	r1, [pc, #68]	; (80005d8 <InitTargetPlatform+0x70>)
 8000594:	f00f fd9e 	bl	80100d4 <siprintf>
 8000598:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800059c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fc0e 	bl	8002dc8 <CDC_Fill_Buffer>
          "\r\n",
          STLBLE_PACKAGENAME,
          STLBLE_VERSION_MAJOR,STLBLE_VERSION_MINOR,STLBLE_VERSION_PATCH);

  /* Reset all the Target's Features */
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	2100      	movs	r1, #0
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <InitTargetPlatform+0x68>)
 80005b2:	f00f fccd 	bl	800ff50 <memset>
  /* Discovery and Intialize all the Target's Features */
  Sensor_IO_SPI_CS_Init_All();
 80005b6:	f004 fb07 	bl	8004bc8 <Sensor_IO_SPI_CS_Init_All>
  Init_MEM1_Sensors();
 80005ba:	f000 f80f 	bl	80005dc <Init_MEM1_Sensors>
  
  TargetBoardFeatures.LedStatus = 0; /*Off by default */
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <InitTargetPlatform+0x68>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80005c6:	bf00      	nop
 80005c8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200005f0 	.word	0x200005f0
 80005d4:	080107b8 	.word	0x080107b8
 80005d8:	080107c0 	.word	0x080107c0

080005dc <Init_MEM1_Sensors>:
/** @brief Initialize all the MEMS1 sensors
 * @param None
 * @retval None
 */
static void Init_MEM1_Sensors(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c8      	sub	sp, #288	; 0x120
 80005e0:	af00      	add	r7, sp, #0
  /* Humidity Temperature1 */
  if(BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY|ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80005e2:	2105      	movs	r1, #5
 80005e4:	2000      	movs	r0, #0
 80005e6:	f004 fe77 	bl	80052d8 <BSP_ENV_SENSOR_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d126      	bne.n	800063e <Init_MEM1_Sensors+0x62>
  {
    STLBLE_PRINTF("OK Humidity Sensor\n\r");
 80005f0:	463b      	mov	r3, r7
 80005f2:	495e      	ldr	r1, [pc, #376]	; (800076c <Init_MEM1_Sensors+0x190>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00f fd6d 	bl	80100d4 <siprintf>
 80005fa:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 80005fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000602:	463b      	mov	r3, r7
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fbde 	bl	8002dc8 <CDC_Fill_Buffer>
    TargetBoardFeatures.HandleHumSensor=1;
 800060c:	4b58      	ldr	r3, [pc, #352]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]

    STLBLE_PRINTF("OK Temperature Sensor1\n\r");
 8000612:	463b      	mov	r3, r7
 8000614:	4957      	ldr	r1, [pc, #348]	; (8000774 <Init_MEM1_Sensors+0x198>)
 8000616:	4618      	mov	r0, r3
 8000618:	f00f fd5c 	bl	80100d4 <siprintf>
 800061c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000620:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000624:	463b      	mov	r3, r7
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fbcd 	bl	8002dc8 <CDC_Fill_Buffer>
    TargetBoardFeatures.NumTempSensors++;
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	4a4e      	ldr	r2, [pc, #312]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000636:	6093      	str	r3, [r2, #8]
    TargetBoardFeatures.HandleTempSensors[0]=1;
 8000638:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800063a:	2201      	movs	r2, #1
 800063c:	60da      	str	r2, [r3, #12]
  }

  /* Temperature2 Pressure */
  if(BSP_ENV_SENSOR_Init(LPS22HB_0, ENV_TEMPERATURE|ENV_PRESSURE)==BSP_ERROR_NONE)
 800063e:	2103      	movs	r1, #3
 8000640:	2001      	movs	r0, #1
 8000642:	f004 fe49 	bl	80052d8 <BSP_ENV_SENSOR_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d126      	bne.n	800069a <Init_MEM1_Sensors+0xbe>
  {
     STLBLE_PRINTF("OK Temperature Sensor2\n\r");
 800064c:	463b      	mov	r3, r7
 800064e:	494a      	ldr	r1, [pc, #296]	; (8000778 <Init_MEM1_Sensors+0x19c>)
 8000650:	4618      	mov	r0, r3
 8000652:	f00f fd3f 	bl	80100d4 <siprintf>
 8000656:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800065a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800065e:	463b      	mov	r3, r7
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fbb0 	bl	8002dc8 <CDC_Fill_Buffer>
     TargetBoardFeatures.NumTempSensors++;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	3301      	adds	r3, #1
 800066e:	4a40      	ldr	r2, [pc, #256]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000670:	6093      	str	r3, [r2, #8]
     TargetBoardFeatures.HandleTempSensors[1]=1;
 8000672:	4b3f      	ldr	r3, [pc, #252]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000674:	2201      	movs	r2, #1
 8000676:	611a      	str	r2, [r3, #16]

     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 8000678:	463b      	mov	r3, r7
 800067a:	4940      	ldr	r1, [pc, #256]	; (800077c <Init_MEM1_Sensors+0x1a0>)
 800067c:	4618      	mov	r0, r3
 800067e:	f00f fd29 	bl	80100d4 <siprintf>
 8000682:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8000686:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800068a:	463b      	mov	r3, r7
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fb9a 	bl	8002dc8 <CDC_Fill_Buffer>
     TargetBoardFeatures.HandlePressSensor=1;
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000696:	2201      	movs	r2, #1
 8000698:	615a      	str	r2, [r3, #20]
  }

  if(TargetBoardFeatures.HandleHumSensor) {
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d014      	beq.n	80006cc <Init_MEM1_Sensors+0xf0>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_HUMIDITY)==BSP_ERROR_NONE)
 80006a2:	2104      	movs	r1, #4
 80006a4:	2000      	movs	r0, #0
 80006a6:	f004 fed7 	bl	8005458 <BSP_ENV_SENSOR_Enable>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10d      	bne.n	80006cc <Init_MEM1_Sensors+0xf0>
    {
      STLBLE_PRINTF("Enabled Humidity Sensor\n\r");
 80006b0:	463b      	mov	r3, r7
 80006b2:	4933      	ldr	r1, [pc, #204]	; (8000780 <Init_MEM1_Sensors+0x1a4>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00f fd0d 	bl	80100d4 <siprintf>
 80006ba:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80006be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80006c2:	463b      	mov	r3, r7
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fb7e 	bl	8002dc8 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[0]){
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <Init_MEM1_Sensors+0x194>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <Init_MEM1_Sensors+0x122>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80006d4:	2101      	movs	r1, #1
 80006d6:	2000      	movs	r0, #0
 80006d8:	f004 febe 	bl	8005458 <BSP_ENV_SENSOR_Enable>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10d      	bne.n	80006fe <Init_MEM1_Sensors+0x122>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor1\n\r");
 80006e2:	463b      	mov	r3, r7
 80006e4:	4927      	ldr	r1, [pc, #156]	; (8000784 <Init_MEM1_Sensors+0x1a8>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00f fcf4 	bl	80100d4 <siprintf>
 80006ec:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80006f0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80006f4:	463b      	mov	r3, r7
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fb65 	bl	8002dc8 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[1]){
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d014      	beq.n	8000730 <Init_MEM1_Sensors+0x154>
    if(BSP_ENV_SENSOR_Enable( LPS22HB_0, ENV_TEMPERATURE)==BSP_ERROR_NONE) 
 8000706:	2101      	movs	r1, #1
 8000708:	2001      	movs	r0, #1
 800070a:	f004 fea5 	bl	8005458 <BSP_ENV_SENSOR_Enable>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <Init_MEM1_Sensors+0x154>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor2\n\r");
 8000714:	463b      	mov	r3, r7
 8000716:	491c      	ldr	r1, [pc, #112]	; (8000788 <Init_MEM1_Sensors+0x1ac>)
 8000718:	4618      	mov	r0, r3
 800071a:	f00f fcdb 	bl	80100d4 <siprintf>
 800071e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000722:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000726:	463b      	mov	r3, r7
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fb4c 	bl	8002dc8 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandlePressSensor) {
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d014      	beq.n	8000762 <Init_MEM1_Sensors+0x186>
    if(BSP_ENV_SENSOR_Enable(LPS22HB_0, ENV_PRESSURE)==BSP_ERROR_NONE)
 8000738:	2102      	movs	r1, #2
 800073a:	2001      	movs	r0, #1
 800073c:	f004 fe8c 	bl	8005458 <BSP_ENV_SENSOR_Enable>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10d      	bne.n	8000762 <Init_MEM1_Sensors+0x186>
    {
      STLBLE_PRINTF("Enabled Pressure Sensor\n\r");
 8000746:	463b      	mov	r3, r7
 8000748:	4910      	ldr	r1, [pc, #64]	; (800078c <Init_MEM1_Sensors+0x1b0>)
 800074a:	4618      	mov	r0, r3
 800074c:	f00f fcc2 	bl	80100d4 <siprintf>
 8000750:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8000754:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000758:	463b      	mov	r3, r7
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fb33 	bl	8002dc8 <CDC_Fill_Buffer>
    }
  }
}
 8000762:	bf00      	nop
 8000764:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	080107fc 	.word	0x080107fc
 8000770:	200005f0 	.word	0x200005f0
 8000774:	08010814 	.word	0x08010814
 8000778:	08010830 	.word	0x08010830
 800077c:	0801084c 	.word	0x0801084c
 8000780:	08010864 	.word	0x08010864
 8000784:	08010880 	.word	0x08010880
 8000788:	080108a0 	.word	0x080108a0
 800078c:	080108c0 	.word	0x080108c0

08000790 <LedOnTargetPlatform>:
  * @brief  This function switches on the LED
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  BSP_LED_On( LED1 );
 8000794:	2000      	movs	r0, #0
 8000796:	f004 f9bb 	bl	8004b10 <BSP_LED_On>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <LedOffTargetPlatform>:
  * @brief  This function switches off the LED
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  BSP_LED_Off( LED1 );
 80007a2:	2000      	movs	r0, #0
 80007a4:	f004 f9e2 	bl	8004b6c <BSP_LED_Off>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80007b4:	f008 fb3c 	bl	8008e30 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a27      	ldr	r2, [pc, #156]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2104      	movs	r1, #4
 8000804:	481c      	ldr	r0, [pc, #112]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000806:	f006 f9c5 	bl	8006b94 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800080a:	2320      	movs	r3, #32
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HCI_TL_SPI_Init+0xd0>)
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <HCI_TL_SPI_Init+0xd4>)
 800081e:	f005 ff03 	bl	8006628 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000822:	2301      	movs	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <HCI_TL_SPI_Init+0xd8>)
 800083a:	f005 fef5 	bl	8006628 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800083e:	2304      	movs	r3, #4
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000856:	f005 fee7 	bl	8006628 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2104      	movs	r1, #4
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000860:	f006 f998 	bl	8006b94 <HAL_GPIO_WritePin>
    
  return BSP_SPI1_Init();
 8000864:	f004 fb2a 	bl	8004ebc <BSP_SPI1_Init>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400
 800087c:	10110000 	.word	0x10110000
 8000880:	48000800 	.word	0x48000800
 8000884:	48001c00 	.word	0x48001c00

08000888 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800088c:	2120      	movs	r1, #32
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <HCI_TL_SPI_DeInit+0x24>)
 8000890:	f006 f874 	bl	800697c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HCI_TL_SPI_DeInit+0x28>)
 8000898:	f006 f870 	bl	800697c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HCI_TL_SPI_DeInit+0x2c>)
 80008a0:	f006 f86c 	bl	800697c <HAL_GPIO_DeInit>
  return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	48000800 	.word	0x48000800
 80008b0:	48000400 	.word	0x48000400
 80008b4:	48001c00 	.word	0x48001c00

080008b8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <HCI_TL_SPI_Reset+0x2c>)
 80008c2:	f006 f967 	bl	8006b94 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80008c6:	2005      	movs	r0, #5
 80008c8:	f000 ff48 	bl	800175c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <HCI_TL_SPI_Reset+0x2c>)
 80008d2:	f006 f95f 	bl	8006b94 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 ff40 	bl	800175c <HAL_Delay>
  return 0;
 80008dc:	2300      	movs	r3, #0
}  
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	48001c00 	.word	0x48001c00

080008e8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80008f8:	23ff      	movs	r3, #255	; 0xff
 80008fa:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80008fc:	4a25      	ldr	r2, [pc, #148]	; (8000994 <HCI_TL_SPI_Receive+0xac>)
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000906:	6018      	str	r0, [r3, #0]
 8000908:	3304      	adds	r3, #4
 800090a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	4821      	ldr	r0, [pc, #132]	; (8000998 <HCI_TL_SPI_Receive+0xb0>)
 8000912:	f006 f93f 	bl	8006b94 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000916:	f107 010c 	add.w	r1, r7, #12
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2205      	movs	r2, #5
 8000920:	4618      	mov	r0, r3
 8000922:	f004 faef 	bl	8004f04 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8000926:	7b3b      	ldrb	r3, [r7, #12]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d129      	bne.n	8000980 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800092c:	7c3b      	ldrb	r3, [r7, #16]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21a      	sxth	r2, r3
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b21b      	sxth	r3, r3
 8000936:	4313      	orrs	r3, r2
 8000938:	b21b      	sxth	r3, r3
 800093a:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 800093c:	8bfb      	ldrh	r3, [r7, #30]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01e      	beq.n	8000980 <HCI_TL_SPI_Receive+0x98>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 8000942:	8bfa      	ldrh	r2, [r7, #30]
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	429a      	cmp	r2, r3
 8000948:	d901      	bls.n	800094e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 800094e:	2300      	movs	r3, #0
 8000950:	777b      	strb	r3, [r7, #29]
 8000952:	e010      	b.n	8000976 <HCI_TL_SPI_Receive+0x8e>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8000954:	f107 011b 	add.w	r1, r7, #27
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	2201      	movs	r2, #1
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fad0 	bl	8004f04 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000964:	7f7b      	ldrb	r3, [r7, #29]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	7efa      	ldrb	r2, [r7, #27]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000970:	7f7b      	ldrb	r3, [r7, #29]
 8000972:	3301      	adds	r3, #1
 8000974:	777b      	strb	r3, [r7, #29]
 8000976:	7f7b      	ldrb	r3, [r7, #29]
 8000978:	b29b      	uxth	r3, r3
 800097a:	8bfa      	ldrh	r2, [r7, #30]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8e9      	bhi.n	8000954 <HCI_TL_SPI_Receive+0x6c>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2104      	movs	r1, #4
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <HCI_TL_SPI_Receive+0xb0>)
 8000986:	f006 f905 	bl	8006b94 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 800098a:	7f7b      	ldrb	r3, [r7, #29]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	080108dc 	.word	0x080108dc
 8000998:	48000400 	.word	0x48000400

0800099c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80009a8:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <HCI_TL_SPI_Send+0x9c>)
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b2:	6018      	str	r0, [r3, #0]
 80009b4:	3304      	adds	r3, #4
 80009b6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f005 fa2c 	bl	8005e14 <HAL_GetTick>
 80009bc:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2104      	movs	r1, #4
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <HCI_TL_SPI_Send+0xa0>)
 80009c8:	f006 f8e4 	bl	8006b94 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80009cc:	f107 0108 	add.w	r1, r7, #8
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2205      	movs	r2, #5
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 fa94 	bl	8004f04 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d10f      	bne.n	8000a02 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80009e2:	7a7b      	ldrb	r3, [r7, #9]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	887a      	ldrh	r2, [r7, #2]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d806      	bhi.n	80009fa <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4913      	ldr	r1, [pc, #76]	; (8000a40 <HCI_TL_SPI_Send+0xa4>)
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f004 fa86 	bl	8004f04 <BSP_SPI1_SendRecv>
 80009f8:	e006      	b.n	8000a08 <HCI_TL_SPI_Send+0x6c>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80009fa:	f06f 0301 	mvn.w	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e002      	b.n	8000a08 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a06:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HCI_TL_SPI_Send+0xa0>)
 8000a0e:	f006 f8c1 	bl	8006b94 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000a12:	f005 f9ff 	bl	8005e14 <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d903      	bls.n	8000a28 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000a20:	f06f 0302 	mvn.w	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
      break;
 8000a26:	e002      	b.n	8000a2e <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dbc7      	blt.n	80009be <HCI_TL_SPI_Send+0x22>
  
  return result;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	080108e4 	.word	0x080108e4
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	20000120 	.word	0x20000120

08000a44 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <IsDataAvailable+0x1c>)
 8000a4c:	f006 f88a 	bl	8006b64 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	bf0c      	ite	eq
 8000a56:	2301      	moveq	r3, #1
 8000a58:	2300      	movne	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
} 
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	48000800 	.word	0x48000800

08000a64 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <hci_tl_lowlevel_init+0x50>)
 8000a6c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <hci_tl_lowlevel_init+0x54>)
 8000a70:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <hci_tl_lowlevel_init+0x58>)
 8000a74:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <hci_tl_lowlevel_init+0x5c>)
 8000a78:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <hci_tl_lowlevel_init+0x60>)
 8000a7c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <hci_tl_lowlevel_init+0x64>)
 8000a80:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00e ff61 	bl	800f94c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8000a8a:	4910      	ldr	r1, [pc, #64]	; (8000acc <hci_tl_lowlevel_init+0x68>)
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <hci_tl_lowlevel_init+0x6c>)
 8000a8e:	f005 fd87 	bl	80065a0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <hci_tl_lowlevel_init+0x70>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <hci_tl_lowlevel_init+0x6c>)
 8000a98:	f005 fd68 	bl	800656c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f005 facc 	bl	800603e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aa6:	2017      	movs	r0, #23
 8000aa8:	f005 fae5 	bl	8006076 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	080007ad 	.word	0x080007ad
 8000ab8:	08000889 	.word	0x08000889
 8000abc:	0800099d 	.word	0x0800099d
 8000ac0:	080008e9 	.word	0x080008e9
 8000ac4:	080008b9 	.word	0x080008b9
 8000ac8:	08004f45 	.word	0x08004f45
 8000acc:	16000005 	.word	0x16000005
 8000ad0:	200008f4 	.word	0x200008f4
 8000ad4:	08000ad9 	.word	0x08000ad9

08000ad8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8000adc:	e008      	b.n	8000af0 <hci_tl_lowlevel_isr+0x18>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f00f f89a 	bl	800fc18 <hci_notify_asynch_evt>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d108      	bne.n	8000afc <hci_tl_lowlevel_isr+0x24>
      return;
	}
    HCI_ProcessEvent=1;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <hci_tl_lowlevel_isr+0x28>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
  while(IsDataAvailable())
 8000af0:	f7ff ffa8 	bl	8000a44 <IsDataAvailable>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f1      	bne.n	8000ade <hci_tl_lowlevel_isr+0x6>
 8000afa:	e000      	b.n	8000afe <hci_tl_lowlevel_isr+0x26>
      return;
 8000afc:	bf00      	nop
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200008fc 	.word	0x200008fc

08000b04 <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	b0cb      	sub	sp, #300	; 0x12c
 8000b08:	af06      	add	r7, sp, #24
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Set NVIC Group Priority to 4
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000b0a:	f005 f913 	bl	8005d34 <HAL_Init>
  
  /* Configure the System clock */
  SystemClock_Config();
 8000b0e:	f000 fd97 	bl	8001640 <SystemClock_Config>
  
  InitTargetPlatform(TARGET_SENSORTILE);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fd28 	bl	8000568 <InitTargetPlatform>
  
  STLBLE_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8000b18:	f005 f988 	bl	8005e2c <HAL_GetHalVersion>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	0e1d      	lsrs	r5, r3, #24
 8000b20:	f005 f984 	bl	8005e2c <HAL_GetHalVersion>
 8000b24:	4603      	mov	r3, r0
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	b2de      	uxtb	r6, r3
 8000b2a:	f005 f97f 	bl	8005e2c <HAL_GetHalVersion>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b2dc      	uxtb	r4, r3
 8000b34:	f005 f97a 	bl	8005e2c <HAL_GetHalVersion>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	2232      	movs	r2, #50	; 0x32
 8000b40:	9204      	str	r2, [sp, #16]
 8000b42:	4a49      	ldr	r2, [pc, #292]	; (8000c68 <main+0x164>)
 8000b44:	9203      	str	r2, [sp, #12]
 8000b46:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <main+0x168>)
 8000b48:	9202      	str	r2, [sp, #8]
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	9400      	str	r4, [sp, #0]
 8000b4e:	4633      	mov	r3, r6
 8000b50:	462a      	mov	r2, r5
 8000b52:	4947      	ldr	r1, [pc, #284]	; (8000c70 <main+0x16c>)
 8000b54:	f00f fabe 	bl	80100d4 <siprintf>
 8000b58:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8000b5c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000b60:	463b      	mov	r3, r7
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 f92f 	bl	8002dc8 <CDC_Fill_Buffer>
                        HAL_GetHalVersion()      &0xFF,
                        __DATE__,__TIME__,
                        uhCCR1_Val/10);
  
#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF("Debug Connection         Enabled\r\n");
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4941      	ldr	r1, [pc, #260]	; (8000c74 <main+0x170>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f00f fab0 	bl	80100d4 <siprintf>
 8000b74:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000b78:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 f921 	bl	8002dc8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  STLBLE_PRINTF("Debug Notify Trasmission Enabled\r\n");
 8000b86:	463b      	mov	r3, r7
 8000b88:	493b      	ldr	r1, [pc, #236]	; (8000c78 <main+0x174>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f00f faa2 	bl	80100d4 <siprintf>
 8000b90:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8000b94:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 f913 	bl	8002dc8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Initialize the BlueNRG */
  Init_BlueNRG_Stack();
 8000ba2:	f000 fba3 	bl	80012ec <Init_BlueNRG_Stack>
  
  /* Initialize the BlueNRG Custom services */
  Init_BlueNRG_Custom_Services();  
 8000ba6:	f000 fcef 	bl	8001588 <Init_BlueNRG_Custom_Services>
  
  MX_GPIO_Init();
 8000baa:	f000 f8c3 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bae:	f000 f8a3 	bl	8000cf8 <MX_DMA_Init>
  MX_UART5_Init();
 8000bb2:	f000 f871 	bl	8000c98 <MX_UART5_Init>
  us100_init(&huart5, &hdma_uart5_rx);
 8000bb6:	4931      	ldr	r1, [pc, #196]	; (8000c7c <main+0x178>)
 8000bb8:	4831      	ldr	r0, [pc, #196]	; (8000c80 <main+0x17c>)
 8000bba:	f004 ffef 	bl	8005b9c <us100_init>

  /* initialize timers */
  InitTimers();
 8000bbe:	f000 fb53 	bl	8001268 <InitTimers>
  
  StartTime = HAL_GetTick();
 8000bc2:	f005 f927 	bl	8005e14 <HAL_GetTick>
 8000bc6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  /* Infinite loop */
  while (1)
  {
    /* Led Blinking when there is not a client connected */
    if(!connected) 
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <main+0x180>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d12a      	bne.n	8000c28 <main+0x124>
    {
      if(!TargetBoardFeatures.LedStatus) 
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <main+0x184>)
 8000bd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d113      	bne.n	8000c04 <main+0x100>
      {
        if(HAL_GetTick()-StartTime > 1000)
 8000bdc:	f005 f91a 	bl	8005e14 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bec:	d91c      	bls.n	8000c28 <main+0x124>
        {
          LedOnTargetPlatform();
 8000bee:	f7ff fdcf 	bl	8000790 <LedOnTargetPlatform>
          TargetBoardFeatures.LedStatus =1;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <main+0x184>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000bfa:	f005 f90b 	bl	8005e14 <HAL_GetTick>
 8000bfe:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000c02:	e011      	b.n	8000c28 <main+0x124>
        }
      } 
      else 
      {
        if(HAL_GetTick()-StartTime > 50)
 8000c04:	f005 f906 	bl	8005e14 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	2b32      	cmp	r3, #50	; 0x32
 8000c12:	d909      	bls.n	8000c28 <main+0x124>
        {
          LedOffTargetPlatform();
 8000c14:	f7ff fdc3 	bl	800079e <LedOffTargetPlatform>
          TargetBoardFeatures.LedStatus =0;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <main+0x184>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000c20:	f005 f8f8 	bl	8005e14 <HAL_GetTick>
 8000c24:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        }
      }
    }
    
    /* handle BLE event */
    if(HCI_ProcessEvent) 
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <main+0x188>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <main+0x136>
    {
      HCI_ProcessEvent=0;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <main+0x188>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
      hci_user_evt_proc();
 8000c36:	f00e ffc3 	bl	800fbc0 <hci_user_evt_proc>
    }
    
    /* Update the BLE advertise data and make the Board connectable */
    if(set_connectable)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <main+0x18c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <main+0x148>
    {
      setConnectable();
 8000c42:	f001 fa63 	bl	800210c <setConnectable>
      set_connectable = FALSE;
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <main+0x18c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
    }

    us100_data_available();
 8000c4c:	f004 ffe4 	bl	8005c18 <us100_data_available>
    
    /* Environmental Data */
    if(SendEnv) 
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <main+0x190>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <main+0x15e>
    {
      SendEnv=0;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <main+0x190>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
      SendEnvironmentalData();
 8000c5e:	f000 f8bf 	bl	8000de0 <SendEnvironmentalData>
    }

    /* Wait for Interrupt */
    __WFI();
 8000c62:	bf30      	wfi
    if(!connected) 
 8000c64:	e7b1      	b.n	8000bca <main+0xc6>
 8000c66:	bf00      	nop
 8000c68:	08010954 	.word	0x08010954
 8000c6c:	08010960 	.word	0x08010960
 8000c70:	080108ec 	.word	0x080108ec
 8000c74:	0801096c 	.word	0x0801096c
 8000c78:	08010990 	.word	0x08010990
 8000c7c:	20000ad8 	.word	0x20000ad8
 8000c80:	20000954 	.word	0x20000954
 8000c84:	20000228 	.word	0x20000228
 8000c88:	200005f0 	.word	0x200005f0
 8000c8c:	200008fc 	.word	0x200008fc
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000224 	.word	0x20000224

08000c98 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <MX_UART5_Init+0x5c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ca8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_UART5_Init+0x58>)
 8000cdc:	f00b f981 	bl	800bfe2 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000ce6:	f000 fd51 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000954 	.word	0x20000954
 8000cf4:	40005000 	.word	0x40005000

08000cf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_DMA_Init+0x38>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <MX_DMA_Init+0x38>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6493      	str	r3, [r2, #72]	; 0x48
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_DMA_Init+0x38>)
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2039      	movs	r0, #57	; 0x39
 8000d1c:	f005 f98f 	bl	800603e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000d20:	2039      	movs	r0, #57	; 0x39
 8000d22:	f005 f9a8 	bl	8006076 <HAL_NVIC_EnableIRQ>

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_GPIO_Init+0x44>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <MX_GPIO_Init+0x44>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_GPIO_Init+0x44>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_GPIO_Init+0x44>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <MX_GPIO_Init+0x44>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_GPIO_Init+0x44>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_TIM_OC_DelayElapsedCallback>:
* @brief  Output Compare callback in non blocking mode 
* @param  htim : TIM OC handle
* @retval None
*/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t uhCapture=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  
  /* TIM1_CH1 toggling with frequency = 20Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7f1b      	ldrb	r3, [r3, #28]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d10d      	bne.n	8000dac <HAL_TIM_OC_DelayElapsedCallback+0x30>
  {
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d90:	2100      	movs	r1, #0
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f00a fd10 	bl	800b7b8 <HAL_TIM_ReadCapturedValue>
 8000d98:	60f8      	str	r0, [r7, #12]
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
    SendEnv=1;
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
  }
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000908 	.word	0x20000908
 8000db8:	20000224 	.word	0x20000224

08000dbc <HAL_TIM_PeriodElapsedCallback>:
* @brief  Period elapsed callback in non blocking mode for Environmental timer
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim == (&TimHandle)) 
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d102      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    CDC_TIM_PeriodElapsedCallback(htim);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f002 f825 	bl	8002e1c <CDC_TIM_PeriodElapsedCallback>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20002328 	.word	0x20002328

08000de0 <SendEnvironmentalData>:
* @brief  Send Environmetal Data (Temperature/Pressure/Humidity) to BLE
* @param  None
* @retval None
*/
static void SendEnvironmentalData(void)
{  
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ce      	sub	sp, #312	; 0x138
 8000de4:	af00      	add	r7, sp, #0
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000de6:	4ba7      	ldr	r3, [pc, #668]	; (8001084 <SendEnvironmentalData+0x2a4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00e      	beq.n	8000e14 <SendEnvironmentalData+0x34>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"Sending: ");
 8000df6:	49a4      	ldr	r1, [pc, #656]	; (8001088 <SendEnvironmentalData+0x2a8>)
 8000df8:	48a4      	ldr	r0, [pc, #656]	; (800108c <SendEnvironmentalData+0x2ac>)
 8000dfa:	f00f f96b 	bl	80100d4 <siprintf>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4aa3      	ldr	r2, [pc, #652]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8000e02:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8000e04:	4ba2      	ldr	r3, [pc, #648]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	489f      	ldr	r0, [pc, #636]	; (800108c <SendEnvironmentalData+0x2ac>)
 8000e0e:	f000 fd7f 	bl	8001910 <Term_Update>
 8000e12:	e00d      	b.n	8000e30 <SendEnvironmentalData+0x50>
  } 
  else 
  {
    STLBLE_PRINTF("Sending: ");
 8000e14:	463b      	mov	r3, r7
 8000e16:	499c      	ldr	r1, [pc, #624]	; (8001088 <SendEnvironmentalData+0x2a8>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00f f95b 	bl	80100d4 <siprintf>
 8000e1e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8000e22:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000e26:	463b      	mov	r3, r7
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 ffcc 	bl	8002dc8 <CDC_Fill_Buffer>
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Pressure,Humidity, and Temperatures*/
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV)) 
 8000e30:	4b94      	ldr	r3, [pc, #592]	; (8001084 <SendEnvironmentalData+0x2a4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 81d9 	beq.w	80011f2 <SendEnvironmentalData+0x412>
  {
    float SensorValue;
    int32_t PressToSend=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t HumToSend=0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    int32_t decPart, intPart;
    uint16_t distance = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    
    if (US100_ENABLE) {
    	distance = us100_get_distance();
 8000e5e:	f004 ff23 	bl	8005ca8 <us100_get_distance>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    	Temp1ToSend = distance;
 8000e68:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000e6c:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    }

    if(TargetBoardFeatures.HandlePressSensor) 
 8000e70:	4b88      	ldr	r3, [pc, #544]	; (8001094 <SendEnvironmentalData+0x2b4>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d055      	beq.n	8000f24 <SendEnvironmentalData+0x144>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8000e78:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2102      	movs	r1, #2
 8000e80:	2001      	movs	r0, #1
 8000e82:	f004 fb2b 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8000e86:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8e:	ee17 3a90 	vmov	r3, s15
 8000e92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e96:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8000e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eaa:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001098 <SendEnvironmentalData+0x2b8>
 8000eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb6:	ee17 3a90 	vmov	r3, s15
 8000eba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      PressToSend=intPart*100+decPart;
 8000ebe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ec2:	2264      	movs	r2, #100	; 0x64
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000ecc:	4413      	add	r3, r2
 8000ece:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000ed2:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <SendEnvironmentalData+0x2a4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d010      	beq.n	8000f04 <SendEnvironmentalData+0x124>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Press=%ld ",PressToSend);
 8000ee2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000ee6:	496d      	ldr	r1, [pc, #436]	; (800109c <SendEnvironmentalData+0x2bc>)
 8000ee8:	4868      	ldr	r0, [pc, #416]	; (800108c <SendEnvironmentalData+0x2ac>)
 8000eea:	f00f f8f3 	bl	80100d4 <siprintf>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a67      	ldr	r2, [pc, #412]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8000ef2:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000ef4:	4b66      	ldr	r3, [pc, #408]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	4863      	ldr	r0, [pc, #396]	; (800108c <SendEnvironmentalData+0x2ac>)
 8000efe:	f000 fd07 	bl	8001910 <Term_Update>
 8000f02:	e00f      	b.n	8000f24 <SendEnvironmentalData+0x144>
      } 
      else 
      {
        STLBLE_PRINTF("Press=%ld ",PressToSend);
 8000f04:	463b      	mov	r3, r7
 8000f06:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000f0a:	4964      	ldr	r1, [pc, #400]	; (800109c <SendEnvironmentalData+0x2bc>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00f f8e1 	bl	80100d4 <siprintf>
 8000f12:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000f16:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 ff52 	bl	8002dc8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 8000f24:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <SendEnvironmentalData+0x2b4>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d05a      	beq.n	8000fe2 <SendEnvironmentalData+0x202>
    {
      
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8000f2c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f30:	461a      	mov	r2, r3
 8000f32:	2104      	movs	r1, #4
 8000f34:	2000      	movs	r0, #0
 8000f36:	f004 fad1 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000f3a:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f42:	ee17 3a90 	vmov	r3, s15
 8000f46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000f4a:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8000f4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6a:	ee17 3a90 	vmov	r3, s15
 8000f6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      HumToSend = intPart*10+decPart;
 8000f72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <SendEnvironmentalData+0x2a4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d011      	beq.n	8000fc2 <SendEnvironmentalData+0x1e2>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Hum=%d ",HumToSend);
 8000f9e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	493e      	ldr	r1, [pc, #248]	; (80010a0 <SendEnvironmentalData+0x2c0>)
 8000fa6:	4839      	ldr	r0, [pc, #228]	; (800108c <SendEnvironmentalData+0x2ac>)
 8000fa8:	f00f f894 	bl	80100d4 <siprintf>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a38      	ldr	r2, [pc, #224]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8000fb0:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4834      	ldr	r0, [pc, #208]	; (800108c <SendEnvironmentalData+0x2ac>)
 8000fbc:	f000 fca8 	bl	8001910 <Term_Update>
 8000fc0:	e00f      	b.n	8000fe2 <SendEnvironmentalData+0x202>
      } 
      else 
      {
        STLBLE_PRINTF("Hum=%d ",HumToSend);
 8000fc2:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <SendEnvironmentalData+0x2c0>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00f f882 	bl	80100d4 <siprintf>
 8000fd0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000fd4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fef3 	bl	8002dc8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <SendEnvironmentalData+0x2b4>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f040 80cb 	bne.w	8001182 <SendEnvironmentalData+0x3a2>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000fec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f004 fa71 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000ffa:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001002:	ee17 3a90 	vmov	r3, s15
 8001006:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800100a:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 800100e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102a:	ee17 3a90 	vmov	r3, s15
 800102e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Temp1ToSend = intPart*10+decPart;
 8001032:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	b29a      	uxth	r2, r3
 8001042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001046:	b29b      	uxth	r3, r3
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <SendEnvironmentalData+0x2a4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d023      	beq.n	80010a8 <SendEnvironmentalData+0x2c8>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp=%d ",Temp1ToSend);
 8001060:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8001064:	461a      	mov	r2, r3
 8001066:	490f      	ldr	r1, [pc, #60]	; (80010a4 <SendEnvironmentalData+0x2c4>)
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <SendEnvironmentalData+0x2ac>)
 800106a:	f00f f833 	bl	80100d4 <siprintf>
 800106e:	4603      	mov	r3, r0
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8001072:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SendEnvironmentalData+0x2b0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <SendEnvironmentalData+0x2ac>)
 800107e:	f000 fc47 	bl	8001910 <Term_Update>
 8001082:	e021      	b.n	80010c8 <SendEnvironmentalData+0x2e8>
 8001084:	20000220 	.word	0x20000220
 8001088:	080109b4 	.word	0x080109b4
 800108c:	200009d8 	.word	0x200009d8
 8001090:	20000b20 	.word	0x20000b20
 8001094:	200005f0 	.word	0x200005f0
 8001098:	42c80000 	.word	0x42c80000
 800109c:	080109c0 	.word	0x080109c0
 80010a0:	080109cc 	.word	0x080109cc
 80010a4:	080109d4 	.word	0x080109d4
      } 
      else 
      {
        STLBLE_PRINTF("Temp=%d ",Temp1ToSend);
 80010a8:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 80010ac:	463b      	mov	r3, r7
 80010ae:	4966      	ldr	r1, [pc, #408]	; (8001248 <SendEnvironmentalData+0x468>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00f f80f 	bl	80100d4 <siprintf>
 80010b6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80010ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80010be:	463b      	mov	r3, r7
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fe80 	bl	8002dc8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 80010c8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010cc:	461a      	mov	r2, r3
 80010ce:	2101      	movs	r1, #1
 80010d0:	2001      	movs	r0, #1
 80010d2:	f004 fa03 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80010d6:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 80010da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010de:	ee17 3a90 	vmov	r3, s15
 80010e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010e6:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80010ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001106:	ee17 3a90 	vmov	r3, s15
 800110a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Temp2ToSend = intPart*10+decPart;
 800110e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001112:	b29b      	uxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4413      	add	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001122:	b29b      	uxth	r3, r3
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 800112c:	4b47      	ldr	r3, [pc, #284]	; (800124c <SendEnvironmentalData+0x46c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d011      	beq.n	8001160 <SendEnvironmentalData+0x380>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp2=%d ",Temp2ToSend);
 800113c:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8001140:	461a      	mov	r2, r3
 8001142:	4943      	ldr	r1, [pc, #268]	; (8001250 <SendEnvironmentalData+0x470>)
 8001144:	4843      	ldr	r0, [pc, #268]	; (8001254 <SendEnvironmentalData+0x474>)
 8001146:	f00e ffc5 	bl	80100d4 <siprintf>
 800114a:	4603      	mov	r3, r0
 800114c:	4a42      	ldr	r2, [pc, #264]	; (8001258 <SendEnvironmentalData+0x478>)
 800114e:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <SendEnvironmentalData+0x478>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	483e      	ldr	r0, [pc, #248]	; (8001254 <SendEnvironmentalData+0x474>)
 800115a:	f000 fbd9 	bl	8001910 <Term_Update>
 800115e:	e03e      	b.n	80011de <SendEnvironmentalData+0x3fe>
      } 
      else 
      {
        STLBLE_PRINTF("Temp2=%d ",Temp2ToSend);
 8001160:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 8001164:	463b      	mov	r3, r7
 8001166:	493a      	ldr	r1, [pc, #232]	; (8001250 <SendEnvironmentalData+0x470>)
 8001168:	4618      	mov	r0, r3
 800116a:	f00e ffb3 	bl	80100d4 <siprintf>
 800116e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8001172:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001176:	463b      	mov	r3, r7
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fe24 	bl	8002dc8 <CDC_Fill_Buffer>
 8001180:	e02d      	b.n	80011de <SendEnvironmentalData+0x3fe>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    } 
    else if(TargetBoardFeatures.NumTempSensors==1)
 8001182:	4b36      	ldr	r3, [pc, #216]	; (800125c <SendEnvironmentalData+0x47c>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d129      	bne.n	80011de <SendEnvironmentalData+0x3fe>
//        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
//      }
//      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
//      Temp1ToSend = intPart*10+decPart;
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <SendEnvironmentalData+0x46c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d011      	beq.n	80011be <SendEnvironmentalData+0x3de>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp1=%d ",Temp1ToSend);
 800119a:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 800119e:	461a      	mov	r2, r3
 80011a0:	492f      	ldr	r1, [pc, #188]	; (8001260 <SendEnvironmentalData+0x480>)
 80011a2:	482c      	ldr	r0, [pc, #176]	; (8001254 <SendEnvironmentalData+0x474>)
 80011a4:	f00e ff96 	bl	80100d4 <siprintf>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <SendEnvironmentalData+0x478>)
 80011ac:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <SendEnvironmentalData+0x478>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	4827      	ldr	r0, [pc, #156]	; (8001254 <SendEnvironmentalData+0x474>)
 80011b8:	f000 fbaa 	bl	8001910 <Term_Update>
 80011bc:	e00f      	b.n	80011de <SendEnvironmentalData+0x3fe>
      }
      else
      {
        STLBLE_PRINTF("Temp1=%d ",Temp1ToSend);
 80011be:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 80011c2:	463b      	mov	r3, r7
 80011c4:	4926      	ldr	r1, [pc, #152]	; (8001260 <SendEnvironmentalData+0x480>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00e ff84 	bl	80100d4 <siprintf>
 80011cc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80011d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80011d4:	463b      	mov	r3, r7
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fdf5 	bl	8002dc8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
    }
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 80011de:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 80011e2:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 80011e6:	f8b7 1132 	ldrh.w	r1, [r7, #306]	; 0x132
 80011ea:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80011ee:	f000 fdf9 	bl	8001de4 <Environmental_Update>
  }
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <SendEnvironmentalData+0x46c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00e      	beq.n	8001220 <SendEnvironmentalData+0x440>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"\r\n");
 8001202:	4918      	ldr	r1, [pc, #96]	; (8001264 <SendEnvironmentalData+0x484>)
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <SendEnvironmentalData+0x474>)
 8001206:	f00e ff65 	bl	80100d4 <siprintf>
 800120a:	4603      	mov	r3, r0
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <SendEnvironmentalData+0x478>)
 800120e:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <SendEnvironmentalData+0x478>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	480e      	ldr	r0, [pc, #56]	; (8001254 <SendEnvironmentalData+0x474>)
 800121a:	f000 fb79 	bl	8001910 <Term_Update>
  else 
  {
    STLBLE_PRINTF("\r\n");
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
}
 800121e:	e00d      	b.n	800123c <SendEnvironmentalData+0x45c>
    STLBLE_PRINTF("\r\n");
 8001220:	463b      	mov	r3, r7
 8001222:	4910      	ldr	r1, [pc, #64]	; (8001264 <SendEnvironmentalData+0x484>)
 8001224:	4618      	mov	r0, r3
 8001226:	f00e ff55 	bl	80100d4 <siprintf>
 800122a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 800122e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001232:	463b      	mov	r3, r7
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fdc6 	bl	8002dc8 <CDC_Fill_Buffer>
}
 800123c:	bf00      	nop
 800123e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	080109d4 	.word	0x080109d4
 800124c:	20000220 	.word	0x20000220
 8001250:	080109e0 	.word	0x080109e0
 8001254:	200009d8 	.word	0x200009d8
 8001258:	20000b20 	.word	0x20000b20
 800125c:	200005f0 	.word	0x200005f0
 8001260:	080109ec 	.word	0x080109ec
 8001264:	080109f8 	.word	0x080109f8

08001268 <InitTimers>:
*  - 1 for sending the Environmental info
* @param  None
* @retval None
*/
static void InitTimers(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  
  /* Timer Output Compare Configuration Structure declaration */
  TIM_OC_InitTypeDef sConfig;
  
  /* Compute the prescaler value to have TIM3 counter clock equal to 10 KHz */
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <InitTimers+0x74>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <InitTimers+0x78>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0b5b      	lsrs	r3, r3, #13
 800127a:	3b01      	subs	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
  
  /* Set TIM1 instance (Motion)*/
  /* Set TIM1 instance */
  TimCCHandle.Instance = TIM1;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <InitTimers+0x7c>)
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <InitTimers+0x80>)
 8001282:	601a      	str	r2, [r3, #0]
  TimCCHandle.Init.Period        = 65535;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <InitTimers+0x7c>)
 8001286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128a:	60da      	str	r2, [r3, #12]
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 800128c:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <InitTimers+0x7c>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	6053      	str	r3, [r2, #4]
  TimCCHandle.Init.ClockDivision = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <InitTimers+0x7c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <InitTimers+0x7c>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <InitTimers+0x7c>)
 80012a0:	f009 fe74 	bl	800af8c <HAL_TIM_OC_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <InitTimers+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80012aa:	f000 fa6f 	bl	800178c <Error_Handler>
  }
  
  /* Configure the Output Compare channels */
  /* Common configuration for all channels */
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 80012ae:	2330      	movs	r3, #48	; 0x30
 80012b0:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 80012b2:	2302      	movs	r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
  
  /* Output Compare Toggle Mode configuration: Channel1 */
  sConfig.Pulse = uhCCR1_Val;
 80012b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ba:	607b      	str	r3, [r7, #4]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <InitTimers+0x7c>)
 80012c4:	f00a fa02 	bl	800b6cc <HAL_TIM_OC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <InitTimers+0x6a>
  {
    /* Configuration Error */
    Error_Handler();
 80012ce:	f000 fa5d 	bl	800178c <Error_Handler>
  }  
  
}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000004 	.word	0x20000004
 80012e0:	d1b71759 	.word	0xd1b71759
 80012e4:	20000908 	.word	0x20000908
 80012e8:	40012c00 	.word	0x40012c00

080012ec <Init_BlueNRG_Stack>:
/** @brief Initialize the BlueNRG Stack
* @param None
* @retval None
*/
static void Init_BlueNRG_Stack(void)
{
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	b0dd      	sub	sp, #372	; 0x174
 80012f0:	af0a      	add	r7, sp, #40	; 0x28
  const char BoardName[8] = {NAME_STLBLE,0};
 80012f2:	4a99      	ldr	r2, [pc, #612]	; (8001558 <Init_BlueNRG_Stack+0x26c>)
 80012f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fc:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t  hwVersion;
  uint16_t fwVersion;
  
#ifdef STATIC_BLE_MAC
  {
    uint8_t tmp_bdaddr[6]= {STATIC_BLE_MAC};
 8001300:	4a96      	ldr	r2, [pc, #600]	; (800155c <Init_BlueNRG_Stack+0x270>)
 8001302:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130a:	6018      	str	r0, [r3, #0]
 800130c:	3304      	adds	r3, #4
 800130e:	8019      	strh	r1, [r3, #0]
    int32_t i;
    for(i=0;i<6;i++)
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001316:	e010      	b.n	800133a <Init_BlueNRG_Stack+0x4e>
      bdaddr[i] = tmp_bdaddr[i];
 8001318:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800131c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001320:	4413      	add	r3, r2
 8001322:	7819      	ldrb	r1, [r3, #0]
 8001324:	4a8e      	ldr	r2, [pc, #568]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 8001326:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800132a:	4413      	add	r3, r2
 800132c:	460a      	mov	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
    for(i=0;i<6;i++)
 8001330:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001334:	3301      	adds	r3, #1
 8001336:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800133a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800133e:	2b05      	cmp	r3, #5
 8001340:	ddea      	ble.n	8001318 <Init_BlueNRG_Stack+0x2c>
  }
#endif /* STATIC_BLE_MAC */

  /* Initialize the BlueNRG HCI */
  hci_init(HCI_Event_CB, NULL);
 8001342:	2100      	movs	r1, #0
 8001344:	4887      	ldr	r0, [pc, #540]	; (8001564 <Init_BlueNRG_Stack+0x278>)
 8001346:	f00e fabf 	bl	800f8c8 <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 800134a:	f507 728b 	add.w	r2, r7, #278	; 0x116
 800134e:	f207 1319 	addw	r3, r7, #281	; 0x119
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f00e f92b 	bl	800f5b0 <getBlueNRGVersion>
  * Reset BlueNRG again otherwise we won't
  * be able to change its MAC address.
  * aci_hal_write_config_data() must be the first
  * command after reset otherwise it will fail.
  */
  hci_reset();
 800135a:	f00e f96d 	bl	800f638 <hci_reset>
  
  HAL_Delay(100);
 800135e:	2064      	movs	r0, #100	; 0x64
 8001360:	f000 f9fc 	bl	800175c <HAL_Delay>
    bdaddr[4] = (((STLBLE_VERSION_MAJOR-48)*10) + (STLBLE_VERSION_MINOR-48)+100)&0xFF;
    bdaddr[5] = 0xC0; /* for a Legal BLE Random MAC */
  }
#else /* STATIC_BLE_MAC */
  
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001364:	4a7e      	ldr	r2, [pc, #504]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 8001366:	2106      	movs	r1, #6
 8001368:	2000      	movs	r0, #0
 800136a:	f00e f889 	bl	800f480 <aci_hal_write_config_data>
 800136e:	4603      	mov	r3, r0
 8001370:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if(ret)
 8001374:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001378:	2b00      	cmp	r3, #0
 800137a:	d010      	beq.n	800139e <Init_BlueNRG_Stack+0xb2>
  {
    STLBLE_PRINTF("\r\nSetting Pubblic BD_ADDR failed\r\n");
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4979      	ldr	r1, [pc, #484]	; (8001568 <Init_BlueNRG_Stack+0x27c>)
 8001382:	4618      	mov	r0, r3
 8001384:	f00e fea6 	bl	80100d4 <siprintf>
 8001388:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 800138c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fd16 	bl	8002dc8 <CDC_Fill_Buffer>
    goto fail;
 800139c:	e0d7      	b.n	800154e <Init_BlueNRG_Stack+0x262>
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_init();    
 800139e:	f00d fe2f 	bl	800f000 <aci_gatt_init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  if(ret)
 80013a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d010      	beq.n	80013d2 <Init_BlueNRG_Stack+0xe6>
  {
    STLBLE_PRINTF("\r\nGATT_Init failed\r\n");
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	496d      	ldr	r1, [pc, #436]	; (800156c <Init_BlueNRG_Stack+0x280>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00e fe8c 	bl	80100d4 <siprintf>
 80013bc:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80013c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fcfc 	bl	8002dc8 <CDC_Fill_Buffer>
    goto fail;
 80013d0:	e0bd      	b.n	800154e <Init_BlueNRG_Stack+0x262>
  }
  

    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80013d2:	f507 728f 	add.w	r2, r7, #286	; 0x11e
 80013d6:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	2207      	movs	r2, #7
 80013e6:	2100      	movs	r1, #0
 80013e8:	2001      	movs	r0, #1
 80013ea:	f00d fc21 	bl	800ec30 <aci_gap_init_IDB05A1>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  
  if(ret != BLE_STATUS_SUCCESS)
 80013f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d010      	beq.n	800141e <Init_BlueNRG_Stack+0x132>
  {
    STLBLE_PRINTF("\r\nGAP_Init failed\r\n");
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	495b      	ldr	r1, [pc, #364]	; (8001570 <Init_BlueNRG_Stack+0x284>)
 8001402:	4618      	mov	r0, r3
 8001404:	f00e fe66 	bl	80100d4 <siprintf>
 8001408:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 800140c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fcd6 	bl	8002dc8 <CDC_Fill_Buffer>
    goto fail;
 800141c:	e097      	b.n	800154e <Init_BlueNRG_Stack+0x262>
    STLBLE_PRINTF("\r\nSetting the Static Random BD_ADDR failed\r\n");
    goto fail;
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800141e:	f8b7 011e 	ldrh.w	r0, [r7, #286]	; 0x11e
 8001422:	f8b7 111c 	ldrh.w	r1, [r7, #284]	; 0x11c
 8001426:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2307      	movs	r3, #7
 800142e:	2200      	movs	r2, #0
 8001430:	f00d ff67 	bl	800f302 <aci_gatt_update_char_value>
 8001434:	4603      	mov	r3, r0
 8001436:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                                   7/*strlen(BoardName)*/, (uint8_t *)BoardName);
  
  if(ret)
 800143a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800143e:	2b00      	cmp	r3, #0
 8001440:	d010      	beq.n	8001464 <Init_BlueNRG_Stack+0x178>
  {
    STLBLE_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	494b      	ldr	r1, [pc, #300]	; (8001574 <Init_BlueNRG_Stack+0x288>)
 8001448:	4618      	mov	r0, r3
 800144a:	f00e fe43 	bl	80100d4 <siprintf>
 800144e:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8001452:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fcb3 	bl	8002dc8 <CDC_Fill_Buffer>
    while(1);
 8001462:	e7fe      	b.n	8001462 <Init_BlueNRG_Stack+0x176>
  }
  
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001464:	2301      	movs	r3, #1
 8001466:	9303      	str	r3, [sp, #12]
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <Init_BlueNRG_Stack+0x28c>)
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2300      	movs	r3, #0
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	2310      	movs	r3, #16
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2307      	movs	r3, #7
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2001      	movs	r0, #1
 800147c:	f00d fd17 	bl	800eeae <aci_gap_set_auth_requirement>
 8001480:	4603      	mov	r3, r0
 8001482:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                                     OOB_AUTH_DATA_ABSENT,
                                     NULL, 7, 16,
                                     USE_FIXED_PIN_FOR_PAIRING, 123456,
                                     BONDING);
  if (ret != BLE_STATUS_SUCCESS) 
 8001486:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <Init_BlueNRG_Stack+0x1c4>
  {
    STLBLE_PRINTF("\r\nGAP setting Authentication failed\r\n");
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	493a      	ldr	r1, [pc, #232]	; (800157c <Init_BlueNRG_Stack+0x290>)
 8001494:	4618      	mov	r0, r3
 8001496:	f00e fe1d 	bl	80100d4 <siprintf>
 800149a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 800149e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fc8d 	bl	8002dc8 <CDC_Fill_Buffer>
    goto fail;
 80014ae:	e04e      	b.n	800154e <Init_BlueNRG_Stack+0x262>
  }
  
  STLBLE_PRINTF("SERVER: BLE Stack Initialized \r\n"
 80014b0:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80014b4:	469c      	mov	ip, r3
 80014b6:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	461c      	mov	r4, r3
 80014c0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f003 020f 	and.w	r2, r3, #15
 80014cc:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80014d0:	2b30      	cmp	r3, #48	; 0x30
 80014d2:	d905      	bls.n	80014e0 <Init_BlueNRG_Stack+0x1f4>
 80014d4:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	3360      	adds	r3, #96	; 0x60
 80014de:	e000      	b.n	80014e2 <Init_BlueNRG_Stack+0x1f6>
 80014e0:	2361      	movs	r3, #97	; 0x61
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 80014e4:	7949      	ldrb	r1, [r1, #5]
 80014e6:	460d      	mov	r5, r1
 80014e8:	491d      	ldr	r1, [pc, #116]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 80014ea:	7909      	ldrb	r1, [r1, #4]
 80014ec:	460e      	mov	r6, r1
 80014ee:	491c      	ldr	r1, [pc, #112]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 80014f0:	78c9      	ldrb	r1, [r1, #3]
 80014f2:	60f9      	str	r1, [r7, #12]
 80014f4:	491a      	ldr	r1, [pc, #104]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 80014f6:	7889      	ldrb	r1, [r1, #2]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	4919      	ldr	r1, [pc, #100]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	6079      	str	r1, [r7, #4]
 8001500:	4917      	ldr	r1, [pc, #92]	; (8001560 <Init_BlueNRG_Stack+0x274>)
 8001502:	7809      	ldrb	r1, [r1, #0]
 8001504:	f107 0010 	add.w	r0, r7, #16
 8001508:	9109      	str	r1, [sp, #36]	; 0x24
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	9108      	str	r1, [sp, #32]
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	9107      	str	r1, [sp, #28]
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	9106      	str	r1, [sp, #24]
 8001516:	9605      	str	r6, [sp, #20]
 8001518:	9504      	str	r5, [sp, #16]
 800151a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800151e:	9103      	str	r1, [sp, #12]
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9400      	str	r4, [sp, #0]
 8001526:	4663      	mov	r3, ip
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <Init_BlueNRG_Stack+0x294>)
 800152a:	4916      	ldr	r1, [pc, #88]	; (8001584 <Init_BlueNRG_Stack+0x298>)
 800152c:	f00e fdd2 	bl	80100d4 <siprintf>
 8001530:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8001534:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fc42 	bl	8002dc8 <CDC_Fill_Buffer>
                    (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a',
                    BoardName,
                    bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  
  /* Set output power level */
  aci_hal_set_tx_power_level(1,4);
 8001544:	2104      	movs	r1, #4
 8001546:	2001      	movs	r0, #1
 8001548:	f00e f801 	bl	800f54e <aci_hal_set_tx_power_level>
  
  return;
 800154c:	e000      	b.n	8001550 <Init_BlueNRG_Stack+0x264>
  
fail:
  return;
 800154e:	bf00      	nop
}
 8001550:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001554:	46bd      	mov	sp, r7
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001558:	08010b28 	.word	0x08010b28
 800155c:	08010b30 	.word	0x08010b30
 8001560:	20000900 	.word	0x20000900
 8001564:	080029b1 	.word	0x080029b1
 8001568:	080109fc 	.word	0x080109fc
 800156c:	08010a20 	.word	0x08010a20
 8001570:	08010a38 	.word	0x08010a38
 8001574:	08010a4c 	.word	0x08010a4c
 8001578:	0001e240 	.word	0x0001e240
 800157c:	08010a74 	.word	0x08010a74
 8001580:	08010a9c 	.word	0x08010a9c
 8001584:	08010aa8 	.word	0x08010aa8

08001588 <Init_BlueNRG_Custom_Services>:
/** @brief Initialize all the Custom BlueNRG services
* @param None
* @retval None
*/
static void Init_BlueNRG_Custom_Services(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0c6      	sub	sp, #280	; 0x118
 800158c:	af00      	add	r7, sp, #0
  int ret;
  
  ret = Add_HWServW2ST_Service();
 800158e:	f000 fb2b 	bl	8001be8 <Add_HWServW2ST_Service>
 8001592:	4603      	mov	r3, r0
 8001594:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 8001598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10e      	bne.n	80015be <Init_BlueNRG_Custom_Services+0x36>
  {
    STLBLE_PRINTF("HW      Service W2ST added successfully\r\n");
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4923      	ldr	r1, [pc, #140]	; (8001630 <Init_BlueNRG_Custom_Services+0xa8>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00e fd95 	bl	80100d4 <siprintf>
 80015aa:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80015ae:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fc06 	bl	8002dc8 <CDC_Fill_Buffer>
 80015bc:	e00d      	b.n	80015da <Init_BlueNRG_Custom_Services+0x52>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding HW Service W2ST\r\n");
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	491c      	ldr	r1, [pc, #112]	; (8001634 <Init_BlueNRG_Custom_Services+0xac>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00e fd86 	bl	80100d4 <siprintf>
 80015c8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80015cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fbf7 	bl	8002dc8 <CDC_Fill_Buffer>
  }
  
  ret = Add_ConfigW2ST_Service();
 80015da:	f000 f8db 	bl	8001794 <Add_ConfigW2ST_Service>
 80015de:	4603      	mov	r3, r0
 80015e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 80015e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10e      	bne.n	800160a <Init_BlueNRG_Custom_Services+0x82>
  {
    STLBLE_PRINTF("Config  Service W2ST added successfully\r\n");
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4912      	ldr	r1, [pc, #72]	; (8001638 <Init_BlueNRG_Custom_Services+0xb0>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00e fd6f 	bl	80100d4 <siprintf>
 80015f6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 80015fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fbe0 	bl	8002dc8 <CDC_Fill_Buffer>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
  }
}
 8001608:	e00d      	b.n	8001626 <Init_BlueNRG_Custom_Services+0x9e>
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <Init_BlueNRG_Custom_Services+0xb4>)
 800160e:	4618      	mov	r0, r3
 8001610:	f00e fd60 	bl	80100d4 <siprintf>
 8001614:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8001618:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fbd1 	bl	8002dc8 <CDC_Fill_Buffer>
}
 8001626:	bf00      	nop
 8001628:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	08010b38 	.word	0x08010b38
 8001634:	08010b64 	.word	0x08010b64
 8001638:	08010b8c 	.word	0x08010b8c
 800163c:	08010bb8 	.word	0x08010bb8

08001640 <SystemClock_Config>:
* @brief  System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0ba      	sub	sp, #232	; 0xe8
 8001644:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001646:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800165a:	2244      	movs	r2, #68	; 0x44
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f00e fc76 	bl	800ff50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	2288      	movs	r2, #136	; 0x88
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00e fc6f 	bl	800ff50 <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b39      	ldr	r3, [pc, #228]	; (8001758 <SystemClock_Config+0x118>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	4a38      	ldr	r2, [pc, #224]	; (8001758 <SystemClock_Config+0x118>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <SystemClock_Config+0x118>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 800168a:	f007 fbb3 	bl	8008df4 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800168e:	2304      	movs	r3, #4
 8001690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800169e:	4618      	mov	r0, r3
 80016a0:	f007 fbd6 	bl	8008e50 <HAL_RCC_OscConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d000      	beq.n	80016ac <SystemClock_Config+0x6c>
  {
    while(1);
 80016aa:	e7fe      	b.n	80016aa <SystemClock_Config+0x6a>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 80016ac:	f008 fca6 	bl	8009ffc <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 80016b0:	2310      	movs	r3, #16
 80016b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 80016c2:	23b0      	movs	r3, #176	; 0xb0
 80016c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 80016d4:	2306      	movs	r3, #6
 80016d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 80016da:	2328      	movs	r3, #40	; 0x28
 80016dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 80016e0:	2307      	movs	r3, #7
 80016e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 80016e6:	2304      	movs	r3, #4
 80016e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fbaa 	bl	8008e50 <HAL_RCC_OscConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d000      	beq.n	8001704 <SystemClock_Config+0xc4>
  {
    while(1);
 8001702:	e7fe      	b.n	8001702 <SystemClock_Config+0xc2>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8001704:	f008 fc92 	bl	800a02c <HAL_RCCEx_EnableMSIPLLMode>
  
  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800170e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001712:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f008 f985 	bl	8009a28 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800171e:	230f      	movs	r3, #15
 8001720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2303      	movs	r3, #3
 8001726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800173c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001740:	2104      	movs	r1, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f007 ff6a 	bl	800961c <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d000      	beq.n	8001750 <SystemClock_Config+0x110>
  {
    while(1);
 800174e:	e7fe      	b.n	800174e <SystemClock_Config+0x10e>
  }
}
 8001750:	bf00      	nop
 8001752:	37e8      	adds	r7, #232	; 0xe8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_Delay>:
* @note This is a user implementation using WFI state
* @param Delay: specifies the delay time length, in milliseconds.
* @retval None
*/
void HAL_Delay(__IO uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8001768:	f004 fb54 	bl	8005e14 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800176e:	e000      	b.n	8001772 <HAL_Delay+0x16>
  {
    __WFI();
 8001770:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay)
 8001772:	f004 fb4f 	bl	8005e14 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad2      	subs	r2, r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	d3f6      	bcc.n	8001770 <HAL_Delay+0x14>
  }
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <Error_Handler>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x4>
	...

08001794 <Add_ConfigW2ST_Service>:
* @brief  Add the Config service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_ConfigW2ST_Service(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af06      	add	r7, sp, #24
  tBleStatus ret;
  
  uint8_t uuid[16];
  
  COPY_CONFIG_SERVICE_UUID(uuid);
 800179a:	231b      	movs	r3, #27
 800179c:	713b      	strb	r3, [r7, #4]
 800179e:	23c5      	movs	r3, #197	; 0xc5
 80017a0:	717b      	strb	r3, [r7, #5]
 80017a2:	23d5      	movs	r3, #213	; 0xd5
 80017a4:	71bb      	strb	r3, [r7, #6]
 80017a6:	23a5      	movs	r3, #165	; 0xa5
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	2302      	movs	r3, #2
 80017ac:	723b      	strb	r3, [r7, #8]
 80017ae:	2300      	movs	r3, #0
 80017b0:	727b      	strb	r3, [r7, #9]
 80017b2:	23b4      	movs	r3, #180	; 0xb4
 80017b4:	72bb      	strb	r3, [r7, #10]
 80017b6:	239a      	movs	r3, #154	; 0x9a
 80017b8:	72fb      	strb	r3, [r7, #11]
 80017ba:	23e1      	movs	r3, #225	; 0xe1
 80017bc:	733b      	strb	r3, [r7, #12]
 80017be:	2311      	movs	r3, #17
 80017c0:	737b      	strb	r3, [r7, #13]
 80017c2:	230f      	movs	r3, #15
 80017c4:	73bb      	strb	r3, [r7, #14]
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	2300      	movs	r3, #0
 80017cc:	743b      	strb	r3, [r7, #16]
 80017ce:	2300      	movs	r3, #0
 80017d0:	747b      	strb	r3, [r7, #17]
 80017d2:	2300      	movs	r3, #0
 80017d4:	74bb      	strb	r3, [r7, #18]
 80017d6:	2300      	movs	r3, #0
 80017d8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);
 80017da:	1d39      	adds	r1, r7, #4
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <Add_ConfigW2ST_Service+0xe4>)
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2304      	movs	r3, #4
 80017e2:	2201      	movs	r2, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f00d fc2e 	bl	800f046 <aci_gatt_add_serv>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
  
  if (ret != BLE_STATUS_SUCCESS)
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d139      	bne.n	8001868 <Add_ConfigW2ST_Service+0xd4>
    goto fail;
  
  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 80017f4:	231b      	movs	r3, #27
 80017f6:	713b      	strb	r3, [r7, #4]
 80017f8:	23c5      	movs	r3, #197	; 0xc5
 80017fa:	717b      	strb	r3, [r7, #5]
 80017fc:	23d5      	movs	r3, #213	; 0xd5
 80017fe:	71bb      	strb	r3, [r7, #6]
 8001800:	23a5      	movs	r3, #165	; 0xa5
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	2302      	movs	r3, #2
 8001806:	723b      	strb	r3, [r7, #8]
 8001808:	2300      	movs	r3, #0
 800180a:	727b      	strb	r3, [r7, #9]
 800180c:	2336      	movs	r3, #54	; 0x36
 800180e:	72bb      	strb	r3, [r7, #10]
 8001810:	23ac      	movs	r3, #172	; 0xac
 8001812:	72fb      	strb	r3, [r7, #11]
 8001814:	23e1      	movs	r3, #225	; 0xe1
 8001816:	733b      	strb	r3, [r7, #12]
 8001818:	2311      	movs	r3, #17
 800181a:	737b      	strb	r3, [r7, #13]
 800181c:	230f      	movs	r3, #15
 800181e:	73bb      	strb	r3, [r7, #14]
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	2302      	movs	r3, #2
 8001826:	743b      	strb	r3, [r7, #16]
 8001828:	2300      	movs	r3, #0
 800182a:	747b      	strb	r3, [r7, #17]
 800182c:	2300      	movs	r3, #0
 800182e:	74bb      	strb	r3, [r7, #18]
 8001830:	2300      	movs	r3, #0
 8001832:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <Add_ConfigW2ST_Service+0xe4>)
 8001836:	8818      	ldrh	r0, [r3, #0]
 8001838:	1d3a      	adds	r2, r7, #4
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <Add_ConfigW2ST_Service+0xe8>)
 800183c:	9305      	str	r3, [sp, #20]
 800183e:	2301      	movs	r3, #1
 8001840:	9304      	str	r3, [sp, #16]
 8001842:	2310      	movs	r3, #16
 8001844:	9303      	str	r3, [sp, #12]
 8001846:	2305      	movs	r3, #5
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	2300      	movs	r3, #0
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	2314      	movs	r3, #20
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2314      	movs	r3, #20
 8001854:	2102      	movs	r1, #2
 8001856:	f00d fc82 	bl	800f15e <aci_gatt_add_char>
 800185a:	4603      	mov	r3, r0
 800185c:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &ConfigCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <Add_ConfigW2ST_Service+0xd8>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 8001864:	2300      	movs	r3, #0
 8001866:	e003      	b.n	8001870 <Add_ConfigW2ST_Service+0xdc>
    goto fail;
 8001868:	bf00      	nop
 800186a:	e000      	b.n	800186e <Add_ConfigW2ST_Service+0xda>
    goto fail;
 800186c:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding Configuration service.\n");
  return BLE_STATUS_ERROR;
 800186e:	2347      	movs	r3, #71	; 0x47
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000232 	.word	0x20000232
 800187c:	20000234 	.word	0x20000234

08001880 <Stderr_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Stderr_Update(uint8_t *data,uint8_t length)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af02      	add	r7, sp, #8
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages*/
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e02d      	b.n	80018ee <Stderr_Update+0x6e>
  {
    DataToSend = (length-Offset);
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	2b14      	cmp	r3, #20
 800189e:	bf28      	it	cs
 80018a0:	2314      	movcs	r3, #20
 80018a2:	73bb      	strb	r3, [r7, #14]
    
    /* keep a copy */
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	7bba      	ldrb	r2, [r7, #14]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <Stderr_Update+0x80>)
 80018b0:	f00e fb40 	bl	800ff34 <memcpy>
    LastStderrLen = DataToSend;
 80018b4:	4a13      	ldr	r2, [pc, #76]	; (8001904 <Stderr_Update+0x84>)
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <Stderr_Update+0x88>)
 80018bc:	8818      	ldrh	r0, [r3, #0]
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <Stderr_Update+0x8c>)
 80018c0:	8819      	ldrh	r1, [r3, #0]
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	7bba      	ldrb	r2, [r7, #14]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	2200      	movs	r2, #0
 80018d0:	f00d fd17 	bl	800f302 <aci_gatt_update_char_value>
 80018d4:	4603      	mov	r3, r0
 80018d6:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS)
 80018d8:	7b7b      	ldrb	r3, [r7, #13]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <Stderr_Update+0x62>
    {
      return BLE_STATUS_ERROR;
 80018de:	2347      	movs	r3, #71	; 0x47
 80018e0:	e00a      	b.n	80018f8 <Stderr_Update+0x78>
    }
    HAL_Delay(10);
 80018e2:	200a      	movs	r0, #10
 80018e4:	f7ff ff3a 	bl	800175c <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	3314      	adds	r3, #20
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3cd      	bcc.n	8001892 <Stderr_Update+0x12>
  }
  
  return BLE_STATUS_SUCCESS;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000023c 	.word	0x2000023c
 8001904:	20000250 	.word	0x20000250
 8001908:	20000236 	.word	0x20000236
 800190c:	2000023a 	.word	0x2000023a

08001910 <Term_Update>:
* @param  uint8_t *data string to write
* @param  uint8_t length of string to write
* @retval tBleStatus      Status
*/
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0c6      	sub	sp, #280	; 0x118
 8001914:	af02      	add	r7, sp, #8
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	6018      	str	r0, [r3, #0]
 800191a:	460a      	mov	r2, r1
 800191c:	1cfb      	adds	r3, r7, #3
 800191e:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001920:	2300      	movs	r3, #0
 8001922:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001926:	e04d      	b.n	80019c4 <Term_Update+0xb4>
  {
    DataToSend = (length-Offset);
 8001928:	1cfb      	adds	r3, r7, #3
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8001936:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800193a:	2b14      	cmp	r3, #20
 800193c:	bf28      	it	cs
 800193e:	2314      	movcs	r3, #20
 8001940:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    
    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 8001944:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001948:	1d3a      	adds	r2, r7, #4
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4413      	add	r3, r2
 800194e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001952:	4619      	mov	r1, r3
 8001954:	4821      	ldr	r0, [pc, #132]	; (80019dc <Term_Update+0xcc>)
 8001956:	f00e faed 	bl	800ff34 <memcpy>
    LastTermLen = DataToSend;
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <Term_Update+0xd0>)
 800195c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001960:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <Term_Update+0xd4>)
 8001964:	8818      	ldrh	r0, [r3, #0]
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <Term_Update+0xd8>)
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800196e:	1d3a      	adds	r2, r7, #4
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4413      	add	r3, r2
 8001974:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4613      	mov	r3, r2
 800197c:	2200      	movs	r2, #0
 800197e:	f00d fcc0 	bl	800f302 <aci_gatt_update_char_value>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
    if (ret != BLE_STATUS_SUCCESS) 
 8001988:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800198c:	2b00      	cmp	r3, #0
 800198e:	d011      	beq.n	80019b4 <Term_Update+0xa4>
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4915      	ldr	r1, [pc, #84]	; (80019ec <Term_Update+0xdc>)
 8001996:	4618      	mov	r0, r3
 8001998:	f00e fb9c 	bl	80100d4 <siprintf>
 800199c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80019a0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 fa0c 	bl	8002dc8 <CDC_Fill_Buffer>
      return BLE_STATUS_ERROR;
 80019b0:	2347      	movs	r3, #71	; 0x47
 80019b2:	e00e      	b.n	80019d2 <Term_Update+0xc2>
    }
    HAL_Delay(20);
 80019b4:	2014      	movs	r0, #20
 80019b6:	f7ff fed1 	bl	800175c <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 80019ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019be:	3314      	adds	r3, #20
 80019c0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019c4:	1cfb      	adds	r3, r7, #3
 80019c6:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d3ab      	bcc.n	8001928 <Term_Update+0x18>
  }
  
  return BLE_STATUS_SUCCESS;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000254 	.word	0x20000254
 80019e0:	20000268 	.word	0x20000268
 80019e4:	20000236 	.word	0x20000236
 80019e8:	20000238 	.word	0x20000238
 80019ec:	08010be4 	.word	0x08010be4

080019f0 <Stderr_Update_AfterRead>:
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Stderr_Update_AfterRead(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <Stderr_Update_AfterRead+0x34>)
 80019f8:	8818      	ldrh	r0, [r3, #0]
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <Stderr_Update_AfterRead+0x38>)
 80019fc:	8819      	ldrh	r1, [r3, #0]
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <Stderr_Update_AfterRead+0x3c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <Stderr_Update_AfterRead+0x40>)
 8001a04:	9200      	str	r2, [sp, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f00d fc7b 	bl	800f302 <aci_gatt_update_char_value>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) 
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <Stderr_Update_AfterRead+0x2a>
  {
    return BLE_STATUS_ERROR;
 8001a16:	2347      	movs	r3, #71	; 0x47
 8001a18:	e000      	b.n	8001a1c <Stderr_Update_AfterRead+0x2c>
  }
  
  return BLE_STATUS_SUCCESS;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000236 	.word	0x20000236
 8001a28:	2000023a 	.word	0x2000023a
 8001a2c:	20000250 	.word	0x20000250
 8001a30:	2000023c 	.word	0x2000023c

08001a34 <Term_Update_AfterRead>:
* @brief  Update Terminal characteristic value after a read request
* @param None
* @retval tBleStatus      Status
*/
static tBleStatus Term_Update_AfterRead(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0c4      	sub	sp, #272	; 0x110
 8001a38:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <Term_Update_AfterRead+0x84>)
 8001a3c:	8818      	ldrh	r0, [r3, #0]
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <Term_Update_AfterRead+0x88>)
 8001a40:	8819      	ldrh	r1, [r3, #0]
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <Term_Update_AfterRead+0x8c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <Term_Update_AfterRead+0x90>)
 8001a48:	9200      	str	r2, [sp, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f00d fc59 	bl	800f302 <aci_gatt_update_char_value>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  if (ret != BLE_STATUS_SUCCESS) 
 8001a56:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d026      	beq.n	8001aac <Term_Update_AfterRead+0x78>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <Term_Update_AfterRead+0x94>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0a5b      	lsrs	r3, r3, #9
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00e      	beq.n	8001a8c <Term_Update_AfterRead+0x58>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Stdout Char\r\n");
 8001a6e:	4917      	ldr	r1, [pc, #92]	; (8001acc <Term_Update_AfterRead+0x98>)
 8001a70:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <Term_Update_AfterRead+0x9c>)
 8001a72:	f00e fb2f 	bl	80100d4 <siprintf>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <Term_Update_AfterRead+0xa0>)
 8001a7a:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <Term_Update_AfterRead+0xa0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <Term_Update_AfterRead+0x9c>)
 8001a86:	f7ff fefb 	bl	8001880 <Stderr_Update>
 8001a8a:	e00d      	b.n	8001aa8 <Term_Update_AfterRead+0x74>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	490f      	ldr	r1, [pc, #60]	; (8001acc <Term_Update_AfterRead+0x98>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00e fb1f 	bl	80100d4 <siprintf>
 8001a96:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8001a9a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 f990 	bl	8002dc8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001aa8:	2347      	movs	r3, #71	; 0x47
 8001aaa:	e000      	b.n	8001aae <Term_Update_AfterRead+0x7a>
  }
  
  return BLE_STATUS_SUCCESS;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000236 	.word	0x20000236
 8001abc:	20000238 	.word	0x20000238
 8001ac0:	20000268 	.word	0x20000268
 8001ac4:	20000254 	.word	0x20000254
 8001ac8:	20000220 	.word	0x20000220
 8001acc:	08010be4 	.word	0x08010be4
 8001ad0:	200009d8 	.word	0x200009d8
 8001ad4:	20000b20 	.word	0x20000b20

08001ad8 <Config_Notify>:
 * @param  uint8_t Command Replay to this Command
 * @param  uint8_t data result to send back
 * @retval tBleStatus Status
 */
tBleStatus Config_Notify(uint32_t Feature,uint8_t Command,uint8_t data)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0c8      	sub	sp, #288	; 0x120
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	4608      	mov	r0, r1
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	1cfb      	adds	r3, r7, #3
 8001ae8:	4602      	mov	r2, r0
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	1cbb      	adds	r3, r7, #2
 8001aee:	460a      	mov	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t buff[2+4+1+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001af2:	f004 f98f 	bl	8005e14 <HAL_GetTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
 8001b00:	f004 f988 	bl	8005e14 <HAL_GetTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	0adb      	lsrs	r3, r3, #11
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  STORE_BE_32(buff+2,Feature);
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e1b      	lsrs	r3, r3, #24
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
  buff[6] = Command;
 8001b3c:	1cfb      	adds	r3, r7, #3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  buff[7] = data;
 8001b44:	1cbb      	adds	r3, r7, #2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  
  ret = aci_gatt_update_char_value (ConfigServW2STHandle, ConfigCharHandle, 0, 8,buff);
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <Config_Notify+0xf8>)
 8001b4e:	8818      	ldrh	r0, [r3, #0]
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <Config_Notify+0xfc>)
 8001b52:	8819      	ldrh	r1, [r3, #0]
 8001b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f00d fbd0 	bl	800f302 <aci_gatt_update_char_value>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  if (ret != BLE_STATUS_SUCCESS)
 8001b68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d028      	beq.n	8001bc2 <Config_Notify+0xea>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <Config_Notify+0x100>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0a5b      	lsrs	r3, r3, #9
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <Config_Notify+0xc6>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Configuration Char\r\n");
 8001b80:	4916      	ldr	r1, [pc, #88]	; (8001bdc <Config_Notify+0x104>)
 8001b82:	4817      	ldr	r0, [pc, #92]	; (8001be0 <Config_Notify+0x108>)
 8001b84:	f00e faa6 	bl	80100d4 <siprintf>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <Config_Notify+0x10c>)
 8001b8c:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <Config_Notify+0x10c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4619      	mov	r1, r3
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <Config_Notify+0x108>)
 8001b98:	f7ff fe72 	bl	8001880 <Stderr_Update>
 8001b9c:	e00f      	b.n	8001bbe <Config_Notify+0xe6>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Configuration Char\r\n");
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	490e      	ldr	r1, [pc, #56]	; (8001bdc <Config_Notify+0x104>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00e fa95 	bl	80100d4 <siprintf>
 8001baa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001bae:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 f905 	bl	8002dc8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001bbe:	2347      	movs	r3, #71	; 0x47
 8001bc0:	e000      	b.n	8001bc4 <Config_Notify+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000232 	.word	0x20000232
 8001bd4:	20000234 	.word	0x20000234
 8001bd8:	20000220 	.word	0x20000220
 8001bdc:	08010c04 	.word	0x08010c04
 8001be0:	200009d8 	.word	0x200009d8
 8001be4:	20000b20 	.word	0x20000b20

08001be8 <Add_HWServW2ST_Service>:
* @brief  Add the HW Features service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_HWServW2ST_Service(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberChars = 4;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	617b      	str	r3, [r7, #20]
  
  uint8_t uuid[16];
  
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001bf2:	231b      	movs	r3, #27
 8001bf4:	703b      	strb	r3, [r7, #0]
 8001bf6:	23c5      	movs	r3, #197	; 0xc5
 8001bf8:	707b      	strb	r3, [r7, #1]
 8001bfa:	23d5      	movs	r3, #213	; 0xd5
 8001bfc:	70bb      	strb	r3, [r7, #2]
 8001bfe:	23a5      	movs	r3, #165	; 0xa5
 8001c00:	70fb      	strb	r3, [r7, #3]
 8001c02:	2302      	movs	r3, #2
 8001c04:	713b      	strb	r3, [r7, #4]
 8001c06:	2300      	movs	r3, #0
 8001c08:	717b      	strb	r3, [r7, #5]
 8001c0a:	23b4      	movs	r3, #180	; 0xb4
 8001c0c:	71bb      	strb	r3, [r7, #6]
 8001c0e:	239a      	movs	r3, #154	; 0x9a
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	23e1      	movs	r3, #225	; 0xe1
 8001c14:	723b      	strb	r3, [r7, #8]
 8001c16:	2311      	movs	r3, #17
 8001c18:	727b      	strb	r3, [r7, #9]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	72bb      	strb	r3, [r7, #10]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	72fb      	strb	r3, [r7, #11]
 8001c22:	2300      	movs	r3, #0
 8001c24:	733b      	strb	r3, [r7, #12]
 8001c26:	2300      	movs	r3, #0
 8001c28:	737b      	strb	r3, [r7, #13]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73bb      	strb	r3, [r7, #14]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	0052      	lsls	r2, r2, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4639      	mov	r1, r7
 8001c44:	4a62      	ldr	r2, [pc, #392]	; (8001dd0 <Add_HWServW2ST_Service+0x1e8>)
 8001c46:	9200      	str	r2, [sp, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f00d f9fb 	bl	800f046 <aci_gatt_add_serv>
 8001c50:	4603      	mov	r3, r0
 8001c52:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberChars,
                          &HWServW2STHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001c54:	7cfb      	ldrb	r3, [r7, #19]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 80b0 	bne.w	8001dbc <Add_HWServW2ST_Service+0x1d4>
  {
    goto fail;
  }
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001c5c:	231b      	movs	r3, #27
 8001c5e:	703b      	strb	r3, [r7, #0]
 8001c60:	23c5      	movs	r3, #197	; 0xc5
 8001c62:	707b      	strb	r3, [r7, #1]
 8001c64:	23d5      	movs	r3, #213	; 0xd5
 8001c66:	70bb      	strb	r3, [r7, #2]
 8001c68:	23a5      	movs	r3, #165	; 0xa5
 8001c6a:	70fb      	strb	r3, [r7, #3]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	713b      	strb	r3, [r7, #4]
 8001c70:	2300      	movs	r3, #0
 8001c72:	717b      	strb	r3, [r7, #5]
 8001c74:	2336      	movs	r3, #54	; 0x36
 8001c76:	71bb      	strb	r3, [r7, #6]
 8001c78:	23ac      	movs	r3, #172	; 0xac
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	23e1      	movs	r3, #225	; 0xe1
 8001c7e:	723b      	strb	r3, [r7, #8]
 8001c80:	2311      	movs	r3, #17
 8001c82:	727b      	strb	r3, [r7, #9]
 8001c84:	2301      	movs	r3, #1
 8001c86:	72bb      	strb	r3, [r7, #10]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	72fb      	strb	r3, [r7, #11]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	733b      	strb	r3, [r7, #12]
 8001c90:	2300      	movs	r3, #0
 8001c92:	737b      	strb	r3, [r7, #13]
 8001c94:	2300      	movs	r3, #0
 8001c96:	73bb      	strb	r3, [r7, #14]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <Add_HWServW2ST_Service+0x1ec>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d10b      	bne.n	8001cbc <Add_HWServW2ST_Service+0xd4>
  {
    uuid[14] |= 0x05; /* Two Temperature values*/
 8001ca4:	7bbb      	ldrb	r3, [r7, #14]
 8001ca6:	f043 0305 	orr.w	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2*2;
 8001cae:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e00e      	b.n	8001cda <Add_HWServW2ST_Service+0xf2>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001cbc:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <Add_HWServW2ST_Service+0x1ec>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10a      	bne.n	8001cda <Add_HWServW2ST_Service+0xf2>
  {
    uuid[14] |= 0x04; /* One Temperature value*/
 8001cc4:	7bbb      	ldrb	r3, [r7, #14]
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001cce:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001cd8:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001cda:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <Add_HWServW2ST_Service+0x1ec>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <Add_HWServW2ST_Service+0x110>
  {
    uuid[14] |= 0x08; /* Humidity */
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001cf6:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <Add_HWServW2ST_Service+0x1ec>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00a      	beq.n	8001d16 <Add_HWServW2ST_Service+0x12e>
  {
    uuid[14] |= 0x10; /* Pressure value*/
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=4;
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001d14:	701a      	strb	r2, [r3, #0]
  }
  
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, EnvironmentalCharSize,
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <Add_HWServW2ST_Service+0x1e8>)
 8001d18:	8818      	ldrh	r0, [r3, #0]
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <Add_HWServW2ST_Service+0x1f0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	463a      	mov	r2, r7
 8001d20:	492e      	ldr	r1, [pc, #184]	; (8001ddc <Add_HWServW2ST_Service+0x1f4>)
 8001d22:	9105      	str	r1, [sp, #20]
 8001d24:	2100      	movs	r1, #0
 8001d26:	9104      	str	r1, [sp, #16]
 8001d28:	2110      	movs	r1, #16
 8001d2a:	9103      	str	r1, [sp, #12]
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	9102      	str	r1, [sp, #8]
 8001d30:	2100      	movs	r1, #0
 8001d32:	9101      	str	r1, [sp, #4]
 8001d34:	2112      	movs	r1, #18
 8001d36:	9100      	str	r1, [sp, #0]
 8001d38:	2102      	movs	r1, #2
 8001d3a:	f00d fa10 	bl	800f15e <aci_gatt_add_char>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13b      	bne.n	8001dc0 <Add_HWServW2ST_Service+0x1d8>
  {
    goto fail;
  }
  
  COPY_LED_W2ST_CHAR_UUID(uuid);
 8001d48:	231b      	movs	r3, #27
 8001d4a:	703b      	strb	r3, [r7, #0]
 8001d4c:	23c5      	movs	r3, #197	; 0xc5
 8001d4e:	707b      	strb	r3, [r7, #1]
 8001d50:	23d5      	movs	r3, #213	; 0xd5
 8001d52:	70bb      	strb	r3, [r7, #2]
 8001d54:	23a5      	movs	r3, #165	; 0xa5
 8001d56:	70fb      	strb	r3, [r7, #3]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	713b      	strb	r3, [r7, #4]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	717b      	strb	r3, [r7, #5]
 8001d60:	2336      	movs	r3, #54	; 0x36
 8001d62:	71bb      	strb	r3, [r7, #6]
 8001d64:	23ac      	movs	r3, #172	; 0xac
 8001d66:	71fb      	strb	r3, [r7, #7]
 8001d68:	23e1      	movs	r3, #225	; 0xe1
 8001d6a:	723b      	strb	r3, [r7, #8]
 8001d6c:	2311      	movs	r3, #17
 8001d6e:	727b      	strb	r3, [r7, #9]
 8001d70:	2301      	movs	r3, #1
 8001d72:	72bb      	strb	r3, [r7, #10]
 8001d74:	2300      	movs	r3, #0
 8001d76:	72fb      	strb	r3, [r7, #11]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	733b      	strb	r3, [r7, #12]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	737b      	strb	r3, [r7, #13]
 8001d80:	2300      	movs	r3, #0
 8001d82:	73bb      	strb	r3, [r7, #14]
 8001d84:	2320      	movs	r3, #32
 8001d86:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <Add_HWServW2ST_Service+0x1e8>)
 8001d8a:	8818      	ldrh	r0, [r3, #0]
 8001d8c:	463a      	mov	r2, r7
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <Add_HWServW2ST_Service+0x1f8>)
 8001d90:	9305      	str	r3, [sp, #20]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9304      	str	r3, [sp, #16]
 8001d96:	2310      	movs	r3, #16
 8001d98:	9303      	str	r3, [sp, #12]
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2312      	movs	r3, #18
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2303      	movs	r3, #3
 8001da8:	2102      	movs	r1, #2
 8001daa:	f00d f9d8 	bl	800f15e <aci_gatt_add_char>
 8001dae:	4603      	mov	r3, r0
 8001db0:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &LedCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <Add_HWServW2ST_Service+0x1dc>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e005      	b.n	8001dc8 <Add_HWServW2ST_Service+0x1e0>
    goto fail;
 8001dbc:	bf00      	nop
 8001dbe:	e002      	b.n	8001dc6 <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001dc0:	bf00      	nop
 8001dc2:	e000      	b.n	8001dc6 <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001dc4:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding HW's Characteristcs service.\n");
  return BLE_STATUS_ERROR;
 8001dc6:	2347      	movs	r3, #71	; 0x47
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000022c 	.word	0x2000022c
 8001dd4:	200005f0 	.word	0x200005f0
 8001dd8:	20000001 	.word	0x20000001
 8001ddc:	2000022e 	.word	0x2000022e
 8001de0:	20000230 	.word	0x20000230

08001de4 <Environmental_Update>:
* @param  int16_t Temp2 Temperature in tenths of degree second sensor
* @param  int16_t Temp1 Temperature in tenths of degree first sensor
* @retval tBleStatus   Status
*/
tBleStatus Environmental_Update(int32_t Press,uint16_t Hum,int16_t Temp2,int16_t Temp1)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b0cd      	sub	sp, #308	; 0x134
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	f107 040c 	add.w	r4, r7, #12
 8001dee:	6020      	str	r0, [r4, #0]
 8001df0:	460c      	mov	r4, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f107 030a 	add.w	r3, r7, #10
 8001dfa:	4622      	mov	r2, r4
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	4602      	mov	r2, r0
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	1dbb      	adds	r3, r7, #6
 8001e08:	460a      	mov	r2, r1
 8001e0a:	801a      	strh	r2, [r3, #0]
  tBleStatus ret;
  uint8_t BuffPos;
  
  uint8_t buff[2+4/*Press*/+2/*Hum*/+2/*Temp2*/+2/*Temp1*/];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001e0c:	f004 f802 	bl	8005e14 <HAL_GetTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001e1a:	f003 fffb 	bl	8005e14 <HAL_GetTick>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	0adb      	lsrs	r3, r3, #11
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  BuffPos=2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <Environmental_Update+0x238>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d032      	beq.n	8001e9c <Environmental_Update+0xb8>
  {
    STORE_LE_32(buff+BuffPos,Press);
 8001e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e3a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e3e:	4413      	add	r3, r2
 8001e40:	f107 020c 	add.w	r2, r7, #12
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1219      	asrs	r1, r3, #8
 8001e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e56:	3301      	adds	r3, #1
 8001e58:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1419      	asrs	r1, r3, #16
 8001e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e74:	4413      	add	r3, r2
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1619      	asrs	r1, r3, #24
 8001e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e86:	3303      	adds	r3, #3
 8001e88:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2ca      	uxtb	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
    BuffPos+=4;
 8001e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e96:	3304      	adds	r3, #4
 8001e98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001e9c:	4b5f      	ldr	r3, [pc, #380]	; (800201c <Environmental_Update+0x238>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <Environmental_Update+0xf8>
  {
    STORE_LE_16(buff+BuffPos,Hum);
 8001ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ea8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001eac:	4413      	add	r3, r2
 8001eae:	f107 020a 	add.w	r2, r7, #10
 8001eb2:	8812      	ldrh	r2, [r2, #0]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	f107 030a 	add.w	r3, r7, #10
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b299      	uxth	r1, r3
 8001ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <Environmental_Update+0x238>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d138      	bne.n	8001f56 <Environmental_Update+0x172>
  {
    STORE_LE_16(buff+BuffPos,Temp2);
 8001ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ee8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001eec:	4413      	add	r3, r2
 8001eee:	f107 0208 	add.w	r2, r7, #8
 8001ef2:	8812      	ldrh	r2, [r2, #0]
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f00:	121b      	asrs	r3, r3, #8
 8001f02:	b219      	sxth	r1, r3
 8001f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2ca      	uxtb	r2, r1
 8001f12:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    STORE_LE_16(buff+BuffPos,Temp1);
 8001f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f22:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f26:	4413      	add	r3, r2
 8001f28:	1dba      	adds	r2, r7, #6
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	1dbb      	adds	r3, r7, #6
 8001f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f36:	121b      	asrs	r3, r3, #8
 8001f38:	b219      	sxth	r1, r3
 8001f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f44:	4413      	add	r3, r2
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8001f54:	e01e      	b.n	8001f94 <Environmental_Update+0x1b0>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <Environmental_Update+0x238>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d11a      	bne.n	8001f94 <Environmental_Update+0x1b0>
  {
    STORE_LE_16(buff+BuffPos,Temp1);
 8001f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f62:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f66:	4413      	add	r3, r2
 8001f68:	1dba      	adds	r2, r7, #6
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f76:	121b      	asrs	r3, r3, #8
 8001f78:	b219      	sxth	r1, r3
 8001f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f84:	4413      	add	r3, r2
 8001f86:	b2ca      	uxtb	r2, r1
 8001f88:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, EnvironmentalCharSize,buff);
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <Environmental_Update+0x23c>)
 8001f96:	8818      	ldrh	r0, [r3, #0]
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <Environmental_Update+0x240>)
 8001f9a:	8819      	ldrh	r1, [r3, #0]
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <Environmental_Update+0x244>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f00d f9aa 	bl	800f302 <aci_gatt_update_char_value>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  
  if (ret != BLE_STATUS_SUCCESS)
 8001fb4:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d028      	beq.n	800200e <Environmental_Update+0x22a>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <Environmental_Update+0x248>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <Environmental_Update+0x206>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
 8001fcc:	4918      	ldr	r1, [pc, #96]	; (8002030 <Environmental_Update+0x24c>)
 8001fce:	4819      	ldr	r0, [pc, #100]	; (8002034 <Environmental_Update+0x250>)
 8001fd0:	f00e f880 	bl	80100d4 <siprintf>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <Environmental_Update+0x254>)
 8001fd8:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <Environmental_Update+0x254>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4814      	ldr	r0, [pc, #80]	; (8002034 <Environmental_Update+0x250>)
 8001fe4:	f7ff fc4c 	bl	8001880 <Stderr_Update>
 8001fe8:	e00f      	b.n	800200a <Environmental_Update+0x226>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Environmental Char\r\n");
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4910      	ldr	r1, [pc, #64]	; (8002030 <Environmental_Update+0x24c>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00e f86f 	bl	80100d4 <siprintf>
 8001ff6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8001ffa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fedf 	bl	8002dc8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 800200a:	2347      	movs	r3, #71	; 0x47
 800200c:	e000      	b.n	8002010 <Environmental_Update+0x22c>
  }
  return BLE_STATUS_SUCCESS;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	200005f0 	.word	0x200005f0
 8002020:	2000022c 	.word	0x2000022c
 8002024:	2000022e 	.word	0x2000022e
 8002028:	20000001 	.word	0x20000001
 800202c:	20000220 	.word	0x20000220
 8002030:	08010c28 	.word	0x08010c28
 8002034:	200009d8 	.word	0x200009d8
 8002038:	20000b20 	.word	0x20000b20

0800203c <LED_Update>:
* @brief  Update LEDs characteristic value
* @param  uint8_t LedStatus LEDs status 0/1 (off/on)
* @retval tBleStatus   Status
*/
tBleStatus LED_Update(uint8_t LedStatus)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0c8      	sub	sp, #288	; 0x120
 8002040:	af02      	add	r7, sp, #8
 8002042:	4602      	mov	r2, r0
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  
  uint8_t buff[2+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8002048:	f003 fee4 	bl	8005e14 <HAL_GetTick>
 800204c:	4603      	mov	r3, r0
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002056:	f003 fedd 	bl	8005e14 <HAL_GetTick>
 800205a:	4603      	mov	r3, r0
 800205c:	0adb      	lsrs	r3, r3, #11
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
  buff[2] = LedStatus;
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, LedCharHandle, 0, 2+1,buff);
 800206c:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <LED_Update+0xb4>)
 800206e:	8818      	ldrh	r0, [r3, #0]
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <LED_Update+0xb8>)
 8002072:	8819      	ldrh	r1, [r3, #0]
 8002074:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2303      	movs	r3, #3
 800207c:	2200      	movs	r2, #0
 800207e:	f00d f940 	bl	800f302 <aci_gatt_update_char_value>
 8002082:	4603      	mov	r3, r0
 8002084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
  if (ret != BLE_STATUS_SUCCESS)
 8002088:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800208c:	2b00      	cmp	r3, #0
 800208e:	d028      	beq.n	80020e2 <LED_Update+0xa6>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <LED_Update+0xbc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0a5b      	lsrs	r3, r3, #9
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <LED_Update+0x82>
    {
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating LED Char\r\n");
 80020a0:	4916      	ldr	r1, [pc, #88]	; (80020fc <LED_Update+0xc0>)
 80020a2:	4817      	ldr	r0, [pc, #92]	; (8002100 <LED_Update+0xc4>)
 80020a4:	f00e f816 	bl	80100d4 <siprintf>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a16      	ldr	r2, [pc, #88]	; (8002104 <LED_Update+0xc8>)
 80020ac:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <LED_Update+0xc8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	4812      	ldr	r0, [pc, #72]	; (8002100 <LED_Update+0xc4>)
 80020b8:	f7ff fbe2 	bl	8001880 <Stderr_Update>
 80020bc:	e00f      	b.n	80020de <LED_Update+0xa2>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Temp Char\r\n");
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4911      	ldr	r1, [pc, #68]	; (8002108 <LED_Update+0xcc>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00e f805 	bl	80100d4 <siprintf>
 80020ca:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80020ce:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fe75 	bl	8002dc8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 80020de:	2347      	movs	r3, #71	; 0x47
 80020e0:	e000      	b.n	80020e4 <LED_Update+0xa8>
  }
  return BLE_STATUS_SUCCESS;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000022c 	.word	0x2000022c
 80020f4:	20000230 	.word	0x20000230
 80020f8:	20000220 	.word	0x20000220
 80020fc:	08010c4c 	.word	0x08010c4c
 8002100:	200009d8 	.word	0x200009d8
 8002104:	20000b20 	.word	0x20000b20
 8002108:	08010c68 	.word	0x08010c68

0800210c <setConnectable>:
 * @brief  Puts the device in connectable mode.
 * @param  None 
 * @retval None
 */
void setConnectable(void)
{  
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	b092      	sub	sp, #72	; 0x48
 8002110:	af08      	add	r7, sp, #32
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_STLBLE};
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <setConnectable+0x108>)
 8002114:	f107 0320 	add.w	r3, r7, #32
 8002118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800211c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t manuf_data[26] = {
 8002120:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <setConnectable+0x10c>)
 8002122:	1d3c      	adds	r4, r7, #4
 8002124:	461d      	mov	r5, r3
 8002126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800212e:	c403      	stmia	r4!, {r0, r1}
 8002130:	8022      	strh	r2, [r4, #0]
    0x00,
    0x00, /* BLE MAC stop */
  };
  
  /* BLE MAC */
  manuf_data[20] = bdaddr[5];
 8002132:	4b3a      	ldr	r3, [pc, #232]	; (800221c <setConnectable+0x110>)
 8002134:	795b      	ldrb	r3, [r3, #5]
 8002136:	763b      	strb	r3, [r7, #24]
  manuf_data[21] = bdaddr[4];
 8002138:	4b38      	ldr	r3, [pc, #224]	; (800221c <setConnectable+0x110>)
 800213a:	791b      	ldrb	r3, [r3, #4]
 800213c:	767b      	strb	r3, [r7, #25]
  manuf_data[22] = bdaddr[3];
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <setConnectable+0x110>)
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	76bb      	strb	r3, [r7, #26]
  manuf_data[23] = bdaddr[2];
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <setConnectable+0x110>)
 8002146:	789b      	ldrb	r3, [r3, #2]
 8002148:	76fb      	strb	r3, [r7, #27]
  manuf_data[24] = bdaddr[1];
 800214a:	4b34      	ldr	r3, [pc, #208]	; (800221c <setConnectable+0x110>)
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	773b      	strb	r3, [r7, #28]
  manuf_data[25] = bdaddr[0];
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <setConnectable+0x110>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	777b      	strb	r3, [r7, #29]
  
  manuf_data[16] |= 0x20; /* Led */
 8002156:	7d3b      	ldrb	r3, [r7, #20]
 8002158:	f043 0320 	orr.w	r3, r3, #32
 800215c:	b2db      	uxtb	r3, r3
 800215e:	753b      	strb	r3, [r7, #20]
  
  if(TargetBoardFeatures.HandleGGComponent)
 8002160:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <setConnectable+0x114>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <setConnectable+0x66>
  {
    manuf_data[17] |= 0x02; /* Battery Present */
 8002168:	7d7b      	ldrb	r3, [r7, #21]
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.NumTempSensors==2)
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <setConnectable+0x114>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d105      	bne.n	8002186 <setConnectable+0x7a>
  {
    manuf_data[17] |= 0x05; /* Two Temperature values*/
 800217a:	7d7b      	ldrb	r3, [r7, #21]
 800217c:	f043 0305 	orr.w	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	757b      	strb	r3, [r7, #21]
 8002184:	e008      	b.n	8002198 <setConnectable+0x8c>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <setConnectable+0x114>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d104      	bne.n	8002198 <setConnectable+0x8c>
  {
    manuf_data[17] |= 0x04; /* One Temperature value*/
 800218e:	7d7b      	ldrb	r3, [r7, #21]
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	b2db      	uxtb	r3, r3
 8002196:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <setConnectable+0x114>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <setConnectable+0x9e>
  {
    manuf_data[17] |= 0x08; /* Humidity */
 80021a0:	7d7b      	ldrb	r3, [r7, #21]
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <setConnectable+0x114>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <setConnectable+0xb0>
  {
    manuf_data[17] |= 0x10; /* Pressure value*/
 80021b2:	7d7b      	ldrb	r3, [r7, #21]
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	757b      	strb	r3, [r7, #21]
  }
  
  /* DS3 DIL24  present*/
  if(TargetBoardFeatures.HWAdvanceFeatures) 
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <setConnectable+0x114>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <setConnectable+0xc2>
  {
    /* Accelerometer Events */
    manuf_data[18] |=0x04;
 80021c4:	7dbb      	ldrb	r3, [r7, #22]
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	75bb      	strb	r3, [r7, #22]
  }
  
  
  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
 80021ce:	2100      	movs	r1, #0
 80021d0:	2000      	movs	r0, #0
 80021d2:	f00d fa9d 	bl	800f710 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 80021d6:	2300      	movs	r3, #0
 80021d8:	9306      	str	r3, [sp, #24]
 80021da:	2300      	movs	r3, #0
 80021dc:	9305      	str	r3, [sp, #20]
 80021de:	2300      	movs	r3, #0
 80021e0:	9304      	str	r3, [sp, #16]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	f107 0320 	add.w	r3, r7, #32
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2308      	movs	r3, #8
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2000      	movs	r0, #0
 80021fc:	f00c fd68 	bl	800ecd0 <aci_gap_set_discoverable>
#endif /* STATIC_BLE_MAC */
                           NO_WHITE_LIST_USE,
                           sizeof(local_name), local_name, 0, NULL, 0, 0);
  
  /* Send Advertising data */
  aci_gap_update_adv_data(26, manuf_data);
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	4619      	mov	r1, r3
 8002204:	201a      	movs	r0, #26
 8002206:	f00c fea9 	bl	800ef5c <aci_gap_update_adv_data>
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	bf00      	nop
 8002214:	08010c84 	.word	0x08010c84
 8002218:	08010c8c 	.word	0x08010c8c
 800221c:	20000900 	.word	0x20000900
 8002220:	200005f0 	.word	0x200005f0

08002224 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	b0c9      	sub	sp, #292	; 0x124
 8002228:	af04      	add	r7, sp, #16
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	6018      	str	r0, [r3, #0]
 800222e:	460a      	mov	r2, r1
 8002230:	1cbb      	adds	r3, r7, #2
 8002232:	801a      	strh	r2, [r3, #0]
  connected = TRUE;
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <GAP_ConnectionComplete_CB+0x90>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <GAP_ConnectionComplete_CB+0x94>)
 800223c:	1cbb      	adds	r3, r7, #2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	8013      	strh	r3, [r2, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3305      	adds	r3, #5
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461d      	mov	r5, r3
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3304      	adds	r3, #4
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461e      	mov	r6, r3
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3303      	adds	r3, #3
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3302      	adds	r3, #2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461c      	mov	r4, r3
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f107 000c 	add.w	r0, r7, #12
 800227e:	9303      	str	r3, [sp, #12]
 8002280:	9402      	str	r4, [sp, #8]
 8002282:	9101      	str	r1, [sp, #4]
 8002284:	9200      	str	r2, [sp, #0]
 8002286:	4633      	mov	r3, r6
 8002288:	462a      	mov	r2, r5
 800228a:	490c      	ldr	r1, [pc, #48]	; (80022bc <GAP_ConnectionComplete_CB+0x98>)
 800228c:	f00d ff22 	bl	80100d4 <siprintf>
 8002290:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8002294:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fd92 	bl	8002dc8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <GAP_ConnectionComplete_CB+0x9c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  
}
 80022aa:	bf00      	nop
 80022ac:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b4:	20000228 	.word	0x20000228
 80022b8:	2000026a 	.word	0x2000026a
 80022bc:	08010ca8 	.word	0x08010ca8
 80022c0:	20000220 	.word	0x20000220

080022c4 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0c2      	sub	sp, #264	; 0x108
 80022c8:	af00      	add	r7, sp, #0
  connected = FALSE;
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <GAP_DisconnectionComplete_CB+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION  
  STLBLE_PRINTF("<<<<<<DISCONNECTED\r\n");
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4911      	ldr	r1, [pc, #68]	; (8002318 <GAP_DisconnectionComplete_CB+0x54>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00d fefd 	bl	80100d4 <siprintf>
 80022da:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 80022de:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fd6e 	bl	8002dc8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */  

  /* Make the device connectable again. */
  set_connectable = TRUE;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <GAP_DisconnectionComplete_CB+0x58>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]

  ConnectionBleStatus=0;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <GAP_DisconnectionComplete_CB+0x5c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 80022f8:	2100      	movs	r1, #0
 80022fa:	480a      	ldr	r0, [pc, #40]	; (8002324 <GAP_DisconnectionComplete_CB+0x60>)
 80022fc:	f008 ffea 	bl	800b2d4 <HAL_TIM_OC_Stop_IT>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <GAP_DisconnectionComplete_CB+0x46>
    /* Stopping Error */
    Error_Handler();
 8002306:	f7ff fa41 	bl	800178c <Error_Handler>
  }
}
 800230a:	bf00      	nop
 800230c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000228 	.word	0x20000228
 8002318:	08010ccc 	.word	0x08010ccc
 800231c:	20000000 	.word	0x20000000
 8002320:	20000220 	.word	0x20000220
 8002324:	20000908 	.word	0x20000908

08002328 <Read_Request_CB>:
* @brief  This function is called when there is a Bluetooth Read request
* @param  uint16_t handle Handle of the attribute
* @retval None
*/
void Read_Request_CB(uint16_t handle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  if(handle == EnvironmentalCharHandle + 1)
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <Read_Request_CB+0x20c>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	429a      	cmp	r2, r3
 800233c:	f040 80cf 	bne.w	80024de <Read_Request_CB+0x1b6>
  {
    /* Read Request for Pressure,Humidity, and Temperatures*/
    float SensorValue;
    int32_t PressToSend=0;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
    uint16_t HumToSend=0;
 8002344:	2300      	movs	r3, #0
 8002346:	837b      	strh	r3, [r7, #26]
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8002348:	2300      	movs	r3, #0
 800234a:	833b      	strh	r3, [r7, #24]
 800234c:	2300      	movs	r3, #0
 800234e:	82fb      	strh	r3, [r7, #22]
    int32_t decPart, intPart;
    uint16_t distance = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	82bb      	strh	r3, [r7, #20]
    
    if (US100_ENABLE) {
    	distance = us100_get_distance();
 8002354:	f003 fca8 	bl	8005ca8 <us100_get_distance>
 8002358:	4603      	mov	r3, r0
 800235a:	82bb      	strh	r3, [r7, #20]
    	Temp1ToSend = distance;
 800235c:	8abb      	ldrh	r3, [r7, #20]
 800235e:	82fb      	strh	r3, [r7, #22]
    }

    if(TargetBoardFeatures.HandlePressSensor) 
 8002360:	4b75      	ldr	r3, [pc, #468]	; (8002538 <Read_Request_CB+0x210>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d026      	beq.n	80023b6 <Read_Request_CB+0x8e>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	461a      	mov	r2, r3
 800236e:	2102      	movs	r1, #2
 8002370:	2001      	movs	r0, #1
 8002372:	f003 f8b3 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8002376:	edd7 7a02 	vldr	s15, [r7, #8]
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 3a90 	vmov	r3, s15
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	ed97 7a02 	vldr	s14, [r7, #8]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002396:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800253c <Read_Request_CB+0x214>
 800239a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a2:	ee17 3a90 	vmov	r3, s15
 80023a6:	60fb      	str	r3, [r7, #12]
      PressToSend=intPart*100+decPart;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2264      	movs	r2, #100	; 0x64
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	61fb      	str	r3, [r7, #28]
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 80023b6:	4b60      	ldr	r3, [pc, #384]	; (8002538 <Read_Request_CB+0x210>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02a      	beq.n	8002414 <Read_Request_CB+0xec>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	461a      	mov	r2, r3
 80023c4:	2104      	movs	r1, #4
 80023c6:	2000      	movs	r0, #0
 80023c8:	f003 f888 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80023cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d4:	ee17 3a90 	vmov	r3, s15
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	ed97 7a02 	vldr	s14, [r7, #8]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f8:	ee17 3a90 	vmov	r3, s15
 80023fc:	60fb      	str	r3, [r7, #12]
      HumToSend = intPart*10+decPart;
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4413      	add	r3, r2
 8002412:	837b      	strh	r3, [r7, #26]
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 8002414:	4b48      	ldr	r3, [pc, #288]	; (8002538 <Read_Request_CB+0x210>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d157      	bne.n	80024cc <Read_Request_CB+0x1a4>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	461a      	mov	r2, r3
 8002422:	2101      	movs	r1, #1
 8002424:	2000      	movs	r0, #0
 8002426:	f003 f859 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 800242a:	edd7 7a02 	vldr	s15, [r7, #8]
 800242e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002432:	ee17 3a90 	vmov	r3, s15
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	ed97 7a02 	vldr	s14, [r7, #8]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002456:	ee17 3a90 	vmov	r3, s15
 800245a:	60fb      	str	r3, [r7, #12]
      Temp1ToSend = intPart*10+decPart; 
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4413      	add	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	b29b      	uxth	r3, r3
 800246e:	4413      	add	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	82fb      	strh	r3, [r7, #22]
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	461a      	mov	r2, r3
 800247a:	2101      	movs	r1, #1
 800247c:	2001      	movs	r0, #1
 800247e:	f003 f82d 	bl	80054dc <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8002482:	edd7 7a02 	vldr	s15, [r7, #8]
 8002486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248a:	ee17 3a90 	vmov	r3, s15
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	ed97 7a02 	vldr	s14, [r7, #8]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ae:	ee17 3a90 	vmov	r3, s15
 80024b2:	60fb      	str	r3, [r7, #12]
      Temp2ToSend = intPart*10+decPart;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4413      	add	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	833b      	strh	r3, [r7, #24]
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
      Temp1ToSend = intPart*10+decPart;
      */
    }
    
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 80024cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024d4:	8b79      	ldrh	r1, [r7, #26]
 80024d6:	69f8      	ldr	r0, [r7, #28]
 80024d8:	f7ff fc84 	bl	8001de4 <Environmental_Update>
 80024dc:	e01d      	b.n	800251a <Read_Request_CB+0x1f2>
  } 
  else if(handle == LedCharHandle + 1)
 80024de:	88fa      	ldrh	r2, [r7, #6]
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <Read_Request_CB+0x218>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d106      	bne.n	80024f8 <Read_Request_CB+0x1d0>
  {
    /* Read Request for Led Status */
    LED_Update(TargetBoardFeatures.LedStatus);
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <Read_Request_CB+0x210>)
 80024ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fda3 	bl	800203c <LED_Update>
 80024f6:	e010      	b.n	800251a <Read_Request_CB+0x1f2>
  }
  else if (handle == StdErrCharHandle + 1) 
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <Read_Request_CB+0x21c>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	429a      	cmp	r2, r3
 8002502:	d102      	bne.n	800250a <Read_Request_CB+0x1e2>
  {
    /* Send again the last packet for StdError */
    Stderr_Update_AfterRead();
 8002504:	f7ff fa74 	bl	80019f0 <Stderr_Update_AfterRead>
 8002508:	e007      	b.n	800251a <Read_Request_CB+0x1f2>
  } 
  else if (handle == TermCharHandle + 1)
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <Read_Request_CB+0x220>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	429a      	cmp	r2, r3
 8002514:	d101      	bne.n	800251a <Read_Request_CB+0x1f2>
  {
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 8002516:	f7ff fa8d 	bl	8001a34 <Term_Update_AfterRead>
  }
  
  //EXIT:
  if(connection_handle != 0)
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <Read_Request_CB+0x224>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <Read_Request_CB+0x204>
    aci_gatt_allow_read(connection_handle);
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <Read_Request_CB+0x224>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f00c ff7d 	bl	800f426 <aci_gatt_allow_read>
}
 800252c:	bf00      	nop
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	2000022e 	.word	0x2000022e
 8002538:	200005f0 	.word	0x200005f0
 800253c:	42c80000 	.word	0x42c80000
 8002540:	20000230 	.word	0x20000230
 8002544:	2000023a 	.word	0x2000023a
 8002548:	20000238 	.word	0x20000238
 800254c:	2000026a 	.word	0x2000026a

08002550 <Attribute_Modified_CB>:
* @param uint8_t *att_data attribute data
* @param uint8_t data_length length of the data
* @retval None
*/
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0c6      	sub	sp, #280	; 0x118
 8002554:	af00      	add	r7, sp, #0
 8002556:	463b      	mov	r3, r7
 8002558:	6019      	str	r1, [r3, #0]
 800255a:	4611      	mov	r1, r2
 800255c:	1dbb      	adds	r3, r7, #6
 800255e:	4602      	mov	r2, r0
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	1d7b      	adds	r3, r7, #5
 8002564:	460a      	mov	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]
  if(attr_handle == ConfigCharHandle + 2) 
 8002568:	1dbb      	adds	r3, r7, #6
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	4ba3      	ldr	r3, [pc, #652]	; (80027fc <Attribute_Modified_CB+0x2ac>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	3302      	adds	r3, #2
 8002572:	429a      	cmp	r2, r3
 8002574:	f000 8170 	beq.w	8002858 <Attribute_Modified_CB+0x308>
  {
    ;/* do nothing... only for removing the message "Notification UNKNOW handle" */
  }
  else if(attr_handle == EnvironmentalCharHandle + 2)
 8002578:	1dbb      	adds	r3, r7, #6
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	4ba0      	ldr	r3, [pc, #640]	; (8002800 <Attribute_Modified_CB+0x2b0>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	3302      	adds	r3, #2
 8002582:	429a      	cmp	r2, r3
 8002584:	d171      	bne.n	800266a <Attribute_Modified_CB+0x11a>
  {
    if (att_data[0] == 01) 
 8002586:	463b      	mov	r3, r7
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d11b      	bne.n	80025c8 <Attribute_Modified_CB+0x78>
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
 8002590:	4b9c      	ldr	r3, [pc, #624]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	4a9a      	ldr	r2, [pc, #616]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 800259a:	6013      	str	r3, [r2, #0]
      
      /* Start the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 800259c:	2100      	movs	r1, #0
 800259e:	489a      	ldr	r0, [pc, #616]	; (8002808 <Attribute_Modified_CB+0x2b8>)
 80025a0:	f008 fd4c 	bl	800b03c <HAL_TIM_OC_Start_IT>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <Attribute_Modified_CB+0x5e>
      {
        /* Starting Error */
        Error_Handler();
 80025aa:	f7ff f8ef 	bl	800178c <Error_Handler>
      }
      
      /* Set the new Capture compare value */
      {
        uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 80025ae:	4b96      	ldr	r3, [pc, #600]	; (8002808 <Attribute_Modified_CB+0x2b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* Set the Capture Compare Register value */
        __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 80025b8:	4b93      	ldr	r3, [pc, #588]	; (8002808 <Attribute_Modified_CB+0x2b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80025c0:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34
 80025c6:	e013      	b.n	80025f0 <Attribute_Modified_CB+0xa0>
      }
    } 
    else if (att_data[0] == 0)
 80025c8:	463b      	mov	r3, r7
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10e      	bne.n	80025f0 <Attribute_Modified_CB+0xa0>
    {
      W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
 80025d2:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	4a8a      	ldr	r2, [pc, #552]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80025dc:	6013      	str	r3, [r2, #0]
      
      /* Stop the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 80025de:	2100      	movs	r1, #0
 80025e0:	4889      	ldr	r0, [pc, #548]	; (8002808 <Attribute_Modified_CB+0x2b8>)
 80025e2:	f008 fe77 	bl	800b2d4 <HAL_TIM_OC_Stop_IT>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <Attribute_Modified_CB+0xa0>
      {
        /* Stopping Error */
        Error_Handler();
 80025ec:	f7ff f8ce 	bl	800178c <Error_Handler>
      }
    }
#ifdef ENABLE_USB_DEBUG_CONNECTION
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 80025f0:	4b84      	ldr	r3, [pc, #528]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d019      	beq.n	8002634 <Attribute_Modified_CB+0xe4>
    {
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8002600:	4b80      	ldr	r3, [pc, #512]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <Attribute_Modified_CB+0xc2>
 800260e:	4b7f      	ldr	r3, [pc, #508]	; (800280c <Attribute_Modified_CB+0x2bc>)
 8002610:	e000      	b.n	8002614 <Attribute_Modified_CB+0xc4>
 8002612:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <Attribute_Modified_CB+0x2c0>)
 8002614:	461a      	mov	r2, r3
 8002616:	497f      	ldr	r1, [pc, #508]	; (8002814 <Attribute_Modified_CB+0x2c4>)
 8002618:	487f      	ldr	r0, [pc, #508]	; (8002818 <Attribute_Modified_CB+0x2c8>)
 800261a:	f00d fd5b 	bl	80100d4 <siprintf>
 800261e:	4603      	mov	r3, r0
 8002620:	4a7e      	ldr	r2, [pc, #504]	; (800281c <Attribute_Modified_CB+0x2cc>)
 8002622:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8002624:	4b7d      	ldr	r3, [pc, #500]	; (800281c <Attribute_Modified_CB+0x2cc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	487a      	ldr	r0, [pc, #488]	; (8002818 <Attribute_Modified_CB+0x2c8>)
 800262e:	f7ff f96f 	bl	8001910 <Term_Update>
    else
    {
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
    }
  }
}
 8002632:	e111      	b.n	8002858 <Attribute_Modified_CB+0x308>
      STLBLE_PRINTF("--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8002634:	4b73      	ldr	r3, [pc, #460]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <Attribute_Modified_CB+0xf6>
 8002642:	4a72      	ldr	r2, [pc, #456]	; (800280c <Attribute_Modified_CB+0x2bc>)
 8002644:	e000      	b.n	8002648 <Attribute_Modified_CB+0xf8>
 8002646:	4a72      	ldr	r2, [pc, #456]	; (8002810 <Attribute_Modified_CB+0x2c0>)
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	4971      	ldr	r1, [pc, #452]	; (8002814 <Attribute_Modified_CB+0x2c4>)
 800264e:	4618      	mov	r0, r3
 8002650:	f00d fd40 	bl	80100d4 <siprintf>
 8002654:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8002658:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fbb0 	bl	8002dc8 <CDC_Fill_Buffer>
}
 8002668:	e0f6      	b.n	8002858 <Attribute_Modified_CB+0x308>
  else if(attr_handle == StdErrCharHandle + 2)
 800266a:	1dbb      	adds	r3, r7, #6
 800266c:	881a      	ldrh	r2, [r3, #0]
 800266e:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <Attribute_Modified_CB+0x2d0>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	3302      	adds	r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d118      	bne.n	80026aa <Attribute_Modified_CB+0x15a>
    if (att_data[0] == 01) 
 8002678:	463b      	mov	r3, r7
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d106      	bne.n	8002690 <Attribute_Modified_CB+0x140>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
 8002682:	4b60      	ldr	r3, [pc, #384]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268a:	4a5e      	ldr	r2, [pc, #376]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	e0e3      	b.n	8002858 <Attribute_Modified_CB+0x308>
    else if (att_data[0] == 0)
 8002690:	463b      	mov	r3, r7
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 80de 	bne.w	8002858 <Attribute_Modified_CB+0x308>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026a4:	4a57      	ldr	r2, [pc, #348]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	e0d6      	b.n	8002858 <Attribute_Modified_CB+0x308>
  else if(attr_handle == TermCharHandle + 2)
 80026aa:	1dbb      	adds	r3, r7, #6
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <Attribute_Modified_CB+0x2d4>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	3302      	adds	r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d118      	bne.n	80026ea <Attribute_Modified_CB+0x19a>
    if (att_data[0] == 01) 
 80026b8:	463b      	mov	r3, r7
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d106      	bne.n	80026d0 <Attribute_Modified_CB+0x180>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_TERM);
 80026c2:	4b50      	ldr	r3, [pc, #320]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	4a4e      	ldr	r2, [pc, #312]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80026cc:	6013      	str	r3, [r2, #0]
}
 80026ce:	e0c3      	b.n	8002858 <Attribute_Modified_CB+0x308>
    else if (att_data[0] == 0)
 80026d0:	463b      	mov	r3, r7
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 80be 	bne.w	8002858 <Attribute_Modified_CB+0x308>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_TERM);
 80026dc:	4b49      	ldr	r3, [pc, #292]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e4:	4a47      	ldr	r2, [pc, #284]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	e0b6      	b.n	8002858 <Attribute_Modified_CB+0x308>
  else if(attr_handle == LedCharHandle + 2)
 80026ea:	1dbb      	adds	r3, r7, #6
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	4b4e      	ldr	r3, [pc, #312]	; (8002828 <Attribute_Modified_CB+0x2d8>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	3302      	adds	r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d15b      	bne.n	80027b0 <Attribute_Modified_CB+0x260>
    if (att_data[0] == 01) 
 80026f8:	463b      	mov	r3, r7
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10c      	bne.n	800271c <Attribute_Modified_CB+0x1cc>
      W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
 8002702:	4b40      	ldr	r3, [pc, #256]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	4a3e      	ldr	r2, [pc, #248]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 800270c:	6013      	str	r3, [r2, #0]
      LED_Update(TargetBoardFeatures.LedStatus);
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <Attribute_Modified_CB+0x2dc>)
 8002710:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fc91 	bl	800203c <LED_Update>
 800271a:	e00a      	b.n	8002732 <Attribute_Modified_CB+0x1e2>
    else if (att_data[0] == 0)
 800271c:	463b      	mov	r3, r7
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <Attribute_Modified_CB+0x1e2>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0302 	bic.w	r3, r3, #2
 800272e:	4a35      	ldr	r2, [pc, #212]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002730:	6013      	str	r3, [r2, #0]
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8002732:	4b34      	ldr	r3, [pc, #208]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01a      	beq.n	8002778 <Attribute_Modified_CB+0x228>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <Attribute_Modified_CB+0x206>
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <Attribute_Modified_CB+0x2bc>)
 8002754:	e000      	b.n	8002758 <Attribute_Modified_CB+0x208>
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <Attribute_Modified_CB+0x2c0>)
 8002758:	461a      	mov	r2, r3
 800275a:	4935      	ldr	r1, [pc, #212]	; (8002830 <Attribute_Modified_CB+0x2e0>)
 800275c:	482e      	ldr	r0, [pc, #184]	; (8002818 <Attribute_Modified_CB+0x2c8>)
 800275e:	f00d fcb9 	bl	80100d4 <siprintf>
 8002762:	4603      	mov	r3, r0
 8002764:	4a2d      	ldr	r2, [pc, #180]	; (800281c <Attribute_Modified_CB+0x2cc>)
 8002766:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <Attribute_Modified_CB+0x2cc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	4829      	ldr	r0, [pc, #164]	; (8002818 <Attribute_Modified_CB+0x2c8>)
 8002772:	f7ff f8cd 	bl	8001910 <Term_Update>
}
 8002776:	e06f      	b.n	8002858 <Attribute_Modified_CB+0x308>
      STLBLE_PRINTF("--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <Attribute_Modified_CB+0x23c>
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <Attribute_Modified_CB+0x2bc>)
 800278a:	e000      	b.n	800278e <Attribute_Modified_CB+0x23e>
 800278c:	4a20      	ldr	r2, [pc, #128]	; (8002810 <Attribute_Modified_CB+0x2c0>)
 800278e:	f107 0308 	add.w	r3, r7, #8
 8002792:	4927      	ldr	r1, [pc, #156]	; (8002830 <Attribute_Modified_CB+0x2e0>)
 8002794:	4618      	mov	r0, r3
 8002796:	f00d fc9d 	bl	80100d4 <siprintf>
 800279a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 800279e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80027a2:	f107 0308 	add.w	r3, r7, #8
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fb0d 	bl	8002dc8 <CDC_Fill_Buffer>
}
 80027ae:	e053      	b.n	8002858 <Attribute_Modified_CB+0x308>
  else if (attr_handle == ConfigCharHandle + 1) 
 80027b0:	1dbb      	adds	r3, r7, #6
 80027b2:	881a      	ldrh	r2, [r3, #0]
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <Attribute_Modified_CB+0x2ac>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d107      	bne.n	80027ce <Attribute_Modified_CB+0x27e>
    ConfigCommandParsing(att_data, data_length);    
 80027be:	1d7b      	adds	r3, r7, #5
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	463b      	mov	r3, r7
 80027c4:	4611      	mov	r1, r2
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	f000 f84e 	bl	8002868 <ConfigCommandParsing>
}
 80027cc:	e044      	b.n	8002858 <Attribute_Modified_CB+0x308>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <Attribute_Modified_CB+0x2b4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0a5b      	lsrs	r3, r3, #9
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02c      	beq.n	8002838 <Attribute_Modified_CB+0x2e8>
      BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
 80027de:	4915      	ldr	r1, [pc, #84]	; (8002834 <Attribute_Modified_CB+0x2e4>)
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <Attribute_Modified_CB+0x2c8>)
 80027e2:	f00d fc77 	bl	80100d4 <siprintf>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <Attribute_Modified_CB+0x2cc>)
 80027ea:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <Attribute_Modified_CB+0x2cc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4619      	mov	r1, r3
 80027f4:	4808      	ldr	r0, [pc, #32]	; (8002818 <Attribute_Modified_CB+0x2c8>)
 80027f6:	f7ff f843 	bl	8001880 <Stderr_Update>
}
 80027fa:	e02d      	b.n	8002858 <Attribute_Modified_CB+0x308>
 80027fc:	20000234 	.word	0x20000234
 8002800:	2000022e 	.word	0x2000022e
 8002804:	20000220 	.word	0x20000220
 8002808:	20000908 	.word	0x20000908
 800280c:	08010ce4 	.word	0x08010ce4
 8002810:	08010ce8 	.word	0x08010ce8
 8002814:	08010cec 	.word	0x08010cec
 8002818:	200009d8 	.word	0x200009d8
 800281c:	20000b20 	.word	0x20000b20
 8002820:	2000023a 	.word	0x2000023a
 8002824:	20000238 	.word	0x20000238
 8002828:	20000230 	.word	0x20000230
 800282c:	200005f0 	.word	0x200005f0
 8002830:	08010cfc 	.word	0x08010cfc
 8002834:	08010d0c 	.word	0x08010d0c
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
 8002838:	f107 0308 	add.w	r3, r7, #8
 800283c:	4909      	ldr	r1, [pc, #36]	; (8002864 <Attribute_Modified_CB+0x314>)
 800283e:	4618      	mov	r0, r3
 8002840:	f00d fc48 	bl	80100d4 <siprintf>
 8002844:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8002848:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800284c:	f107 0308 	add.w	r3, r7, #8
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fab8 	bl	8002dc8 <CDC_Fill_Buffer>
}
 8002858:	bf00      	nop
 800285a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	08010d0c 	.word	0x08010d0c

08002868 <ConfigCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
static void ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b0c6      	sub	sp, #280	; 0x118
 800286c:	af00      	add	r7, sp, #0
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	6018      	str	r0, [r3, #0]
 8002872:	460a      	mov	r2, r1
 8002874:	1cfb      	adds	r3, r7, #3
 8002876:	701a      	strb	r2, [r3, #0]
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3303      	adds	r3, #3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3302      	adds	r3, #2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	431a      	orrs	r2, r3
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint8_t Command = att_data[4];
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	791b      	ldrb	r3, [r3, #4]
 80028ae:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  uint8_t Data    = att_data[5];
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	795b      	ldrb	r3, [r3, #5]
 80028b8:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  switch (FeatureMask) {
 80028bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c4:	d162      	bne.n	800298c <ConfigCommandParsing+0x124>
    case FEATURE_MASK_LED:
      /* Led events */
#ifdef ENABLE_USB_DEBUG_CONNECTION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) {
 80028c6:	4b34      	ldr	r3, [pc, #208]	; (8002998 <ConfigCommandParsing+0x130>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <ConfigCommandParsing+0x94>
        BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x\n\r",FeatureMask,Command);
 80028d6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80028da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80028de:	492f      	ldr	r1, [pc, #188]	; (800299c <ConfigCommandParsing+0x134>)
 80028e0:	482f      	ldr	r0, [pc, #188]	; (80029a0 <ConfigCommandParsing+0x138>)
 80028e2:	f00d fbf7 	bl	80100d4 <siprintf>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a2e      	ldr	r2, [pc, #184]	; (80029a4 <ConfigCommandParsing+0x13c>)
 80028ea:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <ConfigCommandParsing+0x13c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	482a      	ldr	r0, [pc, #168]	; (80029a0 <ConfigCommandParsing+0x138>)
 80028f6:	f7ff f80b 	bl	8001910 <Term_Update>
 80028fa:	e012      	b.n	8002922 <ConfigCommandParsing+0xba>
      } else {
        STLBLE_PRINTF("Conf Sig F=%lx C=%2x\r\n",FeatureMask,Command);
 80028fc:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002900:	f107 000c 	add.w	r0, r7, #12
 8002904:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002908:	4927      	ldr	r1, [pc, #156]	; (80029a8 <ConfigCommandParsing+0x140>)
 800290a:	f00d fbe3 	bl	80100d4 <siprintf>
 800290e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8002912:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fa53 	bl	8002dc8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_CONNECTION */
     switch(Command) {
 8002922:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <ConfigCommandParsing+0xe6>
 800292a:	2b01      	cmp	r3, #1
 800292c:	d11f      	bne.n	800296e <ConfigCommandParsing+0x106>
      case 1:
        TargetBoardFeatures.LedStatus=1;
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <ConfigCommandParsing+0x144>)
 8002930:	2201      	movs	r2, #1
 8002932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOnTargetPlatform();
 8002936:	f7fd ff2b 	bl	8000790 <LedOnTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 800293a:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800293e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002942:	4619      	mov	r1, r3
 8002944:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002948:	f7ff f8c6 	bl	8001ad8 <Config_Notify>
        break;
 800294c:	e00f      	b.n	800296e <ConfigCommandParsing+0x106>
      case 0:
        TargetBoardFeatures.LedStatus=0;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <ConfigCommandParsing+0x144>)
 8002950:	2200      	movs	r2, #0
 8002952:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOffTargetPlatform();
 8002956:	f7fd ff22 	bl	800079e <LedOffTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 800295a:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800295e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002962:	4619      	mov	r1, r3
 8002964:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002968:	f7ff f8b6 	bl	8001ad8 <Config_Notify>
        break;
 800296c:	bf00      	nop
     }
     /* Update the LED feature */
     if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED)) {
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <ConfigCommandParsing+0x130>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <ConfigCommandParsing+0x122>
       LED_Update(TargetBoardFeatures.LedStatus);
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <ConfigCommandParsing+0x144>)
 8002980:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fb59 	bl	800203c <LED_Update>
     }
    break;
 800298a:	bf00      	nop
  }
}
 800298c:	bf00      	nop
 800298e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000220 	.word	0x20000220
 800299c:	08010d2c 	.word	0x08010d2c
 80029a0:	200009d8 	.word	0x200009d8
 80029a4:	20000b20 	.word	0x20000b20
 80029a8:	08010d44 	.word	0x08010d44
 80029ac:	200005f0 	.word	0x200005f0

080029b0 <HCI_Event_CB>:
*         parsed.
* @param  void *pckt Pointer to the ACI packet
* @retval None
*/
void HCI_Event_CB(void *pckt)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pckt;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3301      	adds	r3, #1
 80029c0:	623b      	str	r3, [r7, #32]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d14a      	bne.n	8002a60 <HCI_Event_CB+0xb0>
  {
    return;
  }
  
  switch(event_pckt->evt)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2bff      	cmp	r3, #255	; 0xff
 80029d0:	d01f      	beq.n	8002a12 <HCI_Event_CB+0x62>
 80029d2:	2bff      	cmp	r3, #255	; 0xff
 80029d4:	dc49      	bgt.n	8002a6a <HCI_Event_CB+0xba>
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d002      	beq.n	80029e0 <HCI_Event_CB+0x30>
 80029da:	2b3e      	cmp	r3, #62	; 0x3e
 80029dc:	d003      	beq.n	80029e6 <HCI_Event_CB+0x36>
 80029de:	e044      	b.n	8002a6a <HCI_Event_CB+0xba>
  {
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80029e0:	f7ff fc70 	bl	80022c4 <GAP_DisconnectionComplete_CB>
    }
    break;
 80029e4:	e041      	b.n	8002a6a <HCI_Event_CB+0xba>
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	3302      	adds	r3, #2
 80029ea:	613b      	str	r3, [r7, #16]
      
      switch(evt->subevent)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d137      	bne.n	8002a64 <HCI_Event_CB+0xb4>
      {
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1d5a      	adds	r2, r3, #5
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f7ff fc0b 	bl	8002224 <GAP_ConnectionComplete_CB>
        }
        break;
 8002a0e:	bf00      	nop
      }
    }
    break;
 8002a10:	e028      	b.n	8002a64 <HCI_Event_CB+0xb4>
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	3302      	adds	r3, #2
 8002a16:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f640 4201 	movw	r2, #3073	; 0xc01
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HCI_Event_CB+0x92>
 8002a26:	f640 4214 	movw	r2, #3092	; 0xc14
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11c      	bne.n	8002a68 <HCI_Event_CB+0xb8>
      {
      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data; 
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3302      	adds	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);                    
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	885b      	ldrh	r3, [r3, #2]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fc74 	bl	8002328 <Read_Request_CB>
        }
        break;
 8002a40:	e00d      	b.n	8002a5e <HCI_Event_CB+0xae>
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3302      	adds	r3, #2
 8002a46:	617b      	str	r3, [r7, #20]
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	885b      	ldrh	r3, [r3, #2]
 8002a4c:	b298      	uxth	r0, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	1dd9      	adds	r1, r3, #7
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	791b      	ldrb	r3, [r3, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff fd7a 	bl	8002550 <Attribute_Modified_CB>
        }
        break;
 8002a5c:	bf00      	nop
      }
    }
    break;
 8002a5e:	e003      	b.n	8002a68 <HCI_Event_CB+0xb8>
    return;
 8002a60:	bf00      	nop
 8002a62:	e002      	b.n	8002a6a <HCI_Event_CB+0xba>
    break;
 8002a64:	bf00      	nop
 8002a66:	e000      	b.n	8002a6a <HCI_Event_CB+0xba>
    break;
 8002a68:	bf00      	nop
  }
}
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0ac      	sub	sp, #176	; 0xb0
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2288      	movs	r2, #136	; 0x88
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00d fa5d 	bl	800ff50 <memset>
  if(huart->Instance==UART5)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a47      	ldr	r2, [pc, #284]	; (8002bb8 <HAL_UART_MspInit+0x148>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	f040 8086 	bne.w	8002bae <HAL_UART_MspInit+0x13e>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f006 ffba 	bl	8009a28 <HAL_RCCEx_PeriphCLKConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002aba:	f7fe fe67 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002abe:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aca:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4a38      	ldr	r2, [pc, #224]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aee:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	4a32      	ldr	r2, [pc, #200]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b06:	2304      	movs	r3, #4
 8002b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b1e:	2308      	movs	r3, #8
 8002b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4825      	ldr	r0, [pc, #148]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002b2c:	f003 fd7c 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b54:	4619      	mov	r1, r3
 8002b56:	481b      	ldr	r0, [pc, #108]	; (8002bc4 <HAL_UART_MspInit+0x154>)
 8002b58:	f003 fd66 	bl	8006628 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_UART_MspInit+0x15c>)
 8002b60:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b64:	2202      	movs	r2, #2
 8002b66:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b68:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b88:	2220      	movs	r2, #32
 8002b8a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002b92:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002b94:	f003 faa4 	bl	80060e0 <HAL_DMA_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002b9e:	f7fe fdf5 	bl	800178c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002ba6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002bae:	bf00      	nop
 8002bb0:	37b0      	adds	r7, #176	; 0xb0
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40005000 	.word	0x40005000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	48000c00 	.word	0x48000c00
 8002bc4:	48000800 	.word	0x48000800
 8002bc8:	20000ad8 	.word	0x20000ad8
 8002bcc:	4002041c 	.word	0x4002041c

08002bd0 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_TIM_OC_MspInit+0x38>)
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_TIM_OC_MspInit+0x38>)
 8002bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be2:	6613      	str	r3, [r2, #96]	; 0x60
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_TIM_OC_MspInit+0x38>)
 8002be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2108      	movs	r1, #8
 8002bf4:	201b      	movs	r0, #27
 8002bf6:	f003 fa22 	bl	800603e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002bfa:	201b      	movs	r0, #27
 8002bfc:	f003 fa3b 	bl	8006076 <HAL_NVIC_EnableIRQ>
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000

08002c0c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c60:	f003 f8c4 	bl	8005dec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002c64:	f003 fa2f 	bl	80060c6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <DMA2_Channel2_IRQHandler+0x10>)
 8002c72:	f003 fb8e 	bl	8006392 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000ad8 	.word	0x20000ad8

08002c80 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimCCHandle);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <TIM1_CC_IRQHandler+0x10>)
 8002c86:	f008 fc01 	bl	800b48c <HAL_TIM_IRQHandler>
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000908 	.word	0x20000908

08002c94 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti5);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <EXTI9_5_IRQHandler+0x10>)
 8002c9a:	f003 fc95 	bl	80065c8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200008f4 	.word	0x200008f4

08002ca8 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <OTG_FS_IRQHandler+0x10>)
 8002cae:	f005 fa27 	bl	8008100 <HAL_PCD_IRQHandler>
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20002374 	.word	0x20002374

08002cbc <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <TIM3_IRQHandler+0x10>)
 8002cc2:	f008 fbe3 	bl	800b48c <HAL_TIM_IRQHandler>
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20002328 	.word	0x20002328

08002cd0 <I2C3_EV_IRQHandler>:

/**
* @brief This function handles I2C3 event interrupt.
*/
void I2C3_EV_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hbusi2c3);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <I2C3_EV_IRQHandler+0x10>)
 8002cd6:	f004 fa75 	bl	80071c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000277c 	.word	0x2000277c

08002ce4 <I2C3_ER_IRQHandler>:

/**
* @brief This function handles I2C3 error interrupt.
*/
void I2C3_ER_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hbusi2c3);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <I2C3_ER_IRQHandler+0x10>)
 8002cea:	f004 fa85 	bl	80071f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2000277c 	.word	0x2000277c

08002cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <_sbrk+0x5c>)
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <_sbrk+0x60>)
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <_sbrk+0x64>)
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <_sbrk+0x68>)
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <_sbrk+0x64>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d207      	bcs.n	8002d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d28:	f00d f8da 	bl	800fee0 <__errno>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	220c      	movs	r2, #12
 8002d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d36:	e009      	b.n	8002d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <_sbrk+0x64>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <_sbrk+0x64>)
 8002d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20018000 	.word	0x20018000
 8002d58:	00000400 	.word	0x00000400
 8002d5c:	2000026c 	.word	0x2000026c
 8002d60:	200028c0 	.word	0x200028c0

08002d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <SystemInit+0x5c>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <SystemInit+0x5c>)
 8002d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <SystemInit+0x60>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <SystemInit+0x60>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <SystemInit+0x60>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <SystemInit+0x60>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <SystemInit+0x60>)
 8002d90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <SystemInit+0x60>)
 8002d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002da0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <SystemInit+0x60>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <SystemInit+0x60>)
 8002da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <SystemInit+0x60>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <CDC_Fill_Buffer>:
  * @param  Buf: pointer to the tx buffer
  * @param  TotalLen: number of bytes to be sent
  * @retval Result of the operation: USBD_OK if all operations are OK
  */
uint8_t CDC_Fill_Buffer(uint8_t* Buf, uint32_t TotalLen)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint16_t i;
  
  for (i = 0; i < TotalLen; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	81fb      	strh	r3, [r7, #14]
 8002dd6:	e011      	b.n	8002dfc <CDC_Fill_Buffer+0x34>
  {
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 8002dd8:	89fb      	ldrh	r3, [r7, #14]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	441a      	add	r2, r3
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <CDC_Fill_Buffer+0x4c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	7811      	ldrb	r1, [r2, #0]
 8002de4:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <CDC_Fill_Buffer+0x50>)
 8002de6:	54d1      	strb	r1, [r2, r3]
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <CDC_Fill_Buffer+0x4c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <CDC_Fill_Buffer+0x4c>)
 8002df4:	6013      	str	r3, [r2, #0]
  for (i = 0; i < TotalLen; i++)
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	81fb      	strh	r3, [r7, #14]
 8002dfc:	89fb      	ldrh	r3, [r7, #14]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d8e9      	bhi.n	8002dd8 <CDC_Fill_Buffer+0x10>
  }
  return (USBD_OK);
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000270 	.word	0x20000270
 8002e18:	20001328 	.word	0x20001328

08002e1c <CDC_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void CDC_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;
  
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d030      	beq.n	8002e92 <CDC_TIM_PeriodElapsedCallback+0x76>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d905      	bls.n	8002e48 <CDC_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e005      	b.n	8002e54 <CDC_TIM_PeriodElapsedCallback+0x38>
    }
    else 
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	60fb      	str	r3, [r7, #12]
    }
    
    buffptr = UserTxBufPtrOut;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]
    
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <CDC_TIM_PeriodElapsedCallback+0x88>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4619      	mov	r1, r3
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8002e66:	f00a fe0d 	bl	800da84 <USBD_CDC_SetTxBuffer>
    
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8002e6a:	480f      	ldr	r0, [pc, #60]	; (8002ea8 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8002e6c:	f00a fe28 	bl	800dac0 <USBD_CDC_TransmitPacket>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <CDC_TIM_PeriodElapsedCallback+0x76>
    {
      UserTxBufPtrOut += buffsize;
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e80:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8a:	d102      	bne.n	8002e92 <CDC_TIM_PeriodElapsedCallback+0x76>
      {
        UserTxBufPtrOut = 0;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000274 	.word	0x20000274
 8002ea0:	20000270 	.word	0x20000270
 8002ea4:	20001328 	.word	0x20001328
 8002ea8:	20000624 	.word	0x20000624

08002eac <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f00a fe6b 	bl	800db9e <USBD_LL_SetupStage>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f00a fea5 	bl	800dc48 <USBD_LL_DataOutStage>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3348      	adds	r3, #72	; 0x48
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f00a feee 	bl	800dd0e <USBD_LL_DataInStage>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f00b f802 	bl	800df52 <USBD_LL_SOF>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f64:	4618      	mov	r0, r3
 8002f66:	f00a ff68 	bl	800de3a <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f00a ffaf 	bl	800ded6 <USBD_LL_SetSpeed>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f00a ffb1 	bl	800def6 <USBD_LL_Suspend>
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002faa:	4618      	mov	r0, r3
 8002fac:	f00a ffb9 	bl	800df22 <USBD_LL_Resume>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00b f807 	bl	800dfe2 <USBD_LL_IsoOUTIncomplete>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f00a ffcf 	bl	800df96 <USBD_LL_IsoINIncomplete>
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800300e:	4618      	mov	r0, r3
 8003010:	f00b f80d 	bl	800e02e <USBD_LL_DevConnected>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800302a:	4618      	mov	r0, r3
 800302c:	f00b f80a 	bl	800e044 <USBD_LL_DevDisconnected>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	4608      	mov	r0, r1
 8003042:	4611      	mov	r1, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4603      	mov	r3, r0
 8003048:	70fb      	strb	r3, [r7, #3]
 800304a:	460b      	mov	r3, r1
 800304c:	70bb      	strb	r3, [r7, #2]
 800304e:	4613      	mov	r3, r2
 8003050:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003058:	78bb      	ldrb	r3, [r7, #2]
 800305a:	883a      	ldrh	r2, [r7, #0]
 800305c:	78f9      	ldrb	r1, [r7, #3]
 800305e:	f005 fc18 	bl	8008892 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f005 fce8 	bl	8008a58 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f005 fd37 	bl	8008b1c <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80030ca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80030cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da0b      	bge.n	80030ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	333e      	adds	r3, #62	; 0x3e
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	e00b      	b.n	8003104 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003102:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f005 fb8e 	bl	8008848 <HAL_PCD_SetAddress>
  return USBD_OK; 
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	460b      	mov	r3, r1
 8003144:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800314c:	7af9      	ldrb	r1, [r7, #11]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	f005 fc44 	bl	80089de <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	460b      	mov	r3, r1
 800316e:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003176:	7af9      	ldrb	r1, [r7, #11]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	f005 fbf1 	bl	8008962 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800318c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003190:	f7ff fde8 	bl	8002d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003194:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003196:	e003      	b.n	80031a0 <LoopCopyDataInit>

08003198 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800319a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800319c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800319e:	3104      	adds	r1, #4

080031a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031a0:	480a      	ldr	r0, [pc, #40]	; (80031cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031a8:	d3f6      	bcc.n	8003198 <CopyDataInit>
	ldr	r2, =_sbss
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031ac:	e002      	b.n	80031b4 <LoopFillZerobss>

080031ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031b0:	f842 3b04 	str.w	r3, [r2], #4

080031b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <LoopForever+0x16>)
	cmp	r2, r3
 80031b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031b8:	d3f9      	bcc.n	80031ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ba:	f00c fe97 	bl	800feec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031be:	f7fd fca1 	bl	8000b04 <main>

080031c2 <LoopForever>:

LoopForever:
    b LoopForever
 80031c2:	e7fe      	b.n	80031c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80031c8:	08010df0 	.word	0x08010df0
	ldr	r0, =_sdata
 80031cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80031d0:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 80031d4:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 80031d8:	200028bc 	.word	0x200028bc

080031dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031dc:	e7fe      	b.n	80031dc <ADC1_2_IRQHandler>
	...

080031e0 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e030      	b.n	800325a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	7b1a      	ldrb	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HTS221_RegisterBusIO+0x84>)
 8003234:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <HTS221_RegisterBusIO+0x88>)
 800323a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4798      	blx	r3
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	e002      	b.n	800325a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8003254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003258:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08003897 	.word	0x08003897
 8003268:	080038f9 	.word	0x080038f9

0800326c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 faa4 	bl	80037cc <HTS221_Initialize>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800328e:	e004      	b.n	800329a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d111      	bne.n	80032d8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f878 	bl	80033aa <HTS221_HUM_Disable>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032c4:	e00d      	b.n	80032e2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f95f 	bl	800358a <HTS221_TEMP_Disable>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d6:	e004      	b.n	80032e2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	331c      	adds	r3, #28
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fc28 	bl	8003b50 <hts221_device_id_get>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800330a:	e000      	b.n	800330e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	4a07      	ldr	r2, [pc, #28]	; (800335c <HTS221_GetCapabilities+0x44>)
 800333e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4a06      	ldr	r2, [pc, #24]	; (800335c <HTS221_GetCapabilities+0x44>)
 8003344:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	41480000 	.word	0x41480000

08003360 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e015      	b.n	80033a2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	331c      	adds	r3, #28
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fbf3 	bl	8003b72 <hts221_power_on_set>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003396:	e004      	b.n	80033a2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e015      	b.n	80033ec <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	331c      	adds	r3, #28
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fbce 	bl	8003b72 <hts221_power_on_set>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e0:	e004      	b.n	80033ec <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f96f 	bl	80036e4 <HTS221_GetOutputDataRate>
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800341c:	ed97 0a00 	vldr	s0, [r7]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9a3 	bl	800376c <HTS221_SetOutputDataRate>
 8003426:	4603      	mov	r3, r0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	331c      	adds	r3, #28
 800343e:	f107 020c 	add.w	r2, r7, #12
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fc58 	bl	8003cfa <hts221_hum_adc_point_0_get>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003454:	e06b      	b.n	800352e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f103 021c 	add.w	r2, r3, #28
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	3304      	adds	r3, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f000 fbaa 	bl	8003bbe <hts221_hum_rh_point_0_get>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003474:	e05b      	b.n	800352e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f103 021c 	add.w	r2, r3, #28
 800347c:	f107 030c 	add.w	r3, r7, #12
 8003480:	3308      	adds	r3, #8
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f000 fc5c 	bl	8003d42 <hts221_hum_adc_point_1_get>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003494:	e04b      	b.n	800352e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f103 021c 	add.w	r2, r3, #28
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	330c      	adds	r3, #12
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f000 fba8 	bl	8003bfa <hts221_hum_rh_point_1_get>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034b4:	e03b      	b.n	800352e <HTS221_HUM_GetHumidity+0xfe>
 80034b6:	2300      	movs	r3, #0
 80034b8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	331c      	adds	r3, #28
 80034be:	f107 021c 	add.w	r2, r7, #28
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fafd 	bl	8003ac4 <hts221_humidity_raw_get>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034d4:	e02b      	b.n	800352e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80034d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e2:	f107 030c 	add.w	r3, r7, #12
 80034e6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f99a 	bl	8003824 <Linear_Interpolation>
 80034f0:	eef0 7a40 	vmov.f32	s15, s0
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003508:	d503      	bpl.n	8003512 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003538 <HTS221_HUM_GetHumidity+0x108>
 800351c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003524:	dd02      	ble.n	800352c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HTS221_HUM_GetHumidity+0x10c>)
 800352a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	42c80000 	.word	0x42c80000
 800353c:	42c80000 	.word	0x42c80000

08003540 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e015      	b.n	8003582 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	331c      	adds	r3, #28
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fb03 	bl	8003b72 <hts221_power_on_set>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003576:	e004      	b.n	8003582 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e015      	b.n	80035cc <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	331c      	adds	r3, #28
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fade 	bl	8003b72 <hts221_power_on_set>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c0:	e004      	b.n	80035cc <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f87f 	bl	80036e4 <HTS221_GetOutputDataRate>
 80035e6:	4603      	mov	r3, r0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80035fc:	ed97 0a00 	vldr	s0, [r7]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8b3 	bl	800376c <HTS221_SetOutputDataRate>
 8003606:	4603      	mov	r3, r0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	331c      	adds	r3, #28
 800361e:	f107 020c 	add.w	r2, r7, #12
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fbb0 	bl	8003d8a <hts221_temp_adc_point_0_get>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003634:	e052      	b.n	80036dc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 021c 	add.w	r2, r3, #28
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	3304      	adds	r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f000 faf6 	bl	8003c36 <hts221_temp_deg_point_0_get>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003654:	e042      	b.n	80036dc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 021c 	add.w	r2, r3, #28
 800365c:	f107 030c 	add.w	r3, r7, #12
 8003660:	3308      	adds	r3, #8
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f000 fbb4 	bl	8003dd2 <hts221_temp_adc_point_1_get>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003674:	e032      	b.n	80036dc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f103 021c 	add.w	r2, r3, #28
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	330c      	adds	r3, #12
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 fb07 	bl	8003c98 <hts221_temp_deg_point_1_get>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003694:	e022      	b.n	80036dc <HTS221_TEMP_GetTemperature+0xcc>
 8003696:	2300      	movs	r3, #0
 8003698:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	331c      	adds	r3, #28
 800369e:	f107 021c 	add.w	r2, r7, #28
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fa30 	bl	8003b0a <hts221_temperature_raw_get>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036b4:	e012      	b.n	80036dc <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80036b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f8aa 	bl	8003824 <Linear_Interpolation>
 80036d0:	eef0 7a40 	vmov.f32	s15, s0
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	331c      	adds	r3, #28
 80036f6:	f107 020b 	add.w	r2, r7, #11
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f983 	bl	8003a08 <hts221_data_rate_get>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800370c:	e025      	b.n	800375a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d81d      	bhi.n	8003750 <HTS221_GetOutputDataRate+0x6c>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HTS221_GetOutputDataRate+0x38>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	0800372d 	.word	0x0800372d
 8003720:	08003737 	.word	0x08003737
 8003724:	08003741 	.word	0x08003741
 8003728:	08003749 	.word	0x08003749
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
      break;
 8003734:	e010      	b.n	8003758 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800373c:	601a      	str	r2, [r3, #0]
      break;
 800373e:	e00b      	b.n	8003758 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <HTS221_GetOutputDataRate+0x80>)
 8003744:	601a      	str	r2, [r3, #0]
      break;
 8003746:	e007      	b.n	8003758 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HTS221_GetOutputDataRate+0x84>)
 800374c:	601a      	str	r2, [r3, #0]
      break;
 800374e:	e003      	b.n	8003758 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003754:	60fb      	str	r3, [r7, #12]
      break;
 8003756:	bf00      	nop
  }

  return ret;
 8003758:	68fb      	ldr	r3, [r7, #12]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40e00000 	.word	0x40e00000
 8003768:	41480000 	.word	0x41480000

0800376c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003778:	edd7 7a00 	vldr	s15, [r7]
 800377c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003788:	d801      	bhi.n	800378e <HTS221_SetOutputDataRate+0x22>
 800378a:	2301      	movs	r3, #1
 800378c:	e00b      	b.n	80037a6 <HTS221_SetOutputDataRate+0x3a>
 800378e:	edd7 7a00 	vldr	s15, [r7]
 8003792:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	d801      	bhi.n	80037a4 <HTS221_SetOutputDataRate+0x38>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e000      	b.n	80037a6 <HTS221_SetOutputDataRate+0x3a>
 80037a4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80037a6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	331c      	adds	r3, #28
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f902 	bl	80039ba <hts221_data_rate_set>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c0:	e000      	b.n	80037c4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	331c      	adds	r3, #28
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f9c9 	bl	8003b72 <hts221_power_on_set>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ea:	e017      	b.n	800381c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	331c      	adds	r3, #28
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f940 	bl	8003a78 <hts221_block_data_update_set>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003802:	e00b      	b.n	800381c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003804:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ffaf 	bl	800376c <HTS221_SetOutputDataRate>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003818:	e000      	b.n	800381c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	ed93 7a03 	vldr	s14, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	edd3 7a01 	vldr	s15, [r3, #4]
 800383c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003840:	edd7 7a00 	vldr	s15, [r7]
 8003844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	edd3 6a02 	vldr	s13, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	edd3 7a01 	vldr	s15, [r3, #4]
 8003854:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	ed93 6a00 	vldr	s12, [r3]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	edd3 7a03 	vldr	s15, [r3, #12]
 8003864:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003868:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800386c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	edd3 6a02 	vldr	s13, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003880:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003884:	eef0 7a66 	vmov.f32	s15, s13
}
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003896:	b590      	push	{r4, r7, lr}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	461a      	mov	r2, r3
 80038a2:	460b      	mov	r3, r1
 80038a4:	72fb      	strb	r3, [r7, #11]
 80038a6:	4613      	mov	r3, r2
 80038a8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10e      	bne.n	80038d4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	695c      	ldr	r4, [r3, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	7b1b      	ldrb	r3, [r3, #12]
 80038be:	b298      	uxth	r0, r3
 80038c0:	7afb      	ldrb	r3, [r7, #11]
 80038c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	b299      	uxth	r1, r3
 80038ca:	893b      	ldrh	r3, [r7, #8]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	47a0      	blx	r4
 80038d0:	4603      	mov	r3, r0
 80038d2:	e00d      	b.n	80038f0 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	695c      	ldr	r4, [r3, #20]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	7b1b      	ldrb	r3, [r3, #12]
 80038dc:	b298      	uxth	r0, r3
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	b299      	uxth	r1, r3
 80038e8:	893b      	ldrh	r3, [r7, #8]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	47a0      	blx	r4
 80038ee:	4603      	mov	r3, r0
  }
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	460b      	mov	r3, r1
 8003906:	72fb      	strb	r3, [r7, #11]
 8003908:	4613      	mov	r3, r2
 800390a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10e      	bne.n	8003936 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	691c      	ldr	r4, [r3, #16]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	7b1b      	ldrb	r3, [r3, #12]
 8003920:	b298      	uxth	r0, r3
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	b299      	uxth	r1, r3
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	47a0      	blx	r4
 8003932:	4603      	mov	r3, r0
 8003934:	e00d      	b.n	8003952 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	691c      	ldr	r4, [r3, #16]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	7b1b      	ldrb	r3, [r3, #12]
 800393e:	b298      	uxth	r0, r3
 8003940:	7afb      	ldrb	r3, [r7, #11]
 8003942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003946:	b2db      	uxtb	r3, r3
 8003948:	b299      	uxth	r1, r3
 800394a:	893b      	ldrh	r3, [r7, #8]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	47a0      	blx	r4
 8003950:	4603      	mov	r3, r0
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bd90      	pop	{r4, r7, pc}

0800395a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800395a:	b590      	push	{r4, r7, lr}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	461a      	mov	r2, r3
 8003966:	460b      	mov	r3, r1
 8003968:	72fb      	strb	r3, [r7, #11]
 800396a:	4613      	mov	r3, r2
 800396c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685c      	ldr	r4, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6898      	ldr	r0, [r3, #8]
 8003976:	893b      	ldrh	r3, [r7, #8]
 8003978:	7af9      	ldrb	r1, [r7, #11]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	47a0      	blx	r4
 800397e:	6178      	str	r0, [r7, #20]
  return ret;
 8003980:	697b      	ldr	r3, [r7, #20]
}
 8003982:	4618      	mov	r0, r3
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}

0800398a <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800398a:	b590      	push	{r4, r7, lr}
 800398c:	b087      	sub	sp, #28
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	461a      	mov	r2, r3
 8003996:	460b      	mov	r3, r1
 8003998:	72fb      	strb	r3, [r7, #11]
 800399a:	4613      	mov	r3, r2
 800399c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681c      	ldr	r4, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6898      	ldr	r0, [r3, #8]
 80039a6:	893b      	ldrh	r3, [r7, #8]
 80039a8:	7af9      	ldrb	r1, [r7, #11]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	47a0      	blx	r4
 80039ae:	6178      	str	r0, [r7, #20]
  return ret;
 80039b0:	697b      	ldr	r3, [r7, #20]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}

080039ba <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80039c6:	f107 0208 	add.w	r2, r7, #8
 80039ca:	2301      	movs	r3, #1
 80039cc:	2120      	movs	r1, #32
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffc3 	bl	800395a <hts221_read_reg>
 80039d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10f      	bne.n	80039fc <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	7a3b      	ldrb	r3, [r7, #8]
 80039e6:	f362 0301 	bfi	r3, r2, #0, #2
 80039ea:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80039ec:	f107 0208 	add.w	r2, r7, #8
 80039f0:	2301      	movs	r3, #1
 80039f2:	2120      	movs	r1, #32
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ffc8 	bl	800398a <hts221_write_reg>
 80039fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039fc:	68fb      	ldr	r3, [r7, #12]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003a12:	f107 0208 	add.w	r2, r7, #8
 8003a16:	2301      	movs	r3, #1
 8003a18:	2120      	movs	r1, #32
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ff9d 	bl	800395a <hts221_read_reg>
 8003a20:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003a22:	7a3b      	ldrb	r3, [r7, #8]
 8003a24:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d81a      	bhi.n	8003a64 <hts221_data_rate_get+0x5c>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <hts221_data_rate_get+0x2c>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003a4d 	.word	0x08003a4d
 8003a3c:	08003a55 	.word	0x08003a55
 8003a40:	08003a5d 	.word	0x08003a5d
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
      break;
 8003a4a:	e00f      	b.n	8003a6c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
      break;
 8003a52:	e00b      	b.n	8003a6c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]
      break;
 8003a5a:	e007      	b.n	8003a6c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	701a      	strb	r2, [r3, #0]
      break;
 8003a62:	e003      	b.n	8003a6c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2204      	movs	r2, #4
 8003a68:	701a      	strb	r2, [r3, #0]
      break;
 8003a6a:	bf00      	nop
  }

  return ret;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop

08003a78 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003a84:	f107 0208 	add.w	r2, r7, #8
 8003a88:	2301      	movs	r3, #1
 8003a8a:	2120      	movs	r1, #32
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff64 	bl	800395a <hts221_read_reg>
 8003a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	7a3b      	ldrb	r3, [r7, #8]
 8003aa4:	f362 0382 	bfi	r3, r2, #2, #1
 8003aa8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003aaa:	f107 0208 	add.w	r2, r7, #8
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ff69 	bl	800398a <hts221_write_reg>
 8003ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003ace:	f107 0208 	add.w	r2, r7, #8
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	2128      	movs	r1, #40	; 0x28
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff3f 	bl	800395a <hts221_read_reg>
 8003adc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003ade:	7a7b      	ldrb	r3, [r7, #9]
 8003ae0:	b21a      	sxth	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	7a3b      	ldrb	r3, [r7, #8]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	b21a      	sxth	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	801a      	strh	r2, [r3, #0]
  return ret;
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003b14:	f107 0208 	add.w	r2, r7, #8
 8003b18:	2302      	movs	r3, #2
 8003b1a:	212a      	movs	r1, #42	; 0x2a
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff1c 	bl	800395a <hts221_read_reg>
 8003b22:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003b24:	7a7b      	ldrb	r3, [r7, #9]
 8003b26:	b21a      	sxth	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	7a3b      	ldrb	r3, [r7, #8]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	b21a      	sxth	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	801a      	strh	r2, [r3, #0]
  return ret;
 8003b46:	68fb      	ldr	r3, [r7, #12]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	210f      	movs	r1, #15
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fefa 	bl	800395a <hts221_read_reg>
 8003b66:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b68:	68fb      	ldr	r3, [r7, #12]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003b7e:	f107 0208 	add.w	r2, r7, #8
 8003b82:	2301      	movs	r3, #1
 8003b84:	2120      	movs	r1, #32
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fee7 	bl	800395a <hts221_read_reg>
 8003b8c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10f      	bne.n	8003bb4 <hts221_power_on_set+0x42>
    reg.pd = val;
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	7a3b      	ldrb	r3, [r7, #8]
 8003b9e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003ba2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003ba4:	f107 0208 	add.w	r2, r7, #8
 8003ba8:	2301      	movs	r3, #1
 8003baa:	2120      	movs	r1, #32
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff feec 	bl	800398a <hts221_write_reg>
 8003bb2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003bc8:	f107 020b 	add.w	r2, r7, #11
 8003bcc:	2301      	movs	r3, #1
 8003bce:	2130      	movs	r1, #48	; 0x30
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fec2 	bl	800395a <hts221_read_reg>
 8003bd6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003be2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003c04:	f107 020b 	add.w	r2, r7, #11
 8003c08:	2301      	movs	r3, #1
 8003c0a:	2131      	movs	r1, #49	; 0x31
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fea4 	bl	800395a <hts221_read_reg>
 8003c12:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003c40:	f107 020f 	add.w	r2, r7, #15
 8003c44:	2301      	movs	r3, #1
 8003c46:	2132      	movs	r1, #50	; 0x32
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff fe86 	bl	800395a <hts221_read_reg>
 8003c4e:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11b      	bne.n	8003c8e <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003c56:	f107 0210 	add.w	r2, r7, #16
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	2135      	movs	r1, #53	; 0x35
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fe7b 	bl	800395a <hts221_read_reg>
 8003c64:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003c66:	7c3b      	ldrb	r3, [r7, #16]
 8003c68:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	4413      	add	r3, r2
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c80:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003c8e:	697b      	ldr	r3, [r7, #20]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003ca2:	f107 020f 	add.w	r2, r7, #15
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	2133      	movs	r1, #51	; 0x33
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fe55 	bl	800395a <hts221_read_reg>
 8003cb0:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11b      	bne.n	8003cf0 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003cb8:	f107 0210 	add.w	r2, r7, #16
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	2135      	movs	r1, #53	; 0x35
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fe4a 	bl	800395a <hts221_read_reg>
 8003cc6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003cc8:	7c3b      	ldrb	r3, [r7, #16]
 8003cca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	4413      	add	r3, r2
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ce2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003cf0:	697b      	ldr	r3, [r7, #20]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003d04:	f107 0208 	add.w	r2, r7, #8
 8003d08:	2302      	movs	r3, #2
 8003d0a:	2136      	movs	r1, #54	; 0x36
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fe24 	bl	800395a <hts221_read_reg>
 8003d12:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003d14:	7a7b      	ldrb	r3, [r7, #9]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	7a3b      	ldrb	r3, [r7, #8]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003d26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003d38:	68fb      	ldr	r3, [r7, #12]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003d4c:	f107 0208 	add.w	r2, r7, #8
 8003d50:	2302      	movs	r3, #2
 8003d52:	213a      	movs	r1, #58	; 0x3a
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fe00 	bl	800395a <hts221_read_reg>
 8003d5a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003d5c:	7a7b      	ldrb	r3, [r7, #9]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	7a3b      	ldrb	r3, [r7, #8]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003d6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003d80:	68fb      	ldr	r3, [r7, #12]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003d94:	f107 0208 	add.w	r2, r7, #8
 8003d98:	2302      	movs	r3, #2
 8003d9a:	213c      	movs	r1, #60	; 0x3c
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fddc 	bl	800395a <hts221_read_reg>
 8003da2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003da4:	7a7b      	ldrb	r3, [r7, #9]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	7a3b      	ldrb	r3, [r7, #8]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003db6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003ddc:	f107 0208 	add.w	r2, r7, #8
 8003de0:	2302      	movs	r3, #2
 8003de2:	213e      	movs	r1, #62	; 0x3e
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fdb8 	bl	800395a <hts221_read_reg>
 8003dea:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003dec:	7a7b      	ldrb	r3, [r7, #9]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	7a3b      	ldrb	r3, [r7, #8]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003dfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d103      	bne.n	8003e38 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8003e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e04d      	b.n	8003ed4 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	7b1a      	ldrb	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <LPS22HB_RegisterBusIO+0xc4>)
 8003e74:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <LPS22HB_RegisterBusIO+0xc8>)
 8003e7a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e020      	b.n	8003ed4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4798      	blx	r3
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e016      	b.n	8003ed4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d112      	bne.n	8003ed4 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10d      	bne.n	8003ed4 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f9df 	bl	8004286 <LPS22HB_Write_Reg>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ed2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	08004547 	.word	0x08004547
 8003ee4:	080045cd 	.word	0x080045cd

08003ee8 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 faca 	bl	8004494 <LPS22HB_Initialize>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f0a:	e004      	b.n	8003f16 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d111      	bne.n	8003f54 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f877 	bl	8004024 <LPS22HB_PRESS_Disable>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f40:	e00d      	b.n	8003f5e <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f918 	bl	8004178 <LPS22HB_TEMP_Disable>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f52:	e004      	b.n	8003f5e <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	331c      	adds	r3, #28
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fcd0 	bl	800491c <lps22hb_device_id_get>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f86:	e000      	b.n	8003f8a <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <LPS22HB_GetCapabilities+0x44>)
 8003fc2:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <LPS22HB_GetCapabilities+0x44>)
 8003fc8:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	42960000 	.word	0x42960000

08003fdc <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e014      	b.n	800401c <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f103 021c 	add.w	r2, r3, #28
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f000 fbd5 	bl	80047b0 <lps22hb_data_rate_set>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004010:	e004      	b.n	800401c <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e024      	b.n	8004084 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004040:	2b00      	cmp	r3, #0
 8004042:	d11a      	bne.n	800407a <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f103 021c 	add.w	r2, r3, #28
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	332b      	adds	r3, #43	; 0x2b
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 fbd3 	bl	80047fc <lps22hb_data_rate_get>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 800405c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004060:	e010      	b.n	8004084 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	331c      	adds	r3, #28
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fba1 	bl	80047b0 <lps22hb_data_rate_set>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004078:	e004      	b.n	8004084 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f90f 	bl	80042bc <LPS22HB_GetOutputDataRate>
 800409e:	4603      	mov	r3, r0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d106      	bne.n	80040cc <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80040be:	ed97 0a00 	vldr	s0, [r7]
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f94e 	bl	8004364 <LPS22HB_SetOutputDataRate_When_Enabled>
 80040c8:	4603      	mov	r3, r0
 80040ca:	e005      	b.n	80040d8 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80040cc:	ed97 0a00 	vldr	s0, [r7]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f99f 	bl	8004414 <LPS22HB_SetOutputDataRate_When_Disabled>
 80040d6:	4603      	mov	r3, r0
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	2204      	movs	r2, #4
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f00b ff2c 	bl	800ff50 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	331c      	adds	r3, #28
 80040fc:	f107 020c 	add.w	r2, r7, #12
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fbbe 	bl	8004884 <lps22hb_pressure_raw_get>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004112:	e009      	b.n	8004128 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 facc 	bl	80046b4 <lps22hb_from_lsb_to_hpa>
 800411c:	eef0 7a40 	vmov.f32	s15, s0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e014      	b.n	8004170 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f103 021c 	add.w	r2, r3, #28
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 fb2b 	bl	80047b0 <lps22hb_data_rate_set>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	e004      	b.n	8004170 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e024      	b.n	80041d8 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004194:	2b00      	cmp	r3, #0
 8004196:	d11a      	bne.n	80041ce <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f103 021c 	add.w	r2, r3, #28
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	332b      	adds	r3, #43	; 0x2b
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 fb29 	bl	80047fc <lps22hb_data_rate_get>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041b4:	e010      	b.n	80041d8 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	331c      	adds	r3, #28
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 faf7 	bl	80047b0 <lps22hb_data_rate_set>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041cc:	e004      	b.n	80041d8 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80041ea:	6839      	ldr	r1, [r7, #0]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f865 	bl	80042bc <LPS22HB_GetOutputDataRate>
 80041f2:	4603      	mov	r3, r0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800420e:	2b01      	cmp	r3, #1
 8004210:	d106      	bne.n	8004220 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004212:	ed97 0a00 	vldr	s0, [r7]
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8a4 	bl	8004364 <LPS22HB_SetOutputDataRate_When_Enabled>
 800421c:	4603      	mov	r3, r0
 800421e:	e005      	b.n	800422c <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004220:	ed97 0a00 	vldr	s0, [r7]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8f5 	bl	8004414 <LPS22HB_SetOutputDataRate_When_Disabled>
 800422a:	4603      	mov	r3, r0
  }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	2202      	movs	r2, #2
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f00b fe82 	bl	800ff50 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	331c      	adds	r3, #28
 8004250:	f107 020c 	add.w	r2, r7, #12
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fb3d 	bl	80048d6 <lps22hb_temperature_raw_get>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004266:	e00a      	b.n	800427e <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8004268:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fa39 	bl	80046e4 <lps22hb_from_lsb_to_degc>
 8004272:	eef0 7a40 	vmov.f32	s15, s0
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	70fb      	strb	r3, [r7, #3]
 8004292:	4613      	mov	r3, r2
 8004294:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f103 001c 	add.w	r0, r3, #28
 800429c:	1cba      	adds	r2, r7, #2
 800429e:	78f9      	ldrb	r1, [r7, #3]
 80042a0:	2301      	movs	r3, #1
 80042a2:	f000 f9ee 	bl	8004682 <lps22hb_write_reg>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b0:	e000      	b.n	80042b4 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	331c      	adds	r3, #28
 80042ce:	f107 020b 	add.w	r2, r7, #11
 80042d2:	4611      	mov	r1, r2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fa91 	bl	80047fc <lps22hb_data_rate_get>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042e4:	e031      	b.n	800434a <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d829      	bhi.n	8004340 <LPS22HB_GetOutputDataRate+0x84>
 80042ec:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <LPS22HB_GetOutputDataRate+0x38>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	0800430d 	.word	0x0800430d
 80042f8:	08004317 	.word	0x08004317
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	08004339 	.word	0x08004339
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
      break;
 8004314:	e018      	b.n	8004348 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800431c:	601a      	str	r2, [r3, #0]
      break;
 800431e:	e013      	b.n	8004348 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <LPS22HB_GetOutputDataRate+0x98>)
 8004324:	601a      	str	r2, [r3, #0]
      break;
 8004326:	e00f      	b.n	8004348 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <LPS22HB_GetOutputDataRate+0x9c>)
 800432c:	601a      	str	r2, [r3, #0]
      break;
 800432e:	e00b      	b.n	8004348 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <LPS22HB_GetOutputDataRate+0xa0>)
 8004334:	601a      	str	r2, [r3, #0]
      break;
 8004336:	e007      	b.n	8004348 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <LPS22HB_GetOutputDataRate+0xa4>)
 800433c:	601a      	str	r2, [r3, #0]
      break;
 800433e:	e003      	b.n	8004348 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004344:	60fb      	str	r3, [r7, #12]
      break;
 8004346:	bf00      	nop
  }

  return ret;
 8004348:	68fb      	ldr	r3, [r7, #12]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	41200000 	.word	0x41200000
 8004358:	41c80000 	.word	0x41c80000
 800435c:	42480000 	.word	0x42480000
 8004360:	42960000 	.word	0x42960000

08004364 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004370:	edd7 7a00 	vldr	s15, [r7]
 8004374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004380:	d801      	bhi.n	8004386 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8004382:	2301      	movs	r3, #1
 8004384:	e021      	b.n	80043ca <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004386:	edd7 7a00 	vldr	s15, [r7]
 800438a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800438e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d801      	bhi.n	800439c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8004398:	2302      	movs	r3, #2
 800439a:	e016      	b.n	80043ca <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800439c:	edd7 7a00 	vldr	s15, [r7]
 80043a0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80043a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ac:	d801      	bhi.n	80043b2 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e00b      	b.n	80043ca <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80043b2:	edd7 7a00 	vldr	s15, [r7]
 80043b6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004410 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 80043ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d801      	bhi.n	80043c8 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80043c4:	2304      	movs	r3, #4
 80043c6:	e000      	b.n	80043ca <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80043c8:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80043ca:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	331c      	adds	r3, #28
 80043d0:	7bfa      	ldrb	r2, [r7, #15]
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f9eb 	bl	80047b0 <lps22hb_data_rate_set>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e4:	e00f      	b.n	8004406 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f103 021c 	add.w	r2, r3, #28
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	332b      	adds	r3, #43	; 0x2b
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 fa02 	bl	80047fc <lps22hb_data_rate_get>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004402:	e000      	b.n	8004406 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	42480000 	.word	0x42480000

08004414 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004420:	edd7 7a00 	vldr	s15, [r7]
 8004424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004430:	d801      	bhi.n	8004436 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8004432:	2301      	movs	r3, #1
 8004434:	e021      	b.n	800447a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004436:	edd7 7a00 	vldr	s15, [r7]
 800443a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800443e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004446:	d801      	bhi.n	800444c <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8004448:	2302      	movs	r3, #2
 800444a:	e016      	b.n	800447a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800444c:	edd7 7a00 	vldr	s15, [r7]
 8004450:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445c:	d801      	bhi.n	8004462 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800445e:	2303      	movs	r3, #3
 8004460:	e00b      	b.n	800447a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004462:	edd7 7a00 	vldr	s15, [r7]
 8004466:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004490 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 800446a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004472:	d801      	bhi.n	8004478 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004474:	2304      	movs	r3, #4
 8004476:	e000      	b.n	800447a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004478:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	42480000 	.word	0x42480000

08004494 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	331c      	adds	r3, #28
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fa71 	bl	800498a <lps22hb_low_power_set>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044b2:	e044      	b.n	800453e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	331c      	adds	r3, #28
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f978 	bl	80047b0 <lps22hb_data_rate_set>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80044c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ca:	e038      	b.n	800453e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	331c      	adds	r3, #28
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f946 	bl	8004764 <lps22hb_low_pass_filter_mode_set>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044e2:	e02c      	b.n	800453e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	331c      	adds	r3, #28
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f914 	bl	8004718 <lps22hb_block_data_update_set>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044fa:	e020      	b.n	800453e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	331c      	adds	r3, #28
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fa89 	bl	8004a22 <lps22hb_auto_add_inc_set>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800451a:	e010      	b.n	800453e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	331c      	adds	r3, #28
 8004520:	2101      	movs	r1, #1
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fa7d 	bl	8004a22 <lps22hb_auto_add_inc_set>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004532:	e004      	b.n	800453e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2203      	movs	r2, #3
 8004538:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004546:	b590      	push	{r4, r7, lr}
 8004548:	b089      	sub	sp, #36	; 0x24
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	461a      	mov	r2, r3
 8004552:	460b      	mov	r3, r1
 8004554:	72fb      	strb	r3, [r7, #11]
 8004556:	4613      	mov	r3, r2
 8004558:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d121      	bne.n	80045ae <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	83fb      	strh	r3, [r7, #30]
 800456e:	e018      	b.n	80045a2 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	695c      	ldr	r4, [r3, #20]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	7b1b      	ldrb	r3, [r3, #12]
 8004578:	b298      	uxth	r0, r3
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	b29a      	uxth	r2, r3
 800457e:	8bfb      	ldrh	r3, [r7, #30]
 8004580:	4413      	add	r3, r2
 8004582:	b299      	uxth	r1, r3
 8004584:	8bfb      	ldrh	r3, [r7, #30]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	441a      	add	r2, r3
 800458a:	2301      	movs	r3, #1
 800458c:	47a0      	blx	r4
 800458e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800459a:	e013      	b.n	80045c4 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800459c:	8bfb      	ldrh	r3, [r7, #30]
 800459e:	3301      	adds	r3, #1
 80045a0:	83fb      	strh	r3, [r7, #30]
 80045a2:	8bfa      	ldrh	r2, [r7, #30]
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3e2      	bcc.n	8004570 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	e00a      	b.n	80045c4 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	695c      	ldr	r4, [r3, #20]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	7b1b      	ldrb	r3, [r3, #12]
 80045b6:	b298      	uxth	r0, r3
 80045b8:	7afb      	ldrb	r3, [r7, #11]
 80045ba:	b299      	uxth	r1, r3
 80045bc:	893b      	ldrh	r3, [r7, #8]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	47a0      	blx	r4
 80045c2:	4603      	mov	r3, r0
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3724      	adds	r7, #36	; 0x24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd90      	pop	{r4, r7, pc}

080045cc <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	461a      	mov	r2, r3
 80045d8:	460b      	mov	r3, r1
 80045da:	72fb      	strb	r3, [r7, #11]
 80045dc:	4613      	mov	r3, r2
 80045de:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d121      	bne.n	8004634 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	83fb      	strh	r3, [r7, #30]
 80045f4:	e018      	b.n	8004628 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	691c      	ldr	r4, [r3, #16]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	7b1b      	ldrb	r3, [r3, #12]
 80045fe:	b298      	uxth	r0, r3
 8004600:	7afb      	ldrb	r3, [r7, #11]
 8004602:	b29a      	uxth	r2, r3
 8004604:	8bfb      	ldrh	r3, [r7, #30]
 8004606:	4413      	add	r3, r2
 8004608:	b299      	uxth	r1, r3
 800460a:	8bfb      	ldrh	r3, [r7, #30]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	441a      	add	r2, r3
 8004610:	2301      	movs	r3, #1
 8004612:	47a0      	blx	r4
 8004614:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800461c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004620:	e013      	b.n	800464a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004622:	8bfb      	ldrh	r3, [r7, #30]
 8004624:	3301      	adds	r3, #1
 8004626:	83fb      	strh	r3, [r7, #30]
 8004628:	8bfa      	ldrh	r2, [r7, #30]
 800462a:	893b      	ldrh	r3, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	d3e2      	bcc.n	80045f6 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	e00a      	b.n	800464a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	691c      	ldr	r4, [r3, #16]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	7b1b      	ldrb	r3, [r3, #12]
 800463c:	b298      	uxth	r0, r3
 800463e:	7afb      	ldrb	r3, [r7, #11]
 8004640:	b299      	uxth	r1, r3
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	47a0      	blx	r4
 8004648:	4603      	mov	r3, r0
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd90      	pop	{r4, r7, pc}

08004652 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004652:	b590      	push	{r4, r7, lr}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	461a      	mov	r2, r3
 800465e:	460b      	mov	r3, r1
 8004660:	72fb      	strb	r3, [r7, #11]
 8004662:	4613      	mov	r3, r2
 8004664:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685c      	ldr	r4, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6898      	ldr	r0, [r3, #8]
 800466e:	893b      	ldrh	r3, [r7, #8]
 8004670:	7af9      	ldrb	r1, [r7, #11]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	47a0      	blx	r4
 8004676:	6178      	str	r0, [r7, #20]
  return ret;
 8004678:	697b      	ldr	r3, [r7, #20]
}
 800467a:	4618      	mov	r0, r3
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd90      	pop	{r4, r7, pc}

08004682 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004682:	b590      	push	{r4, r7, lr}
 8004684:	b087      	sub	sp, #28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	461a      	mov	r2, r3
 800468e:	460b      	mov	r3, r1
 8004690:	72fb      	strb	r3, [r7, #11]
 8004692:	4613      	mov	r3, r2
 8004694:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681c      	ldr	r4, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6898      	ldr	r0, [r3, #8]
 800469e:	893b      	ldrh	r3, [r7, #8]
 80046a0:	7af9      	ldrb	r1, [r7, #11]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	47a0      	blx	r4
 80046a6:	6178      	str	r0, [r7, #20]
  return ret;
 80046a8:	697b      	ldr	r3, [r7, #20]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
	...

080046b4 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80046e0 <lps22hb_from_lsb_to_hpa+0x2c>
 80046ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80046d2:	eeb0 0a67 	vmov.f32	s0, s15
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	49800000 	.word	0x49800000

080046e4 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80046ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004714 <lps22hb_from_lsb_to_degc+0x30>
 80046fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004702:	eef0 7a66 	vmov.f32	s15, s13
}
 8004706:	eeb0 0a67 	vmov.f32	s0, s15
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	42c80000 	.word	0x42c80000

08004718 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004724:	f107 0208 	add.w	r2, r7, #8
 8004728:	2301      	movs	r3, #1
 800472a:	2110      	movs	r1, #16
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff90 	bl	8004652 <lps22hb_read_reg>
 8004732:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10f      	bne.n	800475a <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	b2da      	uxtb	r2, r3
 8004742:	7a3b      	ldrb	r3, [r7, #8]
 8004744:	f362 0341 	bfi	r3, r2, #1, #1
 8004748:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800474a:	f107 0208 	add.w	r2, r7, #8
 800474e:	2301      	movs	r3, #1
 8004750:	2110      	movs	r1, #16
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ff95 	bl	8004682 <lps22hb_write_reg>
 8004758:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004770:	f107 0208 	add.w	r2, r7, #8
 8004774:	2301      	movs	r3, #1
 8004776:	2110      	movs	r1, #16
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff6a 	bl	8004652 <lps22hb_read_reg>
 800477e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	b2da      	uxtb	r2, r3
 800478e:	7a3b      	ldrb	r3, [r7, #8]
 8004790:	f362 0383 	bfi	r3, r2, #2, #2
 8004794:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004796:	f107 0208 	add.w	r2, r7, #8
 800479a:	2301      	movs	r3, #1
 800479c:	2110      	movs	r1, #16
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ff6f 	bl	8004682 <lps22hb_write_reg>
 80047a4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80047a6:	68fb      	ldr	r3, [r7, #12]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80047bc:	f107 0208 	add.w	r2, r7, #8
 80047c0:	2301      	movs	r3, #1
 80047c2:	2110      	movs	r1, #16
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff44 	bl	8004652 <lps22hb_read_reg>
 80047ca:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10f      	bne.n	80047f2 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	7a3b      	ldrb	r3, [r7, #8]
 80047dc:	f362 1306 	bfi	r3, r2, #4, #3
 80047e0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80047e2:	f107 0208 	add.w	r2, r7, #8
 80047e6:	2301      	movs	r3, #1
 80047e8:	2110      	movs	r1, #16
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ff49 	bl	8004682 <lps22hb_write_reg>
 80047f0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004806:	f107 0208 	add.w	r2, r7, #8
 800480a:	2301      	movs	r3, #1
 800480c:	2110      	movs	r1, #16
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ff1f 	bl	8004652 <lps22hb_read_reg>
 8004814:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8004816:	7a3b      	ldrb	r3, [r7, #8]
 8004818:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b05      	cmp	r3, #5
 8004820:	d826      	bhi.n	8004870 <lps22hb_data_rate_get+0x74>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <lps22hb_data_rate_get+0x2c>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004841 	.word	0x08004841
 800482c:	08004849 	.word	0x08004849
 8004830:	08004851 	.word	0x08004851
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004869 	.word	0x08004869
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
      break;
 8004846:	e017      	b.n	8004878 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
      break;
 800484e:	e013      	b.n	8004878 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2202      	movs	r2, #2
 8004854:	701a      	strb	r2, [r3, #0]
      break;
 8004856:	e00f      	b.n	8004878 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2203      	movs	r2, #3
 800485c:	701a      	strb	r2, [r3, #0]
      break;
 800485e:	e00b      	b.n	8004878 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2204      	movs	r2, #4
 8004864:	701a      	strb	r2, [r3, #0]
      break;
 8004866:	e007      	b.n	8004878 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2205      	movs	r2, #5
 800486c:	701a      	strb	r2, [r3, #0]
      break;
 800486e:	e003      	b.n	8004878 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
      break;
 8004876:	bf00      	nop
  }

  return ret;
 8004878:	68fb      	ldr	r3, [r7, #12]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop

08004884 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 800488e:	f107 0208 	add.w	r2, r7, #8
 8004892:	2303      	movs	r3, #3
 8004894:	2128      	movs	r1, #40	; 0x28
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fedb 	bl	8004652 <lps22hb_read_reg>
 800489c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800489e:	7abb      	ldrb	r3, [r7, #10]
 80048a0:	461a      	mov	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	7a7a      	ldrb	r2, [r7, #9]
 80048ae:	441a      	add	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	7a3a      	ldrb	r2, [r7, #8]
 80048bc:	441a      	add	r2, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	601a      	str	r2, [r3, #0]
  return ret;
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 80048e0:	f107 0208 	add.w	r2, r7, #8
 80048e4:	2302      	movs	r3, #2
 80048e6:	212b      	movs	r1, #43	; 0x2b
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff feb2 	bl	8004652 <lps22hb_read_reg>
 80048ee:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80048f0:	7a7b      	ldrb	r3, [r7, #9]
 80048f2:	b21a      	sxth	r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	b29a      	uxth	r2, r3
 8004904:	7a3b      	ldrb	r3, [r7, #8]
 8004906:	b29b      	uxth	r3, r3
 8004908:	4413      	add	r3, r2
 800490a:	b29b      	uxth	r3, r3
 800490c:	b21a      	sxth	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	801a      	strh	r2, [r3, #0]
  return ret;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8004926:	2301      	movs	r3, #1
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	210f      	movs	r1, #15
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff fe90 	bl	8004652 <lps22hb_read_reg>
 8004932:	60f8      	str	r0, [r7, #12]
  return ret;
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <lps22hb_boot_set>:
  * @param  val    Change the values of boot in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800494a:	f107 0208 	add.w	r2, r7, #8
 800494e:	2301      	movs	r3, #1
 8004950:	2111      	movs	r1, #17
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fe7d 	bl	8004652 <lps22hb_read_reg>
 8004958:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10f      	bne.n	8004980 <lps22hb_boot_set+0x42>
    ctrl_reg2.boot = val;
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	b2da      	uxtb	r2, r3
 8004968:	7a3b      	ldrb	r3, [r7, #8]
 800496a:	f362 13c7 	bfi	r3, r2, #7, #1
 800496e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004970:	f107 0208 	add.w	r2, r7, #8
 8004974:	2301      	movs	r3, #1
 8004976:	2111      	movs	r1, #17
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fe82 	bl	8004682 <lps22hb_write_reg>
 800497e:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004980:	68fb      	ldr	r3, [r7, #12]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8004996:	f107 0208 	add.w	r2, r7, #8
 800499a:	2301      	movs	r3, #1
 800499c:	211a      	movs	r1, #26
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fe57 	bl	8004652 <lps22hb_read_reg>
 80049a4:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10f      	bne.n	80049cc <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	7a3b      	ldrb	r3, [r7, #8]
 80049b6:	f362 0300 	bfi	r3, r2, #0, #1
 80049ba:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 80049bc:	f107 0208 	add.w	r2, r7, #8
 80049c0:	2301      	movs	r3, #1
 80049c2:	211a      	movs	r1, #26
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fe5c 	bl	8004682 <lps22hb_write_reg>
 80049ca:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80049cc:	68fb      	ldr	r3, [r7, #12]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <lps22hb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hb_i2c_dis_t val)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	460b      	mov	r3, r1
 80049e0:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80049e2:	f107 0208 	add.w	r2, r7, #8
 80049e6:	2301      	movs	r3, #1
 80049e8:	2111      	movs	r1, #17
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fe31 	bl	8004652 <lps22hb_read_reg>
 80049f0:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <lps22hb_i2c_interface_set+0x42>
    ctrl_reg2.i2c_dis = (uint8_t)val;
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	7a3b      	ldrb	r3, [r7, #8]
 8004a02:	f362 03c3 	bfi	r3, r2, #3, #1
 8004a06:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a08:	f107 0208 	add.w	r2, r7, #8
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	2111      	movs	r1, #17
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fe36 	bl	8004682 <lps22hb_write_reg>
 8004a16:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a2e:	f107 0208 	add.w	r2, r7, #8
 8004a32:	2301      	movs	r3, #1
 8004a34:	2111      	movs	r1, #17
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fe0b 	bl	8004652 <lps22hb_read_reg>
 8004a3c:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10f      	bne.n	8004a64 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	7a3b      	ldrb	r3, [r7, #8]
 8004a4e:	f362 1304 	bfi	r3, r2, #4, #1
 8004a52:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a54:	f107 0208 	add.w	r2, r7, #8
 8004a58:	2301      	movs	r3, #1
 8004a5a:	2111      	movs	r1, #17
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fe10 	bl	8004682 <lps22hb_write_reg>
 8004a62:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <BSP_LED_Init+0x94>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <BSP_LED_Init+0x94>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
 8004a86:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <BSP_LED_Init+0x94>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8004a92:	f004 f9cd 	bl	8008e30 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <BSP_LED_Init+0x44>
 8004a9c:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <BSP_LED_Init+0x94>)
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <BSP_LED_Init+0x94>)
 8004aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <BSP_LED_Init+0x94>)
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d10b      	bne.n	8004ad2 <BSP_LED_Init+0x62>
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <BSP_LED_Init+0x94>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	4a11      	ldr	r2, [pc, #68]	; (8004b04 <BSP_LED_Init+0x94>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <BSP_LED_Init+0x94>)
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4a0c      	ldr	r2, [pc, #48]	; (8004b08 <BSP_LED_Init+0x98>)
 8004ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004adc:	2301      	movs	r3, #1
 8004ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <BSP_LED_Init+0x9c>)
 8004aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af0:	f107 0214 	add.w	r2, r7, #20
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fd96 	bl	8006628 <HAL_GPIO_Init>
}
 8004afc:	bf00      	nop
 8004afe:	3728      	adds	r7, #40	; 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	08010da4 	.word	0x08010da4
 8004b0c:	20000078 	.word	0x20000078

08004b10 <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10d      	bne.n	8004b3c <BSP_LED_On+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <BSP_LED_On+0x54>)
 8004b24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <BSP_LED_On+0x58>)
 8004b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2201      	movs	r2, #1
 8004b34:	4619      	mov	r1, r3
 8004b36:	f002 f82d 	bl	8006b94 <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
}
 8004b3a:	e00f      	b.n	8004b5c <BSP_LED_On+0x4c>
  else if (Led == LEDSWD)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10c      	bne.n	8004b5c <BSP_LED_On+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <BSP_LED_On+0x54>)
 8004b46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4a06      	ldr	r2, [pc, #24]	; (8004b68 <BSP_LED_On+0x58>)
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	4619      	mov	r1, r3
 8004b58:	f002 f81c 	bl	8006b94 <HAL_GPIO_WritePin>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000078 	.word	0x20000078
 8004b68:	08010da4 	.word	0x08010da4

08004b6c <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <BSP_LED_Off+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <BSP_LED_Off+0x54>)
 8004b80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <BSP_LED_Off+0x58>)
 8004b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4619      	mov	r1, r3
 8004b92:	f001 ffff 	bl	8006b94 <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
}
 8004b96:	e00f      	b.n	8004bb8 <BSP_LED_Off+0x4c>
  else if (Led == LEDSWD)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10c      	bne.n	8004bb8 <BSP_LED_Off+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <BSP_LED_Off+0x54>)
 8004ba2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <BSP_LED_Off+0x58>)
 8004baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f001 ffee 	bl	8006b94 <HAL_GPIO_WritePin>
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000078 	.word	0x20000078
 8004bc4:	08010da4 	.word	0x08010da4

08004bc8 <Sensor_IO_SPI_CS_Init_All>:
  * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
  * @param  None
  * @retval HAL_StatusTypeDef HAL Status
  */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 8004bce:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	4a43      	ldr	r2, [pc, #268]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	4a3d      	ldr	r2, [pc, #244]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bec:	f043 0302 	orr.w	r3, r3, #2
 8004bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bf2:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8004bfe:	4b38      	ldr	r3, [pc, #224]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	4a37      	ldr	r2, [pc, #220]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c04:	f043 0304 	orr.w	r3, r3, #4
 8004c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c0a:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8004c16:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	4a31      	ldr	r2, [pc, #196]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c22:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	607b      	str	r3, [r7, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c34:	482b      	ldr	r0, [pc, #172]	; (8004ce4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c36:	f001 ffad 	bl	8006b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	2110      	movs	r1, #16
 8004c3e:	482a      	ldr	r0, [pc, #168]	; (8004ce8 <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004c40:	f001 ffa8 	bl	8006b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004c44:	2201      	movs	r2, #1
 8004c46:	2102      	movs	r1, #2
 8004c48:	4826      	ldr	r0, [pc, #152]	; (8004ce4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c4a:	f001 ffa3 	bl	8006b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2108      	movs	r1, #8
 8004c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c56:	f001 ff9d 	bl	8006b94 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c62:	2301      	movs	r3, #1
 8004c64:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 8004c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4619      	mov	r1, r3
 8004c72:	481c      	ldr	r0, [pc, #112]	; (8004ce4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c74:	f001 fcd8 	bl	8006628 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c7e:	4819      	ldr	r0, [pc, #100]	; (8004ce4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c80:	f001 ff88 	bl	8006b94 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8004c84:	2310      	movs	r3, #16
 8004c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4816      	ldr	r0, [pc, #88]	; (8004ce8 <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004c90:	f001 fcca 	bl	8006628 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004c94:	2201      	movs	r2, #1
 8004c96:	2110      	movs	r1, #16
 8004c98:	4813      	ldr	r0, [pc, #76]	; (8004ce8 <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004c9a:	f001 ff7b 	bl	8006b94 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	480e      	ldr	r0, [pc, #56]	; (8004ce4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004caa:	f001 fcbd 	bl	8006628 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004cae:	2201      	movs	r2, #1
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	480c      	ldr	r0, [pc, #48]	; (8004ce4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004cb4:	f001 ff6e 	bl	8006b94 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8004cb8:	2308      	movs	r3, #8
 8004cba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cc6:	f001 fcaf 	bl	8006628 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004cca:	2201      	movs	r2, #1
 8004ccc:	2108      	movs	r1, #8
 8004cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd2:	f001 ff5f 	bl	8006b94 <HAL_GPIO_WritePin>

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3728      	adds	r7, #40	; 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	48000400 	.word	0x48000400
 8004ce8:	48000800 	.word	0x48000800

08004cec <BSP_I2C3_Init>:
/**
  * @brief  Initialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_Init(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	607b      	str	r3, [r7, #4]
  
  hbusi2c3.Instance  = I2C3;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <BSP_I2C3_Init+0x44>)
 8004cf8:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <BSP_I2C3_Init+0x48>)
 8004cfa:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&hbusi2c3) == HAL_I2C_STATE_RESET)
 8004cfc:	480c      	ldr	r0, [pc, #48]	; (8004d30 <BSP_I2C3_Init+0x44>)
 8004cfe:	f002 fb1c 	bl	800733a <HAL_I2C_GetState>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10e      	bne.n	8004d26 <BSP_I2C3_Init+0x3a>
  {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C3_MspInit(&hbusi2c3);
 8004d08:	4809      	ldr	r0, [pc, #36]	; (8004d30 <BSP_I2C3_Init+0x44>)
 8004d0a:	f000 f9ef 	bl	80050ec <I2C3_MspInit>
        }
      }
    #endif

    /* Init the I2C */
    if(MX_I2C3_Init(&hbusi2c3) != HAL_OK)
 8004d0e:	4808      	ldr	r0, [pc, #32]	; (8004d30 <BSP_I2C3_Init+0x44>)
 8004d10:	f000 f9c8 	bl	80050a4 <MX_I2C3_Init>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <BSP_I2C3_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004d1a:	f06f 0307 	mvn.w	r3, #7
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	e001      	b.n	8004d26 <BSP_I2C3_Init+0x3a>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
    }	
  }

  return ret;
 8004d26:	687b      	ldr	r3, [r7, #4]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	2000277c 	.word	0x2000277c
 8004d34:	40005c00 	.word	0x40005c00

08004d38 <BSP_I2C3_DeInit>:
/**
  * @brief  DeInitialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_DeInit(void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004d3e:	f06f 0307 	mvn.w	r3, #7
 8004d42:	607b      	str	r3, [r7, #4]
  
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    /* DeInit the I2C */ 
    I2C3_MspDeInit(&hbusi2c3);
 8004d44:	4807      	ldr	r0, [pc, #28]	; (8004d64 <BSP_I2C3_DeInit+0x2c>)
 8004d46:	f000 fa35 	bl	80051b4 <I2C3_MspDeInit>
  #endif  
  
  if (HAL_I2C_DeInit(&hbusi2c3) == HAL_OK) {
 8004d4a:	4806      	ldr	r0, [pc, #24]	; (8004d64 <BSP_I2C3_DeInit+0x2c>)
 8004d4c:	f001 ffc9 	bl	8006ce2 <HAL_I2C_DeInit>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <BSP_I2C3_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8004d5a:	687b      	ldr	r3, [r7, #4]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	2000277c 	.word	0x2000277c

08004d68 <BSP_I2C3_WriteReg>:
  * @param  Addr: Device address on Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af04      	add	r7, sp, #16
 8004d6e:	60ba      	str	r2, [r7, #8]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	81fb      	strh	r3, [r7, #14]
 8004d76:	460b      	mov	r3, r1
 8004d78:	81bb      	strh	r3, [r7, #12]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004d7e:	f06f 0307 	mvn.w	r3, #7
 8004d82:	617b      	str	r3, [r7, #20]

  if(HAL_I2C_Mem_Write(&hbusi2c3, (uint8_t)DevAddr,
 8004d84:	89fb      	ldrh	r3, [r7, #14]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	b299      	uxth	r1, r3
 8004d8a:	89ba      	ldrh	r2, [r7, #12]
 8004d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d90:	9302      	str	r3, [sp, #8]
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4806      	ldr	r0, [pc, #24]	; (8004db8 <BSP_I2C3_WriteReg+0x50>)
 8004d9e:	f001 ffe3 	bl	8006d68 <HAL_I2C_Mem_Write>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <BSP_I2C3_WriteReg+0x44>
                       (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                       (uint8_t *)pData, len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004dac:	697b      	ldr	r3, [r7, #20]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	2000277c 	.word	0x2000277c

08004dbc <BSP_I2C3_ReadReg>:
  * @brief  Read registers through a bus (8 bits)
  * @param  DevAddr: Device address on BUS
  * @param  Reg: The target register address to read
  * @retval BSP status
  */
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af04      	add	r7, sp, #16
 8004dc2:	60ba      	str	r2, [r7, #8]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	81fb      	strh	r3, [r7, #14]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	81bb      	strh	r3, [r7, #12]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004dd2:	f06f 0307 	mvn.w	r3, #7
 8004dd6:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hbusi2c3, DevAddr, (uint16_t)Reg,
 8004dd8:	89ba      	ldrh	r2, [r7, #12]
 8004dda:	89f9      	ldrh	r1, [r7, #14]
 8004ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004de0:	9302      	str	r3, [sp, #8]
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2301      	movs	r3, #1
 8004dec:	4806      	ldr	r0, [pc, #24]	; (8004e08 <BSP_I2C3_ReadReg+0x4c>)
 8004dee:	f002 f8cf 	bl	8006f90 <HAL_I2C_Mem_Read>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <BSP_I2C3_ReadReg+0x40>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004dfc:	697b      	ldr	r3, [r7, #20]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	2000277c 	.word	0x2000277c

08004e0c <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
  
  hbusspi2.Instance  = SPI2;
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <BSP_SPI2_Init+0x40>)
 8004e18:	4a0d      	ldr	r2, [pc, #52]	; (8004e50 <BSP_SPI2_Init+0x44>)
 8004e1a:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 8004e1c:	480b      	ldr	r0, [pc, #44]	; (8004e4c <BSP_SPI2_Init+0x40>)
 8004e1e:	f005 ff47 	bl	800acb0 <HAL_SPI_GetState>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <BSP_SPI2_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 8004e28:	4808      	ldr	r0, [pc, #32]	; (8004e4c <BSP_SPI2_Init+0x40>)
 8004e2a:	f000 f8ed 	bl	8005008 <SPI2_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8004e2e:	4807      	ldr	r0, [pc, #28]	; (8004e4c <BSP_SPI2_Init+0x40>)
 8004e30:	f000 f890 	bl	8004f54 <MX_SPI2_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004e3a:	f06f 0307 	mvn.w	r3, #7
 8004e3e:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004e40:	687b      	ldr	r3, [r7, #4]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	200027c8 	.word	0x200027c8
 8004e50:	40003800 	.word	0x40003800

08004e54 <BSP_SPI2_DeInit>:
/**
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004e5a:	f06f 0307 	mvn.w	r3, #7
 8004e5e:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 8004e60:	4807      	ldr	r0, [pc, #28]	; (8004e80 <BSP_SPI2_DeInit+0x2c>)
 8004e62:	f000 f907 	bl	8005074 <SPI2_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi2) == HAL_OK) {
 8004e66:	4806      	ldr	r0, [pc, #24]	; (8004e80 <BSP_SPI2_DeInit+0x2c>)
 8004e68:	f005 fb65 	bl	800a536 <HAL_SPI_DeInit>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <BSP_SPI2_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8004e76:	687b      	ldr	r3, [r7, #4]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200027c8 	.word	0x200027c8

08004e84 <BSP_SPI2_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004e90:	f06f 0305 	mvn.w	r3, #5
 8004e94:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4806      	ldr	r0, [pc, #24]	; (8004eb8 <BSP_SPI2_Send+0x34>)
 8004ea0:	f005 fb85 	bl	800a5ae <HAL_SPI_Transmit>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <BSP_SPI2_Send+0x2a>
  {
      ret = len;
 8004eaa:	887b      	ldrh	r3, [r7, #2]
 8004eac:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	200027c8 	.word	0x200027c8

08004ebc <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
  
  hbusspi1.Instance  = SPI1;
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <BSP_SPI1_Init+0x40>)
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <BSP_SPI1_Init+0x44>)
 8004eca:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8004ecc:	480b      	ldr	r0, [pc, #44]	; (8004efc <BSP_SPI1_Init+0x40>)
 8004ece:	f005 feef 	bl	800acb0 <HAL_SPI_GetState>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <BSP_SPI1_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbusspi1);
 8004ed8:	4808      	ldr	r0, [pc, #32]	; (8004efc <BSP_SPI1_Init+0x40>)
 8004eda:	f000 f9c9 	bl	8005270 <SPI1_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8004ede:	4807      	ldr	r0, [pc, #28]	; (8004efc <BSP_SPI1_Init+0x40>)
 8004ee0:	f000 f984 	bl	80051ec <MX_SPI1_Init>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <BSP_SPI1_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004eea:	f06f 0307 	mvn.w	r3, #7
 8004eee:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004ef0:	687b      	ldr	r3, [r7, #4]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2000282c 	.word	0x2000282c
 8004f00:	40013000 	.word	0x40013000

08004f04 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004f12:	f06f 0305 	mvn.w	r3, #5
 8004f16:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f1e:	9200      	str	r2, [sp, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	4806      	ldr	r0, [pc, #24]	; (8004f40 <BSP_SPI1_SendRecv+0x3c>)
 8004f26:	f005 fcb0 	bl	800a88a <HAL_SPI_TransmitReceive>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <BSP_SPI1_SendRecv+0x30>
  {
      ret = len;
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004f34:	697b      	ldr	r3, [r7, #20]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000282c 	.word	0x2000282c

08004f44 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f48:	f000 ff64 	bl	8005e14 <HAL_GetTick>
 8004f4c:	4603      	mov	r3, r0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <MX_SPI2_Init>:

/* SPI2 init function */ 

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a28      	ldr	r2, [pc, #160]	; (8005004 <MX_SPI2_Init+0xb0>)
 8004f64:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f6c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f74:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f7c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f90:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2230      	movs	r2, #48	; 0x30
 8004f96:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2207      	movs	r2, #7
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	635a      	str	r2, [r3, #52]	; 0x34
  
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f005 fa17 	bl	800a3f0 <HAL_SPI_Init>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <MX_SPI2_Init+0x78>
  {
    ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
  }
  
  HAL_Delay(5);
 8004fcc:	2005      	movs	r0, #5
 8004fce:	f7fc fbc5 	bl	800175c <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe0:	601a      	str	r2, [r3, #0]
  HAL_Delay(5);
 8004fe2:	2005      	movs	r0, #5
 8004fe4:	f7fc fbba 	bl	800175c <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
  
  return ret;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40003800 	.word	0x40003800

08005008 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	; 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <SPI2_MspInit+0x64>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	4a15      	ldr	r2, [pc, #84]	; (800506c <SPI2_MspInit+0x64>)
 8005016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <SPI2_MspInit+0x64>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <SPI2_MspInit+0x64>)
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	4a0f      	ldr	r2, [pc, #60]	; (800506c <SPI2_MspInit+0x64>)
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <SPI2_MspInit+0x64>)
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
  
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005040:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005046:	2302      	movs	r3, #2
 8005048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800504a:	2301      	movs	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800504e:	2302      	movs	r3, #2
 8005050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005052:	2305      	movs	r3, #5
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005056:	f107 0314 	add.w	r3, r7, #20
 800505a:	4619      	mov	r1, r3
 800505c:	4804      	ldr	r0, [pc, #16]	; (8005070 <SPI2_MspInit+0x68>)
 800505e:	f001 fae3 	bl	8006628 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8005062:	bf00      	nop
 8005064:	3728      	adds	r7, #40	; 0x28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000
 8005070:	48000400 	.word	0x48000400

08005074 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <SPI2_MspDeInit+0x28>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	4a06      	ldr	r2, [pc, #24]	; (800509c <SPI2_MspDeInit+0x28>)
 8005082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005086:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 8005088:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800508c:	4804      	ldr	r0, [pc, #16]	; (80050a0 <SPI2_MspDeInit+0x2c>)
 800508e:	f001 fc75 	bl	800697c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	48000400 	.word	0x48000400

080050a4 <MX_I2C3_Init>:

/* I2C3 init function */ 

__weak HAL_StatusTypeDef MX_I2C3_Init(I2C_HandleTypeDef* hi2c)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C3;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <MX_I2C3_Init+0x40>)
 80050b4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10801541;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a0b      	ldr	r2, [pc, #44]	; (80050e8 <MX_I2C3_Init+0x44>)
 80050ba:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0x33;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2233      	movs	r2, #51	; 0x33
 80050c0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	60da      	str	r2, [r3, #12]
  
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 fd7b 	bl	8006bc4 <HAL_I2C_Init>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_I2C3_Init+0x34>
  {
    ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40005c00 	.word	0x40005c00
 80050e8:	10801541 	.word	0x10801541

080050ec <I2C3_MspInit>:

static void I2C3_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b0ac      	sub	sp, #176	; 0xb0
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C3_MspInit 0 */
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80050f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050f8:	617b      	str	r3, [r7, #20]
  RCC_PeriphCLKInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 80050fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	4618      	mov	r0, r3
 8005106:	f004 fc8f 	bl	8009a28 <HAL_RCCEx_PeriphCLKConfig>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d000      	beq.n	8005112 <I2C3_MspInit+0x26>
  {
    while(1);
 8005110:	e7fe      	b.n	8005110 <I2C3_MspInit+0x24>
  }
  
  /* Enable I2C GPIO clocks */
  __GPIOC_CLK_ENABLE();
 8005112:	4b26      	ldr	r3, [pc, #152]	; (80051ac <I2C3_MspInit+0xc0>)
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	4a25      	ldr	r2, [pc, #148]	; (80051ac <I2C3_MspInit+0xc0>)
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800511e:	4b23      	ldr	r3, [pc, #140]	; (80051ac <I2C3_MspInit+0xc0>)
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	693b      	ldr	r3, [r7, #16]
  
  /**I2C3 GPIO Configuration    
  PC1     ------> I2C3_SDA
  PC0     ------> I2C3_SCL 
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800512a:	2303      	movs	r3, #3
 800512c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005130:	2312      	movs	r3, #18
 8005132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005136:	2301      	movs	r3, #1
 8005138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800513c:	2303      	movs	r3, #3
 800513e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005142:	2304      	movs	r3, #4
 8005144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005148:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800514c:	4619      	mov	r1, r3
 800514e:	4818      	ldr	r0, [pc, #96]	; (80051b0 <I2C3_MspInit+0xc4>)
 8005150:	f001 fa6a 	bl	8006628 <HAL_GPIO_Init>
  
  /* Peripheral clock enable */
  __HAL_RCC_I2C3_CLK_ENABLE();
 8005154:	4b15      	ldr	r3, [pc, #84]	; (80051ac <I2C3_MspInit+0xc0>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	4a14      	ldr	r2, [pc, #80]	; (80051ac <I2C3_MspInit+0xc0>)
 800515a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800515e:	6593      	str	r3, [r2, #88]	; 0x58
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <I2C3_MspInit+0xc0>)
 8005162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
  
  /* Force the I2C peripheral clock reset */
  __I2C3_FORCE_RESET();
 800516c:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <I2C3_MspInit+0xc0>)
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <I2C3_MspInit+0xc0>)
 8005172:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005176:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Release the I2C peripheral clock reset */
  __I2C3_RELEASE_RESET();
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <I2C3_MspInit+0xc0>)
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <I2C3_MspInit+0xc0>)
 800517e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005182:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005184:	2200      	movs	r2, #0
 8005186:	2100      	movs	r1, #0
 8005188:	2048      	movs	r0, #72	; 0x48
 800518a:	f000 ff58 	bl	800603e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800518e:	2048      	movs	r0, #72	; 0x48
 8005190:	f000 ff71 	bl	8006076 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005194:	2200      	movs	r2, #0
 8005196:	2100      	movs	r1, #0
 8005198:	2049      	movs	r0, #73	; 0x49
 800519a:	f000 ff50 	bl	800603e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800519e:	2049      	movs	r0, #73	; 0x49
 80051a0:	f000 ff69 	bl	8006076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */
  
  /* USER CODE END I2C3_MspInit 1 */
}
 80051a4:	bf00      	nop
 80051a6:	37b0      	adds	r7, #176	; 0xb0
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40021000 	.word	0x40021000
 80051b0:	48000800 	.word	0x48000800

080051b4 <I2C3_MspDeInit>:

static void I2C3_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <I2C3_MspDeInit+0x30>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <I2C3_MspDeInit+0x30>)
 80051c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051c6:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C3 GPIO Configuration    
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 80051c8:	2103      	movs	r1, #3
 80051ca:	4807      	ldr	r0, [pc, #28]	; (80051e8 <I2C3_MspDeInit+0x34>)
 80051cc:	f001 fbd6 	bl	800697c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80051d0:	2048      	movs	r0, #72	; 0x48
 80051d2:	f000 ff5e 	bl	8006092 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80051d6:	2049      	movs	r0, #73	; 0x49
 80051d8:	f000 ff5b 	bl	8006092 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40021000 	.word	0x40021000
 80051e8:	48000800 	.word	0x48000800

080051ec <MX_SPI1_Init>:


/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <MX_SPI1_Init+0x80>)
 80051fc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005204:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005212:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005226:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2218      	movs	r2, #24
 800522c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2207      	movs	r2, #7
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2208      	movs	r2, #8
 8005250:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f005 f8cc 	bl	800a3f0 <HAL_SPI_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013000 	.word	0x40013000

08005270 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005278:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <SPI1_MspInit+0x64>)
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <SPI1_MspInit+0x64>)
 800527e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005282:	6613      	str	r3, [r2, #96]	; 0x60
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <SPI1_MspInit+0x64>)
 8005286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <SPI1_MspInit+0x64>)
 8005292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005294:	4a0f      	ldr	r2, [pc, #60]	; (80052d4 <SPI1_MspInit+0x64>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <SPI1_MspInit+0x64>)
 800529e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80052a8:	23e0      	movs	r3, #224	; 0xe0
 80052aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ac:	2302      	movs	r3, #2
 80052ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052b0:	2301      	movs	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b4:	2303      	movs	r3, #3
 80052b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052b8:	2305      	movs	r3, #5
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052bc:	f107 0314 	add.w	r3, r7, #20
 80052c0:	4619      	mov	r1, r3
 80052c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c6:	f001 f9af 	bl	8006628 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80052ca:	bf00      	nop
 80052cc:	3728      	adds	r7, #40	; 0x28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000

080052d8 <BSP_ENV_SENSOR_Init>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61bb      	str	r3, [r7, #24]
  ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <BSP_ENV_SENSOR_Init+0x24>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d032      	beq.n	8005360 <BSP_ENV_SENSOR_Init+0x88>
 80052fa:	e063      	b.n	80053c4 <BSP_ENV_SENSOR_Init+0xec>
  {
#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80052fc:	6838      	ldr	r0, [r7, #0]
 80052fe:	f000 f931 	bl	8005564 <HTS221_0_Probe>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <BSP_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530c:	e098      	b.n	8005440 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800530e:	4a4e      	ldr	r2, [pc, #312]	; (8005448 <BSP_ENV_SENSOR_Init+0x170>)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	494c      	ldr	r1, [pc, #304]	; (800544c <BSP_ENV_SENSOR_Init+0x174>)
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005320:	f107 0108 	add.w	r1, r7, #8
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <BSP_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800532e:	f06f 0306 	mvn.w	r3, #6
 8005332:	e085      	b.n	8005440 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005334:	7a3b      	ldrb	r3, [r7, #8]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d103      	bne.n	8005342 <BSP_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005342:	7abb      	ldrb	r3, [r7, #10]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d103      	bne.n	8005350 <BSP_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005350:	7a7b      	ldrb	r3, [r7, #9]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d13a      	bne.n	80053cc <BSP_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f043 0302 	orr.w	r3, r3, #2
 800535c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800535e:	e035      	b.n	80053cc <BSP_ENV_SENSOR_Init+0xf4>
#endif
#if (USE_ENV_SENSOR_LPS22HB_0 == 1)
    case LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8005360:	6838      	ldr	r0, [r7, #0]
 8005362:	f000 f9a9 	bl	80056b8 <LPS22HB_0_Probe>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <BSP_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 800536c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005370:	e066      	b.n	8005440 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005372:	4a35      	ldr	r2, [pc, #212]	; (8005448 <BSP_ENV_SENSOR_Init+0x170>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4933      	ldr	r1, [pc, #204]	; (800544c <BSP_ENV_SENSOR_Init+0x174>)
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005384:	f107 0108 	add.w	r1, r7, #8
 8005388:	4610      	mov	r0, r2
 800538a:	4798      	blx	r3
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <BSP_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005392:	f06f 0306 	mvn.w	r3, #6
 8005396:	e053      	b.n	8005440 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005398:	7a3b      	ldrb	r3, [r7, #8]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d103      	bne.n	80053a6 <BSP_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80053a6:	7abb      	ldrb	r3, [r7, #10]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d103      	bne.n	80053b4 <BSP_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80053b4:	7a7b      	ldrb	r3, [r7, #9]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10a      	bne.n	80053d0 <BSP_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	61bb      	str	r3, [r7, #24]
      }
      break;
 80053c2:	e005      	b.n	80053d0 <BSP_ENV_SENSOR_Init+0xf8>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80053c4:	f06f 0301 	mvn.w	r3, #1
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80053ca:	e002      	b.n	80053d2 <BSP_ENV_SENSOR_Init+0xfa>
      break;
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <BSP_ENV_SENSOR_Init+0xfa>
      break;
 80053d0:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <BSP_ENV_SENSOR_Init+0x104>
  {
    return ret;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	e031      	b.n	8005440 <BSP_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e02a      	b.n	8005438 <BSP_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	4013      	ands	r3, r2
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d11e      	bne.n	800542c <BSP_ENV_SENSOR_Init+0x154>
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	4013      	ands	r3, r2
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d118      	bne.n	800542c <BSP_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80053fa:	4a15      	ldr	r2, [pc, #84]	; (8005450 <BSP_ENV_SENSOR_Init+0x178>)
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005402:	4814      	ldr	r0, [pc, #80]	; (8005454 <BSP_ENV_SENSOR_Init+0x17c>)
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	440b      	add	r3, r1
 800540e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	490d      	ldr	r1, [pc, #52]	; (800544c <BSP_ENV_SENSOR_Init+0x174>)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800541c:	4610      	mov	r0, r2
 800541e:	4798      	blx	r3
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <BSP_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005426:	f06f 0304 	mvn.w	r3, #4
 800542a:	e009      	b.n	8005440 <BSP_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	623b      	str	r3, [r7, #32]
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3301      	adds	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d9d1      	bls.n	80053e2 <BSP_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000290 	.word	0x20000290
 800544c:	20002890 	.word	0x20002890
 8005450:	20000080 	.word	0x20000080
 8005454:	20000278 	.word	0x20000278

08005458 <BSP_ENV_SENSOR_Enable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d903      	bls.n	8005470 <BSP_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005468:	f06f 0301 	mvn.w	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e028      	b.n	80054c2 <BSP_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <BSP_ENV_SENSOR_Enable+0x74>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d11c      	bne.n	80054bc <BSP_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <BSP_ENV_SENSOR_Enable+0x78>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800548a:	4812      	ldr	r0, [pc, #72]	; (80054d4 <BSP_ENV_SENSOR_Enable+0x7c>)
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	440b      	add	r3, r1
 8005496:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	490e      	ldr	r1, [pc, #56]	; (80054d8 <BSP_ENV_SENSOR_Enable+0x80>)
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054a4:	4610      	mov	r0, r2
 80054a6:	4798      	blx	r3
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <BSP_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054ae:	f06f 0304 	mvn.w	r3, #4
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e005      	b.n	80054c2 <BSP_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	e002      	b.n	80054c2 <BSP_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80054bc:	f06f 0301 	mvn.w	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80054c2:	68fb      	ldr	r3, [r7, #12]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000298 	.word	0x20000298
 80054d0:	20000080 	.word	0x20000080
 80054d4:	20000278 	.word	0x20000278
 80054d8:	20002890 	.word	0x20002890

080054dc <BSP_ENV_SENSOR_GetValue>:
 *         - ENV_HUMIDITY
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d903      	bls.n	80054f6 <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054ee:	f06f 0301 	mvn.w	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e029      	b.n	800554a <BSP_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80054f6:	4a17      	ldr	r2, [pc, #92]	; (8005554 <BSP_ENV_SENSOR_GetValue+0x78>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	429a      	cmp	r2, r3
 8005506:	d11d      	bne.n	8005544 <BSP_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005508:	4a13      	ldr	r2, [pc, #76]	; (8005558 <BSP_ENV_SENSOR_GetValue+0x7c>)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005510:	4812      	ldr	r0, [pc, #72]	; (800555c <BSP_ENV_SENSOR_GetValue+0x80>)
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	440b      	add	r3, r1
 800551c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	490f      	ldr	r1, [pc, #60]	; (8005560 <BSP_ENV_SENSOR_GetValue+0x84>)
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <BSP_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005536:	f06f 0304 	mvn.w	r3, #4
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e005      	b.n	800554a <BSP_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e002      	b.n	800554a <BSP_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005544:	f06f 0301 	mvn.w	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800554a:	697b      	ldr	r3, [r7, #20]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000298 	.word	0x20000298
 8005558:	20000080 	.word	0x20000080
 800555c:	20000278 	.word	0x20000278
 8005560:	20002890 	.word	0x20002890

08005564 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b090      	sub	sp, #64	; 0x40
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800556c:	2300      	movs	r3, #0
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8005570:	2300      	movs	r3, #0
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8005574:	23bf      	movs	r3, #191	; 0xbf
 8005576:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = BSP_I2C3_Init;
 800557a:	4b41      	ldr	r3, [pc, #260]	; (8005680 <HTS221_0_Probe+0x11c>)
 800557c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = BSP_I2C3_DeInit;
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <HTS221_0_Probe+0x120>)
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = BSP_I2C3_ReadReg;
 8005582:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HTS221_0_Probe+0x124>)
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HTS221_0_Probe+0x128>)
 8005588:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = BSP_GetTick;
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <HTS221_0_Probe+0x12c>)
 800558c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800558e:	f107 0320 	add.w	r3, r7, #32
 8005592:	4619      	mov	r1, r3
 8005594:	483f      	ldr	r0, [pc, #252]	; (8005694 <HTS221_0_Probe+0x130>)
 8005596:	f7fd fe23 	bl	80031e0 <HTS221_RegisterBusIO>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055a0:	f06f 0306 	mvn.w	r3, #6
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a6:	e065      	b.n	8005674 <HTS221_0_Probe+0x110>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80055a8:	f107 031f 	add.w	r3, r7, #31
 80055ac:	4619      	mov	r1, r3
 80055ae:	4839      	ldr	r0, [pc, #228]	; (8005694 <HTS221_0_Probe+0x130>)
 80055b0:	f7fd fe9b 	bl	80032ea <HTS221_ReadID>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055ba:	f06f 0306 	mvn.w	r3, #6
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c0:	e058      	b.n	8005674 <HTS221_0_Probe+0x110>
  }
  else if (id != HTS221_ID)
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
 80055c4:	2bbc      	cmp	r3, #188	; 0xbc
 80055c6:	d003      	beq.n	80055d0 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055c8:	f06f 0306 	mvn.w	r3, #6
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ce:	e051      	b.n	8005674 <HTS221_0_Probe+0x110>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80055d0:	f107 030c 	add.w	r3, r7, #12
 80055d4:	4619      	mov	r1, r3
 80055d6:	482f      	ldr	r0, [pc, #188]	; (8005694 <HTS221_0_Probe+0x130>)
 80055d8:	f7fd fe9e 	bl	8003318 <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80055dc:	7b3b      	ldrb	r3, [r7, #12]
 80055de:	461a      	mov	r2, r3
 80055e0:	7b7b      	ldrb	r3, [r7, #13]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	431a      	orrs	r2, r3
                                   uint32_t)cap.Humidity << 2);
 80055e6:	7bbb      	ldrb	r3, [r7, #14]
 80055e8:	009b      	lsls	r3, r3, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80055ea:	4313      	orrs	r3, r2
 80055ec:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <HTS221_0_Probe+0x134>)
 80055ee:	6013      	str	r3, [r2, #0]

    EnvCompObj[HTS221_0] = &hts221_obj_0;
 80055f0:	4b2a      	ldr	r3, [pc, #168]	; (800569c <HTS221_0_Probe+0x138>)
 80055f2:	4a28      	ldr	r2, [pc, #160]	; (8005694 <HTS221_0_Probe+0x130>)
 80055f4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80055f6:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HTS221_0_Probe+0x13c>)
 80055f8:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <HTS221_0_Probe+0x140>)
 80055fa:	601a      	str	r2, [r3, #0]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d018      	beq.n	8005638 <HTS221_0_Probe+0xd4>
 8005606:	7b3b      	ldrb	r3, [r7, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d115      	bne.n	8005638 <HTS221_0_Probe+0xd4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <HTS221_0_Probe+0x144>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a26      	ldr	r2, [pc, #152]	; (80056ac <HTS221_0_Probe+0x148>)
 8005612:	4927      	ldr	r1, [pc, #156]	; (80056b0 <HTS221_0_Probe+0x14c>)
 8005614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8005618:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <HTS221_0_Probe+0x13c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1f      	ldr	r2, [pc, #124]	; (800569c <HTS221_0_Probe+0x138>)
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	4610      	mov	r0, r2
 8005624:	4798      	blx	r3
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HTS221_0_Probe+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800562c:	f06f 0304 	mvn.w	r3, #4
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005632:	e001      	b.n	8005638 <HTS221_0_Probe+0xd4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005634:	2300      	movs	r3, #0
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d018      	beq.n	8005674 <HTS221_0_Probe+0x110>
 8005642:	7bbb      	ldrb	r3, [r7, #14]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d115      	bne.n	8005674 <HTS221_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8005648:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <HTS221_0_Probe+0x144>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <HTS221_0_Probe+0x148>)
 800564e:	4919      	ldr	r1, [pc, #100]	; (80056b4 <HTS221_0_Probe+0x150>)
 8005650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HTS221_0_Probe+0x13c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a10      	ldr	r2, [pc, #64]	; (800569c <HTS221_0_Probe+0x138>)
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	4610      	mov	r0, r2
 8005660:	4798      	blx	r3
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HTS221_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005668:	f06f 0304 	mvn.w	r3, #4
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566e:	e001      	b.n	8005674 <HTS221_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005670:	2300      	movs	r3, #0
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  return ret;
 8005674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005676:	4618      	mov	r0, r3
 8005678:	3740      	adds	r7, #64	; 0x40
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	08004ced 	.word	0x08004ced
 8005684:	08004d39 	.word	0x08004d39
 8005688:	08004dbd 	.word	0x08004dbd
 800568c:	08004d69 	.word	0x08004d69
 8005690:	08004f45 	.word	0x08004f45
 8005694:	200002a0 	.word	0x200002a0
 8005698:	20000298 	.word	0x20000298
 800569c:	20002890 	.word	0x20002890
 80056a0:	20000290 	.word	0x20000290
 80056a4:	20000008 	.word	0x20000008
 80056a8:	20000080 	.word	0x20000080
 80056ac:	20000278 	.word	0x20000278
 80056b0:	2000002c 	.word	0x2000002c
 80056b4:	20000018 	.word	0x20000018

080056b8 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b090      	sub	sp, #64	; 0x40
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;
  
  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_SPI_3WIRES_BUS; /* SPI 3-Wires */
 80056c4:	2302      	movs	r3, #2
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = 0x0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_LPS22HB_Init;
 80056ce:	4b56      	ldr	r3, [pc, #344]	; (8005828 <LPS22HB_0_Probe+0x170>)
 80056d0:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_LPS22HB_DeInit;
 80056d2:	4b56      	ldr	r3, [pc, #344]	; (800582c <LPS22HB_0_Probe+0x174>)
 80056d4:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_LPS22HB_ReadReg;
 80056d6:	4b56      	ldr	r3, [pc, #344]	; (8005830 <LPS22HB_0_Probe+0x178>)
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_LPS22HB_WriteReg;
 80056da:	4b56      	ldr	r3, [pc, #344]	; (8005834 <LPS22HB_0_Probe+0x17c>)
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 80056de:	4b56      	ldr	r3, [pc, #344]	; (8005838 <LPS22HB_0_Probe+0x180>)
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80056e2:	f107 031c 	add.w	r3, r7, #28
 80056e6:	4619      	mov	r1, r3
 80056e8:	4854      	ldr	r0, [pc, #336]	; (800583c <LPS22HB_0_Probe+0x184>)
 80056ea:	f7fe fb97 	bl	8003e1c <LPS22HB_RegisterBusIO>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056f4:	f06f 0306 	mvn.w	r3, #6
 80056f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fa:	e08f      	b.n	800581c <LPS22HB_0_Probe+0x164>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 80056fc:	f107 031b 	add.w	r3, r7, #27
 8005700:	4619      	mov	r1, r3
 8005702:	484e      	ldr	r0, [pc, #312]	; (800583c <LPS22HB_0_Probe+0x184>)
 8005704:	f7fe fc2f 	bl	8003f66 <LPS22HB_ReadID>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800570e:	f06f 0306 	mvn.w	r3, #6
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005714:	e082      	b.n	800581c <LPS22HB_0_Probe+0x164>
  }
  else if (id != LPS22HB_ID)
 8005716:	7efb      	ldrb	r3, [r7, #27]
 8005718:	2bb1      	cmp	r3, #177	; 0xb1
 800571a:	d003      	beq.n	8005724 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800571c:	f06f 0306 	mvn.w	r3, #6
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005722:	e07b      	b.n	800581c <LPS22HB_0_Probe+0x164>
  }
  else
  {
    /* LPS22HB_SwResetAndMemoryBoot */
    if (lps22hb_boot_set(&lps22hb_obj_0.Ctx, PROPERTY_ENABLE) != LPS22HB_OK) 
 8005724:	2101      	movs	r1, #1
 8005726:	4846      	ldr	r0, [pc, #280]	; (8005840 <LPS22HB_0_Probe+0x188>)
 8005728:	f7ff f909 	bl	800493e <lps22hb_boot_set>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <LPS22HB_0_Probe+0x80>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005732:	f06f 0306 	mvn.w	r3, #6
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    
    HAL_Delay(1000);
 8005738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800573c:	f7fc f80e 	bl	800175c <HAL_Delay>
    
    /* Do again the "LPS22HB_RegisterBusIO" */
    {
      uint8_t data = 0x01;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      
      if (LPS22HB_Write_Reg(&lps22hb_obj_0, LPS22HB_CTRL_REG1, data) != LPS22HB_OK) 
 8005746:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800574a:	461a      	mov	r2, r3
 800574c:	2110      	movs	r1, #16
 800574e:	483b      	ldr	r0, [pc, #236]	; (800583c <LPS22HB_0_Probe+0x184>)
 8005750:	f7fe fd99 	bl	8004286 <LPS22HB_Write_Reg>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <LPS22HB_0_Probe+0xa8>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800575a:	f06f 0306 	mvn.w	r3, #6
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }

    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005760:	f107 0308 	add.w	r3, r7, #8
 8005764:	4619      	mov	r1, r3
 8005766:	4835      	ldr	r0, [pc, #212]	; (800583c <LPS22HB_0_Probe+0x184>)
 8005768:	f7fe fc14 	bl	8003f94 <LPS22HB_GetCapabilities>
    
    EnvCtx[LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((uint32_t)cap.Humidity << 2);
 800576c:	7a3b      	ldrb	r3, [r7, #8]
 800576e:	461a      	mov	r2, r3
 8005770:	7a7b      	ldrb	r3, [r7, #9]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	431a      	orrs	r2, r3
 8005776:	7abb      	ldrb	r3, [r7, #10]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4313      	orrs	r3, r2
 800577c:	4a31      	ldr	r2, [pc, #196]	; (8005844 <LPS22HB_0_Probe+0x18c>)
 800577e:	6053      	str	r3, [r2, #4]
    
    EnvCompObj[LPS22HB_0] = &lps22hb_obj_0;
 8005780:	4b31      	ldr	r3, [pc, #196]	; (8005848 <LPS22HB_0_Probe+0x190>)
 8005782:	4a2e      	ldr	r2, [pc, #184]	; (800583c <LPS22HB_0_Probe+0x184>)
 8005784:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8005786:	4b31      	ldr	r3, [pc, #196]	; (800584c <LPS22HB_0_Probe+0x194>)
 8005788:	4a31      	ldr	r2, [pc, #196]	; (8005850 <LPS22HB_0_Probe+0x198>)
 800578a:	605a      	str	r2, [r3, #4]
    
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d019      	beq.n	80057ca <LPS22HB_0_Probe+0x112>
 8005796:	7a3b      	ldrb	r3, [r7, #8]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d116      	bne.n	80057ca <LPS22HB_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800579c:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <LPS22HB_0_Probe+0x19c>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a2d      	ldr	r2, [pc, #180]	; (8005858 <LPS22HB_0_Probe+0x1a0>)
 80057a2:	3303      	adds	r3, #3
 80057a4:	492d      	ldr	r1, [pc, #180]	; (800585c <LPS22HB_0_Probe+0x1a4>)
 80057a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 80057aa:	4b28      	ldr	r3, [pc, #160]	; (800584c <LPS22HB_0_Probe+0x194>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <LPS22HB_0_Probe+0x190>)
 80057b2:	6852      	ldr	r2, [r2, #4]
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <LPS22HB_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057be:	f06f 0304 	mvn.w	r3, #4
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	e001      	b.n	80057ca <LPS22HB_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d023      	beq.n	800581c <LPS22HB_0_Probe+0x164>
 80057d4:	7a7b      	ldrb	r3, [r7, #9]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d120      	bne.n	800581c <LPS22HB_0_Probe+0x164>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <LPS22HB_0_Probe+0x19c>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <LPS22HB_0_Probe+0x1a0>)
 80057e0:	3303      	adds	r3, #3
 80057e2:	491f      	ldr	r1, [pc, #124]	; (8005860 <LPS22HB_0_Probe+0x1a8>)
 80057e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 80057e8:	4b18      	ldr	r3, [pc, #96]	; (800584c <LPS22HB_0_Probe+0x194>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <LPS22HB_0_Probe+0x190>)
 80057f0:	6852      	ldr	r2, [r2, #4]
 80057f2:	4610      	mov	r0, r2
 80057f4:	4798      	blx	r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <LPS22HB_0_Probe+0x14c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057fc:	f06f 0304 	mvn.w	r3, #4
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005802:	e001      	b.n	8005808 <LPS22HB_0_Probe+0x150>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005804:	2300      	movs	r3, #0
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 8005808:	2101      	movs	r1, #1
 800580a:	480d      	ldr	r0, [pc, #52]	; (8005840 <LPS22HB_0_Probe+0x188>)
 800580c:	f7ff f8e3 	bl	80049d6 <lps22hb_i2c_interface_set>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <LPS22HB_0_Probe+0x164>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005816:	f06f 0306 	mvn.w	r3, #6
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
    }
  }
  
  return ret;
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800581e:	4618      	mov	r0, r3
 8005820:	3740      	adds	r7, #64	; 0x40
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	08005865 	.word	0x08005865
 800582c:	080058dd 	.word	0x080058dd
 8005830:	08005975 	.word	0x08005975
 8005834:	08005901 	.word	0x08005901
 8005838:	08004f45 	.word	0x08004f45
 800583c:	200002cc 	.word	0x200002cc
 8005840:	200002e8 	.word	0x200002e8
 8005844:	20000298 	.word	0x20000298
 8005848:	20002890 	.word	0x20002890
 800584c:	20000290 	.word	0x20000290
 8005850:	20000040 	.word	0x20000040
 8005854:	20000080 	.word	0x20000080
 8005858:	20000278 	.word	0x20000278
 800585c:	20000064 	.word	0x20000064
 8005860:	20000050 	.word	0x20000050

08005864 <BSP_LPS22HB_Init>:
/**
 * @brief  Initialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_Init(void)
{  
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800586a:	f06f 0305 	mvn.w	r3, #5
 800586e:	61fb      	str	r3, [r7, #28]
  
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005870:	2201      	movs	r2, #1
 8005872:	2108      	movs	r1, #8
 8005874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005878:	f001 f98c 	bl	8006b94 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800587c:	2303      	movs	r3, #3
 800587e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005884:	2301      	movs	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
  
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8005888:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <BSP_LPS22HB_Init+0x74>)
 800588a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <BSP_LPS22HB_Init+0x74>)
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005894:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <BSP_LPS22HB_Init+0x74>)
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 80058a0:	2308      	movs	r3, #8
 80058a2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	4619      	mov	r1, r3
 80058aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ae:	f000 febb 	bl	8006628 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80058b2:	2201      	movs	r2, #1
 80058b4:	2108      	movs	r1, #8
 80058b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ba:	f001 f96b 	bl	8006b94 <HAL_GPIO_WritePin>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80058be:	f7ff faa5 	bl	8004e0c <BSP_SPI2_Init>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <BSP_LPS22HB_Init+0x68>
  {
    ret = BSP_ERROR_NONE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80058cc:	69fb      	ldr	r3, [r7, #28]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000

080058dc <BSP_LPS22HB_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_DeInit(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80058e2:	f06f 0305 	mvn.w	r3, #5
 80058e6:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 80058e8:	f7ff fab4 	bl	8004e54 <BSP_SPI2_DeInit>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <BSP_LPS22HB_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80058f6:	687b      	ldr	r3, [r7, #4]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <BSP_LPS22HB_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60ba      	str	r2, [r7, #8]
 8005908:	461a      	mov	r2, r3
 800590a:	4603      	mov	r3, r0
 800590c:	81fb      	strh	r3, [r7, #14]
 800590e:	460b      	mov	r3, r1
 8005910:	81bb      	strh	r3, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800591a:	89bb      	ldrh	r3, [r7, #12]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005920:	2200      	movs	r2, #0
 8005922:	2108      	movs	r1, #8
 8005924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005928:	f001 f934 	bl	8006b94 <HAL_GPIO_WritePin>

  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 800592c:	f107 0313 	add.w	r3, r7, #19
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff faa6 	bl	8004e84 <BSP_SPI2_Send>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d002      	beq.n	8005944 <BSP_LPS22HB_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800593e:	f06f 0305 	mvn.w	r3, #5
 8005942:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI2_Send(pdata, len) != len)
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	4619      	mov	r1, r3
 8005948:	68b8      	ldr	r0, [r7, #8]
 800594a:	f7ff fa9b 	bl	8004e84 <BSP_SPI2_Send>
 800594e:	4602      	mov	r2, r0
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	429a      	cmp	r2, r3
 8005954:	d002      	beq.n	800595c <BSP_LPS22HB_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005956:	f06f 0305 	mvn.w	r3, #5
 800595a:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800595c:	2201      	movs	r2, #1
 800595e:	2108      	movs	r1, #8
 8005960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005964:	f001 f916 	bl	8006b94 <HAL_GPIO_WritePin>

  return ret;
 8005968:	697b      	ldr	r3, [r7, #20]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <BSP_LPS22HB_ReadReg>:
* @param  pdata the pointer to the data to be read
* @param  len the length of the data to be read
* @retval BSP status
*/
static int32_t BSP_LPS22HB_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60ba      	str	r2, [r7, #8]
 800597c:	461a      	mov	r2, r3
 800597e:	4603      	mov	r3, r0
 8005980:	81fb      	strh	r3, [r7, #14]
 8005982:	460b      	mov	r3, r1
 8005984:	81bb      	strh	r3, [r7, #12]
 8005986:	4613      	mov	r3, r2
 8005988:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800598e:	89bb      	ldrh	r3, [r7, #12]
 8005990:	74fb      	strb	r3, [r7, #19]
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
 8005992:	2200      	movs	r2, #0
 8005994:	2108      	movs	r1, #8
 8005996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800599a:	f001 f8fb 	bl	8006b94 <HAL_GPIO_WritePin>
  LPS22HB_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	4619      	mov	r1, r3
 80059a8:	481d      	ldr	r0, [pc, #116]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059aa:	f000 f8cd 	bl	8005b48 <LPS22HB_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 80059ae:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059bc:	601a      	str	r2, [r3, #0]
  SPI_1LINE_RX(&hbusspi2);  
 80059be:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059cc:	601a      	str	r2, [r3, #0]
  
  if (len > 1)
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d906      	bls.n	80059e2 <BSP_LPS22HB_ReadReg+0x6e>
  {
    LPS22HB_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	461a      	mov	r2, r3
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4811      	ldr	r0, [pc, #68]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059dc:	f000 f822 	bl	8005a24 <LPS22HB_SPI_Read_nBytes>
 80059e0:	e003      	b.n	80059ea <BSP_LPS22HB_ReadReg+0x76>
  }
  else
  {
    LPS22HB_SPI_Read(&hbusspi2, (pdata));
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	480e      	ldr	r0, [pc, #56]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059e6:	f000 f874 	bl	8005ad2 <LPS22HB_SPI_Read>
  }
  
  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);  
 80059ea:	2201      	movs	r2, #1
 80059ec:	2108      	movs	r1, #8
 80059ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059f2:	f001 f8cf 	bl	8006b94 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a04:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <BSP_LPS22HB_ReadReg+0xac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a14:	601a      	str	r2, [r3, #0]
  
  return ret;
 8005a16:	697b      	ldr	r3, [r7, #20]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	200027c8 	.word	0x200027c8

08005a24 <LPS22HB_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LPS22HB_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a32:	b672      	cpsid	i
}
 8005a34:	bf00      	nop
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a44:	601a      	str	r2, [r3, #0]
  
  /* Transfer loop */
  while (nBytesToRead > 1U)
 8005a46:	e013      	b.n	8005a70 <LPS22HB_SPI_Read_nBytes+0x4c>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <LPS22HB_SPI_Read_nBytes+0x4c>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	701a      	strb	r2, [r3, #0]
      val += sizeof(uint8_t);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	3301      	adds	r3, #1
 8005a68:	60bb      	str	r3, [r7, #8]
      nBytesToRead--;
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	80fb      	strh	r3, [r7, #6]
  while (nBytesToRead > 1U)
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d8e8      	bhi.n	8005a48 <LPS22HB_SPI_Read_nBytes+0x24>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a76:	f3bf 8f4f 	dsb	sy
}
 8005a7a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005a7c:	f3bf 8f4f 	dsb	sy
}
 8005a80:	bf00      	nop
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */
  
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a92:	b662      	cpsie	i
}
 8005a94:	bf00      	nop
  
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005a96:	bf00      	nop
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d1f8      	bne.n	8005a98 <LPS22HB_SPI_Read_nBytes+0x74>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005ab4:	bf00      	nop
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	2b80      	cmp	r3, #128	; 0x80
 8005ac2:	d0f8      	beq.n	8005ab6 <LPS22HB_SPI_Read_nBytes+0x92>
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <LPS22HB_SPI_Read>:
* @param  command: command id.
* @param  uint8_t val: value.
* @retval None
*/
void LPS22HB_SPI_Read(SPI_HandleTypeDef* xSpiHandle, uint8_t *val)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005adc:	b672      	cpsid	i
}
 8005ade:	bf00      	nop
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
  
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aee:	601a      	str	r2, [r3, #0]
  __asm("dsb\n");
 8005af0:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005af4:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b08:	b662      	cpsie	i
}
 8005b0a:	bf00      	nop
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005b0c:	bf00      	nop
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d1f8      	bne.n	8005b0e <LPS22HB_SPI_Read+0x3c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b2a:	bf00      	nop
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d0f8      	beq.n	8005b2c <LPS22HB_SPI_Read+0x5a>
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <LPS22HB_SPI_Write>:
* @param  command : command id.
* @param  val : value.
* @retval None
*/
void LPS22HB_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005b54:	bf00      	nop
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d1f8      	bne.n	8005b56 <LPS22HB_SPI_Write+0xe>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	78fa      	ldrb	r2, [r7, #3]
 8005b6c:	701a      	strb	r2, [r3, #0]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005b6e:	bf00      	nop
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f8      	bne.n	8005b70 <LPS22HB_SPI_Write+0x28>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b7e:	bf00      	nop
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d0f8      	beq.n	8005b80 <LPS22HB_SPI_Write+0x38>
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <us100_init>:
/**
 * Initializes the US-100 UART and DMA.
 * @param huart_init        The UART_HandleTypeDef associated with the UART connected to sensor.
 * @param hdma_uart_rx_init The DMA_HandleTypeDef associated with the DMA to be used with sensor.
 */
void us100_init(UART_HandleTypeDef *huart_init, DMA_HandleTypeDef *hdma_uart_rx_init) {
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
	huart = huart_init;
 8005ba6:	4a06      	ldr	r2, [pc, #24]	; (8005bc0 <us100_init+0x24>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6013      	str	r3, [r2, #0]
	hdma_uart_rx = hdma_uart_rx_init;
 8005bac:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <us100_init+0x28>)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6013      	str	r3, [r2, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000300 	.word	0x20000300
 8005bc4:	20000304 	.word	0x20000304

08005bc8 <us100_write>:

/**
 * Writes a value to the sensor.
 * @param val Value to write to sensor.
 */
void us100_write(uint8_t val) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(huart, &val, 1, HAL_MAX_DELAY);
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <us100_write+0x24>)
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	1df9      	adds	r1, r7, #7
 8005bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f006 fa4e 	bl	800c07e <HAL_UART_Transmit>
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000300 	.word	0x20000300

08005bf0 <us100_read>:
/**
 * Read value from the sensor using DMA.
 * @param buffer Buffer to store data received from sensor.
 * @param size   Size of buffer.
 */
void us100_read(uint8_t *buffer, uint8_t size) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive_DMA(huart, buffer, size);
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <us100_read+0x24>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	b292      	uxth	r2, r2
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f006 face 	bl	800c1a8 <HAL_UART_Receive_DMA>
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000300 	.word	0x20000300

08005c18 <us100_data_available>:

/**
 * Function to check if data is available from the US-100 sensor.
 * @return TRUE if data is available and FALSE otherwise.
 */
uint8_t us100_data_available(void) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
	if (state == IDLE)
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <us100_data_available+0x7c>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10f      	bne.n	8005c44 <us100_data_available+0x2c>
	{
		// Send request to measure distance
		us100_write(cmd_dist);
 8005c24:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <us100_data_available+0x80>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ffcd 	bl	8005bc8 <us100_write>
		us100_read(UART5_rx_buffer, 2);
 8005c2e:	2102      	movs	r1, #2
 8005c30:	481a      	ldr	r0, [pc, #104]	; (8005c9c <us100_data_available+0x84>)
 8005c32:	f7ff ffdd 	bl	8005bf0 <us100_read>
		// Change state to wait for response
		state = WAIT_DIST;
 8005c36:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <us100_data_available+0x7c>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
		try = 0;
 8005c3c:	4b18      	ldr	r3, [pc, #96]	; (8005ca0 <us100_data_available+0x88>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	e014      	b.n	8005c6e <us100_data_available+0x56>
	}
	else if (state == CALC_DIST)
 8005c44:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <us100_data_available+0x7c>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d110      	bne.n	8005c6e <us100_data_available+0x56>
	{
		// Calculate the distance
		distance = (UART5_rx_buffer[0] << 8) + UART5_rx_buffer[1];
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <us100_data_available+0x84>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <us100_data_available+0x84>)
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <us100_data_available+0x8c>)
 8005c62:	801a      	strh	r2, [r3, #0]
		state = IDLE;
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <us100_data_available+0x7c>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e010      	b.n	8005c90 <us100_data_available+0x78>
	}

  HAL_Delay(100);
 8005c6e:	2064      	movs	r0, #100	; 0x64
 8005c70:	f7fb fd74 	bl	800175c <HAL_Delay>

  // Retry after 5 seconds
  if (++try >= 50) {
 8005c74:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <us100_data_available+0x88>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <us100_data_available+0x88>)
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <us100_data_available+0x88>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b31      	cmp	r3, #49	; 0x31
 8005c86:	d902      	bls.n	8005c8e <us100_data_available+0x76>
  	state = IDLE;
 8005c88:	4b02      	ldr	r3, [pc, #8]	; (8005c94 <us100_data_available+0x7c>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
  }
  return FALSE;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	200002f8 	.word	0x200002f8
 8005c98:	20000094 	.word	0x20000094
 8005c9c:	200002fc 	.word	0x200002fc
 8005ca0:	200002f9 	.word	0x200002f9
 8005ca4:	200002fa 	.word	0x200002fa

08005ca8 <us100_get_distance>:

/**
 * Returns the distance calculated by the US-100 sensor.
 * @return Distance calculated by sensor in millimeters.
 */
uint16_t us100_get_distance(void) {
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0

	distance = (UART5_rx_buffer[0] << 8) + UART5_rx_buffer[1];
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <us100_get_distance+0x54>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <us100_get_distance+0x54>)
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <us100_get_distance+0x58>)
 8005cc2:	801a      	strh	r2, [r3, #0]

	if (distance > max_mm_distance)
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <us100_get_distance+0x58>)
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <us100_get_distance+0x5c>)
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d904      	bls.n	8005cda <us100_get_distance+0x32>
	{
		distance = UINT16_MAX;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <us100_get_distance+0x58>)
 8005cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e008      	b.n	8005cec <us100_get_distance+0x44>
	}
	else if (distance < min_mm_distance) {
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <us100_get_distance+0x58>)
 8005cdc:	881a      	ldrh	r2, [r3, #0]
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <us100_get_distance+0x60>)
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d202      	bcs.n	8005cec <us100_get_distance+0x44>
		distance = 0;
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <us100_get_distance+0x58>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	801a      	strh	r2, [r3, #0]
	}
	return distance;
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <us100_get_distance+0x58>)
 8005cee:	881b      	ldrh	r3, [r3, #0]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	200002fc 	.word	0x200002fc
 8005d00:	200002fa 	.word	0x200002fa
 8005d04:	20000096 	.word	0x20000096
 8005d08:	20000308 	.word	0x20000308

08005d0c <HAL_UART_RxCpltCallback>:
/**
 * Callback function for DMA.
 * @param huart The UART_HandleTypeDef that is utilized for US-100 sensor UART channel.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	if (state == WAIT_DIST) {
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_UART_RxCpltCallback+0x24>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d102      	bne.n	8005d22 <HAL_UART_RxCpltCallback+0x16>
		state = CALC_DIST;
 8005d1c:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <HAL_UART_RxCpltCallback+0x24>)
 8005d1e:	2202      	movs	r2, #2
 8005d20:	701a      	strb	r2, [r3, #0]
	}
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	200002f8 	.word	0x200002f8

08005d34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d3e:	2003      	movs	r0, #3
 8005d40:	f000 f972 	bl	8006028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d44:	200f      	movs	r0, #15
 8005d46:	f000 f815 	bl	8005d74 <HAL_InitTick>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	71fb      	strb	r3, [r7, #7]
 8005d54:	e001      	b.n	8005d5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d56:	f000 f805 	bl	8005d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005d80:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <HAL_InitTick+0x6c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d023      	beq.n	8005dd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005d88:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <HAL_InitTick+0x70>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <HAL_InitTick+0x6c>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	4619      	mov	r1, r3
 8005d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f985 	bl	80060ae <HAL_SYSTICK_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10f      	bne.n	8005dca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b0f      	cmp	r3, #15
 8005dae:	d809      	bhi.n	8005dc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005db0:	2200      	movs	r2, #0
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db8:	f000 f941 	bl	800603e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dbc:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <HAL_InitTick+0x74>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	e007      	b.n	8005dd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]
 8005dc8:	e004      	b.n	8005dd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	e001      	b.n	8005dd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	2000009c 	.word	0x2000009c
 8005de4:	20000004 	.word	0x20000004
 8005de8:	20000098 	.word	0x20000098

08005dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <HAL_IncTick+0x20>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <HAL_IncTick+0x24>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	4a04      	ldr	r2, [pc, #16]	; (8005e10 <HAL_IncTick+0x24>)
 8005dfe:	6013      	str	r3, [r2, #0]
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000009c 	.word	0x2000009c
 8005e10:	20002898 	.word	0x20002898

08005e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return uwTick;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <HAL_GetTick+0x14>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20002898 	.word	0x20002898

08005e2c <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <HAL_GetHalVersion+0x10>)
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	010d0000 	.word	0x010d0000

08005e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <__NVIC_SetPriorityGrouping+0x44>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e72:	4a04      	ldr	r2, [pc, #16]	; (8005e84 <__NVIC_SetPriorityGrouping+0x44>)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	60d3      	str	r3, [r2, #12]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	e000ed00 	.word	0xe000ed00

08005e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	f003 0307 	and.w	r3, r3, #7
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	e000ed00 	.word	0xe000ed00

08005ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	db0b      	blt.n	8005ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	f003 021f 	and.w	r2, r3, #31
 8005ebc:	4907      	ldr	r1, [pc, #28]	; (8005edc <__NVIC_EnableIRQ+0x38>)
 8005ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	e000e100 	.word	0xe000e100

08005ee0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db12      	blt.n	8005f18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	490a      	ldr	r1, [pc, #40]	; (8005f24 <__NVIC_DisableIRQ+0x44>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2001      	movs	r0, #1
 8005f02:	fa00 f202 	lsl.w	r2, r0, r2
 8005f06:	3320      	adds	r3, #32
 8005f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f0c:	f3bf 8f4f 	dsb	sy
}
 8005f10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f12:	f3bf 8f6f 	isb	sy
}
 8005f16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	e000e100 	.word	0xe000e100

08005f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db0a      	blt.n	8005f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	490c      	ldr	r1, [pc, #48]	; (8005f74 <__NVIC_SetPriority+0x4c>)
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	0112      	lsls	r2, r2, #4
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f50:	e00a      	b.n	8005f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4908      	ldr	r1, [pc, #32]	; (8005f78 <__NVIC_SetPriority+0x50>)
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	0112      	lsls	r2, r2, #4
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	440b      	add	r3, r1
 8005f66:	761a      	strb	r2, [r3, #24]
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000e100 	.word	0xe000e100
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	; 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f1c3 0307 	rsb	r3, r3, #7
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	bf28      	it	cs
 8005f9a:	2304      	movcs	r3, #4
 8005f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d902      	bls.n	8005fac <NVIC_EncodePriority+0x30>
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3b03      	subs	r3, #3
 8005faa:	e000      	b.n	8005fae <NVIC_EncodePriority+0x32>
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	fa01 f303 	lsl.w	r3, r1, r3
 8005fce:	43d9      	mvns	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd4:	4313      	orrs	r3, r2
         );
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3724      	adds	r7, #36	; 0x24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff4:	d301      	bcc.n	8005ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e00f      	b.n	800601a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ffa:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <SysTick_Config+0x40>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006002:	210f      	movs	r1, #15
 8006004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006008:	f7ff ff8e 	bl	8005f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <SysTick_Config+0x40>)
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006012:	4b04      	ldr	r3, [pc, #16]	; (8006024 <SysTick_Config+0x40>)
 8006014:	2207      	movs	r2, #7
 8006016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	e000e010 	.word	0xe000e010

08006028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff ff05 	bl	8005e40 <__NVIC_SetPriorityGrouping>
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	4603      	mov	r3, r0
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006050:	f7ff ff1a 	bl	8005e88 <__NVIC_GetPriorityGrouping>
 8006054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	6978      	ldr	r0, [r7, #20]
 800605c:	f7ff ff8e 	bl	8005f7c <NVIC_EncodePriority>
 8006060:	4602      	mov	r2, r0
 8006062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006066:	4611      	mov	r1, r2
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff5d 	bl	8005f28 <__NVIC_SetPriority>
}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	4603      	mov	r3, r0
 800607e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff ff0d 	bl	8005ea4 <__NVIC_EnableIRQ>
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	4603      	mov	r3, r0
 800609a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800609c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff ff1d 	bl	8005ee0 <__NVIC_DisableIRQ>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ff94 	bl	8005fe4 <SysTick_Config>
 80060bc:	4603      	mov	r3, r0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80060ca:	f000 f802 	bl	80060d2 <HAL_SYSTICK_Callback>
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80060d2:	b480      	push	{r7}
 80060d4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e098      	b.n	8006224 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	4b4d      	ldr	r3, [pc, #308]	; (8006230 <HAL_DMA_Init+0x150>)
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d80f      	bhi.n	800611e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	4b4b      	ldr	r3, [pc, #300]	; (8006234 <HAL_DMA_Init+0x154>)
 8006106:	4413      	add	r3, r2
 8006108:	4a4b      	ldr	r2, [pc, #300]	; (8006238 <HAL_DMA_Init+0x158>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	009a      	lsls	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a48      	ldr	r2, [pc, #288]	; (800623c <HAL_DMA_Init+0x15c>)
 800611a:	641a      	str	r2, [r3, #64]	; 0x40
 800611c:	e00e      	b.n	800613c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	4b46      	ldr	r3, [pc, #280]	; (8006240 <HAL_DMA_Init+0x160>)
 8006126:	4413      	add	r3, r2
 8006128:	4a43      	ldr	r2, [pc, #268]	; (8006238 <HAL_DMA_Init+0x158>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	091b      	lsrs	r3, r3, #4
 8006130:	009a      	lsls	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a42      	ldr	r2, [pc, #264]	; (8006244 <HAL_DMA_Init+0x164>)
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006196:	d039      	beq.n	800620c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	4a27      	ldr	r2, [pc, #156]	; (800623c <HAL_DMA_Init+0x15c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d11a      	bne.n	80061d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061a2:	4b29      	ldr	r3, [pc, #164]	; (8006248 <HAL_DMA_Init+0x168>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	f003 031c 	and.w	r3, r3, #28
 80061ae:	210f      	movs	r1, #15
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	43db      	mvns	r3, r3
 80061b6:	4924      	ldr	r1, [pc, #144]	; (8006248 <HAL_DMA_Init+0x168>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061bc:	4b22      	ldr	r3, [pc, #136]	; (8006248 <HAL_DMA_Init+0x168>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c8:	f003 031c 	and.w	r3, r3, #28
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	491d      	ldr	r1, [pc, #116]	; (8006248 <HAL_DMA_Init+0x168>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	600b      	str	r3, [r1, #0]
 80061d6:	e019      	b.n	800620c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061d8:	4b1c      	ldr	r3, [pc, #112]	; (800624c <HAL_DMA_Init+0x16c>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e0:	f003 031c 	and.w	r3, r3, #28
 80061e4:	210f      	movs	r1, #15
 80061e6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	4917      	ldr	r1, [pc, #92]	; (800624c <HAL_DMA_Init+0x16c>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061f2:	4b16      	ldr	r3, [pc, #88]	; (800624c <HAL_DMA_Init+0x16c>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fe:	f003 031c 	and.w	r3, r3, #28
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	4911      	ldr	r1, [pc, #68]	; (800624c <HAL_DMA_Init+0x16c>)
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40020407 	.word	0x40020407
 8006234:	bffdfff8 	.word	0xbffdfff8
 8006238:	cccccccd 	.word	0xcccccccd
 800623c:	40020000 	.word	0x40020000
 8006240:	bffdfbf8 	.word	0xbffdfbf8
 8006244:	40020400 	.word	0x40020400
 8006248:	400200a8 	.word	0x400200a8
 800624c:	400204a8 	.word	0x400204a8

08006250 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_DMA_Start_IT+0x20>
 800626c:	2302      	movs	r3, #2
 800626e:	e04b      	b.n	8006308 <HAL_DMA_Start_IT+0xb8>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	d13a      	bne.n	80062fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f92f 	bl	800650c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 020e 	orr.w	r2, r2, #14
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e00f      	b.n	80062e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0204 	bic.w	r2, r2, #4
 80062d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 020a 	orr.w	r2, r2, #10
 80062e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e005      	b.n	8006306 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006302:	2302      	movs	r3, #2
 8006304:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d005      	beq.n	8006334 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2204      	movs	r2, #4
 800632c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	e029      	b.n	8006388 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 020e 	bic.w	r2, r2, #14
 8006342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006358:	f003 021c 	and.w	r2, r3, #28
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	2101      	movs	r1, #1
 8006362:	fa01 f202 	lsl.w	r2, r1, r2
 8006366:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
    }
  }
  return status;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	f003 031c 	and.w	r3, r3, #28
 80063b2:	2204      	movs	r2, #4
 80063b4:	409a      	lsls	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d026      	beq.n	800640c <HAL_DMA_IRQHandler+0x7a>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d021      	beq.n	800640c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0204 	bic.w	r2, r2, #4
 80063e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	f003 021c 	and.w	r2, r3, #28
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2104      	movs	r1, #4
 80063f4:	fa01 f202 	lsl.w	r2, r1, r2
 80063f8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d071      	beq.n	80064e6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800640a:	e06c      	b.n	80064e6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006410:	f003 031c 	and.w	r3, r3, #28
 8006414:	2202      	movs	r2, #2
 8006416:	409a      	lsls	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d02e      	beq.n	800647e <HAL_DMA_IRQHandler+0xec>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d029      	beq.n	800647e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 020a 	bic.w	r2, r2, #10
 8006446:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006454:	f003 021c 	and.w	r2, r3, #28
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	2102      	movs	r1, #2
 800645e:	fa01 f202 	lsl.w	r2, r1, r2
 8006462:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d038      	beq.n	80064e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800647c:	e033      	b.n	80064e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	f003 031c 	and.w	r3, r3, #28
 8006486:	2208      	movs	r2, #8
 8006488:	409a      	lsls	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d02a      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x156>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d025      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 020e 	bic.w	r2, r2, #14
 80064aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b0:	f003 021c 	and.w	r2, r3, #28
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f202 	lsl.w	r2, r1, r2
 80064be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
}
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064fe:	b2db      	uxtb	r3, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	f003 021c 	and.w	r2, r3, #28
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	2101      	movs	r1, #1
 8006528:	fa01 f202 	lsl.w	r2, r1, r2
 800652c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b10      	cmp	r3, #16
 800653c:	d108      	bne.n	8006550 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800654e:	e007      	b.n	8006560 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	460b      	mov	r3, r1
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	605a      	str	r2, [r3, #4]
      break;
 800658a:	e002      	b.n	8006592 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	75fb      	strb	r3, [r7, #23]
      break;
 8006590:	bf00      	nop
  }

  return status;
 8006592:	7dfb      	ldrb	r3, [r7, #23]
}
 8006594:	4618      	mov	r0, r3
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e003      	b.n	80065bc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80065ba:	2300      	movs	r3, #0
  }
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2201      	movs	r2, #1
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_EXTI_IRQHandler+0x5c>)
 80065f2:	4413      	add	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4013      	ands	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4798      	blx	r3
    }
  }
}
 800661a:	bf00      	nop
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40010414 	.word	0x40010414

08006628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006636:	e17f      	b.n	8006938 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	2101      	movs	r1, #1
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	4013      	ands	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8171 	beq.w	8006932 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d00b      	beq.n	8006670 <HAL_GPIO_Init+0x48>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d007      	beq.n	8006670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006664:	2b11      	cmp	r3, #17
 8006666:	d003      	beq.n	8006670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b12      	cmp	r3, #18
 800666e:	d130      	bne.n	80066d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	2203      	movs	r2, #3
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066a6:	2201      	movs	r2, #1
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4013      	ands	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	091b      	lsrs	r3, r3, #4
 80066bc:	f003 0201 	and.w	r2, r3, #1
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d118      	bne.n	8006710 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80066e4:	2201      	movs	r2, #1
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4013      	ands	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f003 0201 	and.w	r2, r3, #1
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	2203      	movs	r2, #3
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43db      	mvns	r3, r3
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4013      	ands	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x128>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b12      	cmp	r3, #18
 800674e:	d123      	bne.n	8006798 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	08da      	lsrs	r2, r3, #3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3208      	adds	r2, #8
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	220f      	movs	r2, #15
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4013      	ands	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	08da      	lsrs	r2, r3, #3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3208      	adds	r2, #8
 8006792:	6939      	ldr	r1, [r7, #16]
 8006794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	2203      	movs	r2, #3
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	43db      	mvns	r3, r3
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0203 	and.w	r2, r3, #3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80ac 	beq.w	8006932 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067da:	4b5f      	ldr	r3, [pc, #380]	; (8006958 <HAL_GPIO_Init+0x330>)
 80067dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067de:	4a5e      	ldr	r2, [pc, #376]	; (8006958 <HAL_GPIO_Init+0x330>)
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	6613      	str	r3, [r2, #96]	; 0x60
 80067e6:	4b5c      	ldr	r3, [pc, #368]	; (8006958 <HAL_GPIO_Init+0x330>)
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	60bb      	str	r3, [r7, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80067f2:	4a5a      	ldr	r2, [pc, #360]	; (800695c <HAL_GPIO_Init+0x334>)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	089b      	lsrs	r3, r3, #2
 80067f8:	3302      	adds	r3, #2
 80067fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	220f      	movs	r2, #15
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43db      	mvns	r3, r3
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4013      	ands	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800681c:	d025      	beq.n	800686a <HAL_GPIO_Init+0x242>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a4f      	ldr	r2, [pc, #316]	; (8006960 <HAL_GPIO_Init+0x338>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01f      	beq.n	8006866 <HAL_GPIO_Init+0x23e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a4e      	ldr	r2, [pc, #312]	; (8006964 <HAL_GPIO_Init+0x33c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d019      	beq.n	8006862 <HAL_GPIO_Init+0x23a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a4d      	ldr	r2, [pc, #308]	; (8006968 <HAL_GPIO_Init+0x340>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <HAL_GPIO_Init+0x236>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a4c      	ldr	r2, [pc, #304]	; (800696c <HAL_GPIO_Init+0x344>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00d      	beq.n	800685a <HAL_GPIO_Init+0x232>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a4b      	ldr	r2, [pc, #300]	; (8006970 <HAL_GPIO_Init+0x348>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <HAL_GPIO_Init+0x22e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a4a      	ldr	r2, [pc, #296]	; (8006974 <HAL_GPIO_Init+0x34c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d101      	bne.n	8006852 <HAL_GPIO_Init+0x22a>
 800684e:	2306      	movs	r3, #6
 8006850:	e00c      	b.n	800686c <HAL_GPIO_Init+0x244>
 8006852:	2307      	movs	r3, #7
 8006854:	e00a      	b.n	800686c <HAL_GPIO_Init+0x244>
 8006856:	2305      	movs	r3, #5
 8006858:	e008      	b.n	800686c <HAL_GPIO_Init+0x244>
 800685a:	2304      	movs	r3, #4
 800685c:	e006      	b.n	800686c <HAL_GPIO_Init+0x244>
 800685e:	2303      	movs	r3, #3
 8006860:	e004      	b.n	800686c <HAL_GPIO_Init+0x244>
 8006862:	2302      	movs	r3, #2
 8006864:	e002      	b.n	800686c <HAL_GPIO_Init+0x244>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <HAL_GPIO_Init+0x244>
 800686a:	2300      	movs	r3, #0
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	f002 0203 	and.w	r2, r2, #3
 8006872:	0092      	lsls	r2, r2, #2
 8006874:	4093      	lsls	r3, r2
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800687c:	4937      	ldr	r1, [pc, #220]	; (800695c <HAL_GPIO_Init+0x334>)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	089b      	lsrs	r3, r3, #2
 8006882:	3302      	adds	r3, #2
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800688a:	4b3b      	ldr	r3, [pc, #236]	; (8006978 <HAL_GPIO_Init+0x350>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	43db      	mvns	r3, r3
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4013      	ands	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068ae:	4a32      	ldr	r2, [pc, #200]	; (8006978 <HAL_GPIO_Init+0x350>)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80068b4:	4b30      	ldr	r3, [pc, #192]	; (8006978 <HAL_GPIO_Init+0x350>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	43db      	mvns	r3, r3
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4013      	ands	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068d8:	4a27      	ldr	r2, [pc, #156]	; (8006978 <HAL_GPIO_Init+0x350>)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <HAL_GPIO_Init+0x350>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	43db      	mvns	r3, r3
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4013      	ands	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006902:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <HAL_GPIO_Init+0x350>)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <HAL_GPIO_Init+0x350>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	43db      	mvns	r3, r3
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4013      	ands	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800692c:	4a12      	ldr	r2, [pc, #72]	; (8006978 <HAL_GPIO_Init+0x350>)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	3301      	adds	r3, #1
 8006936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	fa22 f303 	lsr.w	r3, r2, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	f47f ae78 	bne.w	8006638 <HAL_GPIO_Init+0x10>
  }
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40021000 	.word	0x40021000
 800695c:	40010000 	.word	0x40010000
 8006960:	48000400 	.word	0x48000400
 8006964:	48000800 	.word	0x48000800
 8006968:	48000c00 	.word	0x48000c00
 800696c:	48001000 	.word	0x48001000
 8006970:	48001400 	.word	0x48001400
 8006974:	48001800 	.word	0x48001800
 8006978:	40010400 	.word	0x40010400

0800697c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800698a:	e0cd      	b.n	8006b28 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800698c:	2201      	movs	r2, #1
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	4013      	ands	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80c0 	beq.w	8006b22 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80069a2:	4a68      	ldr	r2, [pc, #416]	; (8006b44 <HAL_GPIO_DeInit+0x1c8>)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	089b      	lsrs	r3, r3, #2
 80069a8:	3302      	adds	r3, #2
 80069aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	220f      	movs	r2, #15
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80069ca:	d025      	beq.n	8006a18 <HAL_GPIO_DeInit+0x9c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a5e      	ldr	r2, [pc, #376]	; (8006b48 <HAL_GPIO_DeInit+0x1cc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01f      	beq.n	8006a14 <HAL_GPIO_DeInit+0x98>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a5d      	ldr	r2, [pc, #372]	; (8006b4c <HAL_GPIO_DeInit+0x1d0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d019      	beq.n	8006a10 <HAL_GPIO_DeInit+0x94>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a5c      	ldr	r2, [pc, #368]	; (8006b50 <HAL_GPIO_DeInit+0x1d4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_GPIO_DeInit+0x90>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a5b      	ldr	r2, [pc, #364]	; (8006b54 <HAL_GPIO_DeInit+0x1d8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00d      	beq.n	8006a08 <HAL_GPIO_DeInit+0x8c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a5a      	ldr	r2, [pc, #360]	; (8006b58 <HAL_GPIO_DeInit+0x1dc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <HAL_GPIO_DeInit+0x88>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a59      	ldr	r2, [pc, #356]	; (8006b5c <HAL_GPIO_DeInit+0x1e0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d101      	bne.n	8006a00 <HAL_GPIO_DeInit+0x84>
 80069fc:	2306      	movs	r3, #6
 80069fe:	e00c      	b.n	8006a1a <HAL_GPIO_DeInit+0x9e>
 8006a00:	2307      	movs	r3, #7
 8006a02:	e00a      	b.n	8006a1a <HAL_GPIO_DeInit+0x9e>
 8006a04:	2305      	movs	r3, #5
 8006a06:	e008      	b.n	8006a1a <HAL_GPIO_DeInit+0x9e>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	e006      	b.n	8006a1a <HAL_GPIO_DeInit+0x9e>
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e004      	b.n	8006a1a <HAL_GPIO_DeInit+0x9e>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e002      	b.n	8006a1a <HAL_GPIO_DeInit+0x9e>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_GPIO_DeInit+0x9e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	f002 0203 	and.w	r2, r2, #3
 8006a20:	0092      	lsls	r2, r2, #2
 8006a22:	4093      	lsls	r3, r2
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d132      	bne.n	8006a90 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006a2a:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	43db      	mvns	r3, r3
 8006a32:	494b      	ldr	r1, [pc, #300]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006a38:	4b49      	ldr	r3, [pc, #292]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	4947      	ldr	r1, [pc, #284]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006a46:	4b46      	ldr	r3, [pc, #280]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	4944      	ldr	r1, [pc, #272]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006a54:	4b42      	ldr	r3, [pc, #264]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	4940      	ldr	r1, [pc, #256]	; (8006b60 <HAL_GPIO_DeInit+0x1e4>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	220f      	movs	r2, #15
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006a72:	4a34      	ldr	r2, [pc, #208]	; (8006b44 <HAL_GPIO_DeInit+0x1c8>)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	089b      	lsrs	r3, r3, #2
 8006a78:	3302      	adds	r3, #2
 8006a7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	4830      	ldr	r0, [pc, #192]	; (8006b44 <HAL_GPIO_DeInit+0x1c8>)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	089b      	lsrs	r3, r3, #2
 8006a88:	400a      	ands	r2, r1
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	2103      	movs	r1, #3
 8006a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	08da      	lsrs	r2, r3, #3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3208      	adds	r2, #8
 8006aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	220f      	movs	r2, #15
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	08d2      	lsrs	r2, r2, #3
 8006ac4:	4019      	ands	r1, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3208      	adds	r2, #8
 8006aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	2103      	movs	r1, #3
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	401a      	ands	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	2103      	movs	r1, #3
 8006b02:	fa01 f303 	lsl.w	r3, r1, r3
 8006b06:	43db      	mvns	r3, r3
 8006b08:	401a      	ands	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b12:	2101      	movs	r1, #1
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	3301      	adds	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f47f af2b 	bne.w	800698c <HAL_GPIO_DeInit+0x10>
  }
}
 8006b36:	bf00      	nop
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40010000 	.word	0x40010000
 8006b48:	48000400 	.word	0x48000400
 8006b4c:	48000800 	.word	0x48000800
 8006b50:	48000c00 	.word	0x48000c00
 8006b54:	48001000 	.word	0x48001000
 8006b58:	48001400 	.word	0x48001400
 8006b5c:	48001800 	.word	0x48001800
 8006b60:	40010400 	.word	0x40010400

08006b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	887b      	ldrh	r3, [r7, #2]
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
 8006b80:	e001      	b.n	8006b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	807b      	strh	r3, [r7, #2]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ba4:	787b      	ldrb	r3, [r7, #1]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006baa:	887a      	ldrh	r2, [r7, #2]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bb0:	e002      	b.n	8006bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e081      	b.n	8006cda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8a8 	bl	8006d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2224      	movs	r2, #36	; 0x24
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d107      	bne.n	8006c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	e006      	b.n	8006c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d104      	bne.n	8006c5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	ea42 0103 	orr.w	r1, r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	69d9      	ldr	r1, [r3, #28]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e021      	b.n	8006d38 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2224      	movs	r2, #36	; 0x24
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f821 	bl	8006d54 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	817b      	strh	r3, [r7, #10]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	813b      	strh	r3, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	f040 80f9 	bne.w	8006f82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_I2C_Mem_Write+0x34>
 8006d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d105      	bne.n	8006da8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0ed      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_I2C_Mem_Write+0x4e>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e0e6      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dbe:	f7ff f829 	bl	8005e14 <HAL_GetTick>
 8006dc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2319      	movs	r3, #25
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 ffe6 	bl	8007da2 <I2C_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0d1      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2221      	movs	r2, #33	; 0x21
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2240      	movs	r2, #64	; 0x40
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e08:	88f8      	ldrh	r0, [r7, #6]
 8006e0a:	893a      	ldrh	r2, [r7, #8]
 8006e0c:	8979      	ldrh	r1, [r7, #10]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4603      	mov	r3, r0
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fb9f 	bl	800755c <I2C_RequestMemoryWrite>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0a9      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2bff      	cmp	r3, #255	; 0xff
 8006e38:	d90e      	bls.n	8006e58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	22ff      	movs	r2, #255	; 0xff
 8006e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	8979      	ldrh	r1, [r7, #10]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f001 f8c9 	bl	8007fe8 <I2C_TransferConfig>
 8006e56:	e00f      	b.n	8006e78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	8979      	ldrh	r1, [r7, #10]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f001 f8b8 	bl	8007fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 ffd0 	bl	8007e22 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e07b      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d034      	beq.n	8006f30 <HAL_I2C_Mem_Write+0x1c8>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d130      	bne.n	8006f30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2180      	movs	r1, #128	; 0x80
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 ff62 	bl	8007da2 <I2C_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e04d      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2bff      	cmp	r3, #255	; 0xff
 8006ef0:	d90e      	bls.n	8006f10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	8979      	ldrh	r1, [r7, #10]
 8006f00:	2300      	movs	r3, #0
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f001 f86d 	bl	8007fe8 <I2C_TransferConfig>
 8006f0e:	e00f      	b.n	8006f30 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	8979      	ldrh	r1, [r7, #10]
 8006f22:	2300      	movs	r3, #0
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f001 f85c 	bl	8007fe8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d19e      	bne.n	8006e78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 ffaf 	bl	8007ea2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e01a      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2220      	movs	r2, #32
 8006f54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <HAL_I2C_Mem_Write+0x224>)
 8006f62:	400b      	ands	r3, r1
 8006f64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e000      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006f82:	2302      	movs	r3, #2
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	fe00e800 	.word	0xfe00e800

08006f90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	4608      	mov	r0, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	817b      	strh	r3, [r7, #10]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	813b      	strh	r3, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	f040 80fd 	bne.w	80071b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_I2C_Mem_Read+0x34>
 8006fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0f1      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_I2C_Mem_Read+0x4e>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e0ea      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fe6:	f7fe ff15 	bl	8005e14 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2319      	movs	r3, #25
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fed2 	bl	8007da2 <I2C_WaitOnFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0d5      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2222      	movs	r2, #34	; 0x22
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2240      	movs	r2, #64	; 0x40
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a3a      	ldr	r2, [r7, #32]
 8007022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007030:	88f8      	ldrh	r0, [r7, #6]
 8007032:	893a      	ldrh	r2, [r7, #8]
 8007034:	8979      	ldrh	r1, [r7, #10]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4603      	mov	r3, r0
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fadf 	bl	8007604 <I2C_RequestMemoryRead>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0ad      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	2bff      	cmp	r3, #255	; 0xff
 8007060:	d90e      	bls.n	8007080 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	22ff      	movs	r2, #255	; 0xff
 8007066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706c:	b2da      	uxtb	r2, r3
 800706e:	8979      	ldrh	r1, [r7, #10]
 8007070:	4b52      	ldr	r3, [pc, #328]	; (80071bc <HAL_I2C_Mem_Read+0x22c>)
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 ffb5 	bl	8007fe8 <I2C_TransferConfig>
 800707e:	e00f      	b.n	80070a0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708e:	b2da      	uxtb	r2, r3
 8007090:	8979      	ldrh	r1, [r7, #10]
 8007092:	4b4a      	ldr	r3, [pc, #296]	; (80071bc <HAL_I2C_Mem_Read+0x22c>)
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 ffa4 	bl	8007fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	2200      	movs	r2, #0
 80070a8:	2104      	movs	r1, #4
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fe79 	bl	8007da2 <I2C_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e07c      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d034      	beq.n	8007160 <HAL_I2C_Mem_Read+0x1d0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d130      	bne.n	8007160 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	2200      	movs	r2, #0
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fe4a 	bl	8007da2 <I2C_WaitOnFlagUntilTimeout>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e04d      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	2bff      	cmp	r3, #255	; 0xff
 8007120:	d90e      	bls.n	8007140 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	22ff      	movs	r2, #255	; 0xff
 8007126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	b2da      	uxtb	r2, r3
 800712e:	8979      	ldrh	r1, [r7, #10]
 8007130:	2300      	movs	r3, #0
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 ff55 	bl	8007fe8 <I2C_TransferConfig>
 800713e:	e00f      	b.n	8007160 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714e:	b2da      	uxtb	r2, r3
 8007150:	8979      	ldrh	r1, [r7, #10]
 8007152:	2300      	movs	r3, #0
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 ff44 	bl	8007fe8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d19a      	bne.n	80070a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fe97 	bl	8007ea2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e01a      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2220      	movs	r2, #32
 8007184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_I2C_Mem_Read+0x230>)
 8007192:	400b      	ands	r3, r1
 8007194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e000      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80071b2:	2302      	movs	r3, #2
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	80002400 	.word	0x80002400
 80071c0:	fe00e800 	.word	0xfe00e800

080071c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
  }
}
 80071f0:	bf00      	nop
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d010      	beq.n	800723e <HAL_I2C_ER_IRQHandler+0x46>
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	f043 0201 	orr.w	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800723c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	0a9b      	lsrs	r3, r3, #10
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d010      	beq.n	800726c <HAL_I2C_ER_IRQHandler+0x74>
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	09db      	lsrs	r3, r3, #7
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	f043 0208 	orr.w	r2, r3, #8
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800726a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	0a5b      	lsrs	r3, r3, #9
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <HAL_I2C_ER_IRQHandler+0xa2>
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	09db      	lsrs	r3, r3, #7
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007288:	f043 0202 	orr.w	r2, r3, #2
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007298:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f003 030b 	and.w	r3, r3, #11
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc3f 	bl	8007b30 <I2C_ITError>
  }
}
 80072b2:	bf00      	nop
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	460b      	mov	r3, r1
 80072ec:	70fb      	strb	r3, [r7, #3]
 80072ee:	4613      	mov	r3, r2
 80072f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007348:	b2db      	uxtb	r3, r3
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <I2C_Slave_ISR_IT+0x24>
 8007376:	2302      	movs	r3, #2
 8007378:	e0ec      	b.n	8007554 <I2C_Slave_ISR_IT+0x1fe>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <I2C_Slave_ISR_IT+0x4c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800739a:	6939      	ldr	r1, [r7, #16]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 fa67 	bl	8007870 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04d      	beq.n	800744a <I2C_Slave_ISR_IT+0xf4>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d047      	beq.n	800744a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d128      	bne.n	8007416 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b28      	cmp	r3, #40	; 0x28
 80073ce:	d108      	bne.n	80073e2 <I2C_Slave_ISR_IT+0x8c>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d6:	d104      	bne.n	80073e2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80073d8:	6939      	ldr	r1, [r7, #16]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fb52 	bl	8007a84 <I2C_ITListenCplt>
 80073e0:	e032      	b.n	8007448 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b29      	cmp	r3, #41	; 0x29
 80073ec:	d10e      	bne.n	800740c <I2C_Slave_ISR_IT+0xb6>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073f4:	d00a      	beq.n	800740c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2210      	movs	r2, #16
 80073fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fc8d 	bl	8007d1e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f9d5 	bl	80077b4 <I2C_ITSlaveSeqCplt>
 800740a:	e01d      	b.n	8007448 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2210      	movs	r2, #16
 8007412:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007414:	e096      	b.n	8007544 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2210      	movs	r2, #16
 800741c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	f043 0204 	orr.w	r2, r3, #4
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <I2C_Slave_ISR_IT+0xe4>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007436:	f040 8085 	bne.w	8007544 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	4619      	mov	r1, r3
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fb75 	bl	8007b30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007446:	e07d      	b.n	8007544 <I2C_Slave_ISR_IT+0x1ee>
 8007448:	e07c      	b.n	8007544 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	089b      	lsrs	r3, r3, #2
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d030      	beq.n	80074b8 <I2C_Slave_ISR_IT+0x162>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	089b      	lsrs	r3, r3, #2
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d02a      	beq.n	80074b8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d018      	beq.n	800749e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d14f      	bne.n	8007548 <I2C_Slave_ISR_IT+0x1f2>
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074ae:	d04b      	beq.n	8007548 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f97f 	bl	80077b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80074b6:	e047      	b.n	8007548 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	08db      	lsrs	r3, r3, #3
 80074c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80074d0:	6939      	ldr	r1, [r7, #16]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f8ea 	bl	80076ac <I2C_ITAddrCplt>
 80074d8:	e037      	b.n	800754a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	085b      	lsrs	r3, r3, #1
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d031      	beq.n	800754a <I2C_Slave_ISR_IT+0x1f4>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d02b      	beq.n	800754a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d018      	beq.n	800752e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	851a      	strh	r2, [r3, #40]	; 0x28
 800752c:	e00d      	b.n	800754a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007534:	d002      	beq.n	800753c <I2C_Slave_ISR_IT+0x1e6>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f939 	bl	80077b4 <I2C_ITSlaveSeqCplt>
 8007542:	e002      	b.n	800754a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007544:	bf00      	nop
 8007546:	e000      	b.n	800754a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007548:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	4608      	mov	r0, r1
 8007566:	4611      	mov	r1, r2
 8007568:	461a      	mov	r2, r3
 800756a:	4603      	mov	r3, r0
 800756c:	817b      	strh	r3, [r7, #10]
 800756e:	460b      	mov	r3, r1
 8007570:	813b      	strh	r3, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007576:	88fb      	ldrh	r3, [r7, #6]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	8979      	ldrh	r1, [r7, #10]
 800757c:	4b20      	ldr	r3, [pc, #128]	; (8007600 <I2C_RequestMemoryWrite+0xa4>)
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fd2f 	bl	8007fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	69b9      	ldr	r1, [r7, #24]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fc47 	bl	8007e22 <I2C_WaitOnTXISFlagUntilTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e02c      	b.n	80075f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d105      	bne.n	80075b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075a4:	893b      	ldrh	r3, [r7, #8]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	629a      	str	r2, [r3, #40]	; 0x28
 80075ae:	e015      	b.n	80075dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075b0:	893b      	ldrh	r3, [r7, #8]
 80075b2:	0a1b      	lsrs	r3, r3, #8
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	69b9      	ldr	r1, [r7, #24]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fc2d 	bl	8007e22 <I2C_WaitOnTXISFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e012      	b.n	80075f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075d2:	893b      	ldrh	r3, [r7, #8]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2200      	movs	r2, #0
 80075e4:	2180      	movs	r1, #128	; 0x80
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fbdb 	bl	8007da2 <I2C_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	80002000 	.word	0x80002000

08007604 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af02      	add	r7, sp, #8
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4603      	mov	r3, r0
 8007614:	817b      	strh	r3, [r7, #10]
 8007616:	460b      	mov	r3, r1
 8007618:	813b      	strh	r3, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	b2da      	uxtb	r2, r3
 8007622:	8979      	ldrh	r1, [r7, #10]
 8007624:	4b20      	ldr	r3, [pc, #128]	; (80076a8 <I2C_RequestMemoryRead+0xa4>)
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fcdc 	bl	8007fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fbf4 	bl	8007e22 <I2C_WaitOnTXISFlagUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e02c      	b.n	800769e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007644:	88fb      	ldrh	r3, [r7, #6]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d105      	bne.n	8007656 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800764a:	893b      	ldrh	r3, [r7, #8]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	629a      	str	r2, [r3, #40]	; 0x28
 8007654:	e015      	b.n	8007682 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007656:	893b      	ldrh	r3, [r7, #8]
 8007658:	0a1b      	lsrs	r3, r3, #8
 800765a:	b29b      	uxth	r3, r3
 800765c:	b2da      	uxtb	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fbda 	bl	8007e22 <I2C_WaitOnTXISFlagUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e012      	b.n	800769e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007678:	893b      	ldrh	r3, [r7, #8]
 800767a:	b2da      	uxtb	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	2200      	movs	r2, #0
 800768a:	2140      	movs	r1, #64	; 0x40
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb88 	bl	8007da2 <I2C_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	80002000 	.word	0x80002000

080076ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076c2:	2b28      	cmp	r3, #40	; 0x28
 80076c4:	d16a      	bne.n	800779c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	0c1b      	lsrs	r3, r3, #16
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80076e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007700:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d138      	bne.n	800777c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800770a:	897b      	ldrh	r3, [r7, #10]
 800770c:	09db      	lsrs	r3, r3, #7
 800770e:	b29a      	uxth	r2, r3
 8007710:	89bb      	ldrh	r3, [r7, #12]
 8007712:	4053      	eors	r3, r2
 8007714:	b29b      	uxth	r3, r3
 8007716:	f003 0306 	and.w	r3, r3, #6
 800771a:	2b00      	cmp	r3, #0
 800771c:	d11c      	bne.n	8007758 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800771e:	897b      	ldrh	r3, [r7, #10]
 8007720:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007730:	2b02      	cmp	r3, #2
 8007732:	d13b      	bne.n	80077ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2208      	movs	r2, #8
 8007740:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800774a:	89ba      	ldrh	r2, [r7, #12]
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff fdc6 	bl	80072e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007756:	e029      	b.n	80077ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007758:	893b      	ldrh	r3, [r7, #8]
 800775a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800775c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc6f 	bl	8008044 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800776e:	89ba      	ldrh	r2, [r7, #12]
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff fdb4 	bl	80072e2 <HAL_I2C_AddrCallback>
}
 800777a:	e017      	b.n	80077ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800777c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc5f 	bl	8008044 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800778e:	89ba      	ldrh	r2, [r7, #12]
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff fda4 	bl	80072e2 <HAL_I2C_AddrCallback>
}
 800779a:	e007      	b.n	80077ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2208      	movs	r2, #8
 80077a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80077ac:	bf00      	nop
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	0b9b      	lsrs	r3, r3, #14
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d008      	beq.n	80077ea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e00d      	b.n	8007806 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0bdb      	lsrs	r3, r3, #15
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007804:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b29      	cmp	r3, #41	; 0x29
 8007810:	d112      	bne.n	8007838 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2228      	movs	r2, #40	; 0x28
 8007816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2221      	movs	r2, #33	; 0x21
 800781e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007820:	2101      	movs	r1, #1
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fc0e 	bl	8008044 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fd42 	bl	80072ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007836:	e017      	b.n	8007868 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b2a      	cmp	r3, #42	; 0x2a
 8007842:	d111      	bne.n	8007868 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2228      	movs	r2, #40	; 0x28
 8007848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2222      	movs	r2, #34	; 0x22
 8007850:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007852:	2102      	movs	r1, #2
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fbf5 	bl	8008044 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fd33 	bl	80072ce <HAL_I2C_SlaveRxCpltCallback>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800788c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2220      	movs	r2, #32
 8007894:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b21      	cmp	r3, #33	; 0x21
 800789a:	d002      	beq.n	80078a2 <I2C_ITSlaveCplt+0x32>
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b29      	cmp	r3, #41	; 0x29
 80078a0:	d108      	bne.n	80078b4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80078a2:	f248 0101 	movw	r1, #32769	; 0x8001
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fbcc 	bl	8008044 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2221      	movs	r2, #33	; 0x21
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
 80078b2:	e00d      	b.n	80078d0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b22      	cmp	r3, #34	; 0x22
 80078b8:	d002      	beq.n	80078c0 <I2C_ITSlaveCplt+0x50>
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	2b2a      	cmp	r3, #42	; 0x2a
 80078be:	d107      	bne.n	80078d0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80078c0:	f248 0102 	movw	r1, #32770	; 0x8002
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fbbd 	bl	8008044 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2222      	movs	r2, #34	; 0x22
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6859      	ldr	r1, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b64      	ldr	r3, [pc, #400]	; (8007a7c <I2C_ITSlaveCplt+0x20c>)
 80078ec:	400b      	ands	r3, r1
 80078ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fa14 	bl	8007d1e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	0b9b      	lsrs	r3, r3, #14
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d013      	beq.n	800792a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007910:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	2b00      	cmp	r3, #0
 8007918:	d020      	beq.n	800795c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	b29a      	uxth	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007928:	e018      	b.n	800795c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	0bdb      	lsrs	r3, r3, #15
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d012      	beq.n	800795c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007944:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	089b      	lsrs	r3, r3, #2
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d020      	beq.n	80079aa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0304 	bic.w	r3, r3, #4
 800796e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00c      	beq.n	80079aa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b8:	f043 0204 	orr.w	r2, r3, #4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d010      	beq.n	80079f8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8a7 	bl	8007b30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b28      	cmp	r3, #40	; 0x28
 80079ec:	d141      	bne.n	8007a72 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f847 	bl	8007a84 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079f6:	e03c      	b.n	8007a72 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a00:	d014      	beq.n	8007a2c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fed6 	bl	80077b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1d      	ldr	r2, [pc, #116]	; (8007a80 <I2C_ITSlaveCplt+0x210>)
 8007a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff fc6a 	bl	80072fe <HAL_I2C_ListenCpltCallback>
}
 8007a2a:	e022      	b.n	8007a72 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b22      	cmp	r3, #34	; 0x22
 8007a36:	d10e      	bne.n	8007a56 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff fc3d 	bl	80072ce <HAL_I2C_SlaveRxCpltCallback>
}
 8007a54:	e00d      	b.n	8007a72 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff fc24 	bl	80072ba <HAL_I2C_SlaveTxCpltCallback>
}
 8007a72:	bf00      	nop
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	fe00e800 	.word	0xfe00e800
 8007a80:	ffff0000 	.word	0xffff0000

08007a84 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a26      	ldr	r2, [pc, #152]	; (8007b2c <I2C_ITListenCplt+0xa8>)
 8007a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	089b      	lsrs	r3, r3, #2
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d022      	beq.n	8007b02 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d012      	beq.n	8007b02 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	f043 0204 	orr.w	r2, r3, #4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b02:	f248 0103 	movw	r1, #32771	; 0x8003
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa9c 	bl	8008044 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2210      	movs	r2, #16
 8007b12:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff fbee 	bl	80072fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	ffff0000 	.word	0xffff0000

08007b30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a5d      	ldr	r2, [pc, #372]	; (8007cc4 <I2C_ITError+0x194>)
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2b28      	cmp	r3, #40	; 0x28
 8007b66:	d005      	beq.n	8007b74 <I2C_ITError+0x44>
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b29      	cmp	r3, #41	; 0x29
 8007b6c:	d002      	beq.n	8007b74 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b2a      	cmp	r3, #42	; 0x2a
 8007b72:	d10b      	bne.n	8007b8c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b74:	2103      	movs	r1, #3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa64 	bl	8008044 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2228      	movs	r2, #40	; 0x28
 8007b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a50      	ldr	r2, [pc, #320]	; (8007cc8 <I2C_ITError+0x198>)
 8007b88:	635a      	str	r2, [r3, #52]	; 0x34
 8007b8a:	e011      	b.n	8007bb0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fa57 	bl	8008044 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b60      	cmp	r3, #96	; 0x60
 8007ba0:	d003      	beq.n	8007baa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d039      	beq.n	8007c32 <I2C_ITError+0x102>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b11      	cmp	r3, #17
 8007bc2:	d002      	beq.n	8007bca <I2C_ITError+0x9a>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b21      	cmp	r3, #33	; 0x21
 8007bc8:	d133      	bne.n	8007c32 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd8:	d107      	bne.n	8007bea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007be8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fc7e 	bl	80064f0 <HAL_DMA_GetState>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d017      	beq.n	8007c2a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	4a33      	ldr	r2, [pc, #204]	; (8007ccc <I2C_ITError+0x19c>)
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fb7e 	bl	8006310 <HAL_DMA_Abort_IT>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d04d      	beq.n	8007cb6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c28:	e045      	b.n	8007cb6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f850 	bl	8007cd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c30:	e041      	b.n	8007cb6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d039      	beq.n	8007cae <I2C_ITError+0x17e>
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b12      	cmp	r3, #18
 8007c3e:	d002      	beq.n	8007c46 <I2C_ITError+0x116>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b22      	cmp	r3, #34	; 0x22
 8007c44:	d133      	bne.n	8007cae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c54:	d107      	bne.n	8007c66 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c64:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fc40 	bl	80064f0 <HAL_DMA_GetState>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d017      	beq.n	8007ca6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	4a14      	ldr	r2, [pc, #80]	; (8007ccc <I2C_ITError+0x19c>)
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fb40 	bl	8006310 <HAL_DMA_Abort_IT>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d011      	beq.n	8007cba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ca4:	e009      	b.n	8007cba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f812 	bl	8007cd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cac:	e005      	b.n	8007cba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f80e 	bl	8007cd0 <I2C_TreatErrorCallback>
  }
}
 8007cb4:	e002      	b.n	8007cbc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cba:	bf00      	nop
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	ffff0000 	.word	0xffff0000
 8007cc8:	08007357 	.word	0x08007357
 8007ccc:	08007d67 	.word	0x08007d67

08007cd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b60      	cmp	r3, #96	; 0x60
 8007ce2:	d10e      	bne.n	8007d02 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fb13 	bl	8007326 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d00:	e009      	b.n	8007d16 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff fafe 	bl	8007312 <HAL_I2C_ErrorCallback>
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d103      	bne.n	8007d3c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d007      	beq.n	8007d5a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	619a      	str	r2, [r3, #24]
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	2200      	movs	r2, #0
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d90:	2200      	movs	r2, #0
 8007d92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7ff ff9b 	bl	8007cd0 <I2C_TreatErrorCallback>
}
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	603b      	str	r3, [r7, #0]
 8007dae:	4613      	mov	r3, r2
 8007db0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007db2:	e022      	b.n	8007dfa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dba:	d01e      	beq.n	8007dfa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dbc:	f7fe f82a 	bl	8005e14 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d113      	bne.n	8007dfa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e00f      	b.n	8007e1a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699a      	ldr	r2, [r3, #24]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4013      	ands	r3, r2
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	bf0c      	ite	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	2300      	movne	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d0cd      	beq.n	8007db4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e2e:	e02c      	b.n	8007e8a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f871 	bl	8007f1c <I2C_IsAcknowledgeFailed>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e02a      	b.n	8007e9a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e4a:	d01e      	beq.n	8007e8a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e4c:	f7fd ffe2 	bl	8005e14 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d302      	bcc.n	8007e62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d113      	bne.n	8007e8a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	f043 0220 	orr.w	r2, r3, #32
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e007      	b.n	8007e9a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d1cb      	bne.n	8007e30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eae:	e028      	b.n	8007f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f831 	bl	8007f1c <I2C_IsAcknowledgeFailed>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e026      	b.n	8007f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec4:	f7fd ffa6 	bl	8005e14 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d302      	bcc.n	8007eda <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d113      	bne.n	8007f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	f043 0220 	orr.w	r2, r3, #32
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e007      	b.n	8007f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d1cf      	bne.n	8007eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	f003 0310 	and.w	r3, r3, #16
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d151      	bne.n	8007fda <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f36:	e022      	b.n	8007f7e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3e:	d01e      	beq.n	8007f7e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f40:	f7fd ff68 	bl	8005e14 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <I2C_IsAcknowledgeFailed+0x3a>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d113      	bne.n	8007f7e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	f043 0220 	orr.w	r2, r3, #32
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e02e      	b.n	8007fdc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d1d5      	bne.n	8007f38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2210      	movs	r2, #16
 8007f92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff febe 	bl	8007d1e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6859      	ldr	r1, [r3, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <I2C_IsAcknowledgeFailed+0xc8>)
 8007fae:	400b      	ands	r3, r1
 8007fb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	f043 0204 	orr.w	r2, r3, #4
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	fe00e800 	.word	0xfe00e800

08007fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	817b      	strh	r3, [r7, #10]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	0d5b      	lsrs	r3, r3, #21
 8008004:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008008:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <I2C_TransferConfig+0x58>)
 800800a:	430b      	orrs	r3, r1
 800800c:	43db      	mvns	r3, r3
 800800e:	ea02 0103 	and.w	r1, r2, r3
 8008012:	897b      	ldrh	r3, [r7, #10]
 8008014:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008018:	7a7b      	ldrb	r3, [r7, #9]
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	431a      	orrs	r2, r3
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	431a      	orrs	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008032:	bf00      	nop
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	03ff63ff 	.word	0x03ff63ff

08008044 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008054:	887b      	ldrh	r3, [r7, #2]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008064:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008072:	2b28      	cmp	r3, #40	; 0x28
 8008074:	d003      	beq.n	800807e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800807c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800807e:	887b      	ldrh	r3, [r7, #2]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00f      	beq.n	80080a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800808e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800809c:	2b28      	cmp	r3, #40	; 0x28
 800809e:	d003      	beq.n	80080a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80080a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80080a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	da03      	bge.n	80080b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80080b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d103      	bne.n	80080c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80080c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80080c6:	887b      	ldrh	r3, [r7, #2]
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d103      	bne.n	80080d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f043 0320 	orr.w	r3, r3, #32
 80080d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80080d4:	887b      	ldrh	r3, [r7, #2]
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	d103      	bne.n	80080e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6819      	ldr	r1, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	43da      	mvns	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	400a      	ands	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b08d      	sub	sp, #52	; 0x34
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f005 fc3b 	bl	800d992 <USB_GetMode>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 838f 	bne.w	8008842 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f005 fb9f 	bl	800d86c <USB_ReadInterrupts>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 8385 	beq.w	8008840 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f005 fb96 	bl	800d86c <USB_ReadInterrupts>
 8008140:	4603      	mov	r3, r0
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b02      	cmp	r3, #2
 8008148:	d107      	bne.n	800815a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695a      	ldr	r2, [r3, #20]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f002 0202 	and.w	r2, r2, #2
 8008158:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f005 fb84 	bl	800d86c <USB_ReadInterrupts>
 8008164:	4603      	mov	r3, r0
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b10      	cmp	r3, #16
 800816c:	d161      	bne.n	8008232 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699a      	ldr	r2, [r3, #24]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0210 	bic.w	r2, r2, #16
 800817c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f003 020f 	and.w	r2, r3, #15
 800818a:	4613      	mov	r3, r2
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	4413      	add	r3, r2
 800819a:	3304      	adds	r3, #4
 800819c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	0c5b      	lsrs	r3, r3, #17
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d124      	bne.n	80081f4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80081b0:	4013      	ands	r3, r2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d035      	beq.n	8008222 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	6a38      	ldr	r0, [r7, #32]
 80081ca:	f005 fa2c 	bl	800d626 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081da:	441a      	add	r2, r3
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	091b      	lsrs	r3, r3, #4
 80081e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081ec:	441a      	add	r2, r3
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	619a      	str	r2, [r3, #24]
 80081f2:	e016      	b.n	8008222 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	0c5b      	lsrs	r3, r3, #17
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	2b06      	cmp	r3, #6
 80081fe:	d110      	bne.n	8008222 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008206:	2208      	movs	r2, #8
 8008208:	4619      	mov	r1, r3
 800820a:	6a38      	ldr	r0, [r7, #32]
 800820c:	f005 fa0b 	bl	800d626 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	091b      	lsrs	r3, r3, #4
 8008218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800821c:	441a      	add	r2, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0210 	orr.w	r2, r2, #16
 8008230:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f005 fb18 	bl	800d86c <USB_ReadInterrupts>
 800823c:	4603      	mov	r3, r0
 800823e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008242:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008246:	d16e      	bne.n	8008326 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f005 fb1e 	bl	800d892 <USB_ReadDevAllOutEpInterrupt>
 8008256:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008258:	e062      	b.n	8008320 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d057      	beq.n	8008314 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f005 fb43 	bl	800d8fa <USB_ReadDevOutEPInterrupt>
 8008274:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828c:	461a      	mov	r2, r3
 800828e:	2301      	movs	r3, #1
 8008290:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fd1f 	bl	8008cd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	461a      	mov	r2, r3
 80082b2:	2308      	movs	r3, #8
 80082b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80082b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fd5b 	bl	8008d74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d4:	461a      	mov	r2, r3
 80082d6:	2310      	movs	r3, #16
 80082d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d008      	beq.n	80082f6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f0:	461a      	mov	r2, r3
 80082f2:	2320      	movs	r3, #32
 80082f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d009      	beq.n	8008314 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830c:	461a      	mov	r2, r3
 800830e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008312:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	3301      	adds	r3, #1
 8008318:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	2b00      	cmp	r3, #0
 8008324:	d199      	bne.n	800825a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f005 fa9e 	bl	800d86c <USB_ReadInterrupts>
 8008330:	4603      	mov	r3, r0
 8008332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008336:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800833a:	f040 8087 	bne.w	800844c <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f005 fabf 	bl	800d8c6 <USB_ReadDevAllInEpInterrupt>
 8008348:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800834e:	e07a      	b.n	8008446 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d06f      	beq.n	800843a <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	4611      	mov	r1, r2
 8008364:	4618      	mov	r0, r3
 8008366:	f005 fae6 	bl	800d936 <USB_ReadDevInEPInterrupt>
 800836a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d020      	beq.n	80083b8 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	2201      	movs	r2, #1
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	43db      	mvns	r3, r3
 8008390:	69f9      	ldr	r1, [r7, #28]
 8008392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008396:	4013      	ands	r3, r2
 8008398:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	461a      	mov	r2, r3
 80083a8:	2301      	movs	r3, #1
 80083aa:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7fa fda7 	bl	8002f06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f003 0308 	and.w	r3, r3, #8
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ce:	461a      	mov	r2, r3
 80083d0:	2308      	movs	r3, #8
 80083d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d008      	beq.n	80083f0 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	461a      	mov	r2, r3
 80083ec:	2310      	movs	r3, #16
 80083ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008406:	461a      	mov	r2, r3
 8008408:	2340      	movs	r3, #64	; 0x40
 800840a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008422:	461a      	mov	r2, r3
 8008424:	2302      	movs	r3, #2
 8008426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fbc7 	bl	8008bc8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	3301      	adds	r3, #1
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	2b00      	cmp	r3, #0
 800844a:	d181      	bne.n	8008350 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f005 fa0b 	bl	800d86c <USB_ReadInterrupts>
 8008456:	4603      	mov	r3, r0
 8008458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800845c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008460:	d122      	bne.n	80084a8 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008470:	f023 0301 	bic.w	r3, r3, #1
 8008474:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800847c:	2b01      	cmp	r3, #1
 800847e:	d108      	bne.n	8008492 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fca6 	bl	8008ddc <HAL_PCDEx_LPM_Callback>
 8008490:	e002      	b.n	8008498 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7fa fd82 	bl	8002f9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80084a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f005 f9dd 	bl	800d86c <USB_ReadInterrupts>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084bc:	d112      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d102      	bne.n	80084d4 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7fa fd56 	bl	8002f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695a      	ldr	r2, [r3, #20]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80084e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f005 f9bf 	bl	800d86c <USB_ReadInterrupts>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f8:	d121      	bne.n	800853e <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695a      	ldr	r2, [r3, #20]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008508:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d111      	bne.n	8008538 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008522:	089b      	lsrs	r3, r3, #2
 8008524:	f003 020f 	and.w	r2, r3, #15
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800852e:	2101      	movs	r1, #1
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fc53 	bl	8008ddc <HAL_PCDEx_LPM_Callback>
 8008536:	e002      	b.n	800853e <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7fa fd21 	bl	8002f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f005 f992 	bl	800d86c <USB_ReadInterrupts>
 8008548:	4603      	mov	r3, r0
 800854a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800854e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008552:	f040 80c5 	bne.w	80086e0 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008564:	f023 0301 	bic.w	r3, r3, #1
 8008568:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2110      	movs	r1, #16
 8008570:	4618      	mov	r0, r3
 8008572:	f004 fc61 	bl	800ce38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008576:	2300      	movs	r3, #0
 8008578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800857a:	e056      	b.n	800862a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	461a      	mov	r2, r3
 800858a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800858e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	461a      	mov	r2, r3
 80085de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f4:	0151      	lsls	r1, r2, #5
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	440a      	add	r2, r1
 80085fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008602:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008614:	0151      	lsls	r1, r2, #5
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	440a      	add	r2, r1
 800861a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800861e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008622:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008626:	3301      	adds	r3, #1
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008630:	429a      	cmp	r2, r3
 8008632:	d3a3      	bcc.n	800857c <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008642:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008646:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	2b00      	cmp	r3, #0
 800864e:	d016      	beq.n	800867e <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008660:	f043 030b 	orr.w	r3, r3, #11
 8008664:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008670:	69fa      	ldr	r2, [r7, #28]
 8008672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008676:	f043 030b 	orr.w	r3, r3, #11
 800867a:	6453      	str	r3, [r2, #68]	; 0x44
 800867c:	e015      	b.n	80086aa <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800868c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008690:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008694:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a4:	f043 030b 	orr.w	r3, r3, #11
 80086a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69fa      	ldr	r2, [r7, #28]
 80086b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086c8:	4619      	mov	r1, r3
 80086ca:	4610      	mov	r0, r2
 80086cc:	f005 f992 	bl	800d9f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695a      	ldr	r2, [r3, #20]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80086de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f005 f8c1 	bl	800d86c <USB_ReadInterrupts>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f4:	d124      	bne.n	8008740 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f005 f957 	bl	800d9ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f004 fbbd 	bl	800ce84 <USB_GetDevSpeed>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681c      	ldr	r4, [r3, #0]
 8008716:	f001 f8ef 	bl	80098f8 <HAL_RCC_GetHCLKFreq>
 800871a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008720:	b2db      	uxtb	r3, r3
 8008722:	461a      	mov	r2, r3
 8008724:	4620      	mov	r0, r4
 8008726:	f004 faeb 	bl	800cd00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7fa fc13 	bl	8002f56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695a      	ldr	r2, [r3, #20]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800873e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4618      	mov	r0, r3
 8008746:	f005 f891 	bl	800d86c <USB_ReadInterrupts>
 800874a:	4603      	mov	r3, r0
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b08      	cmp	r3, #8
 8008752:	d10a      	bne.n	800876a <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7fa fbf0 	bl	8002f3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695a      	ldr	r2, [r3, #20]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f002 0208 	and.w	r2, r2, #8
 8008768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f005 f87c 	bl	800d86c <USB_ReadInterrupts>
 8008774:	4603      	mov	r3, r0
 8008776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800877a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800877e:	d10f      	bne.n	80087a0 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	b2db      	uxtb	r3, r3
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fa fc26 	bl	8002fdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695a      	ldr	r2, [r3, #20]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800879e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f005 f861 	bl	800d86c <USB_ReadInterrupts>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087b4:	d10f      	bne.n	80087d6 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7fa fbf9 	bl	8002fb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695a      	ldr	r2, [r3, #20]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80087d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f005 f846 	bl	800d86c <USB_ReadInterrupts>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ea:	d10a      	bne.n	8008802 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7fa fc07 	bl	8003000 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695a      	ldr	r2, [r3, #20]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f005 f830 	bl	800d86c <USB_ReadInterrupts>
 800880c:	4603      	mov	r3, r0
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b04      	cmp	r3, #4
 8008814:	d115      	bne.n	8008842 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7fa fbf7 	bl	800301c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6859      	ldr	r1, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
 800883e:	e000      	b.n	8008842 <HAL_PCD_IRQHandler+0x742>
      return;
 8008840:	bf00      	nop
    }
  }
}
 8008842:	3734      	adds	r7, #52	; 0x34
 8008844:	46bd      	mov	sp, r7
 8008846:	bd90      	pop	{r4, r7, pc}

08008848 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <HAL_PCD_SetAddress+0x1a>
 800885e:	2302      	movs	r3, #2
 8008860:	e013      	b.n	800888a <HAL_PCD_SetAddress+0x42>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	4611      	mov	r1, r2
 800887a:	4618      	mov	r0, r3
 800887c:	f004 ffd0 	bl	800d820 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	461a      	mov	r2, r3
 80088a0:	4603      	mov	r3, r0
 80088a2:	70fb      	strb	r3, [r7, #3]
 80088a4:	460b      	mov	r3, r1
 80088a6:	803b      	strh	r3, [r7, #0]
 80088a8:	4613      	mov	r3, r2
 80088aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80088b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da0f      	bge.n	80088d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	f003 020f 	and.w	r2, r3, #15
 80088be:	4613      	mov	r3, r2
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	3338      	adds	r3, #56	; 0x38
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	4413      	add	r3, r2
 80088cc:	3304      	adds	r3, #4
 80088ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	705a      	strb	r2, [r3, #1]
 80088d6:	e00f      	b.n	80088f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	f003 020f 	and.w	r2, r3, #15
 80088de:	4613      	mov	r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	1a9b      	subs	r3, r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	3304      	adds	r3, #4
 80088f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008904:	883a      	ldrh	r2, [r7, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	78ba      	ldrb	r2, [r7, #2]
 800890e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008922:	78bb      	ldrb	r3, [r7, #2]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d102      	bne.n	800892e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_PCD_EP_Open+0xaa>
 8008938:	2302      	movs	r3, #2
 800893a:	e00e      	b.n	800895a <HAL_PCD_EP_Open+0xc8>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	4618      	mov	r0, r3
 800894c:	f004 fab9 	bl	800cec2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008958:	7afb      	ldrb	r3, [r7, #11]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b086      	sub	sp, #24
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	460b      	mov	r3, r1
 8008970:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	f003 020f 	and.w	r2, r3, #15
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	3304      	adds	r3, #4
 800898a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2200      	movs	r2, #0
 800899c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2200      	movs	r2, #0
 80089a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6979      	ldr	r1, [r7, #20]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f004 fce1 	bl	800d388 <USB_EP0StartXfer>
 80089c6:	e005      	b.n	80089d4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6979      	ldr	r1, [r7, #20]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f004 fafe 	bl	800cfd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	460b      	mov	r3, r1
 80089ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089ee:	7afb      	ldrb	r3, [r7, #11]
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	4613      	mov	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	3338      	adds	r3, #56	; 0x38
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	3304      	adds	r3, #4
 8008a04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2200      	movs	r2, #0
 8008a16:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6979      	ldr	r1, [r7, #20]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f004 fca4 	bl	800d388 <USB_EP0StartXfer>
 8008a40:	e005      	b.n	8008a4e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6979      	ldr	r1, [r7, #20]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f004 fac1 	bl	800cfd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	f003 020f 	and.w	r2, r3, #15
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d901      	bls.n	8008a76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e04e      	b.n	8008b14 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da0f      	bge.n	8008a9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	f003 020f 	and.w	r2, r3, #15
 8008a84:	4613      	mov	r3, r2
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	3338      	adds	r3, #56	; 0x38
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	4413      	add	r3, r2
 8008a92:	3304      	adds	r3, #4
 8008a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	705a      	strb	r2, [r3, #1]
 8008a9c:	e00d      	b.n	8008aba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	f003 030f 	and.w	r3, r3, #15
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_PCD_EP_SetStall+0x82>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e01c      	b.n	8008b14 <HAL_PCD_EP_SetStall+0xbc>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68f9      	ldr	r1, [r7, #12]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f004 fdc5 	bl	800d678 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d108      	bne.n	8008b0a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f004 ff75 	bl	800d9f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	f003 020f 	and.w	r2, r3, #15
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d901      	bls.n	8008b3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e042      	b.n	8008bc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da0f      	bge.n	8008b62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	f003 020f 	and.w	r2, r3, #15
 8008b48:	4613      	mov	r3, r2
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	3338      	adds	r3, #56	; 0x38
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	3304      	adds	r3, #4
 8008b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	705a      	strb	r2, [r3, #1]
 8008b60:	e00f      	b.n	8008b82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	f003 020f 	and.w	r2, r3, #15
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	1a9b      	subs	r3, r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	3304      	adds	r3, #4
 8008b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b88:	78fb      	ldrb	r3, [r7, #3]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_PCD_EP_ClrStall+0x86>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e00e      	b.n	8008bc0 <HAL_PCD_EP_ClrStall+0xa4>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68f9      	ldr	r1, [r7, #12]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f004 fdcf 	bl	800d754 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	4613      	mov	r3, r2
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	3338      	adds	r3, #56	; 0x38
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	3304      	adds	r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	699a      	ldr	r2, [r3, #24]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d901      	bls.n	8008c00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e067      	b.n	8008cd0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	695a      	ldr	r2, [r3, #20]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d902      	bls.n	8008c1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	3303      	adds	r3, #3
 8008c20:	089b      	lsrs	r3, r3, #2
 8008c22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c24:	e026      	b.n	8008c74 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	695a      	ldr	r2, [r3, #20]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d902      	bls.n	8008c42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	3303      	adds	r3, #3
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	68d9      	ldr	r1, [r3, #12]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	6978      	ldr	r0, [r7, #20]
 8008c58:	f004 fcb4 	bl	800d5c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	441a      	add	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	699a      	ldr	r2, [r3, #24]
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	441a      	add	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d809      	bhi.n	8008c9e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d203      	bcs.n	8008c9e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1c3      	bne.n	8008c26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d811      	bhi.n	8008cce <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	6939      	ldr	r1, [r7, #16]
 8008cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cca:	4013      	ands	r3, r2
 8008ccc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3720      	adds	r7, #32
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	333c      	adds	r3, #60	; 0x3c
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4a19      	ldr	r2, [pc, #100]	; (8008d70 <PCD_EP_OutXfrComplete_int+0x98>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d124      	bne.n	8008d58 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	461a      	mov	r2, r3
 8008d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2a:	6093      	str	r3, [r2, #8]
 8008d2c:	e01a      	b.n	8008d64 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d44:	461a      	mov	r2, r3
 8008d46:	2320      	movs	r3, #32
 8008d48:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7fa f8bd 	bl	8002ed0 <HAL_PCD_DataOutStageCallback>
 8008d56:	e005      	b.n	8008d64 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7fa f8b6 	bl	8002ed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	4f54310a 	.word	0x4f54310a

08008d74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	333c      	adds	r3, #60	; 0x3c
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4a0c      	ldr	r2, [pc, #48]	; (8008dd8 <PCD_EP_OutSetupPacket_int+0x64>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d90e      	bls.n	8008dc8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d009      	beq.n	8008dc8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dc6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7fa f86f 	bl	8002eac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	4f54300a 	.word	0x4f54300a

08008ddc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a04      	ldr	r2, [pc, #16]	; (8008e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e02:	6013      	str	r3, [r2, #0]
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	40007000 	.word	0x40007000

08008e14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <HAL_PWREx_GetVoltageRange+0x18>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40007000 	.word	0x40007000

08008e30 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	4a04      	ldr	r2, [pc, #16]	; (8008e4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8008e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e3e:	6053      	str	r3, [r2, #4]
}
 8008e40:	bf00      	nop
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	40007000 	.word	0x40007000

08008e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e3d4      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e62:	4ba1      	ldr	r3, [pc, #644]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 030c 	and.w	r3, r3, #12
 8008e6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e6c:	4b9e      	ldr	r3, [pc, #632]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 80e4 	beq.w	800904c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d007      	beq.n	8008e9a <HAL_RCC_OscConfig+0x4a>
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b0c      	cmp	r3, #12
 8008e8e:	f040 808b 	bne.w	8008fa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	f040 8087 	bne.w	8008fa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e9a:	4b93      	ldr	r3, [pc, #588]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x62>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e3ac      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1a      	ldr	r2, [r3, #32]
 8008eb6:	4b8c      	ldr	r3, [pc, #560]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <HAL_RCC_OscConfig+0x7c>
 8008ec2:	4b89      	ldr	r3, [pc, #548]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eca:	e005      	b.n	8008ed8 <HAL_RCC_OscConfig+0x88>
 8008ecc:	4b86      	ldr	r3, [pc, #536]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ed2:	091b      	lsrs	r3, r3, #4
 8008ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d223      	bcs.n	8008f24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 fd41 	bl	8009968 <RCC_SetFlashLatencyFromMSIRange>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e38d      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ef0:	4b7d      	ldr	r3, [pc, #500]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a7c      	ldr	r2, [pc, #496]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008ef6:	f043 0308 	orr.w	r3, r3, #8
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	4b7a      	ldr	r3, [pc, #488]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	4977      	ldr	r1, [pc, #476]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f0e:	4b76      	ldr	r3, [pc, #472]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	4972      	ldr	r1, [pc, #456]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	604b      	str	r3, [r1, #4]
 8008f22:	e025      	b.n	8008f70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f24:	4b70      	ldr	r3, [pc, #448]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a6f      	ldr	r2, [pc, #444]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f2a:	f043 0308 	orr.w	r3, r3, #8
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	4b6d      	ldr	r3, [pc, #436]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	496a      	ldr	r1, [pc, #424]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f42:	4b69      	ldr	r3, [pc, #420]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	4965      	ldr	r1, [pc, #404]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d109      	bne.n	8008f70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fd01 	bl	8009968 <RCC_SetFlashLatencyFromMSIRange>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e34d      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f70:	f000 fc36 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 8008f74:	4602      	mov	r2, r0
 8008f76:	4b5c      	ldr	r3, [pc, #368]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	091b      	lsrs	r3, r3, #4
 8008f7c:	f003 030f 	and.w	r3, r3, #15
 8008f80:	495a      	ldr	r1, [pc, #360]	; (80090ec <HAL_RCC_OscConfig+0x29c>)
 8008f82:	5ccb      	ldrb	r3, [r1, r3]
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8c:	4a58      	ldr	r2, [pc, #352]	; (80090f0 <HAL_RCC_OscConfig+0x2a0>)
 8008f8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008f90:	4b58      	ldr	r3, [pc, #352]	; (80090f4 <HAL_RCC_OscConfig+0x2a4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fc feed 	bl	8005d74 <HAL_InitTick>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d052      	beq.n	800904a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	e331      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d032      	beq.n	8009016 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008fb0:	4b4d      	ldr	r3, [pc, #308]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a4c      	ldr	r2, [pc, #304]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008fbc:	f7fc ff2a 	bl	8005e14 <HAL_GetTick>
 8008fc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fc2:	e008      	b.n	8008fd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fc4:	f7fc ff26 	bl	8005e14 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e31a      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fd6:	4b44      	ldr	r3, [pc, #272]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0f0      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fe2:	4b41      	ldr	r3, [pc, #260]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a40      	ldr	r2, [pc, #256]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008fe8:	f043 0308 	orr.w	r3, r3, #8
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	4b3e      	ldr	r3, [pc, #248]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	493b      	ldr	r1, [pc, #236]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009000:	4b39      	ldr	r3, [pc, #228]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	4936      	ldr	r1, [pc, #216]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8009010:	4313      	orrs	r3, r2
 8009012:	604b      	str	r3, [r1, #4]
 8009014:	e01a      	b.n	800904c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009016:	4b34      	ldr	r3, [pc, #208]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a33      	ldr	r2, [pc, #204]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 800901c:	f023 0301 	bic.w	r3, r3, #1
 8009020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009022:	f7fc fef7 	bl	8005e14 <HAL_GetTick>
 8009026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009028:	e008      	b.n	800903c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800902a:	f7fc fef3 	bl	8005e14 <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	2b02      	cmp	r3, #2
 8009036:	d901      	bls.n	800903c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e2e7      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800903c:	4b2a      	ldr	r3, [pc, #168]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1f0      	bne.n	800902a <HAL_RCC_OscConfig+0x1da>
 8009048:	e000      	b.n	800904c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800904a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d074      	beq.n	8009142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2b08      	cmp	r3, #8
 800905c:	d005      	beq.n	800906a <HAL_RCC_OscConfig+0x21a>
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	2b0c      	cmp	r3, #12
 8009062:	d10e      	bne.n	8009082 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b03      	cmp	r3, #3
 8009068:	d10b      	bne.n	8009082 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800906a:	4b1f      	ldr	r3, [pc, #124]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d064      	beq.n	8009140 <HAL_RCC_OscConfig+0x2f0>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d160      	bne.n	8009140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e2c4      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908a:	d106      	bne.n	800909a <HAL_RCC_OscConfig+0x24a>
 800908c:	4b16      	ldr	r3, [pc, #88]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a15      	ldr	r2, [pc, #84]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 8009092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	e01d      	b.n	80090d6 <HAL_RCC_OscConfig+0x286>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090a2:	d10c      	bne.n	80090be <HAL_RCC_OscConfig+0x26e>
 80090a4:	4b10      	ldr	r3, [pc, #64]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a0f      	ldr	r2, [pc, #60]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a0c      	ldr	r2, [pc, #48]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	e00b      	b.n	80090d6 <HAL_RCC_OscConfig+0x286>
 80090be:	4b0a      	ldr	r3, [pc, #40]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a09      	ldr	r2, [pc, #36]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a06      	ldr	r2, [pc, #24]	; (80090e8 <HAL_RCC_OscConfig+0x298>)
 80090d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01c      	beq.n	8009118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090de:	f7fc fe99 	bl	8005e14 <HAL_GetTick>
 80090e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090e4:	e011      	b.n	800910a <HAL_RCC_OscConfig+0x2ba>
 80090e6:	bf00      	nop
 80090e8:	40021000 	.word	0x40021000
 80090ec:	08010d5c 	.word	0x08010d5c
 80090f0:	20000004 	.word	0x20000004
 80090f4:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090f8:	f7fc fe8c 	bl	8005e14 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b64      	cmp	r3, #100	; 0x64
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e280      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800910a:	4baf      	ldr	r3, [pc, #700]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0f0      	beq.n	80090f8 <HAL_RCC_OscConfig+0x2a8>
 8009116:	e014      	b.n	8009142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009118:	f7fc fe7c 	bl	8005e14 <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009120:	f7fc fe78 	bl	8005e14 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b64      	cmp	r3, #100	; 0x64
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e26c      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009132:	4ba5      	ldr	r3, [pc, #660]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f0      	bne.n	8009120 <HAL_RCC_OscConfig+0x2d0>
 800913e:	e000      	b.n	8009142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d060      	beq.n	8009210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	2b04      	cmp	r3, #4
 8009152:	d005      	beq.n	8009160 <HAL_RCC_OscConfig+0x310>
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	2b0c      	cmp	r3, #12
 8009158:	d119      	bne.n	800918e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d116      	bne.n	800918e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009160:	4b99      	ldr	r3, [pc, #612]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <HAL_RCC_OscConfig+0x328>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e249      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009178:	4b93      	ldr	r3, [pc, #588]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	061b      	lsls	r3, r3, #24
 8009186:	4990      	ldr	r1, [pc, #576]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009188:	4313      	orrs	r3, r2
 800918a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800918c:	e040      	b.n	8009210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d023      	beq.n	80091de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009196:	4b8c      	ldr	r3, [pc, #560]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a8b      	ldr	r2, [pc, #556]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800919c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a2:	f7fc fe37 	bl	8005e14 <HAL_GetTick>
 80091a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091a8:	e008      	b.n	80091bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091aa:	f7fc fe33 	bl	8005e14 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d901      	bls.n	80091bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e227      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091bc:	4b82      	ldr	r3, [pc, #520]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0f0      	beq.n	80091aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091c8:	4b7f      	ldr	r3, [pc, #508]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	061b      	lsls	r3, r3, #24
 80091d6:	497c      	ldr	r1, [pc, #496]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	604b      	str	r3, [r1, #4]
 80091dc:	e018      	b.n	8009210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091de:	4b7a      	ldr	r3, [pc, #488]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a79      	ldr	r2, [pc, #484]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80091e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ea:	f7fc fe13 	bl	8005e14 <HAL_GetTick>
 80091ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091f0:	e008      	b.n	8009204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091f2:	f7fc fe0f 	bl	8005e14 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d901      	bls.n	8009204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e203      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009204:	4b70      	ldr	r3, [pc, #448]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1f0      	bne.n	80091f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b00      	cmp	r3, #0
 800921a:	d03c      	beq.n	8009296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01c      	beq.n	800925e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009224:	4b68      	ldr	r3, [pc, #416]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800922a:	4a67      	ldr	r2, [pc, #412]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009234:	f7fc fdee 	bl	8005e14 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800923c:	f7fc fdea 	bl	8005e14 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e1de      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800924e:	4b5e      	ldr	r3, [pc, #376]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0ef      	beq.n	800923c <HAL_RCC_OscConfig+0x3ec>
 800925c:	e01b      	b.n	8009296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800925e:	4b5a      	ldr	r3, [pc, #360]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009264:	4a58      	ldr	r2, [pc, #352]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926e:	f7fc fdd1 	bl	8005e14 <HAL_GetTick>
 8009272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009274:	e008      	b.n	8009288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009276:	f7fc fdcd 	bl	8005e14 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e1c1      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009288:	4b4f      	ldr	r3, [pc, #316]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800928a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1ef      	bne.n	8009276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0304 	and.w	r3, r3, #4
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 80a6 	beq.w	80093f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092a4:	2300      	movs	r3, #0
 80092a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80092a8:	4b47      	ldr	r3, [pc, #284]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80092aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10d      	bne.n	80092d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092b4:	4b44      	ldr	r3, [pc, #272]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80092b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b8:	4a43      	ldr	r2, [pc, #268]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80092ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092be:	6593      	str	r3, [r2, #88]	; 0x58
 80092c0:	4b41      	ldr	r3, [pc, #260]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 80092c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092cc:	2301      	movs	r3, #1
 80092ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092d0:	4b3e      	ldr	r3, [pc, #248]	; (80093cc <HAL_RCC_OscConfig+0x57c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d118      	bne.n	800930e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092dc:	4b3b      	ldr	r3, [pc, #236]	; (80093cc <HAL_RCC_OscConfig+0x57c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a3a      	ldr	r2, [pc, #232]	; (80093cc <HAL_RCC_OscConfig+0x57c>)
 80092e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092e8:	f7fc fd94 	bl	8005e14 <HAL_GetTick>
 80092ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f0:	f7fc fd90 	bl	8005e14 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e184      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009302:	4b32      	ldr	r3, [pc, #200]	; (80093cc <HAL_RCC_OscConfig+0x57c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0f0      	beq.n	80092f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d108      	bne.n	8009328 <HAL_RCC_OscConfig+0x4d8>
 8009316:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800931c:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009326:	e024      	b.n	8009372 <HAL_RCC_OscConfig+0x522>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b05      	cmp	r3, #5
 800932e:	d110      	bne.n	8009352 <HAL_RCC_OscConfig+0x502>
 8009330:	4b25      	ldr	r3, [pc, #148]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009336:	4a24      	ldr	r2, [pc, #144]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009338:	f043 0304 	orr.w	r3, r3, #4
 800933c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009340:	4b21      	ldr	r3, [pc, #132]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009346:	4a20      	ldr	r2, [pc, #128]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009348:	f043 0301 	orr.w	r3, r3, #1
 800934c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009350:	e00f      	b.n	8009372 <HAL_RCC_OscConfig+0x522>
 8009352:	4b1d      	ldr	r3, [pc, #116]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009358:	4a1b      	ldr	r2, [pc, #108]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800935a:	f023 0301 	bic.w	r3, r3, #1
 800935e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009362:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 8009364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009368:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800936a:	f023 0304 	bic.w	r3, r3, #4
 800936e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d016      	beq.n	80093a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800937a:	f7fc fd4b 	bl	8005e14 <HAL_GetTick>
 800937e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009380:	e00a      	b.n	8009398 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009382:	f7fc fd47 	bl	8005e14 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009390:	4293      	cmp	r3, r2
 8009392:	d901      	bls.n	8009398 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e139      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <HAL_RCC_OscConfig+0x578>)
 800939a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0ed      	beq.n	8009382 <HAL_RCC_OscConfig+0x532>
 80093a6:	e01a      	b.n	80093de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093a8:	f7fc fd34 	bl	8005e14 <HAL_GetTick>
 80093ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093ae:	e00f      	b.n	80093d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093b0:	f7fc fd30 	bl	8005e14 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80093be:	4293      	cmp	r3, r2
 80093c0:	d906      	bls.n	80093d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e122      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
 80093c6:	bf00      	nop
 80093c8:	40021000 	.word	0x40021000
 80093cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093d0:	4b90      	ldr	r3, [pc, #576]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80093d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e8      	bne.n	80093b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093de:	7ffb      	ldrb	r3, [r7, #31]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d105      	bne.n	80093f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093e4:	4b8b      	ldr	r3, [pc, #556]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80093e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e8:	4a8a      	ldr	r2, [pc, #552]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80093ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8108 	beq.w	800960a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fe:	2b02      	cmp	r3, #2
 8009400:	f040 80d0 	bne.w	80095a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009404:	4b83      	ldr	r3, [pc, #524]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f003 0203 	and.w	r2, r3, #3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	429a      	cmp	r2, r3
 8009416:	d130      	bne.n	800947a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	3b01      	subs	r3, #1
 8009424:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009426:	429a      	cmp	r2, r3
 8009428:	d127      	bne.n	800947a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009436:	429a      	cmp	r2, r3
 8009438:	d11f      	bne.n	800947a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009444:	2a07      	cmp	r2, #7
 8009446:	bf14      	ite	ne
 8009448:	2201      	movne	r2, #1
 800944a:	2200      	moveq	r2, #0
 800944c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800944e:	4293      	cmp	r3, r2
 8009450:	d113      	bne.n	800947a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	3b01      	subs	r3, #1
 8009460:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009462:	429a      	cmp	r2, r3
 8009464:	d109      	bne.n	800947a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009470:	085b      	lsrs	r3, r3, #1
 8009472:	3b01      	subs	r3, #1
 8009474:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009476:	429a      	cmp	r2, r3
 8009478:	d06e      	beq.n	8009558 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	2b0c      	cmp	r3, #12
 800947e:	d069      	beq.n	8009554 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009480:	4b64      	ldr	r3, [pc, #400]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d105      	bne.n	8009498 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800948c:	4b61      	ldr	r3, [pc, #388]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e0b7      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800949c:	4b5d      	ldr	r3, [pc, #372]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a5c      	ldr	r2, [pc, #368]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80094a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80094a8:	f7fc fcb4 	bl	8005e14 <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094ae:	e008      	b.n	80094c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094b0:	f7fc fcb0 	bl	8005e14 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d901      	bls.n	80094c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e0a4      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094c2:	4b54      	ldr	r3, [pc, #336]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1f0      	bne.n	80094b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094ce:	4b51      	ldr	r3, [pc, #324]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	4b51      	ldr	r3, [pc, #324]	; (8009618 <HAL_RCC_OscConfig+0x7c8>)
 80094d4:	4013      	ands	r3, r2
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80094de:	3a01      	subs	r2, #1
 80094e0:	0112      	lsls	r2, r2, #4
 80094e2:	4311      	orrs	r1, r2
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094e8:	0212      	lsls	r2, r2, #8
 80094ea:	4311      	orrs	r1, r2
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80094f0:	0852      	lsrs	r2, r2, #1
 80094f2:	3a01      	subs	r2, #1
 80094f4:	0552      	lsls	r2, r2, #21
 80094f6:	4311      	orrs	r1, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80094fc:	0852      	lsrs	r2, r2, #1
 80094fe:	3a01      	subs	r2, #1
 8009500:	0652      	lsls	r2, r2, #25
 8009502:	4311      	orrs	r1, r2
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009508:	0912      	lsrs	r2, r2, #4
 800950a:	0452      	lsls	r2, r2, #17
 800950c:	430a      	orrs	r2, r1
 800950e:	4941      	ldr	r1, [pc, #260]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009510:	4313      	orrs	r3, r2
 8009512:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009514:	4b3f      	ldr	r3, [pc, #252]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a3e      	ldr	r2, [pc, #248]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 800951a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800951e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009520:	4b3c      	ldr	r3, [pc, #240]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	4a3b      	ldr	r2, [pc, #236]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800952a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800952c:	f7fc fc72 	bl	8005e14 <HAL_GetTick>
 8009530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009532:	e008      	b.n	8009546 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009534:	f7fc fc6e 	bl	8005e14 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b02      	cmp	r3, #2
 8009540:	d901      	bls.n	8009546 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e062      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009546:	4b33      	ldr	r3, [pc, #204]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0f0      	beq.n	8009534 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009552:	e05a      	b.n	800960a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e059      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009558:	4b2e      	ldr	r3, [pc, #184]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d152      	bne.n	800960a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009564:	4b2b      	ldr	r3, [pc, #172]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a2a      	ldr	r2, [pc, #168]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 800956a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800956e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009570:	4b28      	ldr	r3, [pc, #160]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	4a27      	ldr	r2, [pc, #156]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800957a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800957c:	f7fc fc4a 	bl	8005e14 <HAL_GetTick>
 8009580:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009582:	e008      	b.n	8009596 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009584:	f7fc fc46 	bl	8005e14 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b02      	cmp	r3, #2
 8009590:	d901      	bls.n	8009596 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e03a      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009596:	4b1f      	ldr	r3, [pc, #124]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d0f0      	beq.n	8009584 <HAL_RCC_OscConfig+0x734>
 80095a2:	e032      	b.n	800960a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2b0c      	cmp	r3, #12
 80095a8:	d02d      	beq.n	8009606 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095aa:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a19      	ldr	r2, [pc, #100]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80095b6:	4b17      	ldr	r3, [pc, #92]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80095c2:	4b14      	ldr	r3, [pc, #80]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	4a13      	ldr	r2, [pc, #76]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095c8:	f023 0303 	bic.w	r3, r3, #3
 80095cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80095ce:	4b11      	ldr	r3, [pc, #68]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	4a10      	ldr	r2, [pc, #64]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80095d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095de:	f7fc fc19 	bl	8005e14 <HAL_GetTick>
 80095e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095e4:	e008      	b.n	80095f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095e6:	f7fc fc15 	bl	8005e14 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d901      	bls.n	80095f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e009      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095f8:	4b06      	ldr	r3, [pc, #24]	; (8009614 <HAL_RCC_OscConfig+0x7c4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f0      	bne.n	80095e6 <HAL_RCC_OscConfig+0x796>
 8009604:	e001      	b.n	800960a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e000      	b.n	800960c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3720      	adds	r7, #32
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	40021000 	.word	0x40021000
 8009618:	f99d808c 	.word	0xf99d808c

0800961c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e0c8      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009630:	4b66      	ldr	r3, [pc, #408]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d910      	bls.n	8009660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800963e:	4b63      	ldr	r3, [pc, #396]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f023 0207 	bic.w	r2, r3, #7
 8009646:	4961      	ldr	r1, [pc, #388]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	4313      	orrs	r3, r2
 800964c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800964e:	4b5f      	ldr	r3, [pc, #380]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d001      	beq.n	8009660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e0b0      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d04c      	beq.n	8009706 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2b03      	cmp	r3, #3
 8009672:	d107      	bne.n	8009684 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009674:	4b56      	ldr	r3, [pc, #344]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d121      	bne.n	80096c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e09e      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d107      	bne.n	800969c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800968c:	4b50      	ldr	r3, [pc, #320]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d115      	bne.n	80096c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e092      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d107      	bne.n	80096b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80096a4:	4b4a      	ldr	r3, [pc, #296]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e086      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096b4:	4b46      	ldr	r3, [pc, #280]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e07e      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096c4:	4b42      	ldr	r3, [pc, #264]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f023 0203 	bic.w	r2, r3, #3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	493f      	ldr	r1, [pc, #252]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096d6:	f7fc fb9d 	bl	8005e14 <HAL_GetTick>
 80096da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096dc:	e00a      	b.n	80096f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096de:	f7fc fb99 	bl	8005e14 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d901      	bls.n	80096f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e066      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f4:	4b36      	ldr	r3, [pc, #216]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f003 020c 	and.w	r2, r3, #12
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	429a      	cmp	r2, r3
 8009704:	d1eb      	bne.n	80096de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009712:	4b2f      	ldr	r3, [pc, #188]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	492c      	ldr	r1, [pc, #176]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 8009720:	4313      	orrs	r3, r2
 8009722:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009724:	4b29      	ldr	r3, [pc, #164]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d210      	bcs.n	8009754 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009732:	4b26      	ldr	r3, [pc, #152]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f023 0207 	bic.w	r2, r3, #7
 800973a:	4924      	ldr	r1, [pc, #144]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	4313      	orrs	r3, r2
 8009740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009742:	4b22      	ldr	r3, [pc, #136]	; (80097cc <HAL_RCC_ClockConfig+0x1b0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d001      	beq.n	8009754 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e036      	b.n	80097c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d008      	beq.n	8009772 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009760:	4b1b      	ldr	r3, [pc, #108]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	4918      	ldr	r1, [pc, #96]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 800976e:	4313      	orrs	r3, r2
 8009770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0308 	and.w	r3, r3, #8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d009      	beq.n	8009792 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800977e:	4b14      	ldr	r3, [pc, #80]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	4910      	ldr	r1, [pc, #64]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 800978e:	4313      	orrs	r3, r2
 8009790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009792:	f000 f825 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 8009796:	4602      	mov	r2, r0
 8009798:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <HAL_RCC_ClockConfig+0x1b4>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	091b      	lsrs	r3, r3, #4
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	490c      	ldr	r1, [pc, #48]	; (80097d4 <HAL_RCC_ClockConfig+0x1b8>)
 80097a4:	5ccb      	ldrb	r3, [r1, r3]
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	fa22 f303 	lsr.w	r3, r2, r3
 80097ae:	4a0a      	ldr	r2, [pc, #40]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 80097b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80097b2:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <HAL_RCC_ClockConfig+0x1c0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fc fadc 	bl	8005d74 <HAL_InitTick>
 80097bc:	4603      	mov	r3, r0
 80097be:	72fb      	strb	r3, [r7, #11]

  return status;
 80097c0:	7afb      	ldrb	r3, [r7, #11]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40022000 	.word	0x40022000
 80097d0:	40021000 	.word	0x40021000
 80097d4:	08010d5c 	.word	0x08010d5c
 80097d8:	20000004 	.word	0x20000004
 80097dc:	20000098 	.word	0x20000098

080097e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b089      	sub	sp, #36	; 0x24
 80097e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	2300      	movs	r3, #0
 80097ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097ee:	4b3e      	ldr	r3, [pc, #248]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f003 030c 	and.w	r3, r3, #12
 80097f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097f8:	4b3b      	ldr	r3, [pc, #236]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <HAL_RCC_GetSysClockFreq+0x34>
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2b0c      	cmp	r3, #12
 800980c:	d121      	bne.n	8009852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d11e      	bne.n	8009852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009814:	4b34      	ldr	r3, [pc, #208]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b00      	cmp	r3, #0
 800981e:	d107      	bne.n	8009830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009820:	4b31      	ldr	r3, [pc, #196]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	f003 030f 	and.w	r3, r3, #15
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	e005      	b.n	800983c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009830:	4b2d      	ldr	r3, [pc, #180]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	091b      	lsrs	r3, r3, #4
 8009836:	f003 030f 	and.w	r3, r3, #15
 800983a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800983c:	4a2b      	ldr	r2, [pc, #172]	; (80098ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10d      	bne.n	8009868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009850:	e00a      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b04      	cmp	r3, #4
 8009856:	d102      	bne.n	800985e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009858:	4b25      	ldr	r3, [pc, #148]	; (80098f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800985a:	61bb      	str	r3, [r7, #24]
 800985c:	e004      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d101      	bne.n	8009868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009864:	4b23      	ldr	r3, [pc, #140]	; (80098f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b0c      	cmp	r3, #12
 800986c:	d134      	bne.n	80098d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800986e:	4b1e      	ldr	r3, [pc, #120]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b02      	cmp	r3, #2
 800987c:	d003      	beq.n	8009886 <HAL_RCC_GetSysClockFreq+0xa6>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b03      	cmp	r3, #3
 8009882:	d003      	beq.n	800988c <HAL_RCC_GetSysClockFreq+0xac>
 8009884:	e005      	b.n	8009892 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009886:	4b1a      	ldr	r3, [pc, #104]	; (80098f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009888:	617b      	str	r3, [r7, #20]
      break;
 800988a:	e005      	b.n	8009898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800988c:	4b19      	ldr	r3, [pc, #100]	; (80098f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800988e:	617b      	str	r3, [r7, #20]
      break;
 8009890:	e002      	b.n	8009898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	617b      	str	r3, [r7, #20]
      break;
 8009896:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009898:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	091b      	lsrs	r3, r3, #4
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	3301      	adds	r3, #1
 80098a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80098a6:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	0a1b      	lsrs	r3, r3, #8
 80098ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	fb02 f203 	mul.w	r2, r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098be:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	0e5b      	lsrs	r3, r3, #25
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	3301      	adds	r3, #1
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80098d8:	69bb      	ldr	r3, [r7, #24]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3724      	adds	r7, #36	; 0x24
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	40021000 	.word	0x40021000
 80098ec:	08010d74 	.word	0x08010d74
 80098f0:	00f42400 	.word	0x00f42400
 80098f4:	007a1200 	.word	0x007a1200

080098f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098fc:	4b03      	ldr	r3, [pc, #12]	; (800990c <HAL_RCC_GetHCLKFreq+0x14>)
 80098fe:	681b      	ldr	r3, [r3, #0]
}
 8009900:	4618      	mov	r0, r3
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20000004 	.word	0x20000004

08009910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009914:	f7ff fff0 	bl	80098f8 <HAL_RCC_GetHCLKFreq>
 8009918:	4602      	mov	r2, r0
 800991a:	4b06      	ldr	r3, [pc, #24]	; (8009934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	0a1b      	lsrs	r3, r3, #8
 8009920:	f003 0307 	and.w	r3, r3, #7
 8009924:	4904      	ldr	r1, [pc, #16]	; (8009938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009926:	5ccb      	ldrb	r3, [r1, r3]
 8009928:	f003 031f 	and.w	r3, r3, #31
 800992c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009930:	4618      	mov	r0, r3
 8009932:	bd80      	pop	{r7, pc}
 8009934:	40021000 	.word	0x40021000
 8009938:	08010d6c 	.word	0x08010d6c

0800993c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009940:	f7ff ffda 	bl	80098f8 <HAL_RCC_GetHCLKFreq>
 8009944:	4602      	mov	r2, r0
 8009946:	4b06      	ldr	r3, [pc, #24]	; (8009960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	0adb      	lsrs	r3, r3, #11
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	4904      	ldr	r1, [pc, #16]	; (8009964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009952:	5ccb      	ldrb	r3, [r1, r3]
 8009954:	f003 031f 	and.w	r3, r3, #31
 8009958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800995c:	4618      	mov	r0, r3
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40021000 	.word	0x40021000
 8009964:	08010d6c 	.word	0x08010d6c

08009968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009974:	4b2a      	ldr	r3, [pc, #168]	; (8009a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009980:	f7ff fa48 	bl	8008e14 <HAL_PWREx_GetVoltageRange>
 8009984:	6178      	str	r0, [r7, #20]
 8009986:	e014      	b.n	80099b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009988:	4b25      	ldr	r3, [pc, #148]	; (8009a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800998a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998c:	4a24      	ldr	r2, [pc, #144]	; (8009a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800998e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009992:	6593      	str	r3, [r2, #88]	; 0x58
 8009994:	4b22      	ldr	r3, [pc, #136]	; (8009a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80099a0:	f7ff fa38 	bl	8008e14 <HAL_PWREx_GetVoltageRange>
 80099a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80099a6:	4b1e      	ldr	r3, [pc, #120]	; (8009a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099aa:	4a1d      	ldr	r2, [pc, #116]	; (8009a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b8:	d10b      	bne.n	80099d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b80      	cmp	r3, #128	; 0x80
 80099be:	d919      	bls.n	80099f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2ba0      	cmp	r3, #160	; 0xa0
 80099c4:	d902      	bls.n	80099cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80099c6:	2302      	movs	r3, #2
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	e013      	b.n	80099f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80099cc:	2301      	movs	r3, #1
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e010      	b.n	80099f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b80      	cmp	r3, #128	; 0x80
 80099d6:	d902      	bls.n	80099de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80099d8:	2303      	movs	r3, #3
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	e00a      	b.n	80099f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b80      	cmp	r3, #128	; 0x80
 80099e2:	d102      	bne.n	80099ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80099e4:	2302      	movs	r3, #2
 80099e6:	613b      	str	r3, [r7, #16]
 80099e8:	e004      	b.n	80099f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b70      	cmp	r3, #112	; 0x70
 80099ee:	d101      	bne.n	80099f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80099f0:	2301      	movs	r3, #1
 80099f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80099f4:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f023 0207 	bic.w	r2, r3, #7
 80099fc:	4909      	ldr	r1, [pc, #36]	; (8009a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009a04:	4b07      	ldr	r3, [pc, #28]	; (8009a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0307 	and.w	r3, r3, #7
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d001      	beq.n	8009a16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	40021000 	.word	0x40021000
 8009a24:	40022000 	.word	0x40022000

08009a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a30:	2300      	movs	r3, #0
 8009a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a34:	2300      	movs	r3, #0
 8009a36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d041      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a4c:	d02a      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009a4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a52:	d824      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a58:	d008      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a5e:	d81e      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a68:	d010      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a6a:	e018      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009a6c:	4b86      	ldr	r3, [pc, #536]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	4a85      	ldr	r2, [pc, #532]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009a78:	e015      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fae3 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009a86:	4603      	mov	r3, r0
 8009a88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009a8a:	e00c      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3320      	adds	r3, #32
 8009a90:	2100      	movs	r1, #0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 fbce 	bl	800a234 <RCCEx_PLLSAI2_Config>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009a9c:	e003      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	74fb      	strb	r3, [r7, #19]
      break;
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aa6:	7cfb      	ldrb	r3, [r7, #19]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10b      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009aac:	4b76      	ldr	r3, [pc, #472]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aba:	4973      	ldr	r1, [pc, #460]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009ac2:	e001      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	7cfb      	ldrb	r3, [r7, #19]
 8009ac6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d041      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ad8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009adc:	d02a      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009ade:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ae2:	d824      	bhi.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ae8:	d008      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009aea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aee:	d81e      	bhi.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009af8:	d010      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009afa:	e018      	b.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009afc:	4b62      	ldr	r3, [pc, #392]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	4a61      	ldr	r2, [pc, #388]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b08:	e015      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	2100      	movs	r1, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fa9b 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009b16:	4603      	mov	r3, r0
 8009b18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b1a:	e00c      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3320      	adds	r3, #32
 8009b20:	2100      	movs	r1, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fb86 	bl	800a234 <RCCEx_PLLSAI2_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b2c:	e003      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	74fb      	strb	r3, [r7, #19]
      break;
 8009b32:	e000      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b36:	7cfb      	ldrb	r3, [r7, #19]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10b      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009b3c:	4b52      	ldr	r3, [pc, #328]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b4a:	494f      	ldr	r1, [pc, #316]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009b52:	e001      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b54:	7cfb      	ldrb	r3, [r7, #19]
 8009b56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 80a0 	beq.w	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b66:	2300      	movs	r3, #0
 8009b68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b6a:	4b47      	ldr	r3, [pc, #284]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e000      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00d      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b80:	4b41      	ldr	r3, [pc, #260]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b84:	4a40      	ldr	r2, [pc, #256]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b8c:	4b3e      	ldr	r3, [pc, #248]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b94:	60bb      	str	r3, [r7, #8]
 8009b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b9c:	4b3b      	ldr	r3, [pc, #236]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a3a      	ldr	r2, [pc, #232]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ba8:	f7fc f934 	bl	8005e14 <HAL_GetTick>
 8009bac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009bae:	e009      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bb0:	f7fc f930 	bl	8005e14 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d902      	bls.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	74fb      	strb	r3, [r7, #19]
        break;
 8009bc2:	e005      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009bc4:	4b31      	ldr	r3, [pc, #196]	; (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0ef      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009bd0:	7cfb      	ldrb	r3, [r7, #19]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d15c      	bne.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bd6:	4b2c      	ldr	r3, [pc, #176]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009be0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d01f      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d019      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009bf4:	4b24      	ldr	r3, [pc, #144]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c00:	4b21      	ldr	r3, [pc, #132]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c06:	4a20      	ldr	r2, [pc, #128]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c10:	4b1d      	ldr	r3, [pc, #116]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c16:	4a1c      	ldr	r2, [pc, #112]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c20:	4a19      	ldr	r2, [pc, #100]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d016      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c32:	f7fc f8ef 	bl	8005e14 <HAL_GetTick>
 8009c36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c38:	e00b      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c3a:	f7fc f8eb 	bl	8005e14 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d902      	bls.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	74fb      	strb	r3, [r7, #19]
            break;
 8009c50:	e006      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c52:	4b0d      	ldr	r3, [pc, #52]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0ec      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009c60:	7cfb      	ldrb	r3, [r7, #19]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10c      	bne.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c66:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c76:	4904      	ldr	r1, [pc, #16]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009c7e:	e009      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c80:	7cfb      	ldrb	r3, [r7, #19]
 8009c82:	74bb      	strb	r3, [r7, #18]
 8009c84:	e006      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009c86:	bf00      	nop
 8009c88:	40021000 	.word	0x40021000
 8009c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c90:	7cfb      	ldrb	r3, [r7, #19]
 8009c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c94:	7c7b      	ldrb	r3, [r7, #17]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d105      	bne.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c9a:	4b9e      	ldr	r3, [pc, #632]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9e:	4a9d      	ldr	r2, [pc, #628]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ca4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cb2:	4b98      	ldr	r3, [pc, #608]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb8:	f023 0203 	bic.w	r2, r3, #3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	4994      	ldr	r1, [pc, #592]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009cd4:	4b8f      	ldr	r3, [pc, #572]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cda:	f023 020c 	bic.w	r2, r3, #12
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce2:	498c      	ldr	r1, [pc, #560]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00a      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009cf6:	4b87      	ldr	r3, [pc, #540]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	4983      	ldr	r1, [pc, #524]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0308 	and.w	r3, r3, #8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00a      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d18:	4b7e      	ldr	r3, [pc, #504]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d26:	497b      	ldr	r1, [pc, #492]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0310 	and.w	r3, r3, #16
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d3a:	4b76      	ldr	r3, [pc, #472]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d48:	4972      	ldr	r1, [pc, #456]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0320 	and.w	r3, r3, #32
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d5c:	4b6d      	ldr	r3, [pc, #436]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d6a:	496a      	ldr	r1, [pc, #424]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d7e:	4b65      	ldr	r3, [pc, #404]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8c:	4961      	ldr	r1, [pc, #388]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009da0:	4b5c      	ldr	r3, [pc, #368]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dae:	4959      	ldr	r1, [pc, #356]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009dc2:	4b54      	ldr	r3, [pc, #336]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd0:	4950      	ldr	r1, [pc, #320]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009de4:	4b4b      	ldr	r3, [pc, #300]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df2:	4948      	ldr	r1, [pc, #288]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e06:	4b43      	ldr	r3, [pc, #268]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e14:	493f      	ldr	r1, [pc, #252]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d028      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e28:	4b3a      	ldr	r3, [pc, #232]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e36:	4937      	ldr	r1, [pc, #220]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e46:	d106      	bne.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e48:	4b32      	ldr	r3, [pc, #200]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	4a31      	ldr	r2, [pc, #196]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e52:	60d3      	str	r3, [r2, #12]
 8009e54:	e011      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e5e:	d10c      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	3304      	adds	r3, #4
 8009e64:	2101      	movs	r1, #1
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 f8f0 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009e70:	7cfb      	ldrb	r3, [r7, #19]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009e76:	7cfb      	ldrb	r3, [r7, #19]
 8009e78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d028      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e86:	4b23      	ldr	r3, [pc, #140]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e94:	491f      	ldr	r1, [pc, #124]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ea4:	d106      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ea6:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	4a1a      	ldr	r2, [pc, #104]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eb0:	60d3      	str	r3, [r2, #12]
 8009eb2:	e011      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ebc:	d10c      	bne.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 f8c1 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ece:	7cfb      	ldrb	r3, [r7, #19]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009ed4:	7cfb      	ldrb	r3, [r7, #19]
 8009ed6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d02b      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ee4:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef2:	4908      	ldr	r1, [pc, #32]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f02:	d109      	bne.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f04:	4b03      	ldr	r3, [pc, #12]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	4a02      	ldr	r2, [pc, #8]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f0e:	60d3      	str	r3, [r2, #12]
 8009f10:	e014      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009f12:	bf00      	nop
 8009f14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f20:	d10c      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3304      	adds	r3, #4
 8009f26:	2101      	movs	r1, #1
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 f88f 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f32:	7cfb      	ldrb	r3, [r7, #19]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009f38:	7cfb      	ldrb	r3, [r7, #19]
 8009f3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d02f      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f48:	4b2b      	ldr	r3, [pc, #172]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f56:	4928      	ldr	r1, [pc, #160]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f66:	d10d      	bne.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f86c 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f78:	7cfb      	ldrb	r3, [r7, #19]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d014      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009f7e:	7cfb      	ldrb	r3, [r7, #19]
 8009f80:	74bb      	strb	r3, [r7, #18]
 8009f82:	e011      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f8c:	d10c      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3320      	adds	r3, #32
 8009f92:	2102      	movs	r1, #2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 f94d 	bl	800a234 <RCCEx_PLLSAI2_Config>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f9e:	7cfb      	ldrb	r3, [r7, #19]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009fa4:	7cfb      	ldrb	r3, [r7, #19]
 8009fa6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00a      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fb4:	4b10      	ldr	r3, [pc, #64]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fc2:	490d      	ldr	r1, [pc, #52]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00b      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fd6:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fe6:	4904      	ldr	r1, [pc, #16]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009fee:	7cbb      	ldrb	r3, [r7, #18]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	40021000 	.word	0x40021000

08009ffc <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800a000:	4b09      	ldr	r3, [pc, #36]	; (800a028 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a006:	4a08      	ldr	r2, [pc, #32]	; (800a028 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a008:	f023 0320 	bic.w	r3, r3, #32
 800a00c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	4a04      	ldr	r2, [pc, #16]	; (800a028 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a016:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a01a:	6193      	str	r3, [r2, #24]
}
 800a01c:	bf00      	nop
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	40021000 	.word	0x40021000

0800a02c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a030:	4b05      	ldr	r3, [pc, #20]	; (800a048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a04      	ldr	r2, [pc, #16]	; (800a048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a036:	f043 0304 	orr.w	r3, r3, #4
 800a03a:	6013      	str	r3, [r2, #0]
}
 800a03c:	bf00      	nop
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	40021000 	.word	0x40021000

0800a04c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a05a:	4b75      	ldr	r3, [pc, #468]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d018      	beq.n	800a098 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a066:	4b72      	ldr	r3, [pc, #456]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f003 0203 	and.w	r2, r3, #3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d10d      	bne.n	800a092 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
       ||
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a07e:	4b6c      	ldr	r3, [pc, #432]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	091b      	lsrs	r3, r3, #4
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
       ||
 800a08e:	429a      	cmp	r2, r3
 800a090:	d047      	beq.n	800a122 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]
 800a096:	e044      	b.n	800a122 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d018      	beq.n	800a0d2 <RCCEx_PLLSAI1_Config+0x86>
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d825      	bhi.n	800a0f0 <RCCEx_PLLSAI1_Config+0xa4>
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d002      	beq.n	800a0ae <RCCEx_PLLSAI1_Config+0x62>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d009      	beq.n	800a0c0 <RCCEx_PLLSAI1_Config+0x74>
 800a0ac:	e020      	b.n	800a0f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0ae:	4b60      	ldr	r3, [pc, #384]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d11d      	bne.n	800a0f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0be:	e01a      	b.n	800a0f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0c0:	4b5b      	ldr	r3, [pc, #364]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d116      	bne.n	800a0fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0d0:	e013      	b.n	800a0fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0d2:	4b57      	ldr	r3, [pc, #348]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10f      	bne.n	800a0fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0de:	4b54      	ldr	r3, [pc, #336]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d109      	bne.n	800a0fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0ee:	e006      	b.n	800a0fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f4:	e004      	b.n	800a100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0f6:	bf00      	nop
 800a0f8:	e002      	b.n	800a100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0fa:	bf00      	nop
 800a0fc:	e000      	b.n	800a100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0fe:	bf00      	nop
    }

    if(status == HAL_OK)
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10d      	bne.n	800a122 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a106:	4b4a      	ldr	r3, [pc, #296]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6819      	ldr	r1, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	3b01      	subs	r3, #1
 800a118:	011b      	lsls	r3, r3, #4
 800a11a:	430b      	orrs	r3, r1
 800a11c:	4944      	ldr	r1, [pc, #272]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d17d      	bne.n	800a224 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a128:	4b41      	ldr	r3, [pc, #260]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a40      	ldr	r2, [pc, #256]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a12e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a134:	f7fb fe6e 	bl	8005e14 <HAL_GetTick>
 800a138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a13a:	e009      	b.n	800a150 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a13c:	f7fb fe6a 	bl	8005e14 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b02      	cmp	r3, #2
 800a148:	d902      	bls.n	800a150 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	73fb      	strb	r3, [r7, #15]
        break;
 800a14e:	e005      	b.n	800a15c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a150:	4b37      	ldr	r3, [pc, #220]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1ef      	bne.n	800a13c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d160      	bne.n	800a224 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d111      	bne.n	800a18c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a168:	4b31      	ldr	r3, [pc, #196]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	6892      	ldr	r2, [r2, #8]
 800a178:	0211      	lsls	r1, r2, #8
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68d2      	ldr	r2, [r2, #12]
 800a17e:	0912      	lsrs	r2, r2, #4
 800a180:	0452      	lsls	r2, r2, #17
 800a182:	430a      	orrs	r2, r1
 800a184:	492a      	ldr	r1, [pc, #168]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a186:	4313      	orrs	r3, r2
 800a188:	610b      	str	r3, [r1, #16]
 800a18a:	e027      	b.n	800a1dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d112      	bne.n	800a1b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a192:	4b27      	ldr	r3, [pc, #156]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a19a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6892      	ldr	r2, [r2, #8]
 800a1a2:	0211      	lsls	r1, r2, #8
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	6912      	ldr	r2, [r2, #16]
 800a1a8:	0852      	lsrs	r2, r2, #1
 800a1aa:	3a01      	subs	r2, #1
 800a1ac:	0552      	lsls	r2, r2, #21
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	491f      	ldr	r1, [pc, #124]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	610b      	str	r3, [r1, #16]
 800a1b6:	e011      	b.n	800a1dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a1b8:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a1c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6892      	ldr	r2, [r2, #8]
 800a1c8:	0211      	lsls	r1, r2, #8
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	6952      	ldr	r2, [r2, #20]
 800a1ce:	0852      	lsrs	r2, r2, #1
 800a1d0:	3a01      	subs	r2, #1
 800a1d2:	0652      	lsls	r2, r2, #25
 800a1d4:	430a      	orrs	r2, r1
 800a1d6:	4916      	ldr	r1, [pc, #88]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a1dc:	4b14      	ldr	r3, [pc, #80]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a13      	ldr	r2, [pc, #76]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e8:	f7fb fe14 	bl	8005e14 <HAL_GetTick>
 800a1ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a1ee:	e009      	b.n	800a204 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a1f0:	f7fb fe10 	bl	8005e14 <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d902      	bls.n	800a204 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	73fb      	strb	r3, [r7, #15]
          break;
 800a202:	e005      	b.n	800a210 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a204:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0ef      	beq.n	800a1f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a216:	4b06      	ldr	r3, [pc, #24]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	4904      	ldr	r1, [pc, #16]	; (800a230 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a220:	4313      	orrs	r3, r2
 800a222:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a224:	7bfb      	ldrb	r3, [r7, #15]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	40021000 	.word	0x40021000

0800a234 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a242:	4b6a      	ldr	r3, [pc, #424]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d018      	beq.n	800a280 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a24e:	4b67      	ldr	r3, [pc, #412]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f003 0203 	and.w	r2, r3, #3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d10d      	bne.n	800a27a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
       ||
 800a262:	2b00      	cmp	r3, #0
 800a264:	d009      	beq.n	800a27a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a266:	4b61      	ldr	r3, [pc, #388]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	091b      	lsrs	r3, r3, #4
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
       ||
 800a276:	429a      	cmp	r2, r3
 800a278:	d047      	beq.n	800a30a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	73fb      	strb	r3, [r7, #15]
 800a27e:	e044      	b.n	800a30a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b03      	cmp	r3, #3
 800a286:	d018      	beq.n	800a2ba <RCCEx_PLLSAI2_Config+0x86>
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d825      	bhi.n	800a2d8 <RCCEx_PLLSAI2_Config+0xa4>
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d002      	beq.n	800a296 <RCCEx_PLLSAI2_Config+0x62>
 800a290:	2b02      	cmp	r3, #2
 800a292:	d009      	beq.n	800a2a8 <RCCEx_PLLSAI2_Config+0x74>
 800a294:	e020      	b.n	800a2d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a296:	4b55      	ldr	r3, [pc, #340]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d11d      	bne.n	800a2de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2a6:	e01a      	b.n	800a2de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a2a8:	4b50      	ldr	r3, [pc, #320]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d116      	bne.n	800a2e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2b8:	e013      	b.n	800a2e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a2ba:	4b4c      	ldr	r3, [pc, #304]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10f      	bne.n	800a2e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a2c6:	4b49      	ldr	r3, [pc, #292]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d109      	bne.n	800a2e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2d6:	e006      	b.n	800a2e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	73fb      	strb	r3, [r7, #15]
      break;
 800a2dc:	e004      	b.n	800a2e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2de:	bf00      	nop
 800a2e0:	e002      	b.n	800a2e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2e2:	bf00      	nop
 800a2e4:	e000      	b.n	800a2e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10d      	bne.n	800a30a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a2ee:	4b3f      	ldr	r3, [pc, #252]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6819      	ldr	r1, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	430b      	orrs	r3, r1
 800a304:	4939      	ldr	r1, [pc, #228]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a306:	4313      	orrs	r3, r2
 800a308:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d167      	bne.n	800a3e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a310:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a35      	ldr	r2, [pc, #212]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a31a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a31c:	f7fb fd7a 	bl	8005e14 <HAL_GetTick>
 800a320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a322:	e009      	b.n	800a338 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a324:	f7fb fd76 	bl	8005e14 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d902      	bls.n	800a338 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	73fb      	strb	r3, [r7, #15]
        break;
 800a336:	e005      	b.n	800a344 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a338:	4b2c      	ldr	r3, [pc, #176]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1ef      	bne.n	800a324 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d14a      	bne.n	800a3e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d111      	bne.n	800a374 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a350:	4b26      	ldr	r3, [pc, #152]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6892      	ldr	r2, [r2, #8]
 800a360:	0211      	lsls	r1, r2, #8
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	68d2      	ldr	r2, [r2, #12]
 800a366:	0912      	lsrs	r2, r2, #4
 800a368:	0452      	lsls	r2, r2, #17
 800a36a:	430a      	orrs	r2, r1
 800a36c:	491f      	ldr	r1, [pc, #124]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	614b      	str	r3, [r1, #20]
 800a372:	e011      	b.n	800a398 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a374:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a37c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6892      	ldr	r2, [r2, #8]
 800a384:	0211      	lsls	r1, r2, #8
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6912      	ldr	r2, [r2, #16]
 800a38a:	0852      	lsrs	r2, r2, #1
 800a38c:	3a01      	subs	r2, #1
 800a38e:	0652      	lsls	r2, r2, #25
 800a390:	430a      	orrs	r2, r1
 800a392:	4916      	ldr	r1, [pc, #88]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a394:	4313      	orrs	r3, r2
 800a396:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a13      	ldr	r2, [pc, #76]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a39e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3a4:	f7fb fd36 	bl	8005e14 <HAL_GetTick>
 800a3a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a3aa:	e009      	b.n	800a3c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a3ac:	f7fb fd32 	bl	8005e14 <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d902      	bls.n	800a3c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	73fb      	strb	r3, [r7, #15]
          break;
 800a3be:	e005      	b.n	800a3cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0ef      	beq.n	800a3ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a3d2:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3d4:	695a      	ldr	r2, [r3, #20]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	4904      	ldr	r1, [pc, #16]	; (800a3ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	40021000 	.word	0x40021000

0800a3f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e095      	b.n	800a52e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d108      	bne.n	800a41c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a412:	d009      	beq.n	800a428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	61da      	str	r2, [r3, #28]
 800a41a:	e005      	b.n	800a428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f89f 	bl	800a586 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a45e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a468:	d902      	bls.n	800a470 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	e002      	b.n	800a476 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a474:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a47e:	d007      	beq.n	800a490 <HAL_SPI_Init+0xa0>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a488:	d002      	beq.n	800a490 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4be:	431a      	orrs	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d2:	ea42 0103 	orr.w	r1, r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	0c1b      	lsrs	r3, r3, #16
 800a4ec:	f003 0204 	and.w	r2, r3, #4
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fe:	f003 0308 	and.w	r3, r3, #8
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a50c:	ea42 0103 	orr.w	r1, r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e01a      	b.n	800a57e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a55e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f81a 	bl	800a59a <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800a5a2:	bf00      	nop
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b088      	sub	sp, #32
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	603b      	str	r3, [r7, #0]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_SPI_Transmit+0x22>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e158      	b.n	800a882 <HAL_SPI_Transmit+0x2d4>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5d8:	f7fb fc1c 	bl	8005e14 <HAL_GetTick>
 800a5dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a5de:	88fb      	ldrh	r3, [r7, #6]
 800a5e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d002      	beq.n	800a5f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a5f2:	e13d      	b.n	800a870 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <HAL_SPI_Transmit+0x52>
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d102      	bne.n	800a606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a604:	e134      	b.n	800a870 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2203      	movs	r2, #3
 800a60a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	88fa      	ldrh	r2, [r7, #6]
 800a624:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a650:	d10f      	bne.n	800a672 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67c:	2b40      	cmp	r3, #64	; 0x40
 800a67e:	d007      	beq.n	800a690 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a68e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a698:	d94b      	bls.n	800a732 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <HAL_SPI_Transmit+0xfa>
 800a6a2:	8afb      	ldrh	r3, [r7, #22]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d13e      	bne.n	800a726 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ac:	881a      	ldrh	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	1c9a      	adds	r2, r3, #2
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a6cc:	e02b      	b.n	800a726 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d112      	bne.n	800a702 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	881a      	ldrh	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ec:	1c9a      	adds	r2, r3, #2
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a700:	e011      	b.n	800a726 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a702:	f7fb fb87 	bl	8005e14 <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d803      	bhi.n	800a71a <HAL_SPI_Transmit+0x16c>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a718:	d102      	bne.n	800a720 <HAL_SPI_Transmit+0x172>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d102      	bne.n	800a726 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a724:	e0a4      	b.n	800a870 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1ce      	bne.n	800a6ce <HAL_SPI_Transmit+0x120>
 800a730:	e07c      	b.n	800a82c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <HAL_SPI_Transmit+0x192>
 800a73a:	8afb      	ldrh	r3, [r7, #22]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d170      	bne.n	800a822 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a744:	b29b      	uxth	r3, r3
 800a746:	2b01      	cmp	r3, #1
 800a748:	d912      	bls.n	800a770 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74e:	881a      	ldrh	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75a:	1c9a      	adds	r2, r3, #2
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a764:	b29b      	uxth	r3, r3
 800a766:	3b02      	subs	r3, #2
 800a768:	b29a      	uxth	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a76e:	e058      	b.n	800a822 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	330c      	adds	r3, #12
 800a77a:	7812      	ldrb	r2, [r2, #0]
 800a77c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	3b01      	subs	r3, #1
 800a790:	b29a      	uxth	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a796:	e044      	b.n	800a822 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d12b      	bne.n	800a7fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d912      	bls.n	800a7d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b4:	881a      	ldrh	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c0:	1c9a      	adds	r2, r3, #2
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	3b02      	subs	r3, #2
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a7d4:	e025      	b.n	800a822 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	330c      	adds	r3, #12
 800a7e0:	7812      	ldrb	r2, [r2, #0]
 800a7e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a7fc:	e011      	b.n	800a822 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7fe:	f7fb fb09 	bl	8005e14 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d803      	bhi.n	800a816 <HAL_SPI_Transmit+0x268>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a814:	d102      	bne.n	800a81c <HAL_SPI_Transmit+0x26e>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a820:	e026      	b.n	800a870 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a826:	b29b      	uxth	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1b5      	bne.n	800a798 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 fb65 	bl	800af00 <SPI_EndRxTxTransaction>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2220      	movs	r2, #32
 800a840:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a84a:	2300      	movs	r3, #0
 800a84c:	613b      	str	r3, [r7, #16]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	613b      	str	r3, [r7, #16]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	77fb      	strb	r3, [r7, #31]
 800a86c:	e000      	b.n	800a870 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a86e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a880:	7ffb      	ldrb	r3, [r7, #31]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3720      	adds	r7, #32
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b08a      	sub	sp, #40	; 0x28
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	60b9      	str	r1, [r7, #8]
 800a894:	607a      	str	r2, [r7, #4]
 800a896:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a898:	2301      	movs	r3, #1
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_SPI_TransmitReceive+0x26>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e1fb      	b.n	800aca8 <HAL_SPI_TransmitReceive+0x41e>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8b8:	f7fb faac 	bl	8005e14 <HAL_GetTick>
 800a8bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a8c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a8cc:	887b      	ldrh	r3, [r7, #2]
 800a8ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a8d0:	887b      	ldrh	r3, [r7, #2]
 800a8d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a8d4:	7efb      	ldrb	r3, [r7, #27]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_SPI_TransmitReceive+0x6e>
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8e0:	d106      	bne.n	800a8f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d102      	bne.n	800a8f0 <HAL_SPI_TransmitReceive+0x66>
 800a8ea:	7efb      	ldrb	r3, [r7, #27]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d003      	beq.n	800a8f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a8f6:	e1cd      	b.n	800ac94 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d005      	beq.n	800a90a <HAL_SPI_TransmitReceive+0x80>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <HAL_SPI_TransmitReceive+0x80>
 800a904:	887b      	ldrh	r3, [r7, #2]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d103      	bne.n	800a912 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a910:	e1c0      	b.n	800ac94 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b04      	cmp	r3, #4
 800a91c:	d003      	beq.n	800a926 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2205      	movs	r2, #5
 800a922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	887a      	ldrh	r2, [r7, #2]
 800a936:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	887a      	ldrh	r2, [r7, #2]
 800a93e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	887a      	ldrh	r2, [r7, #2]
 800a94c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	887a      	ldrh	r2, [r7, #2]
 800a952:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a968:	d802      	bhi.n	800a970 <HAL_SPI_TransmitReceive+0xe6>
 800a96a:	8a3b      	ldrh	r3, [r7, #16]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d908      	bls.n	800a982 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a97e:	605a      	str	r2, [r3, #4]
 800a980:	e007      	b.n	800a992 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a990:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a99c:	2b40      	cmp	r3, #64	; 0x40
 800a99e:	d007      	beq.n	800a9b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9b8:	d97c      	bls.n	800aab4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <HAL_SPI_TransmitReceive+0x13e>
 800a9c2:	8a7b      	ldrh	r3, [r7, #18]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d169      	bne.n	800aa9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9cc:	881a      	ldrh	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d8:	1c9a      	adds	r2, r3, #2
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9ec:	e056      	b.n	800aa9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d11b      	bne.n	800aa34 <HAL_SPI_TransmitReceive+0x1aa>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <HAL_SPI_TransmitReceive+0x1aa>
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d113      	bne.n	800aa34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	881a      	ldrh	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	1c9a      	adds	r2, r3, #2
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa30:	2300      	movs	r3, #0
 800aa32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d11c      	bne.n	800aa7c <HAL_SPI_TransmitReceive+0x1f2>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d016      	beq.n	800aa7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	b292      	uxth	r2, r2
 800aa5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa60:	1c9a      	adds	r2, r3, #2
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa7c:	f7fb f9ca 	bl	8005e14 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d807      	bhi.n	800aa9c <HAL_SPI_TransmitReceive+0x212>
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa92:	d003      	beq.n	800aa9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800aa9a:	e0fb      	b.n	800ac94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1a3      	bne.n	800a9ee <HAL_SPI_TransmitReceive+0x164>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d19d      	bne.n	800a9ee <HAL_SPI_TransmitReceive+0x164>
 800aab2:	e0df      	b.n	800ac74 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <HAL_SPI_TransmitReceive+0x23a>
 800aabc:	8a7b      	ldrh	r3, [r7, #18]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	f040 80cb 	bne.w	800ac5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d912      	bls.n	800aaf4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	881a      	ldrh	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aade:	1c9a      	adds	r2, r3, #2
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	3b02      	subs	r3, #2
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aaf2:	e0b2      	b.n	800ac5a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	330c      	adds	r3, #12
 800aafe:	7812      	ldrb	r2, [r2, #0]
 800ab00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	3b01      	subs	r3, #1
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab1a:	e09e      	b.n	800ac5a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d134      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x30a>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d02f      	beq.n	800ab94 <HAL_SPI_TransmitReceive+0x30a>
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d12c      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d912      	bls.n	800ab6a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab48:	881a      	ldrh	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab54:	1c9a      	adds	r2, r3, #2
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	3b02      	subs	r3, #2
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab68:	e012      	b.n	800ab90 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	330c      	adds	r3, #12
 800ab74:	7812      	ldrb	r2, [r2, #0]
 800ab76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d148      	bne.n	800ac34 <HAL_SPI_TransmitReceive+0x3aa>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d042      	beq.n	800ac34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d923      	bls.n	800ac02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68da      	ldr	r2, [r3, #12]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc4:	b292      	uxth	r2, r2
 800abc6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	1c9a      	adds	r2, r3, #2
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abd8:	b29b      	uxth	r3, r3
 800abda:	3b02      	subs	r3, #2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abea:	b29b      	uxth	r3, r3
 800abec:	2b01      	cmp	r3, #1
 800abee:	d81f      	bhi.n	800ac30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800abfe:	605a      	str	r2, [r3, #4]
 800ac00:	e016      	b.n	800ac30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f103 020c 	add.w	r2, r3, #12
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0e:	7812      	ldrb	r2, [r2, #0]
 800ac10:	b2d2      	uxtb	r2, r2
 800ac12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	3b01      	subs	r3, #1
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac30:	2301      	movs	r3, #1
 800ac32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac34:	f7fb f8ee 	bl	8005e14 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d803      	bhi.n	800ac4c <HAL_SPI_TransmitReceive+0x3c2>
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac4a:	d102      	bne.n	800ac52 <HAL_SPI_TransmitReceive+0x3c8>
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d103      	bne.n	800ac5a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ac58:	e01c      	b.n	800ac94 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f47f af5b 	bne.w	800ab1c <HAL_SPI_TransmitReceive+0x292>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f47f af54 	bne.w	800ab1c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac74:	69fa      	ldr	r2, [r7, #28]
 800ac76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f941 	bl	800af00 <SPI_EndRxTxTransaction>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d006      	beq.n	800ac92 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	661a      	str	r2, [r3, #96]	; 0x60
 800ac90:	e000      	b.n	800ac94 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ac92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3728      	adds	r7, #40	; 0x28
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acbe:	b2db      	uxtb	r3, r3
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	4613      	mov	r3, r2
 800acda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800acdc:	f7fb f89a 	bl	8005e14 <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4413      	add	r3, r2
 800acea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800acec:	f7fb f892 	bl	8005e14 <HAL_GetTick>
 800acf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800acf2:	4b39      	ldr	r3, [pc, #228]	; (800add8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	015b      	lsls	r3, r3, #5
 800acf8:	0d1b      	lsrs	r3, r3, #20
 800acfa:	69fa      	ldr	r2, [r7, #28]
 800acfc:	fb02 f303 	mul.w	r3, r2, r3
 800ad00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad02:	e054      	b.n	800adae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0a:	d050      	beq.n	800adae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad0c:	f7fb f882 	bl	8005e14 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d902      	bls.n	800ad22 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d13d      	bne.n	800ad9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad3a:	d111      	bne.n	800ad60 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad44:	d004      	beq.n	800ad50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad4e:	d107      	bne.n	800ad60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad68:	d10f      	bne.n	800ad8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e017      	b.n	800adce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3b01      	subs	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	4013      	ands	r3, r2
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	429a      	cmp	r2, r3
 800adbc:	bf0c      	ite	eq
 800adbe:	2301      	moveq	r3, #1
 800adc0:	2300      	movne	r3, #0
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	461a      	mov	r2, r3
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d19b      	bne.n	800ad04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20000004 	.word	0x20000004

0800addc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b088      	sub	sp, #32
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800adea:	f7fb f813 	bl	8005e14 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	1a9b      	subs	r3, r3, r2
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	4413      	add	r3, r2
 800adf8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800adfa:	f7fb f80b 	bl	8005e14 <HAL_GetTick>
 800adfe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae00:	4b3e      	ldr	r3, [pc, #248]	; (800aefc <SPI_WaitFifoStateUntilTimeout+0x120>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	00da      	lsls	r2, r3, #3
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	0d1b      	lsrs	r3, r3, #20
 800ae10:	69fa      	ldr	r2, [r7, #28]
 800ae12:	fb02 f303 	mul.w	r3, r2, r3
 800ae16:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae18:	e062      	b.n	800aee0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae20:	d109      	bne.n	800ae36 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	330c      	adds	r3, #12
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800ae34:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3c:	d050      	beq.n	800aee0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae3e:	f7fa ffe9 	bl	8005e14 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	69fa      	ldr	r2, [r7, #28]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d902      	bls.n	800ae54 <SPI_WaitFifoStateUntilTimeout+0x78>
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d13d      	bne.n	800aed0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae6c:	d111      	bne.n	800ae92 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae76:	d004      	beq.n	800ae82 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae80:	d107      	bne.n	800ae92 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae9a:	d10f      	bne.n	800aebc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aeba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e010      	b.n	800aef2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	3b01      	subs	r3, #1
 800aede:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	4013      	ands	r3, r2
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d194      	bne.n	800ae1a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20000004 	.word	0x20000004

0800af00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af02      	add	r7, sp, #8
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2200      	movs	r2, #0
 800af14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff ff5f 	bl	800addc <SPI_WaitFifoStateUntilTimeout>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d007      	beq.n	800af34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af28:	f043 0220 	orr.w	r2, r3, #32
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e027      	b.n	800af84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2200      	movs	r2, #0
 800af3c:	2180      	movs	r1, #128	; 0x80
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7ff fec4 	bl	800accc <SPI_WaitFlagStateUntilTimeout>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d007      	beq.n	800af5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af4e:	f043 0220 	orr.w	r2, r3, #32
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af56:	2303      	movs	r3, #3
 800af58:	e014      	b.n	800af84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2200      	movs	r2, #0
 800af62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff ff38 	bl	800addc <SPI_WaitFifoStateUntilTimeout>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d007      	beq.n	800af82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af76:	f043 0220 	orr.w	r2, r3, #32
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e000      	b.n	800af84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e049      	b.n	800b032 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7f7 fe0c 	bl	8002bd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3304      	adds	r3, #4
 800afc8:	4619      	mov	r1, r3
 800afca:	4610      	mov	r0, r2
 800afcc:	f000 fc56 	bl	800b87c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d109      	bne.n	800b060 <HAL_TIM_OC_Start_IT+0x24>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b01      	cmp	r3, #1
 800b056:	bf14      	ite	ne
 800b058:	2301      	movne	r3, #1
 800b05a:	2300      	moveq	r3, #0
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	e03c      	b.n	800b0da <HAL_TIM_OC_Start_IT+0x9e>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b04      	cmp	r3, #4
 800b064:	d109      	bne.n	800b07a <HAL_TIM_OC_Start_IT+0x3e>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b01      	cmp	r3, #1
 800b070:	bf14      	ite	ne
 800b072:	2301      	movne	r3, #1
 800b074:	2300      	moveq	r3, #0
 800b076:	b2db      	uxtb	r3, r3
 800b078:	e02f      	b.n	800b0da <HAL_TIM_OC_Start_IT+0x9e>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b08      	cmp	r3, #8
 800b07e:	d109      	bne.n	800b094 <HAL_TIM_OC_Start_IT+0x58>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b01      	cmp	r3, #1
 800b08a:	bf14      	ite	ne
 800b08c:	2301      	movne	r3, #1
 800b08e:	2300      	moveq	r3, #0
 800b090:	b2db      	uxtb	r3, r3
 800b092:	e022      	b.n	800b0da <HAL_TIM_OC_Start_IT+0x9e>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b0c      	cmp	r3, #12
 800b098:	d109      	bne.n	800b0ae <HAL_TIM_OC_Start_IT+0x72>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	bf14      	ite	ne
 800b0a6:	2301      	movne	r3, #1
 800b0a8:	2300      	moveq	r3, #0
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	e015      	b.n	800b0da <HAL_TIM_OC_Start_IT+0x9e>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d109      	bne.n	800b0c8 <HAL_TIM_OC_Start_IT+0x8c>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	bf14      	ite	ne
 800b0c0:	2301      	movne	r3, #1
 800b0c2:	2300      	moveq	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	e008      	b.n	800b0da <HAL_TIM_OC_Start_IT+0x9e>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	bf14      	ite	ne
 800b0d4:	2301      	movne	r3, #1
 800b0d6:	2300      	moveq	r3, #0
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e0e2      	b.n	800b2a8 <HAL_TIM_OC_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d104      	bne.n	800b0f2 <HAL_TIM_OC_Start_IT+0xb6>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0f0:	e023      	b.n	800b13a <HAL_TIM_OC_Start_IT+0xfe>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b04      	cmp	r3, #4
 800b0f6:	d104      	bne.n	800b102 <HAL_TIM_OC_Start_IT+0xc6>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b100:	e01b      	b.n	800b13a <HAL_TIM_OC_Start_IT+0xfe>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b08      	cmp	r3, #8
 800b106:	d104      	bne.n	800b112 <HAL_TIM_OC_Start_IT+0xd6>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b110:	e013      	b.n	800b13a <HAL_TIM_OC_Start_IT+0xfe>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b0c      	cmp	r3, #12
 800b116:	d104      	bne.n	800b122 <HAL_TIM_OC_Start_IT+0xe6>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b120:	e00b      	b.n	800b13a <HAL_TIM_OC_Start_IT+0xfe>
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b10      	cmp	r3, #16
 800b126:	d104      	bne.n	800b132 <HAL_TIM_OC_Start_IT+0xf6>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b130:	e003      	b.n	800b13a <HAL_TIM_OC_Start_IT+0xfe>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2202      	movs	r2, #2
 800b136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b0c      	cmp	r3, #12
 800b13e:	d841      	bhi.n	800b1c4 <HAL_TIM_OC_Start_IT+0x188>
 800b140:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <HAL_TIM_OC_Start_IT+0x10c>)
 800b142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b146:	bf00      	nop
 800b148:	0800b17d 	.word	0x0800b17d
 800b14c:	0800b1c5 	.word	0x0800b1c5
 800b150:	0800b1c5 	.word	0x0800b1c5
 800b154:	0800b1c5 	.word	0x0800b1c5
 800b158:	0800b18f 	.word	0x0800b18f
 800b15c:	0800b1c5 	.word	0x0800b1c5
 800b160:	0800b1c5 	.word	0x0800b1c5
 800b164:	0800b1c5 	.word	0x0800b1c5
 800b168:	0800b1a1 	.word	0x0800b1a1
 800b16c:	0800b1c5 	.word	0x0800b1c5
 800b170:	0800b1c5 	.word	0x0800b1c5
 800b174:	0800b1c5 	.word	0x0800b1c5
 800b178:	0800b1b3 	.word	0x0800b1b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f042 0202 	orr.w	r2, r2, #2
 800b18a:	60da      	str	r2, [r3, #12]
      break;
 800b18c:	e01b      	b.n	800b1c6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f042 0204 	orr.w	r2, r2, #4
 800b19c:	60da      	str	r2, [r3, #12]
      break;
 800b19e:	e012      	b.n	800b1c6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68da      	ldr	r2, [r3, #12]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f042 0208 	orr.w	r2, r2, #8
 800b1ae:	60da      	str	r2, [r3, #12]
      break;
 800b1b0:	e009      	b.n	800b1c6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f042 0210 	orr.w	r2, r2, #16
 800b1c0:	60da      	str	r2, [r3, #12]
      break;
 800b1c2:	e000      	b.n	800b1c6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 800b1c4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fec4 	bl	800bf5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a35      	ldr	r2, [pc, #212]	; (800b2b0 <HAL_TIM_OC_Start_IT+0x274>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d013      	beq.n	800b206 <HAL_TIM_OC_Start_IT+0x1ca>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a34      	ldr	r2, [pc, #208]	; (800b2b4 <HAL_TIM_OC_Start_IT+0x278>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d00e      	beq.n	800b206 <HAL_TIM_OC_Start_IT+0x1ca>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a32      	ldr	r2, [pc, #200]	; (800b2b8 <HAL_TIM_OC_Start_IT+0x27c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d009      	beq.n	800b206 <HAL_TIM_OC_Start_IT+0x1ca>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a31      	ldr	r2, [pc, #196]	; (800b2bc <HAL_TIM_OC_Start_IT+0x280>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d004      	beq.n	800b206 <HAL_TIM_OC_Start_IT+0x1ca>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a2f      	ldr	r2, [pc, #188]	; (800b2c0 <HAL_TIM_OC_Start_IT+0x284>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d101      	bne.n	800b20a <HAL_TIM_OC_Start_IT+0x1ce>
 800b206:	2301      	movs	r3, #1
 800b208:	e000      	b.n	800b20c <HAL_TIM_OC_Start_IT+0x1d0>
 800b20a:	2300      	movs	r3, #0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <HAL_TIM_OC_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b21e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a22      	ldr	r2, [pc, #136]	; (800b2b0 <HAL_TIM_OC_Start_IT+0x274>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d01d      	beq.n	800b266 <HAL_TIM_OC_Start_IT+0x22a>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b232:	d018      	beq.n	800b266 <HAL_TIM_OC_Start_IT+0x22a>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a22      	ldr	r2, [pc, #136]	; (800b2c4 <HAL_TIM_OC_Start_IT+0x288>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d013      	beq.n	800b266 <HAL_TIM_OC_Start_IT+0x22a>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a21      	ldr	r2, [pc, #132]	; (800b2c8 <HAL_TIM_OC_Start_IT+0x28c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00e      	beq.n	800b266 <HAL_TIM_OC_Start_IT+0x22a>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a1f      	ldr	r2, [pc, #124]	; (800b2cc <HAL_TIM_OC_Start_IT+0x290>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d009      	beq.n	800b266 <HAL_TIM_OC_Start_IT+0x22a>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a17      	ldr	r2, [pc, #92]	; (800b2b4 <HAL_TIM_OC_Start_IT+0x278>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d004      	beq.n	800b266 <HAL_TIM_OC_Start_IT+0x22a>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a15      	ldr	r2, [pc, #84]	; (800b2b8 <HAL_TIM_OC_Start_IT+0x27c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d115      	bne.n	800b292 <HAL_TIM_OC_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	4b18      	ldr	r3, [pc, #96]	; (800b2d0 <HAL_TIM_OC_Start_IT+0x294>)
 800b26e:	4013      	ands	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b06      	cmp	r3, #6
 800b276:	d015      	beq.n	800b2a4 <HAL_TIM_OC_Start_IT+0x268>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b27e:	d011      	beq.n	800b2a4 <HAL_TIM_OC_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0201 	orr.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b290:	e008      	b.n	800b2a4 <HAL_TIM_OC_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f042 0201 	orr.w	r2, r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	e000      	b.n	800b2a6 <HAL_TIM_OC_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	40012c00 	.word	0x40012c00
 800b2b4:	40013400 	.word	0x40013400
 800b2b8:	40014000 	.word	0x40014000
 800b2bc:	40014400 	.word	0x40014400
 800b2c0:	40014800 	.word	0x40014800
 800b2c4:	40000400 	.word	0x40000400
 800b2c8:	40000800 	.word	0x40000800
 800b2cc:	40000c00 	.word	0x40000c00
 800b2d0:	00010007 	.word	0x00010007

0800b2d4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b0c      	cmp	r3, #12
 800b2e2:	d841      	bhi.n	800b368 <HAL_TIM_OC_Stop_IT+0x94>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <HAL_TIM_OC_Stop_IT+0x18>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b321 	.word	0x0800b321
 800b2f0:	0800b369 	.word	0x0800b369
 800b2f4:	0800b369 	.word	0x0800b369
 800b2f8:	0800b369 	.word	0x0800b369
 800b2fc:	0800b333 	.word	0x0800b333
 800b300:	0800b369 	.word	0x0800b369
 800b304:	0800b369 	.word	0x0800b369
 800b308:	0800b369 	.word	0x0800b369
 800b30c:	0800b345 	.word	0x0800b345
 800b310:	0800b369 	.word	0x0800b369
 800b314:	0800b369 	.word	0x0800b369
 800b318:	0800b369 	.word	0x0800b369
 800b31c:	0800b357 	.word	0x0800b357
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f022 0202 	bic.w	r2, r2, #2
 800b32e:	60da      	str	r2, [r3, #12]
      break;
 800b330:	e01b      	b.n	800b36a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68da      	ldr	r2, [r3, #12]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0204 	bic.w	r2, r2, #4
 800b340:	60da      	str	r2, [r3, #12]
      break;
 800b342:	e012      	b.n	800b36a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68da      	ldr	r2, [r3, #12]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f022 0208 	bic.w	r2, r2, #8
 800b352:	60da      	str	r2, [r3, #12]
      break;
 800b354:	e009      	b.n	800b36a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68da      	ldr	r2, [r3, #12]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f022 0210 	bic.w	r2, r2, #16
 800b364:	60da      	str	r2, [r3, #12]
      break;
 800b366:	e000      	b.n	800b36a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800b368:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2200      	movs	r2, #0
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fdf2 	bl	800bf5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a3e      	ldr	r2, [pc, #248]	; (800b478 <HAL_TIM_OC_Stop_IT+0x1a4>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d013      	beq.n	800b3aa <HAL_TIM_OC_Stop_IT+0xd6>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a3d      	ldr	r2, [pc, #244]	; (800b47c <HAL_TIM_OC_Stop_IT+0x1a8>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d00e      	beq.n	800b3aa <HAL_TIM_OC_Stop_IT+0xd6>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a3b      	ldr	r2, [pc, #236]	; (800b480 <HAL_TIM_OC_Stop_IT+0x1ac>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d009      	beq.n	800b3aa <HAL_TIM_OC_Stop_IT+0xd6>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a3a      	ldr	r2, [pc, #232]	; (800b484 <HAL_TIM_OC_Stop_IT+0x1b0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d004      	beq.n	800b3aa <HAL_TIM_OC_Stop_IT+0xd6>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a38      	ldr	r2, [pc, #224]	; (800b488 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d101      	bne.n	800b3ae <HAL_TIM_OC_Stop_IT+0xda>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e000      	b.n	800b3b0 <HAL_TIM_OC_Stop_IT+0xdc>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d017      	beq.n	800b3e4 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6a1a      	ldr	r2, [r3, #32]
 800b3ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3be:	4013      	ands	r3, r2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10f      	bne.n	800b3e4 <HAL_TIM_OC_Stop_IT+0x110>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6a1a      	ldr	r2, [r3, #32]
 800b3ca:	f240 4344 	movw	r3, #1092	; 0x444
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d107      	bne.n	800b3e4 <HAL_TIM_OC_Stop_IT+0x110>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6a1a      	ldr	r2, [r3, #32]
 800b3ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10f      	bne.n	800b414 <HAL_TIM_OC_Stop_IT+0x140>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6a1a      	ldr	r2, [r3, #32]
 800b3fa:	f240 4344 	movw	r3, #1092	; 0x444
 800b3fe:	4013      	ands	r3, r2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d107      	bne.n	800b414 <HAL_TIM_OC_Stop_IT+0x140>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0201 	bic.w	r2, r2, #1
 800b412:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d104      	bne.n	800b424 <HAL_TIM_OC_Stop_IT+0x150>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b422:	e023      	b.n	800b46c <HAL_TIM_OC_Stop_IT+0x198>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b04      	cmp	r3, #4
 800b428:	d104      	bne.n	800b434 <HAL_TIM_OC_Stop_IT+0x160>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b432:	e01b      	b.n	800b46c <HAL_TIM_OC_Stop_IT+0x198>
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	2b08      	cmp	r3, #8
 800b438:	d104      	bne.n	800b444 <HAL_TIM_OC_Stop_IT+0x170>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b442:	e013      	b.n	800b46c <HAL_TIM_OC_Stop_IT+0x198>
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b0c      	cmp	r3, #12
 800b448:	d104      	bne.n	800b454 <HAL_TIM_OC_Stop_IT+0x180>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b452:	e00b      	b.n	800b46c <HAL_TIM_OC_Stop_IT+0x198>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2b10      	cmp	r3, #16
 800b458:	d104      	bne.n	800b464 <HAL_TIM_OC_Stop_IT+0x190>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b462:	e003      	b.n	800b46c <HAL_TIM_OC_Stop_IT+0x198>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	40012c00 	.word	0x40012c00
 800b47c:	40013400 	.word	0x40013400
 800b480:	40014000 	.word	0x40014000
 800b484:	40014400 	.word	0x40014400
 800b488:	40014800 	.word	0x40014800

0800b48c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	f003 0302 	and.w	r3, r3, #2
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d122      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d11b      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f06f 0202 	mvn.w	r2, #2
 800b4b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	f003 0303 	and.w	r3, r3, #3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f9b6 	bl	800b840 <HAL_TIM_IC_CaptureCallback>
 800b4d4:	e005      	b.n	800b4e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7f5 fc50 	bl	8000d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f9b9 	bl	800b854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	f003 0304 	and.w	r3, r3, #4
 800b4f2:	2b04      	cmp	r3, #4
 800b4f4:	d122      	bne.n	800b53c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b04      	cmp	r3, #4
 800b502:	d11b      	bne.n	800b53c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f06f 0204 	mvn.w	r2, #4
 800b50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2202      	movs	r2, #2
 800b512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f98c 	bl	800b840 <HAL_TIM_IC_CaptureCallback>
 800b528:	e005      	b.n	800b536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7f5 fc26 	bl	8000d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f98f 	bl	800b854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f003 0308 	and.w	r3, r3, #8
 800b546:	2b08      	cmp	r3, #8
 800b548:	d122      	bne.n	800b590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f003 0308 	and.w	r3, r3, #8
 800b554:	2b08      	cmp	r3, #8
 800b556:	d11b      	bne.n	800b590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f06f 0208 	mvn.w	r2, #8
 800b560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2204      	movs	r2, #4
 800b566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f962 	bl	800b840 <HAL_TIM_IC_CaptureCallback>
 800b57c:	e005      	b.n	800b58a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7f5 fbfc 	bl	8000d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f965 	bl	800b854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	f003 0310 	and.w	r3, r3, #16
 800b59a:	2b10      	cmp	r3, #16
 800b59c:	d122      	bne.n	800b5e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	f003 0310 	and.w	r3, r3, #16
 800b5a8:	2b10      	cmp	r3, #16
 800b5aa:	d11b      	bne.n	800b5e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f06f 0210 	mvn.w	r2, #16
 800b5b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2208      	movs	r2, #8
 800b5ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f938 	bl	800b840 <HAL_TIM_IC_CaptureCallback>
 800b5d0:	e005      	b.n	800b5de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7f5 fbd2 	bl	8000d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f93b 	bl	800b854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d10e      	bne.n	800b610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	f003 0301 	and.w	r3, r3, #1
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d107      	bne.n	800b610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f06f 0201 	mvn.w	r2, #1
 800b608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7f5 fbd6 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b61a:	2b80      	cmp	r3, #128	; 0x80
 800b61c:	d10e      	bne.n	800b63c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b628:	2b80      	cmp	r3, #128	; 0x80
 800b62a:	d107      	bne.n	800b63c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fcbf 	bl	800bfba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b64a:	d10e      	bne.n	800b66a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b656:	2b80      	cmp	r3, #128	; 0x80
 800b658:	d107      	bne.n	800b66a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fcb2 	bl	800bfce <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b674:	2b40      	cmp	r3, #64	; 0x40
 800b676:	d10e      	bne.n	800b696 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b682:	2b40      	cmp	r3, #64	; 0x40
 800b684:	d107      	bne.n	800b696 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b68e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f8e9 	bl	800b868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f003 0320 	and.w	r3, r3, #32
 800b6a0:	2b20      	cmp	r3, #32
 800b6a2:	d10e      	bne.n	800b6c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f003 0320 	and.w	r3, r3, #32
 800b6ae:	2b20      	cmp	r3, #32
 800b6b0:	d107      	bne.n	800b6c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f06f 0220 	mvn.w	r2, #32
 800b6ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fc72 	bl	800bfa6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6c2:	bf00      	nop
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
	...

0800b6cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d101      	bne.n	800b6e6 <HAL_TIM_OC_ConfigChannel+0x1a>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e064      	b.n	800b7b0 <HAL_TIM_OC_ConfigChannel+0xe4>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b14      	cmp	r3, #20
 800b6f2:	d857      	bhi.n	800b7a4 <HAL_TIM_OC_ConfigChannel+0xd8>
 800b6f4:	a201      	add	r2, pc, #4	; (adr r2, 800b6fc <HAL_TIM_OC_ConfigChannel+0x30>)
 800b6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fa:	bf00      	nop
 800b6fc:	0800b751 	.word	0x0800b751
 800b700:	0800b7a5 	.word	0x0800b7a5
 800b704:	0800b7a5 	.word	0x0800b7a5
 800b708:	0800b7a5 	.word	0x0800b7a5
 800b70c:	0800b75f 	.word	0x0800b75f
 800b710:	0800b7a5 	.word	0x0800b7a5
 800b714:	0800b7a5 	.word	0x0800b7a5
 800b718:	0800b7a5 	.word	0x0800b7a5
 800b71c:	0800b76d 	.word	0x0800b76d
 800b720:	0800b7a5 	.word	0x0800b7a5
 800b724:	0800b7a5 	.word	0x0800b7a5
 800b728:	0800b7a5 	.word	0x0800b7a5
 800b72c:	0800b77b 	.word	0x0800b77b
 800b730:	0800b7a5 	.word	0x0800b7a5
 800b734:	0800b7a5 	.word	0x0800b7a5
 800b738:	0800b7a5 	.word	0x0800b7a5
 800b73c:	0800b789 	.word	0x0800b789
 800b740:	0800b7a5 	.word	0x0800b7a5
 800b744:	0800b7a5 	.word	0x0800b7a5
 800b748:	0800b7a5 	.word	0x0800b7a5
 800b74c:	0800b797 	.word	0x0800b797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	4618      	mov	r0, r3
 800b758:	f000 f92a 	bl	800b9b0 <TIM_OC1_SetConfig>
      break;
 800b75c:	e023      	b.n	800b7a6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	4618      	mov	r0, r3
 800b766:	f000 f9b3 	bl	800bad0 <TIM_OC2_SetConfig>
      break;
 800b76a:	e01c      	b.n	800b7a6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68b9      	ldr	r1, [r7, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f000 fa36 	bl	800bbe4 <TIM_OC3_SetConfig>
      break;
 800b778:	e015      	b.n	800b7a6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68b9      	ldr	r1, [r7, #8]
 800b780:	4618      	mov	r0, r3
 800b782:	f000 fab7 	bl	800bcf4 <TIM_OC4_SetConfig>
      break;
 800b786:	e00e      	b.n	800b7a6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fb1a 	bl	800bdc8 <TIM_OC5_SetConfig>
      break;
 800b794:	e007      	b.n	800b7a6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68b9      	ldr	r1, [r7, #8]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 fb77 	bl	800be90 <TIM_OC6_SetConfig>
      break;
 800b7a2:	e000      	b.n	800b7a6 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800b7a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b0c      	cmp	r3, #12
 800b7ca:	d831      	bhi.n	800b830 <HAL_TIM_ReadCapturedValue+0x78>
 800b7cc:	a201      	add	r2, pc, #4	; (adr r2, 800b7d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d2:	bf00      	nop
 800b7d4:	0800b809 	.word	0x0800b809
 800b7d8:	0800b831 	.word	0x0800b831
 800b7dc:	0800b831 	.word	0x0800b831
 800b7e0:	0800b831 	.word	0x0800b831
 800b7e4:	0800b813 	.word	0x0800b813
 800b7e8:	0800b831 	.word	0x0800b831
 800b7ec:	0800b831 	.word	0x0800b831
 800b7f0:	0800b831 	.word	0x0800b831
 800b7f4:	0800b81d 	.word	0x0800b81d
 800b7f8:	0800b831 	.word	0x0800b831
 800b7fc:	0800b831 	.word	0x0800b831
 800b800:	0800b831 	.word	0x0800b831
 800b804:	0800b827 	.word	0x0800b827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80e:	60fb      	str	r3, [r7, #12]

      break;
 800b810:	e00f      	b.n	800b832 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b818:	60fb      	str	r3, [r7, #12]

      break;
 800b81a:	e00a      	b.n	800b832 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b822:	60fb      	str	r3, [r7, #12]

      break;
 800b824:	e005      	b.n	800b832 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82c:	60fb      	str	r3, [r7, #12]

      break;
 800b82e:	e000      	b.n	800b832 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b830:	bf00      	nop
  }

  return tmpreg;
 800b832:	68fb      	ldr	r3, [r7, #12]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a40      	ldr	r2, [pc, #256]	; (800b990 <TIM_Base_SetConfig+0x114>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d013      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b89a:	d00f      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a3d      	ldr	r2, [pc, #244]	; (800b994 <TIM_Base_SetConfig+0x118>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d00b      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a3c      	ldr	r2, [pc, #240]	; (800b998 <TIM_Base_SetConfig+0x11c>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d007      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a3b      	ldr	r2, [pc, #236]	; (800b99c <TIM_Base_SetConfig+0x120>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d003      	beq.n	800b8bc <TIM_Base_SetConfig+0x40>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a3a      	ldr	r2, [pc, #232]	; (800b9a0 <TIM_Base_SetConfig+0x124>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d108      	bne.n	800b8ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a2f      	ldr	r2, [pc, #188]	; (800b990 <TIM_Base_SetConfig+0x114>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d01f      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8dc:	d01b      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a2c      	ldr	r2, [pc, #176]	; (800b994 <TIM_Base_SetConfig+0x118>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d017      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a2b      	ldr	r2, [pc, #172]	; (800b998 <TIM_Base_SetConfig+0x11c>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d013      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a2a      	ldr	r2, [pc, #168]	; (800b99c <TIM_Base_SetConfig+0x120>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d00f      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a29      	ldr	r2, [pc, #164]	; (800b9a0 <TIM_Base_SetConfig+0x124>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d00b      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a28      	ldr	r2, [pc, #160]	; (800b9a4 <TIM_Base_SetConfig+0x128>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d007      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a27      	ldr	r2, [pc, #156]	; (800b9a8 <TIM_Base_SetConfig+0x12c>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d003      	beq.n	800b916 <TIM_Base_SetConfig+0x9a>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a26      	ldr	r2, [pc, #152]	; (800b9ac <TIM_Base_SetConfig+0x130>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d108      	bne.n	800b928 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b91c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	4313      	orrs	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	4313      	orrs	r3, r2
 800b934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	689a      	ldr	r2, [r3, #8]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a10      	ldr	r2, [pc, #64]	; (800b990 <TIM_Base_SetConfig+0x114>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d00f      	beq.n	800b974 <TIM_Base_SetConfig+0xf8>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a12      	ldr	r2, [pc, #72]	; (800b9a0 <TIM_Base_SetConfig+0x124>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d00b      	beq.n	800b974 <TIM_Base_SetConfig+0xf8>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a11      	ldr	r2, [pc, #68]	; (800b9a4 <TIM_Base_SetConfig+0x128>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d007      	beq.n	800b974 <TIM_Base_SetConfig+0xf8>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a10      	ldr	r2, [pc, #64]	; (800b9a8 <TIM_Base_SetConfig+0x12c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d003      	beq.n	800b974 <TIM_Base_SetConfig+0xf8>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a0f      	ldr	r2, [pc, #60]	; (800b9ac <TIM_Base_SetConfig+0x130>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d103      	bne.n	800b97c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	691a      	ldr	r2, [r3, #16]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	615a      	str	r2, [r3, #20]
}
 800b982:	bf00      	nop
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	40012c00 	.word	0x40012c00
 800b994:	40000400 	.word	0x40000400
 800b998:	40000800 	.word	0x40000800
 800b99c:	40000c00 	.word	0x40000c00
 800b9a0:	40013400 	.word	0x40013400
 800b9a4:	40014000 	.word	0x40014000
 800b9a8:	40014400 	.word	0x40014400
 800b9ac:	40014800 	.word	0x40014800

0800b9b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	f023 0201 	bic.w	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f023 0303 	bic.w	r3, r3, #3
 800b9ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f023 0302 	bic.w	r3, r3, #2
 800b9fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a2c      	ldr	r2, [pc, #176]	; (800babc <TIM_OC1_SetConfig+0x10c>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d00f      	beq.n	800ba30 <TIM_OC1_SetConfig+0x80>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a2b      	ldr	r2, [pc, #172]	; (800bac0 <TIM_OC1_SetConfig+0x110>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00b      	beq.n	800ba30 <TIM_OC1_SetConfig+0x80>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a2a      	ldr	r2, [pc, #168]	; (800bac4 <TIM_OC1_SetConfig+0x114>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d007      	beq.n	800ba30 <TIM_OC1_SetConfig+0x80>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a29      	ldr	r2, [pc, #164]	; (800bac8 <TIM_OC1_SetConfig+0x118>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d003      	beq.n	800ba30 <TIM_OC1_SetConfig+0x80>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a28      	ldr	r2, [pc, #160]	; (800bacc <TIM_OC1_SetConfig+0x11c>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d10c      	bne.n	800ba4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	f023 0308 	bic.w	r3, r3, #8
 800ba36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f023 0304 	bic.w	r3, r3, #4
 800ba48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a1b      	ldr	r2, [pc, #108]	; (800babc <TIM_OC1_SetConfig+0x10c>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d00f      	beq.n	800ba72 <TIM_OC1_SetConfig+0xc2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a1a      	ldr	r2, [pc, #104]	; (800bac0 <TIM_OC1_SetConfig+0x110>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d00b      	beq.n	800ba72 <TIM_OC1_SetConfig+0xc2>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a19      	ldr	r2, [pc, #100]	; (800bac4 <TIM_OC1_SetConfig+0x114>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d007      	beq.n	800ba72 <TIM_OC1_SetConfig+0xc2>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a18      	ldr	r2, [pc, #96]	; (800bac8 <TIM_OC1_SetConfig+0x118>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d003      	beq.n	800ba72 <TIM_OC1_SetConfig+0xc2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a17      	ldr	r2, [pc, #92]	; (800bacc <TIM_OC1_SetConfig+0x11c>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d111      	bne.n	800ba96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	621a      	str	r2, [r3, #32]
}
 800bab0:	bf00      	nop
 800bab2:	371c      	adds	r7, #28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	40012c00 	.word	0x40012c00
 800bac0:	40013400 	.word	0x40013400
 800bac4:	40014000 	.word	0x40014000
 800bac8:	40014400 	.word	0x40014400
 800bacc:	40014800 	.word	0x40014800

0800bad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	f023 0210 	bic.w	r2, r3, #16
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bafe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	021b      	lsls	r3, r3, #8
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f023 0320 	bic.w	r3, r3, #32
 800bb1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	011b      	lsls	r3, r3, #4
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a28      	ldr	r2, [pc, #160]	; (800bbd0 <TIM_OC2_SetConfig+0x100>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d003      	beq.n	800bb3c <TIM_OC2_SetConfig+0x6c>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a27      	ldr	r2, [pc, #156]	; (800bbd4 <TIM_OC2_SetConfig+0x104>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d10d      	bne.n	800bb58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	011b      	lsls	r3, r3, #4
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a1d      	ldr	r2, [pc, #116]	; (800bbd0 <TIM_OC2_SetConfig+0x100>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d00f      	beq.n	800bb80 <TIM_OC2_SetConfig+0xb0>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a1c      	ldr	r2, [pc, #112]	; (800bbd4 <TIM_OC2_SetConfig+0x104>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d00b      	beq.n	800bb80 <TIM_OC2_SetConfig+0xb0>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a1b      	ldr	r2, [pc, #108]	; (800bbd8 <TIM_OC2_SetConfig+0x108>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d007      	beq.n	800bb80 <TIM_OC2_SetConfig+0xb0>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a1a      	ldr	r2, [pc, #104]	; (800bbdc <TIM_OC2_SetConfig+0x10c>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d003      	beq.n	800bb80 <TIM_OC2_SetConfig+0xb0>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a19      	ldr	r2, [pc, #100]	; (800bbe0 <TIM_OC2_SetConfig+0x110>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d113      	bne.n	800bba8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	621a      	str	r2, [r3, #32]
}
 800bbc2:	bf00      	nop
 800bbc4:	371c      	adds	r7, #28
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	40012c00 	.word	0x40012c00
 800bbd4:	40013400 	.word	0x40013400
 800bbd8:	40014000 	.word	0x40014000
 800bbdc:	40014400 	.word	0x40014400
 800bbe0:	40014800 	.word	0x40014800

0800bbe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b087      	sub	sp, #28
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f023 0303 	bic.w	r3, r3, #3
 800bc1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	021b      	lsls	r3, r3, #8
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a27      	ldr	r2, [pc, #156]	; (800bce0 <TIM_OC3_SetConfig+0xfc>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d003      	beq.n	800bc4e <TIM_OC3_SetConfig+0x6a>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a26      	ldr	r2, [pc, #152]	; (800bce4 <TIM_OC3_SetConfig+0x100>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d10d      	bne.n	800bc6a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a1c      	ldr	r2, [pc, #112]	; (800bce0 <TIM_OC3_SetConfig+0xfc>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00f      	beq.n	800bc92 <TIM_OC3_SetConfig+0xae>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a1b      	ldr	r2, [pc, #108]	; (800bce4 <TIM_OC3_SetConfig+0x100>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00b      	beq.n	800bc92 <TIM_OC3_SetConfig+0xae>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a1a      	ldr	r2, [pc, #104]	; (800bce8 <TIM_OC3_SetConfig+0x104>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d007      	beq.n	800bc92 <TIM_OC3_SetConfig+0xae>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a19      	ldr	r2, [pc, #100]	; (800bcec <TIM_OC3_SetConfig+0x108>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d003      	beq.n	800bc92 <TIM_OC3_SetConfig+0xae>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a18      	ldr	r2, [pc, #96]	; (800bcf0 <TIM_OC3_SetConfig+0x10c>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d113      	bne.n	800bcba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	011b      	lsls	r3, r3, #4
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	011b      	lsls	r3, r3, #4
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	621a      	str	r2, [r3, #32]
}
 800bcd4:	bf00      	nop
 800bcd6:	371c      	adds	r7, #28
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	40012c00 	.word	0x40012c00
 800bce4:	40013400 	.word	0x40013400
 800bce8:	40014000 	.word	0x40014000
 800bcec:	40014400 	.word	0x40014400
 800bcf0:	40014800 	.word	0x40014800

0800bcf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	021b      	lsls	r3, r3, #8
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	031b      	lsls	r3, r3, #12
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a18      	ldr	r2, [pc, #96]	; (800bdb4 <TIM_OC4_SetConfig+0xc0>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d00f      	beq.n	800bd78 <TIM_OC4_SetConfig+0x84>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a17      	ldr	r2, [pc, #92]	; (800bdb8 <TIM_OC4_SetConfig+0xc4>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d00b      	beq.n	800bd78 <TIM_OC4_SetConfig+0x84>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a16      	ldr	r2, [pc, #88]	; (800bdbc <TIM_OC4_SetConfig+0xc8>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d007      	beq.n	800bd78 <TIM_OC4_SetConfig+0x84>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a15      	ldr	r2, [pc, #84]	; (800bdc0 <TIM_OC4_SetConfig+0xcc>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d003      	beq.n	800bd78 <TIM_OC4_SetConfig+0x84>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a14      	ldr	r2, [pc, #80]	; (800bdc4 <TIM_OC4_SetConfig+0xd0>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d109      	bne.n	800bd8c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	019b      	lsls	r3, r3, #6
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	621a      	str	r2, [r3, #32]
}
 800bda6:	bf00      	nop
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	40012c00 	.word	0x40012c00
 800bdb8:	40013400 	.word	0x40013400
 800bdbc:	40014000 	.word	0x40014000
 800bdc0:	40014400 	.word	0x40014400
 800bdc4:	40014800 	.word	0x40014800

0800bdc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4313      	orrs	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	041b      	lsls	r3, r3, #16
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4313      	orrs	r3, r2
 800be18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a17      	ldr	r2, [pc, #92]	; (800be7c <TIM_OC5_SetConfig+0xb4>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d00f      	beq.n	800be42 <TIM_OC5_SetConfig+0x7a>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a16      	ldr	r2, [pc, #88]	; (800be80 <TIM_OC5_SetConfig+0xb8>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d00b      	beq.n	800be42 <TIM_OC5_SetConfig+0x7a>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a15      	ldr	r2, [pc, #84]	; (800be84 <TIM_OC5_SetConfig+0xbc>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d007      	beq.n	800be42 <TIM_OC5_SetConfig+0x7a>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a14      	ldr	r2, [pc, #80]	; (800be88 <TIM_OC5_SetConfig+0xc0>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d003      	beq.n	800be42 <TIM_OC5_SetConfig+0x7a>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a13      	ldr	r2, [pc, #76]	; (800be8c <TIM_OC5_SetConfig+0xc4>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d109      	bne.n	800be56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	021b      	lsls	r3, r3, #8
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	4313      	orrs	r3, r2
 800be54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	621a      	str	r2, [r3, #32]
}
 800be70:	bf00      	nop
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	40012c00 	.word	0x40012c00
 800be80:	40013400 	.word	0x40013400
 800be84:	40014000 	.word	0x40014000
 800be88:	40014400 	.word	0x40014400
 800be8c:	40014800 	.word	0x40014800

0800be90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	021b      	lsls	r3, r3, #8
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	4313      	orrs	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	051b      	lsls	r3, r3, #20
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a18      	ldr	r2, [pc, #96]	; (800bf48 <TIM_OC6_SetConfig+0xb8>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d00f      	beq.n	800bf0c <TIM_OC6_SetConfig+0x7c>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a17      	ldr	r2, [pc, #92]	; (800bf4c <TIM_OC6_SetConfig+0xbc>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00b      	beq.n	800bf0c <TIM_OC6_SetConfig+0x7c>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a16      	ldr	r2, [pc, #88]	; (800bf50 <TIM_OC6_SetConfig+0xc0>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d007      	beq.n	800bf0c <TIM_OC6_SetConfig+0x7c>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a15      	ldr	r2, [pc, #84]	; (800bf54 <TIM_OC6_SetConfig+0xc4>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d003      	beq.n	800bf0c <TIM_OC6_SetConfig+0x7c>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a14      	ldr	r2, [pc, #80]	; (800bf58 <TIM_OC6_SetConfig+0xc8>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d109      	bne.n	800bf20 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	029b      	lsls	r3, r3, #10
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	621a      	str	r2, [r3, #32]
}
 800bf3a:	bf00      	nop
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	40012c00 	.word	0x40012c00
 800bf4c:	40013400 	.word	0x40013400
 800bf50:	40014000 	.word	0x40014000
 800bf54:	40014400 	.word	0x40014400
 800bf58:	40014800 	.word	0x40014800

0800bf5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 031f 	and.w	r3, r3, #31
 800bf6e:	2201      	movs	r2, #1
 800bf70:	fa02 f303 	lsl.w	r3, r2, r3
 800bf74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	43db      	mvns	r3, r3
 800bf7e:	401a      	ands	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1a      	ldr	r2, [r3, #32]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f003 031f 	and.w	r3, r3, #31
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	fa01 f303 	lsl.w	r3, r1, r3
 800bf94:	431a      	orrs	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	621a      	str	r2, [r3, #32]
}
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfae:	bf00      	nop
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfc2:	bf00      	nop
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfd6:	bf00      	nop
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e040      	b.n	800c076 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d106      	bne.n	800c00a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7f6 fd33 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2224      	movs	r2, #36	; 0x24
 800c00e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f022 0201 	bic.w	r2, r2, #1
 800c01e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f925 	bl	800c270 <UART_SetConfig>
 800c026:	4603      	mov	r3, r0
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d101      	bne.n	800c030 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	e022      	b.n	800c076 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fba3 	bl	800c784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	685a      	ldr	r2, [r3, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c04c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689a      	ldr	r2, [r3, #8]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c05c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f042 0201 	orr.w	r2, r2, #1
 800c06c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fc2a 	bl	800c8c8 <UART_CheckIdleState>
 800c074:	4603      	mov	r3, r0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b08a      	sub	sp, #40	; 0x28
 800c082:	af02      	add	r7, sp, #8
 800c084:	60f8      	str	r0, [r7, #12]
 800c086:	60b9      	str	r1, [r7, #8]
 800c088:	603b      	str	r3, [r7, #0]
 800c08a:	4613      	mov	r3, r2
 800c08c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c092:	2b20      	cmp	r3, #32
 800c094:	f040 8082 	bne.w	800c19c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d002      	beq.n	800c0a4 <HAL_UART_Transmit+0x26>
 800c09e:	88fb      	ldrh	r3, [r7, #6]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d101      	bne.n	800c0a8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e07a      	b.n	800c19e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d101      	bne.n	800c0b6 <HAL_UART_Transmit+0x38>
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	e073      	b.n	800c19e <HAL_UART_Transmit+0x120>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2221      	movs	r2, #33	; 0x21
 800c0ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0cc:	f7f9 fea2 	bl	8005e14 <HAL_GetTick>
 800c0d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	88fa      	ldrh	r2, [r7, #6]
 800c0d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	88fa      	ldrh	r2, [r7, #6]
 800c0de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ea:	d108      	bne.n	800c0fe <HAL_UART_Transmit+0x80>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d104      	bne.n	800c0fe <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	61bb      	str	r3, [r7, #24]
 800c0fc:	e003      	b.n	800c106 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c102:	2300      	movs	r3, #0
 800c104:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c10e:	e02d      	b.n	800c16c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2200      	movs	r2, #0
 800c118:	2180      	movs	r1, #128	; 0x80
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f000 fc1d 	bl	800c95a <UART_WaitOnFlagUntilTimeout>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c126:	2303      	movs	r3, #3
 800c128:	e039      	b.n	800c19e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10b      	bne.n	800c148 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	881a      	ldrh	r2, [r3, #0]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c13c:	b292      	uxth	r2, r2
 800c13e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	3302      	adds	r3, #2
 800c144:	61bb      	str	r3, [r7, #24]
 800c146:	e008      	b.n	800c15a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	781a      	ldrb	r2, [r3, #0]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	b292      	uxth	r2, r2
 800c152:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	3301      	adds	r3, #1
 800c158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c160:	b29b      	uxth	r3, r3
 800c162:	3b01      	subs	r3, #1
 800c164:	b29a      	uxth	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c172:	b29b      	uxth	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1cb      	bne.n	800c110 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	2200      	movs	r2, #0
 800c180:	2140      	movs	r1, #64	; 0x40
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f000 fbe9 	bl	800c95a <UART_WaitOnFlagUntilTimeout>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e005      	b.n	800c19e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2220      	movs	r2, #32
 800c196:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	e000      	b.n	800c19e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800c19c:	2302      	movs	r3, #2
  }
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3720      	adds	r7, #32
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ba:	2b20      	cmp	r3, #32
 800c1bc:	d131      	bne.n	800c222 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <HAL_UART_Receive_DMA+0x22>
 800c1c4:	88fb      	ldrh	r3, [r7, #6]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e02a      	b.n	800c224 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d101      	bne.n	800c1dc <HAL_UART_Receive_DMA+0x34>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	e023      	b.n	800c224 <HAL_UART_Receive_DMA+0x7c>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a0f      	ldr	r2, [pc, #60]	; (800c22c <HAL_UART_Receive_DMA+0x84>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d00e      	beq.n	800c212 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d007      	beq.n	800c212 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c210:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800c212:	88fb      	ldrh	r3, [r7, #6]
 800c214:	461a      	mov	r2, r3
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 fc1b 	bl	800ca54 <UART_Start_Receive_DMA>
 800c21e:	4603      	mov	r3, r0
 800c220:	e000      	b.n	800c224 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800c222:	2302      	movs	r3, #2
  }
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	40008000 	.word	0x40008000

0800c230 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c24c:	bf00      	nop
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c270:	b5b0      	push	{r4, r5, r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c278:	2300      	movs	r3, #0
 800c27a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	431a      	orrs	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	431a      	orrs	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	69db      	ldr	r3, [r3, #28]
 800c290:	4313      	orrs	r3, r2
 800c292:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	4bad      	ldr	r3, [pc, #692]	; (800c550 <UART_SetConfig+0x2e0>)
 800c29c:	4013      	ands	r3, r2
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	6812      	ldr	r2, [r2, #0]
 800c2a2:	69f9      	ldr	r1, [r7, #28]
 800c2a4:	430b      	orrs	r3, r1
 800c2a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68da      	ldr	r2, [r3, #12]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4aa2      	ldr	r2, [pc, #648]	; (800c554 <UART_SetConfig+0x2e4>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d004      	beq.n	800c2d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	69fa      	ldr	r2, [r7, #28]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	69fa      	ldr	r2, [r7, #28]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a99      	ldr	r2, [pc, #612]	; (800c558 <UART_SetConfig+0x2e8>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d121      	bne.n	800c33a <UART_SetConfig+0xca>
 800c2f6:	4b99      	ldr	r3, [pc, #612]	; (800c55c <UART_SetConfig+0x2ec>)
 800c2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fc:	f003 0303 	and.w	r3, r3, #3
 800c300:	2b03      	cmp	r3, #3
 800c302:	d817      	bhi.n	800c334 <UART_SetConfig+0xc4>
 800c304:	a201      	add	r2, pc, #4	; (adr r2, 800c30c <UART_SetConfig+0x9c>)
 800c306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30a:	bf00      	nop
 800c30c:	0800c31d 	.word	0x0800c31d
 800c310:	0800c329 	.word	0x0800c329
 800c314:	0800c323 	.word	0x0800c323
 800c318:	0800c32f 	.word	0x0800c32f
 800c31c:	2301      	movs	r3, #1
 800c31e:	76fb      	strb	r3, [r7, #27]
 800c320:	e0e7      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c322:	2302      	movs	r3, #2
 800c324:	76fb      	strb	r3, [r7, #27]
 800c326:	e0e4      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c328:	2304      	movs	r3, #4
 800c32a:	76fb      	strb	r3, [r7, #27]
 800c32c:	e0e1      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c32e:	2308      	movs	r3, #8
 800c330:	76fb      	strb	r3, [r7, #27]
 800c332:	e0de      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c334:	2310      	movs	r3, #16
 800c336:	76fb      	strb	r3, [r7, #27]
 800c338:	e0db      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a88      	ldr	r2, [pc, #544]	; (800c560 <UART_SetConfig+0x2f0>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d132      	bne.n	800c3aa <UART_SetConfig+0x13a>
 800c344:	4b85      	ldr	r3, [pc, #532]	; (800c55c <UART_SetConfig+0x2ec>)
 800c346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c34a:	f003 030c 	and.w	r3, r3, #12
 800c34e:	2b0c      	cmp	r3, #12
 800c350:	d828      	bhi.n	800c3a4 <UART_SetConfig+0x134>
 800c352:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <UART_SetConfig+0xe8>)
 800c354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c358:	0800c38d 	.word	0x0800c38d
 800c35c:	0800c3a5 	.word	0x0800c3a5
 800c360:	0800c3a5 	.word	0x0800c3a5
 800c364:	0800c3a5 	.word	0x0800c3a5
 800c368:	0800c399 	.word	0x0800c399
 800c36c:	0800c3a5 	.word	0x0800c3a5
 800c370:	0800c3a5 	.word	0x0800c3a5
 800c374:	0800c3a5 	.word	0x0800c3a5
 800c378:	0800c393 	.word	0x0800c393
 800c37c:	0800c3a5 	.word	0x0800c3a5
 800c380:	0800c3a5 	.word	0x0800c3a5
 800c384:	0800c3a5 	.word	0x0800c3a5
 800c388:	0800c39f 	.word	0x0800c39f
 800c38c:	2300      	movs	r3, #0
 800c38e:	76fb      	strb	r3, [r7, #27]
 800c390:	e0af      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c392:	2302      	movs	r3, #2
 800c394:	76fb      	strb	r3, [r7, #27]
 800c396:	e0ac      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c398:	2304      	movs	r3, #4
 800c39a:	76fb      	strb	r3, [r7, #27]
 800c39c:	e0a9      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c39e:	2308      	movs	r3, #8
 800c3a0:	76fb      	strb	r3, [r7, #27]
 800c3a2:	e0a6      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	76fb      	strb	r3, [r7, #27]
 800c3a8:	e0a3      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a6d      	ldr	r2, [pc, #436]	; (800c564 <UART_SetConfig+0x2f4>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d120      	bne.n	800c3f6 <UART_SetConfig+0x186>
 800c3b4:	4b69      	ldr	r3, [pc, #420]	; (800c55c <UART_SetConfig+0x2ec>)
 800c3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c3be:	2b30      	cmp	r3, #48	; 0x30
 800c3c0:	d013      	beq.n	800c3ea <UART_SetConfig+0x17a>
 800c3c2:	2b30      	cmp	r3, #48	; 0x30
 800c3c4:	d814      	bhi.n	800c3f0 <UART_SetConfig+0x180>
 800c3c6:	2b20      	cmp	r3, #32
 800c3c8:	d009      	beq.n	800c3de <UART_SetConfig+0x16e>
 800c3ca:	2b20      	cmp	r3, #32
 800c3cc:	d810      	bhi.n	800c3f0 <UART_SetConfig+0x180>
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d002      	beq.n	800c3d8 <UART_SetConfig+0x168>
 800c3d2:	2b10      	cmp	r3, #16
 800c3d4:	d006      	beq.n	800c3e4 <UART_SetConfig+0x174>
 800c3d6:	e00b      	b.n	800c3f0 <UART_SetConfig+0x180>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	76fb      	strb	r3, [r7, #27]
 800c3dc:	e089      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	76fb      	strb	r3, [r7, #27]
 800c3e2:	e086      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c3e4:	2304      	movs	r3, #4
 800c3e6:	76fb      	strb	r3, [r7, #27]
 800c3e8:	e083      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c3ea:	2308      	movs	r3, #8
 800c3ec:	76fb      	strb	r3, [r7, #27]
 800c3ee:	e080      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c3f0:	2310      	movs	r3, #16
 800c3f2:	76fb      	strb	r3, [r7, #27]
 800c3f4:	e07d      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a5b      	ldr	r2, [pc, #364]	; (800c568 <UART_SetConfig+0x2f8>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d120      	bne.n	800c442 <UART_SetConfig+0x1d2>
 800c400:	4b56      	ldr	r3, [pc, #344]	; (800c55c <UART_SetConfig+0x2ec>)
 800c402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c40a:	2bc0      	cmp	r3, #192	; 0xc0
 800c40c:	d013      	beq.n	800c436 <UART_SetConfig+0x1c6>
 800c40e:	2bc0      	cmp	r3, #192	; 0xc0
 800c410:	d814      	bhi.n	800c43c <UART_SetConfig+0x1cc>
 800c412:	2b80      	cmp	r3, #128	; 0x80
 800c414:	d009      	beq.n	800c42a <UART_SetConfig+0x1ba>
 800c416:	2b80      	cmp	r3, #128	; 0x80
 800c418:	d810      	bhi.n	800c43c <UART_SetConfig+0x1cc>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <UART_SetConfig+0x1b4>
 800c41e:	2b40      	cmp	r3, #64	; 0x40
 800c420:	d006      	beq.n	800c430 <UART_SetConfig+0x1c0>
 800c422:	e00b      	b.n	800c43c <UART_SetConfig+0x1cc>
 800c424:	2300      	movs	r3, #0
 800c426:	76fb      	strb	r3, [r7, #27]
 800c428:	e063      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c42a:	2302      	movs	r3, #2
 800c42c:	76fb      	strb	r3, [r7, #27]
 800c42e:	e060      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c430:	2304      	movs	r3, #4
 800c432:	76fb      	strb	r3, [r7, #27]
 800c434:	e05d      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c436:	2308      	movs	r3, #8
 800c438:	76fb      	strb	r3, [r7, #27]
 800c43a:	e05a      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c43c:	2310      	movs	r3, #16
 800c43e:	76fb      	strb	r3, [r7, #27]
 800c440:	e057      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a49      	ldr	r2, [pc, #292]	; (800c56c <UART_SetConfig+0x2fc>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d125      	bne.n	800c498 <UART_SetConfig+0x228>
 800c44c:	4b43      	ldr	r3, [pc, #268]	; (800c55c <UART_SetConfig+0x2ec>)
 800c44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c45a:	d017      	beq.n	800c48c <UART_SetConfig+0x21c>
 800c45c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c460:	d817      	bhi.n	800c492 <UART_SetConfig+0x222>
 800c462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c466:	d00b      	beq.n	800c480 <UART_SetConfig+0x210>
 800c468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c46c:	d811      	bhi.n	800c492 <UART_SetConfig+0x222>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <UART_SetConfig+0x20a>
 800c472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c476:	d006      	beq.n	800c486 <UART_SetConfig+0x216>
 800c478:	e00b      	b.n	800c492 <UART_SetConfig+0x222>
 800c47a:	2300      	movs	r3, #0
 800c47c:	76fb      	strb	r3, [r7, #27]
 800c47e:	e038      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c480:	2302      	movs	r3, #2
 800c482:	76fb      	strb	r3, [r7, #27]
 800c484:	e035      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c486:	2304      	movs	r3, #4
 800c488:	76fb      	strb	r3, [r7, #27]
 800c48a:	e032      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c48c:	2308      	movs	r3, #8
 800c48e:	76fb      	strb	r3, [r7, #27]
 800c490:	e02f      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c492:	2310      	movs	r3, #16
 800c494:	76fb      	strb	r3, [r7, #27]
 800c496:	e02c      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a2d      	ldr	r2, [pc, #180]	; (800c554 <UART_SetConfig+0x2e4>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d125      	bne.n	800c4ee <UART_SetConfig+0x27e>
 800c4a2:	4b2e      	ldr	r3, [pc, #184]	; (800c55c <UART_SetConfig+0x2ec>)
 800c4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c4ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4b0:	d017      	beq.n	800c4e2 <UART_SetConfig+0x272>
 800c4b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4b6:	d817      	bhi.n	800c4e8 <UART_SetConfig+0x278>
 800c4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4bc:	d00b      	beq.n	800c4d6 <UART_SetConfig+0x266>
 800c4be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4c2:	d811      	bhi.n	800c4e8 <UART_SetConfig+0x278>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d003      	beq.n	800c4d0 <UART_SetConfig+0x260>
 800c4c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4cc:	d006      	beq.n	800c4dc <UART_SetConfig+0x26c>
 800c4ce:	e00b      	b.n	800c4e8 <UART_SetConfig+0x278>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	76fb      	strb	r3, [r7, #27]
 800c4d4:	e00d      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	76fb      	strb	r3, [r7, #27]
 800c4da:	e00a      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c4dc:	2304      	movs	r3, #4
 800c4de:	76fb      	strb	r3, [r7, #27]
 800c4e0:	e007      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c4e2:	2308      	movs	r3, #8
 800c4e4:	76fb      	strb	r3, [r7, #27]
 800c4e6:	e004      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c4e8:	2310      	movs	r3, #16
 800c4ea:	76fb      	strb	r3, [r7, #27]
 800c4ec:	e001      	b.n	800c4f2 <UART_SetConfig+0x282>
 800c4ee:	2310      	movs	r3, #16
 800c4f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a17      	ldr	r2, [pc, #92]	; (800c554 <UART_SetConfig+0x2e4>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	f040 8087 	bne.w	800c60c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4fe:	7efb      	ldrb	r3, [r7, #27]
 800c500:	2b08      	cmp	r3, #8
 800c502:	d837      	bhi.n	800c574 <UART_SetConfig+0x304>
 800c504:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <UART_SetConfig+0x29c>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c531 	.word	0x0800c531
 800c510:	0800c575 	.word	0x0800c575
 800c514:	0800c539 	.word	0x0800c539
 800c518:	0800c575 	.word	0x0800c575
 800c51c:	0800c53f 	.word	0x0800c53f
 800c520:	0800c575 	.word	0x0800c575
 800c524:	0800c575 	.word	0x0800c575
 800c528:	0800c575 	.word	0x0800c575
 800c52c:	0800c547 	.word	0x0800c547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c530:	f7fd f9ee 	bl	8009910 <HAL_RCC_GetPCLK1Freq>
 800c534:	6178      	str	r0, [r7, #20]
        break;
 800c536:	e022      	b.n	800c57e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <UART_SetConfig+0x300>)
 800c53a:	617b      	str	r3, [r7, #20]
        break;
 800c53c:	e01f      	b.n	800c57e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c53e:	f7fd f94f 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 800c542:	6178      	str	r0, [r7, #20]
        break;
 800c544:	e01b      	b.n	800c57e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c54a:	617b      	str	r3, [r7, #20]
        break;
 800c54c:	e017      	b.n	800c57e <UART_SetConfig+0x30e>
 800c54e:	bf00      	nop
 800c550:	efff69f3 	.word	0xefff69f3
 800c554:	40008000 	.word	0x40008000
 800c558:	40013800 	.word	0x40013800
 800c55c:	40021000 	.word	0x40021000
 800c560:	40004400 	.word	0x40004400
 800c564:	40004800 	.word	0x40004800
 800c568:	40004c00 	.word	0x40004c00
 800c56c:	40005000 	.word	0x40005000
 800c570:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c574:	2300      	movs	r3, #0
 800c576:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	76bb      	strb	r3, [r7, #26]
        break;
 800c57c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 80f1 	beq.w	800c768 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685a      	ldr	r2, [r3, #4]
 800c58a:	4613      	mov	r3, r2
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	4413      	add	r3, r2
 800c590:	697a      	ldr	r2, [r7, #20]
 800c592:	429a      	cmp	r2, r3
 800c594:	d305      	bcc.n	800c5a2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d902      	bls.n	800c5a8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	76bb      	strb	r3, [r7, #26]
 800c5a6:	e0df      	b.n	800c768 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f04f 0100 	mov.w	r1, #0
 800c5b0:	f04f 0200 	mov.w	r2, #0
 800c5b4:	f04f 0300 	mov.w	r3, #0
 800c5b8:	020b      	lsls	r3, r1, #8
 800c5ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5be:	0202      	lsls	r2, r0, #8
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	6849      	ldr	r1, [r1, #4]
 800c5c4:	0849      	lsrs	r1, r1, #1
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	f04f 0100 	mov.w	r1, #0
 800c5cc:	1814      	adds	r4, r2, r0
 800c5ce:	eb43 0501 	adc.w	r5, r3, r1
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f04f 0300 	mov.w	r3, #0
 800c5dc:	4620      	mov	r0, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	f7f3 fe46 	bl	8000270 <__aeabi_uldivmod>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5f2:	d308      	bcc.n	800c606 <UART_SetConfig+0x396>
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5fa:	d204      	bcs.n	800c606 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	60da      	str	r2, [r3, #12]
 800c604:	e0b0      	b.n	800c768 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	76bb      	strb	r3, [r7, #26]
 800c60a:	e0ad      	b.n	800c768 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	69db      	ldr	r3, [r3, #28]
 800c610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c614:	d15c      	bne.n	800c6d0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800c616:	7efb      	ldrb	r3, [r7, #27]
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d828      	bhi.n	800c66e <UART_SetConfig+0x3fe>
 800c61c:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <UART_SetConfig+0x3b4>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c649 	.word	0x0800c649
 800c628:	0800c651 	.word	0x0800c651
 800c62c:	0800c659 	.word	0x0800c659
 800c630:	0800c66f 	.word	0x0800c66f
 800c634:	0800c65f 	.word	0x0800c65f
 800c638:	0800c66f 	.word	0x0800c66f
 800c63c:	0800c66f 	.word	0x0800c66f
 800c640:	0800c66f 	.word	0x0800c66f
 800c644:	0800c667 	.word	0x0800c667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c648:	f7fd f962 	bl	8009910 <HAL_RCC_GetPCLK1Freq>
 800c64c:	6178      	str	r0, [r7, #20]
        break;
 800c64e:	e013      	b.n	800c678 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c650:	f7fd f974 	bl	800993c <HAL_RCC_GetPCLK2Freq>
 800c654:	6178      	str	r0, [r7, #20]
        break;
 800c656:	e00f      	b.n	800c678 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c658:	4b49      	ldr	r3, [pc, #292]	; (800c780 <UART_SetConfig+0x510>)
 800c65a:	617b      	str	r3, [r7, #20]
        break;
 800c65c:	e00c      	b.n	800c678 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c65e:	f7fd f8bf 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 800c662:	6178      	str	r0, [r7, #20]
        break;
 800c664:	e008      	b.n	800c678 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c66a:	617b      	str	r3, [r7, #20]
        break;
 800c66c:	e004      	b.n	800c678 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	76bb      	strb	r3, [r7, #26]
        break;
 800c676:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d074      	beq.n	800c768 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	005a      	lsls	r2, r3, #1
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	085b      	lsrs	r3, r3, #1
 800c688:	441a      	add	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c692:	b29b      	uxth	r3, r3
 800c694:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	2b0f      	cmp	r3, #15
 800c69a:	d916      	bls.n	800c6ca <UART_SetConfig+0x45a>
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6a2:	d212      	bcs.n	800c6ca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	f023 030f 	bic.w	r3, r3, #15
 800c6ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	085b      	lsrs	r3, r3, #1
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	f003 0307 	and.w	r3, r3, #7
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	89fb      	ldrh	r3, [r7, #14]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	89fa      	ldrh	r2, [r7, #14]
 800c6c6:	60da      	str	r2, [r3, #12]
 800c6c8:	e04e      	b.n	800c768 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	76bb      	strb	r3, [r7, #26]
 800c6ce:	e04b      	b.n	800c768 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6d0:	7efb      	ldrb	r3, [r7, #27]
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d827      	bhi.n	800c726 <UART_SetConfig+0x4b6>
 800c6d6:	a201      	add	r2, pc, #4	; (adr r2, 800c6dc <UART_SetConfig+0x46c>)
 800c6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6dc:	0800c701 	.word	0x0800c701
 800c6e0:	0800c709 	.word	0x0800c709
 800c6e4:	0800c711 	.word	0x0800c711
 800c6e8:	0800c727 	.word	0x0800c727
 800c6ec:	0800c717 	.word	0x0800c717
 800c6f0:	0800c727 	.word	0x0800c727
 800c6f4:	0800c727 	.word	0x0800c727
 800c6f8:	0800c727 	.word	0x0800c727
 800c6fc:	0800c71f 	.word	0x0800c71f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c700:	f7fd f906 	bl	8009910 <HAL_RCC_GetPCLK1Freq>
 800c704:	6178      	str	r0, [r7, #20]
        break;
 800c706:	e013      	b.n	800c730 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c708:	f7fd f918 	bl	800993c <HAL_RCC_GetPCLK2Freq>
 800c70c:	6178      	str	r0, [r7, #20]
        break;
 800c70e:	e00f      	b.n	800c730 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c710:	4b1b      	ldr	r3, [pc, #108]	; (800c780 <UART_SetConfig+0x510>)
 800c712:	617b      	str	r3, [r7, #20]
        break;
 800c714:	e00c      	b.n	800c730 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c716:	f7fd f863 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 800c71a:	6178      	str	r0, [r7, #20]
        break;
 800c71c:	e008      	b.n	800c730 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c722:	617b      	str	r3, [r7, #20]
        break;
 800c724:	e004      	b.n	800c730 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800c726:	2300      	movs	r3, #0
 800c728:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	76bb      	strb	r3, [r7, #26]
        break;
 800c72e:	bf00      	nop
    }

    if (pclk != 0U)
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d018      	beq.n	800c768 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	085a      	lsrs	r2, r3, #1
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	441a      	add	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	fbb2 f3f3 	udiv	r3, r2, r3
 800c748:	b29b      	uxth	r3, r3
 800c74a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	2b0f      	cmp	r3, #15
 800c750:	d908      	bls.n	800c764 <UART_SetConfig+0x4f4>
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c758:	d204      	bcs.n	800c764 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	60da      	str	r2, [r3, #12]
 800c762:	e001      	b.n	800c768 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c774:	7ebb      	ldrb	r3, [r7, #26]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3720      	adds	r7, #32
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bdb0      	pop	{r4, r5, r7, pc}
 800c77e:	bf00      	nop
 800c780:	00f42400 	.word	0x00f42400

0800c784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00a      	beq.n	800c7ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b2:	f003 0302 	and.w	r3, r3, #2
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00a      	beq.n	800c7d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	430a      	orrs	r2, r1
 800c7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d4:	f003 0304 	and.w	r3, r3, #4
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00a      	beq.n	800c7f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	f003 0308 	and.w	r3, r3, #8
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	430a      	orrs	r2, r1
 800c812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c818:	f003 0310 	and.w	r3, r3, #16
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00a      	beq.n	800c836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83a:	f003 0320 	and.w	r3, r3, #32
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	430a      	orrs	r2, r1
 800c856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01a      	beq.n	800c89a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c882:	d10a      	bne.n	800c89a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	430a      	orrs	r2, r1
 800c898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00a      	beq.n	800c8bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	605a      	str	r2, [r3, #4]
  }
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af02      	add	r7, sp, #8
 800c8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8d8:	f7f9 fa9c 	bl	8005e14 <HAL_GetTick>
 800c8dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 0308 	and.w	r3, r3, #8
 800c8e8:	2b08      	cmp	r3, #8
 800c8ea:	d10e      	bne.n	800c90a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f82d 	bl	800c95a <UART_WaitOnFlagUntilTimeout>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c906:	2303      	movs	r3, #3
 800c908:	e023      	b.n	800c952 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0304 	and.w	r3, r3, #4
 800c914:	2b04      	cmp	r3, #4
 800c916:	d10e      	bne.n	800c936 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f817 	bl	800c95a <UART_WaitOnFlagUntilTimeout>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d001      	beq.n	800c936 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c932:	2303      	movs	r3, #3
 800c934:	e00d      	b.n	800c952 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2220      	movs	r2, #32
 800c93a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2220      	movs	r2, #32
 800c940:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	60b9      	str	r1, [r7, #8]
 800c964:	603b      	str	r3, [r7, #0]
 800c966:	4613      	mov	r3, r2
 800c968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c96a:	e05e      	b.n	800ca2a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c972:	d05a      	beq.n	800ca2a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c974:	f7f9 fa4e 	bl	8005e14 <HAL_GetTick>
 800c978:	4602      	mov	r2, r0
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	69ba      	ldr	r2, [r7, #24]
 800c980:	429a      	cmp	r2, r3
 800c982:	d302      	bcc.n	800c98a <UART_WaitOnFlagUntilTimeout+0x30>
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d11b      	bne.n	800c9c2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c998:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	689a      	ldr	r2, [r3, #8]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f022 0201 	bic.w	r2, r2, #1
 800c9a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e043      	b.n	800ca4a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d02c      	beq.n	800ca2a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9de:	d124      	bne.n	800ca2a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9e8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c9f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	689a      	ldr	r2, [r3, #8]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f022 0201 	bic.w	r2, r2, #1
 800ca08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2220      	movs	r2, #32
 800ca14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e00f      	b.n	800ca4a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69da      	ldr	r2, [r3, #28]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	4013      	ands	r3, r2
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	bf0c      	ite	eq
 800ca3a:	2301      	moveq	r3, #1
 800ca3c:	2300      	movne	r3, #0
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	461a      	mov	r2, r3
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d091      	beq.n	800c96c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
	...

0800ca54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	88fa      	ldrh	r2, [r7, #6]
 800ca6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2222      	movs	r2, #34	; 0x22
 800ca7c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d02b      	beq.n	800cade <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8a:	4a25      	ldr	r2, [pc, #148]	; (800cb20 <UART_Start_Receive_DMA+0xcc>)
 800ca8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	4a24      	ldr	r2, [pc, #144]	; (800cb24 <UART_Start_Receive_DMA+0xd0>)
 800ca94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	4a23      	ldr	r2, [pc, #140]	; (800cb28 <UART_Start_Receive_DMA+0xd4>)
 800ca9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa2:	2200      	movs	r2, #0
 800caa4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3324      	adds	r3, #36	; 0x24
 800cab0:	4619      	mov	r1, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	461a      	mov	r2, r3
 800cab8:	88fb      	ldrh	r3, [r7, #6]
 800caba:	f7f9 fbc9 	bl	8006250 <HAL_DMA_Start_IT>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00c      	beq.n	800cade <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2210      	movs	r2, #16
 800cac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2220      	movs	r2, #32
 800cad8:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	e01c      	b.n	800cb18 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800caf4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	689a      	ldr	r2, [r3, #8]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f042 0201 	orr.w	r2, r2, #1
 800cb04:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	689a      	ldr	r2, [r3, #8]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb14:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	0800cbb5 	.word	0x0800cbb5
 800cb24:	0800cc4d 	.word	0x0800cc4d
 800cb28:	0800cc85 	.word	0x0800cc85

0800cb2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cb42:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2220      	movs	r2, #32
 800cb48:	679a      	str	r2, [r3, #120]	; 0x78
}
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cb6c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	689a      	ldr	r2, [r3, #8]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f022 0201 	bic.w	r2, r2, #1
 800cb7c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d107      	bne.n	800cb96 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f022 0210 	bic.w	r2, r2, #16
 800cb94:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2220      	movs	r2, #32
 800cb9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 0320 	and.w	r3, r3, #32
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d12a      	bne.n	800cc26 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbe6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	689a      	ldr	r2, [r3, #8]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 0201 	bic.w	r2, r2, #1
 800cbf6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc06:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2220      	movs	r2, #32
 800cc0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d107      	bne.n	800cc26 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f022 0210 	bic.w	r2, r2, #16
 800cc24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d107      	bne.n	800cc3e <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc34:	4619      	mov	r1, r3
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f7ff fb0e 	bl	800c258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc3c:	e002      	b.n	800cc44 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f7f9 f864 	bl	8005d0c <HAL_UART_RxCpltCallback>
}
 800cc44:	bf00      	nop
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc58:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d109      	bne.n	800cc76 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc68:	085b      	lsrs	r3, r3, #1
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7ff faf2 	bl	800c258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc74:	e002      	b.n	800cc7c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7ff fada 	bl	800c230 <HAL_UART_RxHalfCpltCallback>
}
 800cc7c:	bf00      	nop
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca8:	2b80      	cmp	r3, #128	; 0x80
 800ccaa:	d109      	bne.n	800ccc0 <UART_DMAError+0x3c>
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	2b21      	cmp	r3, #33	; 0x21
 800ccb0:	d106      	bne.n	800ccc0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ccba:	6978      	ldr	r0, [r7, #20]
 800ccbc:	f7ff ff36 	bl	800cb2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccca:	2b40      	cmp	r3, #64	; 0x40
 800cccc:	d109      	bne.n	800cce2 <UART_DMAError+0x5e>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b22      	cmp	r3, #34	; 0x22
 800ccd2:	d106      	bne.n	800cce2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ccdc:	6978      	ldr	r0, [r7, #20]
 800ccde:	f7ff ff3a 	bl	800cb56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cce8:	f043 0210 	orr.w	r2, r3, #16
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccf2:	6978      	ldr	r0, [r7, #20]
 800ccf4:	f7ff faa6 	bl	800c244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccf8:	bf00      	nop
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b087      	sub	sp, #28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	d165      	bne.n	800cde0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	4a3e      	ldr	r2, [pc, #248]	; (800ce10 <USB_SetTurnaroundTime+0x110>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d906      	bls.n	800cd2a <USB_SetTurnaroundTime+0x2a>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	4a3d      	ldr	r2, [pc, #244]	; (800ce14 <USB_SetTurnaroundTime+0x114>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d202      	bcs.n	800cd2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cd24:	230f      	movs	r3, #15
 800cd26:	617b      	str	r3, [r7, #20]
 800cd28:	e05c      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	4a39      	ldr	r2, [pc, #228]	; (800ce14 <USB_SetTurnaroundTime+0x114>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d306      	bcc.n	800cd40 <USB_SetTurnaroundTime+0x40>
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	4a38      	ldr	r2, [pc, #224]	; (800ce18 <USB_SetTurnaroundTime+0x118>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d202      	bcs.n	800cd40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cd3a:	230e      	movs	r3, #14
 800cd3c:	617b      	str	r3, [r7, #20]
 800cd3e:	e051      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	4a35      	ldr	r2, [pc, #212]	; (800ce18 <USB_SetTurnaroundTime+0x118>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d306      	bcc.n	800cd56 <USB_SetTurnaroundTime+0x56>
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	4a34      	ldr	r2, [pc, #208]	; (800ce1c <USB_SetTurnaroundTime+0x11c>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d202      	bcs.n	800cd56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cd50:	230d      	movs	r3, #13
 800cd52:	617b      	str	r3, [r7, #20]
 800cd54:	e046      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	4a30      	ldr	r2, [pc, #192]	; (800ce1c <USB_SetTurnaroundTime+0x11c>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d306      	bcc.n	800cd6c <USB_SetTurnaroundTime+0x6c>
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	4a2f      	ldr	r2, [pc, #188]	; (800ce20 <USB_SetTurnaroundTime+0x120>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d802      	bhi.n	800cd6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cd66:	230c      	movs	r3, #12
 800cd68:	617b      	str	r3, [r7, #20]
 800cd6a:	e03b      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	4a2c      	ldr	r2, [pc, #176]	; (800ce20 <USB_SetTurnaroundTime+0x120>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d906      	bls.n	800cd82 <USB_SetTurnaroundTime+0x82>
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	4a2b      	ldr	r2, [pc, #172]	; (800ce24 <USB_SetTurnaroundTime+0x124>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d802      	bhi.n	800cd82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cd7c:	230b      	movs	r3, #11
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e030      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	4a27      	ldr	r2, [pc, #156]	; (800ce24 <USB_SetTurnaroundTime+0x124>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d906      	bls.n	800cd98 <USB_SetTurnaroundTime+0x98>
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	4a26      	ldr	r2, [pc, #152]	; (800ce28 <USB_SetTurnaroundTime+0x128>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d802      	bhi.n	800cd98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cd92:	230a      	movs	r3, #10
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	e025      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	4a23      	ldr	r2, [pc, #140]	; (800ce28 <USB_SetTurnaroundTime+0x128>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d906      	bls.n	800cdae <USB_SetTurnaroundTime+0xae>
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	4a22      	ldr	r2, [pc, #136]	; (800ce2c <USB_SetTurnaroundTime+0x12c>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d202      	bcs.n	800cdae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cda8:	2309      	movs	r3, #9
 800cdaa:	617b      	str	r3, [r7, #20]
 800cdac:	e01a      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	4a1e      	ldr	r2, [pc, #120]	; (800ce2c <USB_SetTurnaroundTime+0x12c>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d306      	bcc.n	800cdc4 <USB_SetTurnaroundTime+0xc4>
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	4a1d      	ldr	r2, [pc, #116]	; (800ce30 <USB_SetTurnaroundTime+0x130>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d802      	bhi.n	800cdc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cdbe:	2308      	movs	r3, #8
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	e00f      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	4a1a      	ldr	r2, [pc, #104]	; (800ce30 <USB_SetTurnaroundTime+0x130>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d906      	bls.n	800cdda <USB_SetTurnaroundTime+0xda>
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	4a19      	ldr	r2, [pc, #100]	; (800ce34 <USB_SetTurnaroundTime+0x134>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d202      	bcs.n	800cdda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cdd4:	2307      	movs	r3, #7
 800cdd6:	617b      	str	r3, [r7, #20]
 800cdd8:	e004      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cdda:	2306      	movs	r3, #6
 800cddc:	617b      	str	r3, [r7, #20]
 800cdde:	e001      	b.n	800cde4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cde0:	2309      	movs	r3, #9
 800cde2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	68da      	ldr	r2, [r3, #12]
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	029b      	lsls	r3, r3, #10
 800cdf8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cdfc:	431a      	orrs	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	371c      	adds	r7, #28
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	00d8acbf 	.word	0x00d8acbf
 800ce14:	00e4e1c0 	.word	0x00e4e1c0
 800ce18:	00f42400 	.word	0x00f42400
 800ce1c:	01067380 	.word	0x01067380
 800ce20:	011a499f 	.word	0x011a499f
 800ce24:	01312cff 	.word	0x01312cff
 800ce28:	014ca43f 	.word	0x014ca43f
 800ce2c:	016e3600 	.word	0x016e3600
 800ce30:	01a6ab1f 	.word	0x01a6ab1f
 800ce34:	01e84800 	.word	0x01e84800

0800ce38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	019b      	lsls	r3, r3, #6
 800ce4a:	f043 0220 	orr.w	r2, r3, #32
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3301      	adds	r3, #1
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	4a09      	ldr	r2, [pc, #36]	; (800ce80 <USB_FlushTxFifo+0x48>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d901      	bls.n	800ce64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e006      	b.n	800ce72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	f003 0320 	and.w	r3, r3, #32
 800ce6c:	2b20      	cmp	r3, #32
 800ce6e:	d0f0      	beq.n	800ce52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	00030d40 	.word	0x00030d40

0800ce84 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b087      	sub	sp, #28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	f003 0306 	and.w	r3, r3, #6
 800ce9c:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d002      	beq.n	800ceaa <USB_GetDevSpeed+0x26>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2b06      	cmp	r3, #6
 800cea8:	d102      	bne.n	800ceb0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ceaa:	2302      	movs	r3, #2
 800ceac:	75fb      	strb	r3, [r7, #23]
 800ceae:	e001      	b.n	800ceb4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800ceb0:	230f      	movs	r3, #15
 800ceb2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b085      	sub	sp, #20
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	785b      	ldrb	r3, [r3, #1]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d13a      	bne.n	800cf54 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee4:	69da      	ldr	r2, [r3, #28]
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	f003 030f 	and.w	r3, r3, #15
 800ceee:	2101      	movs	r1, #1
 800cef0:	fa01 f303 	lsl.w	r3, r1, r3
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	68f9      	ldr	r1, [r7, #12]
 800cef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cefc:	4313      	orrs	r3, r2
 800cefe:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	015a      	lsls	r2, r3, #5
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	4413      	add	r3, r2
 800cf08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d155      	bne.n	800cfc2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	015a      	lsls	r2, r3, #5
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	78db      	ldrb	r3, [r3, #3]
 800cf30:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf32:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	059b      	lsls	r3, r3, #22
 800cf38:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	0151      	lsls	r1, r2, #5
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	440a      	add	r2, r1
 800cf44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf50:	6013      	str	r3, [r2, #0]
 800cf52:	e036      	b.n	800cfc2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5a:	69da      	ldr	r2, [r3, #28]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	f003 030f 	and.w	r3, r3, #15
 800cf64:	2101      	movs	r1, #1
 800cf66:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6a:	041b      	lsls	r3, r3, #16
 800cf6c:	68f9      	ldr	r1, [r7, #12]
 800cf6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf72:	4313      	orrs	r3, r2
 800cf74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	015a      	lsls	r2, r3, #5
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d11a      	bne.n	800cfc2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	015a      	lsls	r2, r3, #5
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	4413      	add	r3, r2
 800cf94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	78db      	ldrb	r3, [r3, #3]
 800cfa6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfa8:	430b      	orrs	r3, r1
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	0151      	lsls	r1, r2, #5
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	440a      	add	r2, r1
 800cfb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfc0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	785b      	ldrb	r3, [r3, #1]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	f040 810a 	bne.w	800d202 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	695b      	ldr	r3, [r3, #20]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d132      	bne.n	800d05c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	015a      	lsls	r2, r3, #5
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	4413      	add	r3, r2
 800cffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	0151      	lsls	r1, r2, #5
 800d008:	697a      	ldr	r2, [r7, #20]
 800d00a:	440a      	add	r2, r1
 800d00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	015a      	lsls	r2, r3, #5
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	4413      	add	r3, r2
 800d022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	0151      	lsls	r1, r2, #5
 800d02c:	697a      	ldr	r2, [r7, #20]
 800d02e:	440a      	add	r2, r1
 800d030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	015a      	lsls	r2, r3, #5
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	4413      	add	r3, r2
 800d042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	0151      	lsls	r1, r2, #5
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	440a      	add	r2, r1
 800d050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d054:	0cdb      	lsrs	r3, r3, #19
 800d056:	04db      	lsls	r3, r3, #19
 800d058:	6113      	str	r3, [r2, #16]
 800d05a:	e074      	b.n	800d146 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	015a      	lsls	r2, r3, #5
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	4413      	add	r3, r2
 800d064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	0151      	lsls	r1, r2, #5
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	440a      	add	r2, r1
 800d072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d076:	0cdb      	lsrs	r3, r3, #19
 800d078:	04db      	lsls	r3, r3, #19
 800d07a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	015a      	lsls	r2, r3, #5
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	4413      	add	r3, r2
 800d084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	0151      	lsls	r1, r2, #5
 800d08e:	697a      	ldr	r2, [r7, #20]
 800d090:	440a      	add	r2, r1
 800d092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d096:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d09a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d09e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	015a      	lsls	r2, r3, #5
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ac:	691a      	ldr	r2, [r3, #16]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	6959      	ldr	r1, [r3, #20]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	440b      	add	r3, r1
 800d0b8:	1e59      	subs	r1, r3, #1
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	fbb1 f3f3 	udiv	r3, r1, r3
 800d0c2:	04d9      	lsls	r1, r3, #19
 800d0c4:	4baf      	ldr	r3, [pc, #700]	; (800d384 <USB_EPStartXfer+0x3b4>)
 800d0c6:	400b      	ands	r3, r1
 800d0c8:	6939      	ldr	r1, [r7, #16]
 800d0ca:	0148      	lsls	r0, r1, #5
 800d0cc:	6979      	ldr	r1, [r7, #20]
 800d0ce:	4401      	add	r1, r0
 800d0d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	015a      	lsls	r2, r3, #5
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e4:	691a      	ldr	r2, [r3, #16]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0ee:	6939      	ldr	r1, [r7, #16]
 800d0f0:	0148      	lsls	r0, r1, #5
 800d0f2:	6979      	ldr	r1, [r7, #20]
 800d0f4:	4401      	add	r1, r0
 800d0f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	78db      	ldrb	r3, [r3, #3]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d11f      	bne.n	800d146 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	015a      	lsls	r2, r3, #5
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d112:	691b      	ldr	r3, [r3, #16]
 800d114:	693a      	ldr	r2, [r7, #16]
 800d116:	0151      	lsls	r1, r2, #5
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	440a      	add	r2, r1
 800d11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d120:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d124:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	015a      	lsls	r2, r3, #5
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	4413      	add	r3, r2
 800d12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	0151      	lsls	r1, r2, #5
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	440a      	add	r2, r1
 800d13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d144:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	015a      	lsls	r2, r3, #5
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	4413      	add	r3, r2
 800d14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	693a      	ldr	r2, [r7, #16]
 800d156:	0151      	lsls	r1, r2, #5
 800d158:	697a      	ldr	r2, [r7, #20]
 800d15a:	440a      	add	r2, r1
 800d15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d164:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	78db      	ldrb	r3, [r3, #3]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d015      	beq.n	800d19a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	695b      	ldr	r3, [r3, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 8100 	beq.w	800d378 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d17e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	f003 030f 	and.w	r3, r3, #15
 800d188:	2101      	movs	r1, #1
 800d18a:	fa01 f303 	lsl.w	r3, r1, r3
 800d18e:	6979      	ldr	r1, [r7, #20]
 800d190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d194:	4313      	orrs	r3, r2
 800d196:	634b      	str	r3, [r1, #52]	; 0x34
 800d198:	e0ee      	b.n	800d378 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d110      	bne.n	800d1cc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	015a      	lsls	r2, r3, #5
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	693a      	ldr	r2, [r7, #16]
 800d1ba:	0151      	lsls	r1, r2, #5
 800d1bc:	697a      	ldr	r2, [r7, #20]
 800d1be:	440a      	add	r2, r1
 800d1c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	e00f      	b.n	800d1ec <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	0151      	lsls	r1, r2, #5
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	440a      	add	r2, r1
 800d1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1ea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	68d9      	ldr	r1, [r3, #12]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	781a      	ldrb	r2, [r3, #0]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f9e2 	bl	800d5c4 <USB_WritePacket>
 800d200:	e0ba      	b.n	800d378 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	015a      	lsls	r2, r3, #5
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	4413      	add	r3, r2
 800d20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	0151      	lsls	r1, r2, #5
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	440a      	add	r2, r1
 800d218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d21c:	0cdb      	lsrs	r3, r3, #19
 800d21e:	04db      	lsls	r3, r3, #19
 800d220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	015a      	lsls	r2, r3, #5
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	4413      	add	r3, r2
 800d22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	0151      	lsls	r1, r2, #5
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	440a      	add	r2, r1
 800d238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d23c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d244:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d123      	bne.n	800d296 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	015a      	lsls	r2, r3, #5
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	4413      	add	r3, r2
 800d256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25a:	691a      	ldr	r2, [r3, #16]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d264:	6939      	ldr	r1, [r7, #16]
 800d266:	0148      	lsls	r0, r1, #5
 800d268:	6979      	ldr	r1, [r7, #20]
 800d26a:	4401      	add	r1, r0
 800d26c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d270:	4313      	orrs	r3, r2
 800d272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	015a      	lsls	r2, r3, #5
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	4413      	add	r3, r2
 800d27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	693a      	ldr	r2, [r7, #16]
 800d284:	0151      	lsls	r1, r2, #5
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	440a      	add	r2, r1
 800d28a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d28e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d292:	6113      	str	r3, [r2, #16]
 800d294:	e033      	b.n	800d2fe <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	695a      	ldr	r2, [r3, #20]
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	4413      	add	r3, r2
 800d2a0:	1e5a      	subs	r2, r3, #1
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2aa:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b8:	691a      	ldr	r2, [r3, #16]
 800d2ba:	89fb      	ldrh	r3, [r7, #14]
 800d2bc:	04d9      	lsls	r1, r3, #19
 800d2be:	4b31      	ldr	r3, [pc, #196]	; (800d384 <USB_EPStartXfer+0x3b4>)
 800d2c0:	400b      	ands	r3, r1
 800d2c2:	6939      	ldr	r1, [r7, #16]
 800d2c4:	0148      	lsls	r0, r1, #5
 800d2c6:	6979      	ldr	r1, [r7, #20]
 800d2c8:	4401      	add	r1, r0
 800d2ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	015a      	lsls	r2, r3, #5
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	4413      	add	r3, r2
 800d2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2de:	691a      	ldr	r2, [r3, #16]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	89f9      	ldrh	r1, [r7, #14]
 800d2e6:	fb01 f303 	mul.w	r3, r1, r3
 800d2ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2ee:	6939      	ldr	r1, [r7, #16]
 800d2f0:	0148      	lsls	r0, r1, #5
 800d2f2:	6979      	ldr	r1, [r7, #20]
 800d2f4:	4401      	add	r1, r0
 800d2f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	78db      	ldrb	r3, [r3, #3]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d128      	bne.n	800d358 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d312:	2b00      	cmp	r3, #0
 800d314:	d110      	bne.n	800d338 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	015a      	lsls	r2, r3, #5
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	4413      	add	r3, r2
 800d31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	693a      	ldr	r2, [r7, #16]
 800d326:	0151      	lsls	r1, r2, #5
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	440a      	add	r2, r1
 800d32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	e00f      	b.n	800d358 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	015a      	lsls	r2, r3, #5
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	0151      	lsls	r1, r2, #5
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	440a      	add	r2, r1
 800d34e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d356:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	0151      	lsls	r1, r2, #5
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	440a      	add	r2, r1
 800d36e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	1ff80000 	.word	0x1ff80000

0800d388 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	785b      	ldrb	r3, [r3, #1]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	f040 80ab 	bne.w	800d4fc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d132      	bne.n	800d414 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	015a      	lsls	r2, r3, #5
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	0151      	lsls	r1, r2, #5
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	440a      	add	r2, r1
 800d3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	015a      	lsls	r2, r3, #5
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	4413      	add	r3, r2
 800d3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	0151      	lsls	r1, r2, #5
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	440a      	add	r2, r1
 800d3e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3fe:	691b      	ldr	r3, [r3, #16]
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	0151      	lsls	r1, r2, #5
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	440a      	add	r2, r1
 800d408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d40c:	0cdb      	lsrs	r3, r3, #19
 800d40e:	04db      	lsls	r3, r3, #19
 800d410:	6113      	str	r3, [r2, #16]
 800d412:	e04e      	b.n	800d4b2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	0151      	lsls	r1, r2, #5
 800d426:	68fa      	ldr	r2, [r7, #12]
 800d428:	440a      	add	r2, r1
 800d42a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d42e:	0cdb      	lsrs	r3, r3, #19
 800d430:	04db      	lsls	r3, r3, #19
 800d432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	015a      	lsls	r2, r3, #5
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	4413      	add	r3, r2
 800d43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	0151      	lsls	r1, r2, #5
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	440a      	add	r2, r1
 800d44a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d44e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d452:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d456:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	695a      	ldr	r2, [r3, #20]
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	429a      	cmp	r2, r3
 800d462:	d903      	bls.n	800d46c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	689a      	ldr	r2, [r3, #8]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	015a      	lsls	r2, r3, #5
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4413      	add	r3, r2
 800d474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	0151      	lsls	r1, r2, #5
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	440a      	add	r2, r1
 800d482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d48a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	015a      	lsls	r2, r3, #5
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4413      	add	r3, r2
 800d494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d498:	691a      	ldr	r2, [r3, #16]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	0148      	lsls	r0, r1, #5
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	4401      	add	r1, r0
 800d4aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	015a      	lsls	r2, r3, #5
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	0151      	lsls	r1, r2, #5
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	440a      	add	r2, r1
 800d4c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4d0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d06d      	beq.n	800d5b6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	f003 030f 	and.w	r3, r3, #15
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f0:	68f9      	ldr	r1, [r7, #12]
 800d4f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	634b      	str	r3, [r1, #52]	; 0x34
 800d4fa:	e05c      	b.n	800d5b6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	015a      	lsls	r2, r3, #5
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	4413      	add	r3, r2
 800d504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	0151      	lsls	r1, r2, #5
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	440a      	add	r2, r1
 800d512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d516:	0cdb      	lsrs	r3, r3, #19
 800d518:	04db      	lsls	r3, r3, #19
 800d51a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	015a      	lsls	r2, r3, #5
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	4413      	add	r3, r2
 800d524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	0151      	lsls	r1, r2, #5
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	440a      	add	r2, r1
 800d532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d53a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d53e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	695b      	ldr	r3, [r3, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d003      	beq.n	800d550 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	015a      	lsls	r2, r3, #5
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	4413      	add	r3, r2
 800d558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	0151      	lsls	r1, r2, #5
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	440a      	add	r2, r1
 800d566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d56a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d56e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	015a      	lsls	r2, r3, #5
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	4413      	add	r3, r2
 800d578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d57c:	691a      	ldr	r2, [r3, #16]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d586:	68b9      	ldr	r1, [r7, #8]
 800d588:	0148      	lsls	r0, r1, #5
 800d58a:	68f9      	ldr	r1, [r7, #12]
 800d58c:	4401      	add	r1, r0
 800d58e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d592:	4313      	orrs	r3, r2
 800d594:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	0151      	lsls	r1, r2, #5
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d5b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b089      	sub	sp, #36	; 0x24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	71fb      	strb	r3, [r7, #7]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d5e2:	88bb      	ldrh	r3, [r7, #4]
 800d5e4:	3303      	adds	r3, #3
 800d5e6:	089b      	lsrs	r3, r3, #2
 800d5e8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61bb      	str	r3, [r7, #24]
 800d5ee:	e00f      	b.n	800d610 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	031a      	lsls	r2, r3, #12
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	3304      	adds	r3, #4
 800d608:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	3301      	adds	r3, #1
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	69ba      	ldr	r2, [r7, #24]
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	429a      	cmp	r2, r3
 800d616:	d3eb      	bcc.n	800d5f0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3724      	adds	r7, #36	; 0x24
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d626:	b480      	push	{r7}
 800d628:	b089      	sub	sp, #36	; 0x24
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	4613      	mov	r3, r2
 800d632:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d63c:	88fb      	ldrh	r3, [r7, #6]
 800d63e:	3303      	adds	r3, #3
 800d640:	089b      	lsrs	r3, r3, #2
 800d642:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d644:	2300      	movs	r3, #0
 800d646:	61bb      	str	r3, [r7, #24]
 800d648:	e00b      	b.n	800d662 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	601a      	str	r2, [r3, #0]
    pDest++;
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	3304      	adds	r3, #4
 800d65a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	3301      	adds	r3, #1
 800d660:	61bb      	str	r3, [r7, #24]
 800d662:	69ba      	ldr	r2, [r7, #24]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	429a      	cmp	r2, r3
 800d668:	d3ef      	bcc.n	800d64a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d66a:	69fb      	ldr	r3, [r7, #28]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3724      	adds	r7, #36	; 0x24
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	785b      	ldrb	r3, [r3, #1]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d12c      	bne.n	800d6ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	015a      	lsls	r2, r3, #5
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4413      	add	r3, r2
 800d69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	db12      	blt.n	800d6cc <USB_EPSetStall+0x54>
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00f      	beq.n	800d6cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	015a      	lsls	r2, r3, #5
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	0151      	lsls	r1, r2, #5
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	440a      	add	r2, r1
 800d6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	0151      	lsls	r1, r2, #5
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	440a      	add	r2, r1
 800d6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6ea:	6013      	str	r3, [r2, #0]
 800d6ec:	e02b      	b.n	800d746 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	db12      	blt.n	800d726 <USB_EPSetStall+0xae>
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00f      	beq.n	800d726 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	015a      	lsls	r2, r3, #5
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	4413      	add	r3, r2
 800d70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	0151      	lsls	r1, r2, #5
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	440a      	add	r2, r1
 800d71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d724:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	015a      	lsls	r2, r3, #5
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	4413      	add	r3, r2
 800d72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	0151      	lsls	r1, r2, #5
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	440a      	add	r2, r1
 800d73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d744:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	785b      	ldrb	r3, [r3, #1]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d128      	bne.n	800d7c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	015a      	lsls	r2, r3, #5
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	4413      	add	r3, r2
 800d778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	0151      	lsls	r1, r2, #5
 800d782:	68fa      	ldr	r2, [r7, #12]
 800d784:	440a      	add	r2, r1
 800d786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d78a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d78e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	78db      	ldrb	r3, [r3, #3]
 800d794:	2b03      	cmp	r3, #3
 800d796:	d003      	beq.n	800d7a0 <USB_EPClearStall+0x4c>
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	78db      	ldrb	r3, [r3, #3]
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d138      	bne.n	800d812 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	015a      	lsls	r2, r3, #5
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	0151      	lsls	r1, r2, #5
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	440a      	add	r2, r1
 800d7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	e027      	b.n	800d812 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	0151      	lsls	r1, r2, #5
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	440a      	add	r2, r1
 800d7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	78db      	ldrb	r3, [r3, #3]
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d003      	beq.n	800d7f2 <USB_EPClearStall+0x9e>
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	78db      	ldrb	r3, [r3, #3]
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	d10f      	bne.n	800d812 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	015a      	lsls	r2, r3, #5
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	0151      	lsls	r1, r2, #5
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	440a      	add	r2, r1
 800d808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d80c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d810:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3714      	adds	r7, #20
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	460b      	mov	r3, r1
 800d82a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d83e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d842:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	011b      	lsls	r3, r3, #4
 800d850:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d854:	68f9      	ldr	r1, [r7, #12]
 800d856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d85a:	4313      	orrs	r3, r2
 800d85c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	4013      	ands	r3, r2
 800d882:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d884:	68fb      	ldr	r3, [r7, #12]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d892:	b480      	push	{r7}
 800d894:	b085      	sub	sp, #20
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ae:	69db      	ldr	r3, [r3, #28]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	0c1b      	lsrs	r3, r3, #16
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	b085      	sub	sp, #20
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	4013      	ands	r3, r2
 800d8e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	b29b      	uxth	r3, r3
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	460b      	mov	r3, r1
 800d904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	015a      	lsls	r2, r3, #5
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	4413      	add	r3, r2
 800d912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	4013      	ands	r3, r2
 800d926:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d928:	68bb      	ldr	r3, [r7, #8]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d936:	b480      	push	{r7}
 800d938:	b087      	sub	sp, #28
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	460b      	mov	r3, r1
 800d940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d958:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d95a:	78fb      	ldrb	r3, [r7, #3]
 800d95c:	f003 030f 	and.w	r3, r3, #15
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	fa22 f303 	lsr.w	r3, r2, r3
 800d966:	01db      	lsls	r3, r3, #7
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	693a      	ldr	r2, [r7, #16]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d970:	78fb      	ldrb	r3, [r7, #3]
 800d972:	015a      	lsls	r2, r3, #5
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	4413      	add	r3, r2
 800d978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	4013      	ands	r3, r2
 800d982:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d984:	68bb      	ldr	r3, [r7, #8]
}
 800d986:	4618      	mov	r0, r3
 800d988:	371c      	adds	r7, #28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d992:	b480      	push	{r7}
 800d994:	b083      	sub	sp, #12
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	f003 0301 	and.w	r3, r3, #1
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr

0800d9ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d9ae:	b480      	push	{r7}
 800d9b0:	b085      	sub	sp, #20
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d9cc:	f023 0307 	bic.w	r3, r3, #7
 800d9d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	333c      	adds	r3, #60	; 0x3c
 800da06:	3304      	adds	r3, #4
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	4a1c      	ldr	r2, [pc, #112]	; (800da80 <USB_EP0_OutStart+0x8c>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d90a      	bls.n	800da2a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da24:	d101      	bne.n	800da2a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	e024      	b.n	800da74 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da30:	461a      	mov	r2, r3
 800da32:	2300      	movs	r3, #0
 800da34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da58:	f043 0318 	orr.w	r3, r3, #24
 800da5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da70:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3714      	adds	r7, #20
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	4f54300a 	.word	0x4f54300a

0800da84 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800da84:	b480      	push	{r7}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da96:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800da9e:	2303      	movs	r3, #3
 800daa0:	e008      	b.n	800dab4 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	371c      	adds	r7, #28
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dace:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dad0:	2301      	movs	r3, #1
 800dad2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dade:	2303      	movs	r3, #3
 800dae0:	e01a      	b.n	800db18 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d114      	bne.n	800db16 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	2201      	movs	r2, #1
 800daf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800db0a:	2181      	movs	r1, #129	; 0x81
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7f5 fb12 	bl	8003136 <USBD_LL_Transmit>

    ret = USBD_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800db16:	7bfb      	ldrb	r3, [r7, #15]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	460b      	mov	r3, r1
 800db40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800db42:	2303      	movs	r3, #3
 800db44:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d009      	beq.n	800db64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	78fa      	ldrb	r2, [r7, #3]
 800db5a:	4611      	mov	r1, r2
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	4798      	blx	r3
 800db60:	4603      	mov	r3, r0
 800db62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800db64:	7bfb      	ldrb	r3, [r7, #15]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db80:	2b00      	cmp	r3, #0
 800db82:	d007      	beq.n	800db94 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	78fa      	ldrb	r2, [r7, #3]
 800db8e:	4611      	mov	r1, r2
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	4798      	blx	r3
  }

  return USBD_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbae:	6839      	ldr	r1, [r7, #0]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 ff8f 	bl	800ead4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbd2:	f003 031f 	and.w	r3, r3, #31
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d01a      	beq.n	800dc10 <USBD_LL_SetupStage+0x72>
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d822      	bhi.n	800dc24 <USBD_LL_SetupStage+0x86>
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d002      	beq.n	800dbe8 <USBD_LL_SetupStage+0x4a>
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d00a      	beq.n	800dbfc <USBD_LL_SetupStage+0x5e>
 800dbe6:	e01d      	b.n	800dc24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbee:	4619      	mov	r1, r3
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fa61 	bl	800e0b8 <USBD_StdDevReq>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	73fb      	strb	r3, [r7, #15]
      break;
 800dbfa:	e020      	b.n	800dc3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fac5 	bl	800e194 <USBD_StdItfReq>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0e:	e016      	b.n	800dc3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fb04 	bl	800e226 <USBD_StdEPReq>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	73fb      	strb	r3, [r7, #15]
      break;
 800dc22:	e00c      	b.n	800dc3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7f5 fa1a 	bl	800306c <USBD_LL_StallEP>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc3c:	bf00      	nop
  }

  return ret;
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	460b      	mov	r3, r1
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc56:	7afb      	ldrb	r3, [r7, #11]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d138      	bne.n	800dcce <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d14a      	bne.n	800dd04 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	689a      	ldr	r2, [r3, #8]
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d913      	bls.n	800dca2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	689a      	ldr	r2, [r3, #8]
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	1ad2      	subs	r2, r2, r3
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	4293      	cmp	r3, r2
 800dc92:	bf28      	it	cs
 800dc94:	4613      	movcs	r3, r2
 800dc96:	461a      	mov	r2, r3
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 ff91 	bl	800ebc2 <USBD_CtlContinueRx>
 800dca0:	e030      	b.n	800dd04 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d10b      	bne.n	800dcc6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb4:	691b      	ldr	r3, [r3, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d005      	beq.n	800dcc6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f000 ff8c 	bl	800ebe4 <USBD_CtlSendStatus>
 800dccc:	e01a      	b.n	800dd04 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d114      	bne.n	800dd04 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dce0:	699b      	ldr	r3, [r3, #24]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00e      	beq.n	800dd04 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	7afa      	ldrb	r2, [r7, #11]
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	4798      	blx	r3
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dcfa:	7dfb      	ldrb	r3, [r7, #23]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d001      	beq.n	800dd04 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
 800dd02:	e000      	b.n	800dd06 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b086      	sub	sp, #24
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	460b      	mov	r3, r1
 800dd18:	607a      	str	r2, [r7, #4]
 800dd1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dd1c:	7afb      	ldrb	r3, [r7, #11]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d16b      	bne.n	800ddfa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3314      	adds	r3, #20
 800dd26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d156      	bne.n	800dde0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	689a      	ldr	r2, [r3, #8]
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d914      	bls.n	800dd68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	689a      	ldr	r2, [r3, #8]
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	1ad2      	subs	r2, r2, r3
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	461a      	mov	r2, r3
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f000 ff23 	bl	800eba0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2100      	movs	r1, #0
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7f5 f9fd 	bl	8003160 <USBD_LL_PrepareReceive>
 800dd66:	e03b      	b.n	800dde0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	68da      	ldr	r2, [r3, #12]
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d11c      	bne.n	800ddae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d316      	bcc.n	800ddae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	685a      	ldr	r2, [r3, #4]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d20f      	bcs.n	800ddae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd8e:	2200      	movs	r2, #0
 800dd90:	2100      	movs	r1, #0
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f000 ff04 	bl	800eba0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dda0:	2300      	movs	r3, #0
 800dda2:	2200      	movs	r2, #0
 800dda4:	2100      	movs	r1, #0
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f7f5 f9da 	bl	8003160 <USBD_LL_PrepareReceive>
 800ddac:	e018      	b.n	800dde0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d10b      	bne.n	800ddd2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d005      	beq.n	800ddd2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddd2:	2180      	movs	r1, #128	; 0x80
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7f5 f949 	bl	800306c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f000 ff15 	bl	800ec0a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d122      	bne.n	800de30 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7ff fe98 	bl	800db20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ddf8:	e01a      	b.n	800de30 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de00:	b2db      	uxtb	r3, r3
 800de02:	2b03      	cmp	r3, #3
 800de04:	d114      	bne.n	800de30 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00e      	beq.n	800de30 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de18:	695b      	ldr	r3, [r3, #20]
 800de1a:	7afa      	ldrb	r2, [r7, #11]
 800de1c:	4611      	mov	r1, r2
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	4798      	blx	r3
 800de22:	4603      	mov	r3, r0
 800de24:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
 800de2e:	e000      	b.n	800de32 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e02f      	b.n	800dece <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00f      	beq.n	800de98 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d009      	beq.n	800de98 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6852      	ldr	r2, [r2, #4]
 800de90:	b2d2      	uxtb	r2, r2
 800de92:	4611      	mov	r1, r2
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de98:	2340      	movs	r3, #64	; 0x40
 800de9a:	2200      	movs	r2, #0
 800de9c:	2100      	movs	r1, #0
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7f5 f8ca 	bl	8003038 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2201      	movs	r2, #1
 800dea8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2240      	movs	r2, #64	; 0x40
 800deb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800deb4:	2340      	movs	r3, #64	; 0x40
 800deb6:	2200      	movs	r2, #0
 800deb8:	2180      	movs	r1, #128	; 0x80
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7f5 f8bc 	bl	8003038 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2240      	movs	r2, #64	; 0x40
 800deca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	460b      	mov	r3, r1
 800dee0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	78fa      	ldrb	r2, [r7, #3]
 800dee6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	370c      	adds	r7, #12
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr

0800def6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800def6:	b480      	push	{r7}
 800def8:	b083      	sub	sp, #12
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df04:	b2da      	uxtb	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2204      	movs	r2, #4
 800df10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df14:	2300      	movs	r3, #0
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df22:	b480      	push	{r7}
 800df24:	b083      	sub	sp, #12
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df30:	b2db      	uxtb	r3, r3
 800df32:	2b04      	cmp	r3, #4
 800df34:	d106      	bne.n	800df44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df60:	2b00      	cmp	r3, #0
 800df62:	d101      	bne.n	800df68 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800df64:	2303      	movs	r3, #3
 800df66:	e012      	b.n	800df8e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	2b03      	cmp	r3, #3
 800df72:	d10b      	bne.n	800df8c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df7a:	69db      	ldr	r3, [r3, #28]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d005      	beq.n	800df8c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df86:	69db      	ldr	r3, [r3, #28]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b082      	sub	sp, #8
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	460b      	mov	r3, r1
 800dfa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d101      	bne.n	800dfb0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dfac:	2303      	movs	r3, #3
 800dfae:	e014      	b.n	800dfda <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2b03      	cmp	r3, #3
 800dfba:	d10d      	bne.n	800dfd8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d007      	beq.n	800dfd8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	78fa      	ldrb	r2, [r7, #3]
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	460b      	mov	r3, r1
 800dfec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dff8:	2303      	movs	r3, #3
 800dffa:	e014      	b.n	800e026 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e002:	b2db      	uxtb	r3, r3
 800e004:	2b03      	cmp	r3, #3
 800e006:	d10d      	bne.n	800e024 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e010:	2b00      	cmp	r3, #0
 800e012:	d007      	beq.n	800e024 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01c:	78fa      	ldrb	r2, [r7, #3]
 800e01e:	4611      	mov	r1, r2
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e02e:	b480      	push	{r7}
 800e030:	b083      	sub	sp, #12
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d009      	beq.n	800e072 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	6852      	ldr	r2, [r2, #4]
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	4611      	mov	r1, r2
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	4798      	blx	r3
  }

  return USBD_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b087      	sub	sp, #28
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	3301      	adds	r3, #1
 800e092:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e09a:	8a3b      	ldrh	r3, [r7, #16]
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	b21a      	sxth	r2, r3
 800e0a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	b21b      	sxth	r3, r3
 800e0a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e0aa:	89fb      	ldrh	r3, [r7, #14]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	371c      	adds	r7, #28
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0ce:	2b40      	cmp	r3, #64	; 0x40
 800e0d0:	d005      	beq.n	800e0de <USBD_StdDevReq+0x26>
 800e0d2:	2b40      	cmp	r3, #64	; 0x40
 800e0d4:	d853      	bhi.n	800e17e <USBD_StdDevReq+0xc6>
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00b      	beq.n	800e0f2 <USBD_StdDevReq+0x3a>
 800e0da:	2b20      	cmp	r3, #32
 800e0dc:	d14f      	bne.n	800e17e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	6839      	ldr	r1, [r7, #0]
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	4798      	blx	r3
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e0f0:	e04a      	b.n	800e188 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	785b      	ldrb	r3, [r3, #1]
 800e0f6:	2b09      	cmp	r3, #9
 800e0f8:	d83b      	bhi.n	800e172 <USBD_StdDevReq+0xba>
 800e0fa:	a201      	add	r2, pc, #4	; (adr r2, 800e100 <USBD_StdDevReq+0x48>)
 800e0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e100:	0800e155 	.word	0x0800e155
 800e104:	0800e169 	.word	0x0800e169
 800e108:	0800e173 	.word	0x0800e173
 800e10c:	0800e15f 	.word	0x0800e15f
 800e110:	0800e173 	.word	0x0800e173
 800e114:	0800e133 	.word	0x0800e133
 800e118:	0800e129 	.word	0x0800e129
 800e11c:	0800e173 	.word	0x0800e173
 800e120:	0800e14b 	.word	0x0800e14b
 800e124:	0800e13d 	.word	0x0800e13d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f9de 	bl	800e4ec <USBD_GetDescriptor>
          break;
 800e130:	e024      	b.n	800e17c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e132:	6839      	ldr	r1, [r7, #0]
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 fb43 	bl	800e7c0 <USBD_SetAddress>
          break;
 800e13a:	e01f      	b.n	800e17c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fb82 	bl	800e848 <USBD_SetConfig>
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]
          break;
 800e148:	e018      	b.n	800e17c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e14a:	6839      	ldr	r1, [r7, #0]
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 fc21 	bl	800e994 <USBD_GetConfig>
          break;
 800e152:	e013      	b.n	800e17c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e154:	6839      	ldr	r1, [r7, #0]
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fc52 	bl	800ea00 <USBD_GetStatus>
          break;
 800e15c:	e00e      	b.n	800e17c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e15e:	6839      	ldr	r1, [r7, #0]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 fc81 	bl	800ea68 <USBD_SetFeature>
          break;
 800e166:	e009      	b.n	800e17c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 fc90 	bl	800ea90 <USBD_ClrFeature>
          break;
 800e170:	e004      	b.n	800e17c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fce7 	bl	800eb48 <USBD_CtlError>
          break;
 800e17a:	bf00      	nop
      }
      break;
 800e17c:	e004      	b.n	800e188 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fce1 	bl	800eb48 <USBD_CtlError>
      break;
 800e186:	bf00      	nop
  }

  return ret;
 800e188:	7bfb      	ldrb	r3, [r7, #15]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop

0800e194 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1aa:	2b40      	cmp	r3, #64	; 0x40
 800e1ac:	d005      	beq.n	800e1ba <USBD_StdItfReq+0x26>
 800e1ae:	2b40      	cmp	r3, #64	; 0x40
 800e1b0:	d82f      	bhi.n	800e212 <USBD_StdItfReq+0x7e>
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <USBD_StdItfReq+0x26>
 800e1b6:	2b20      	cmp	r3, #32
 800e1b8:	d12b      	bne.n	800e212 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d81d      	bhi.n	800e204 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	889b      	ldrh	r3, [r3, #4]
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d813      	bhi.n	800e1fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	4798      	blx	r3
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	88db      	ldrh	r3, [r3, #6]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d110      	bne.n	800e20e <USBD_StdItfReq+0x7a>
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10d      	bne.n	800e20e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fcf6 	bl	800ebe4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e1f8:	e009      	b.n	800e20e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 fca3 	bl	800eb48 <USBD_CtlError>
          break;
 800e202:	e004      	b.n	800e20e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fc9e 	bl	800eb48 <USBD_CtlError>
          break;
 800e20c:	e000      	b.n	800e210 <USBD_StdItfReq+0x7c>
          break;
 800e20e:	bf00      	nop
      }
      break;
 800e210:	e004      	b.n	800e21c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e212:	6839      	ldr	r1, [r7, #0]
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 fc97 	bl	800eb48 <USBD_CtlError>
      break;
 800e21a:	bf00      	nop
  }

  return ret;
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b084      	sub	sp, #16
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	889b      	ldrh	r3, [r3, #4]
 800e238:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e242:	2b40      	cmp	r3, #64	; 0x40
 800e244:	d007      	beq.n	800e256 <USBD_StdEPReq+0x30>
 800e246:	2b40      	cmp	r3, #64	; 0x40
 800e248:	f200 8145 	bhi.w	800e4d6 <USBD_StdEPReq+0x2b0>
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00c      	beq.n	800e26a <USBD_StdEPReq+0x44>
 800e250:	2b20      	cmp	r3, #32
 800e252:	f040 8140 	bne.w	800e4d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	6839      	ldr	r1, [r7, #0]
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	4798      	blx	r3
 800e264:	4603      	mov	r3, r0
 800e266:	73fb      	strb	r3, [r7, #15]
      break;
 800e268:	e13a      	b.n	800e4e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	785b      	ldrb	r3, [r3, #1]
 800e26e:	2b03      	cmp	r3, #3
 800e270:	d007      	beq.n	800e282 <USBD_StdEPReq+0x5c>
 800e272:	2b03      	cmp	r3, #3
 800e274:	f300 8129 	bgt.w	800e4ca <USBD_StdEPReq+0x2a4>
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d07f      	beq.n	800e37c <USBD_StdEPReq+0x156>
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d03c      	beq.n	800e2fa <USBD_StdEPReq+0xd4>
 800e280:	e123      	b.n	800e4ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d002      	beq.n	800e294 <USBD_StdEPReq+0x6e>
 800e28e:	2b03      	cmp	r3, #3
 800e290:	d016      	beq.n	800e2c0 <USBD_StdEPReq+0x9a>
 800e292:	e02c      	b.n	800e2ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e294:	7bbb      	ldrb	r3, [r7, #14]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00d      	beq.n	800e2b6 <USBD_StdEPReq+0x90>
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
 800e29c:	2b80      	cmp	r3, #128	; 0x80
 800e29e:	d00a      	beq.n	800e2b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2a0:	7bbb      	ldrb	r3, [r7, #14]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7f4 fee1 	bl	800306c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2aa:	2180      	movs	r1, #128	; 0x80
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7f4 fedd 	bl	800306c <USBD_LL_StallEP>
 800e2b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2b4:	e020      	b.n	800e2f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 fc45 	bl	800eb48 <USBD_CtlError>
              break;
 800e2be:	e01b      	b.n	800e2f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	885b      	ldrh	r3, [r3, #2]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10e      	bne.n	800e2e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e2c8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00b      	beq.n	800e2e6 <USBD_StdEPReq+0xc0>
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	2b80      	cmp	r3, #128	; 0x80
 800e2d2:	d008      	beq.n	800e2e6 <USBD_StdEPReq+0xc0>
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	88db      	ldrh	r3, [r3, #6]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d104      	bne.n	800e2e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2dc:	7bbb      	ldrb	r3, [r7, #14]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7f4 fec3 	bl	800306c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fc7c 	bl	800ebe4 <USBD_CtlSendStatus>

              break;
 800e2ec:	e004      	b.n	800e2f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e2ee:	6839      	ldr	r1, [r7, #0]
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fc29 	bl	800eb48 <USBD_CtlError>
              break;
 800e2f6:	bf00      	nop
          }
          break;
 800e2f8:	e0ec      	b.n	800e4d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b02      	cmp	r3, #2
 800e304:	d002      	beq.n	800e30c <USBD_StdEPReq+0xe6>
 800e306:	2b03      	cmp	r3, #3
 800e308:	d016      	beq.n	800e338 <USBD_StdEPReq+0x112>
 800e30a:	e030      	b.n	800e36e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e30c:	7bbb      	ldrb	r3, [r7, #14]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00d      	beq.n	800e32e <USBD_StdEPReq+0x108>
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	2b80      	cmp	r3, #128	; 0x80
 800e316:	d00a      	beq.n	800e32e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e318:	7bbb      	ldrb	r3, [r7, #14]
 800e31a:	4619      	mov	r1, r3
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7f4 fea5 	bl	800306c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e322:	2180      	movs	r1, #128	; 0x80
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7f4 fea1 	bl	800306c <USBD_LL_StallEP>
 800e32a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e32c:	e025      	b.n	800e37a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fc09 	bl	800eb48 <USBD_CtlError>
              break;
 800e336:	e020      	b.n	800e37a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	885b      	ldrh	r3, [r3, #2]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d11b      	bne.n	800e378 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e340:	7bbb      	ldrb	r3, [r7, #14]
 800e342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e346:	2b00      	cmp	r3, #0
 800e348:	d004      	beq.n	800e354 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e34a:	7bbb      	ldrb	r3, [r7, #14]
 800e34c:	4619      	mov	r1, r3
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7f4 fe9f 	bl	8003092 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fc45 	bl	800ebe4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	6839      	ldr	r1, [r7, #0]
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	4798      	blx	r3
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e36c:	e004      	b.n	800e378 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e36e:	6839      	ldr	r1, [r7, #0]
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 fbe9 	bl	800eb48 <USBD_CtlError>
              break;
 800e376:	e000      	b.n	800e37a <USBD_StdEPReq+0x154>
              break;
 800e378:	bf00      	nop
          }
          break;
 800e37a:	e0ab      	b.n	800e4d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b02      	cmp	r3, #2
 800e386:	d002      	beq.n	800e38e <USBD_StdEPReq+0x168>
 800e388:	2b03      	cmp	r3, #3
 800e38a:	d032      	beq.n	800e3f2 <USBD_StdEPReq+0x1cc>
 800e38c:	e097      	b.n	800e4be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d007      	beq.n	800e3a4 <USBD_StdEPReq+0x17e>
 800e394:	7bbb      	ldrb	r3, [r7, #14]
 800e396:	2b80      	cmp	r3, #128	; 0x80
 800e398:	d004      	beq.n	800e3a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 fbd3 	bl	800eb48 <USBD_CtlError>
                break;
 800e3a2:	e091      	b.n	800e4c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	da0b      	bge.n	800e3c4 <USBD_StdEPReq+0x19e>
 800e3ac:	7bbb      	ldrb	r3, [r7, #14]
 800e3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	3310      	adds	r3, #16
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	4413      	add	r3, r2
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	e00b      	b.n	800e3dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3c4:	7bbb      	ldrb	r3, [r7, #14]
 800e3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4413      	add	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	4413      	add	r3, r2
 800e3da:	3304      	adds	r3, #4
 800e3dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fbbd 	bl	800eb6a <USBD_CtlSendData>
              break;
 800e3f0:	e06a      	b.n	800e4c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e3f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	da11      	bge.n	800e41e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e3fa:	7bbb      	ldrb	r3, [r7, #14]
 800e3fc:	f003 020f 	and.w	r2, r3, #15
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	4613      	mov	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	440b      	add	r3, r1
 800e40c:	3324      	adds	r3, #36	; 0x24
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d117      	bne.n	800e444 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fb96 	bl	800eb48 <USBD_CtlError>
                  break;
 800e41c:	e054      	b.n	800e4c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e41e:	7bbb      	ldrb	r3, [r7, #14]
 800e420:	f003 020f 	and.w	r2, r3, #15
 800e424:	6879      	ldr	r1, [r7, #4]
 800e426:	4613      	mov	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	440b      	add	r3, r1
 800e430:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d104      	bne.n	800e444 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e43a:	6839      	ldr	r1, [r7, #0]
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 fb83 	bl	800eb48 <USBD_CtlError>
                  break;
 800e442:	e041      	b.n	800e4c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	da0b      	bge.n	800e464 <USBD_StdEPReq+0x23e>
 800e44c:	7bbb      	ldrb	r3, [r7, #14]
 800e44e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e452:	4613      	mov	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	3310      	adds	r3, #16
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	4413      	add	r3, r2
 800e460:	3304      	adds	r3, #4
 800e462:	e00b      	b.n	800e47c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e464:	7bbb      	ldrb	r3, [r7, #14]
 800e466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e46a:	4613      	mov	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	4413      	add	r3, r2
 800e47a:	3304      	adds	r3, #4
 800e47c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e47e:	7bbb      	ldrb	r3, [r7, #14]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <USBD_StdEPReq+0x264>
 800e484:	7bbb      	ldrb	r3, [r7, #14]
 800e486:	2b80      	cmp	r3, #128	; 0x80
 800e488:	d103      	bne.n	800e492 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2200      	movs	r2, #0
 800e48e:	601a      	str	r2, [r3, #0]
 800e490:	e00e      	b.n	800e4b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e492:	7bbb      	ldrb	r3, [r7, #14]
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7f4 fe0e 	bl	80030b8 <USBD_LL_IsStallEP>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d003      	beq.n	800e4aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	601a      	str	r2, [r3, #0]
 800e4a8:	e002      	b.n	800e4b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fb57 	bl	800eb6a <USBD_CtlSendData>
              break;
 800e4bc:	e004      	b.n	800e4c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e4be:	6839      	ldr	r1, [r7, #0]
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 fb41 	bl	800eb48 <USBD_CtlError>
              break;
 800e4c6:	bf00      	nop
          }
          break;
 800e4c8:	e004      	b.n	800e4d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fb3b 	bl	800eb48 <USBD_CtlError>
          break;
 800e4d2:	bf00      	nop
      }
      break;
 800e4d4:	e004      	b.n	800e4e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e4d6:	6839      	ldr	r1, [r7, #0]
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 fb35 	bl	800eb48 <USBD_CtlError>
      break;
 800e4de:	bf00      	nop
  }

  return ret;
 800e4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
	...

0800e4ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e4fe:	2300      	movs	r3, #0
 800e500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	885b      	ldrh	r3, [r3, #2]
 800e506:	0a1b      	lsrs	r3, r3, #8
 800e508:	b29b      	uxth	r3, r3
 800e50a:	3b01      	subs	r3, #1
 800e50c:	2b06      	cmp	r3, #6
 800e50e:	f200 8128 	bhi.w	800e762 <USBD_GetDescriptor+0x276>
 800e512:	a201      	add	r2, pc, #4	; (adr r2, 800e518 <USBD_GetDescriptor+0x2c>)
 800e514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e518:	0800e535 	.word	0x0800e535
 800e51c:	0800e54d 	.word	0x0800e54d
 800e520:	0800e58d 	.word	0x0800e58d
 800e524:	0800e763 	.word	0x0800e763
 800e528:	0800e763 	.word	0x0800e763
 800e52c:	0800e703 	.word	0x0800e703
 800e530:	0800e72f 	.word	0x0800e72f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	7c12      	ldrb	r2, [r2, #16]
 800e540:	f107 0108 	add.w	r1, r7, #8
 800e544:	4610      	mov	r0, r2
 800e546:	4798      	blx	r3
 800e548:	60f8      	str	r0, [r7, #12]
      break;
 800e54a:	e112      	b.n	800e772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7c1b      	ldrb	r3, [r3, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d10d      	bne.n	800e570 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e55c:	f107 0208 	add.w	r2, r7, #8
 800e560:	4610      	mov	r0, r2
 800e562:	4798      	blx	r3
 800e564:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	3301      	adds	r3, #1
 800e56a:	2202      	movs	r2, #2
 800e56c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e56e:	e100      	b.n	800e772 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e578:	f107 0208 	add.w	r2, r7, #8
 800e57c:	4610      	mov	r0, r2
 800e57e:	4798      	blx	r3
 800e580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3301      	adds	r3, #1
 800e586:	2202      	movs	r2, #2
 800e588:	701a      	strb	r2, [r3, #0]
      break;
 800e58a:	e0f2      	b.n	800e772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	885b      	ldrh	r3, [r3, #2]
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b05      	cmp	r3, #5
 800e594:	f200 80ac 	bhi.w	800e6f0 <USBD_GetDescriptor+0x204>
 800e598:	a201      	add	r2, pc, #4	; (adr r2, 800e5a0 <USBD_GetDescriptor+0xb4>)
 800e59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59e:	bf00      	nop
 800e5a0:	0800e5b9 	.word	0x0800e5b9
 800e5a4:	0800e5ed 	.word	0x0800e5ed
 800e5a8:	0800e621 	.word	0x0800e621
 800e5ac:	0800e655 	.word	0x0800e655
 800e5b0:	0800e689 	.word	0x0800e689
 800e5b4:	0800e6bd 	.word	0x0800e6bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00b      	beq.n	800e5dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	7c12      	ldrb	r2, [r2, #16]
 800e5d0:	f107 0108 	add.w	r1, r7, #8
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	4798      	blx	r3
 800e5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5da:	e091      	b.n	800e700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fab2 	bl	800eb48 <USBD_CtlError>
            err++;
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ea:	e089      	b.n	800e700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5f2:	689b      	ldr	r3, [r3, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00b      	beq.n	800e610 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	7c12      	ldrb	r2, [r2, #16]
 800e604:	f107 0108 	add.w	r1, r7, #8
 800e608:	4610      	mov	r0, r2
 800e60a:	4798      	blx	r3
 800e60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e60e:	e077      	b.n	800e700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e610:	6839      	ldr	r1, [r7, #0]
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 fa98 	bl	800eb48 <USBD_CtlError>
            err++;
 800e618:	7afb      	ldrb	r3, [r7, #11]
 800e61a:	3301      	adds	r3, #1
 800e61c:	72fb      	strb	r3, [r7, #11]
          break;
 800e61e:	e06f      	b.n	800e700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00b      	beq.n	800e644 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	7c12      	ldrb	r2, [r2, #16]
 800e638:	f107 0108 	add.w	r1, r7, #8
 800e63c:	4610      	mov	r0, r2
 800e63e:	4798      	blx	r3
 800e640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e642:	e05d      	b.n	800e700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 fa7e 	bl	800eb48 <USBD_CtlError>
            err++;
 800e64c:	7afb      	ldrb	r3, [r7, #11]
 800e64e:	3301      	adds	r3, #1
 800e650:	72fb      	strb	r3, [r7, #11]
          break;
 800e652:	e055      	b.n	800e700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	7c12      	ldrb	r2, [r2, #16]
 800e66c:	f107 0108 	add.w	r1, r7, #8
 800e670:	4610      	mov	r0, r2
 800e672:	4798      	blx	r3
 800e674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e676:	e043      	b.n	800e700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e678:	6839      	ldr	r1, [r7, #0]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 fa64 	bl	800eb48 <USBD_CtlError>
            err++;
 800e680:	7afb      	ldrb	r3, [r7, #11]
 800e682:	3301      	adds	r3, #1
 800e684:	72fb      	strb	r3, [r7, #11]
          break;
 800e686:	e03b      	b.n	800e700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e68e:	695b      	ldr	r3, [r3, #20]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00b      	beq.n	800e6ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69a:	695b      	ldr	r3, [r3, #20]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	7c12      	ldrb	r2, [r2, #16]
 800e6a0:	f107 0108 	add.w	r1, r7, #8
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	4798      	blx	r3
 800e6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6aa:	e029      	b.n	800e700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 fa4a 	bl	800eb48 <USBD_CtlError>
            err++;
 800e6b4:	7afb      	ldrb	r3, [r7, #11]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ba:	e021      	b.n	800e700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00b      	beq.n	800e6e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	7c12      	ldrb	r2, [r2, #16]
 800e6d4:	f107 0108 	add.w	r1, r7, #8
 800e6d8:	4610      	mov	r0, r2
 800e6da:	4798      	blx	r3
 800e6dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6de:	e00f      	b.n	800e700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fa30 	bl	800eb48 <USBD_CtlError>
            err++;
 800e6e8:	7afb      	ldrb	r3, [r7, #11]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ee:	e007      	b.n	800e700 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa28 	bl	800eb48 <USBD_CtlError>
          err++;
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e6fe:	bf00      	nop
      }
      break;
 800e700:	e037      	b.n	800e772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	7c1b      	ldrb	r3, [r3, #16]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d109      	bne.n	800e71e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e712:	f107 0208 	add.w	r2, r7, #8
 800e716:	4610      	mov	r0, r2
 800e718:	4798      	blx	r3
 800e71a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e71c:	e029      	b.n	800e772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 fa11 	bl	800eb48 <USBD_CtlError>
        err++;
 800e726:	7afb      	ldrb	r3, [r7, #11]
 800e728:	3301      	adds	r3, #1
 800e72a:	72fb      	strb	r3, [r7, #11]
      break;
 800e72c:	e021      	b.n	800e772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	7c1b      	ldrb	r3, [r3, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10d      	bne.n	800e752 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e73e:	f107 0208 	add.w	r2, r7, #8
 800e742:	4610      	mov	r0, r2
 800e744:	4798      	blx	r3
 800e746:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3301      	adds	r3, #1
 800e74c:	2207      	movs	r2, #7
 800e74e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e750:	e00f      	b.n	800e772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e752:	6839      	ldr	r1, [r7, #0]
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f9f7 	bl	800eb48 <USBD_CtlError>
        err++;
 800e75a:	7afb      	ldrb	r3, [r7, #11]
 800e75c:	3301      	adds	r3, #1
 800e75e:	72fb      	strb	r3, [r7, #11]
      break;
 800e760:	e007      	b.n	800e772 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f9ef 	bl	800eb48 <USBD_CtlError>
      err++;
 800e76a:	7afb      	ldrb	r3, [r7, #11]
 800e76c:	3301      	adds	r3, #1
 800e76e:	72fb      	strb	r3, [r7, #11]
      break;
 800e770:	bf00      	nop
  }

  if (err != 0U)
 800e772:	7afb      	ldrb	r3, [r7, #11]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d11e      	bne.n	800e7b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	88db      	ldrh	r3, [r3, #6]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d016      	beq.n	800e7ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e780:	893b      	ldrh	r3, [r7, #8]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00e      	beq.n	800e7a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	88da      	ldrh	r2, [r3, #6]
 800e78a:	893b      	ldrh	r3, [r7, #8]
 800e78c:	4293      	cmp	r3, r2
 800e78e:	bf28      	it	cs
 800e790:	4613      	movcs	r3, r2
 800e792:	b29b      	uxth	r3, r3
 800e794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e796:	893b      	ldrh	r3, [r7, #8]
 800e798:	461a      	mov	r2, r3
 800e79a:	68f9      	ldr	r1, [r7, #12]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f9e4 	bl	800eb6a <USBD_CtlSendData>
 800e7a2:	e009      	b.n	800e7b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f9ce 	bl	800eb48 <USBD_CtlError>
 800e7ac:	e004      	b.n	800e7b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 fa18 	bl	800ebe4 <USBD_CtlSendStatus>
 800e7b4:	e000      	b.n	800e7b8 <USBD_GetDescriptor+0x2cc>
    return;
 800e7b6:	bf00      	nop
  }
}
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop

0800e7c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	889b      	ldrh	r3, [r3, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d131      	bne.n	800e836 <USBD_SetAddress+0x76>
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	88db      	ldrh	r3, [r3, #6]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d12d      	bne.n	800e836 <USBD_SetAddress+0x76>
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	885b      	ldrh	r3, [r3, #2]
 800e7de:	2b7f      	cmp	r3, #127	; 0x7f
 800e7e0:	d829      	bhi.n	800e836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	885b      	ldrh	r3, [r3, #2]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d104      	bne.n	800e804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 f9a3 	bl	800eb48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e802:	e01d      	b.n	800e840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	7bfa      	ldrb	r2, [r7, #15]
 800e808:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e80c:	7bfb      	ldrb	r3, [r7, #15]
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7f4 fc7d 	bl	8003110 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 f9e4 	bl	800ebe4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d004      	beq.n	800e82c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2202      	movs	r2, #2
 800e826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e82a:	e009      	b.n	800e840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e834:	e004      	b.n	800e840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f985 	bl	800eb48 <USBD_CtlError>
  }
}
 800e83e:	bf00      	nop
 800e840:	bf00      	nop
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	885b      	ldrh	r3, [r3, #2]
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	4b4c      	ldr	r3, [pc, #304]	; (800e990 <USBD_SetConfig+0x148>)
 800e85e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e860:	4b4b      	ldr	r3, [pc, #300]	; (800e990 <USBD_SetConfig+0x148>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d905      	bls.n	800e874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f96c 	bl	800eb48 <USBD_CtlError>
    return USBD_FAIL;
 800e870:	2303      	movs	r3, #3
 800e872:	e088      	b.n	800e986 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d002      	beq.n	800e886 <USBD_SetConfig+0x3e>
 800e880:	2b03      	cmp	r3, #3
 800e882:	d025      	beq.n	800e8d0 <USBD_SetConfig+0x88>
 800e884:	e071      	b.n	800e96a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e886:	4b42      	ldr	r3, [pc, #264]	; (800e990 <USBD_SetConfig+0x148>)
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d01c      	beq.n	800e8c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e88e:	4b40      	ldr	r3, [pc, #256]	; (800e990 <USBD_SetConfig+0x148>)
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e898:	4b3d      	ldr	r3, [pc, #244]	; (800e990 <USBD_SetConfig+0x148>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	4619      	mov	r1, r3
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7ff f949 	bl	800db36 <USBD_SetClassConfig>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d004      	beq.n	800e8b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 f949 	bl	800eb48 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8b6:	e065      	b.n	800e984 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 f993 	bl	800ebe4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2203      	movs	r2, #3
 800e8c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e8c6:	e05d      	b.n	800e984 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f98b 	bl	800ebe4 <USBD_CtlSendStatus>
      break;
 800e8ce:	e059      	b.n	800e984 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e8d0:	4b2f      	ldr	r3, [pc, #188]	; (800e990 <USBD_SetConfig+0x148>)
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d112      	bne.n	800e8fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2202      	movs	r2, #2
 800e8dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e8e0:	4b2b      	ldr	r3, [pc, #172]	; (800e990 <USBD_SetConfig+0x148>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8ea:	4b29      	ldr	r3, [pc, #164]	; (800e990 <USBD_SetConfig+0x148>)
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7ff f93c 	bl	800db6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f974 	bl	800ebe4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8fc:	e042      	b.n	800e984 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e8fe:	4b24      	ldr	r3, [pc, #144]	; (800e990 <USBD_SetConfig+0x148>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	461a      	mov	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d02a      	beq.n	800e962 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	b2db      	uxtb	r3, r3
 800e912:	4619      	mov	r1, r3
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f7ff f92a 	bl	800db6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e91a:	4b1d      	ldr	r3, [pc, #116]	; (800e990 <USBD_SetConfig+0x148>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	461a      	mov	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e924:	4b1a      	ldr	r3, [pc, #104]	; (800e990 <USBD_SetConfig+0x148>)
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff f903 	bl	800db36 <USBD_SetClassConfig>
 800e930:	4603      	mov	r3, r0
 800e932:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e934:	7bfb      	ldrb	r3, [r7, #15]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00f      	beq.n	800e95a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f903 	bl	800eb48 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	b2db      	uxtb	r3, r3
 800e948:	4619      	mov	r1, r3
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7ff f90f 	bl	800db6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2202      	movs	r2, #2
 800e954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e958:	e014      	b.n	800e984 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 f942 	bl	800ebe4 <USBD_CtlSendStatus>
      break;
 800e960:	e010      	b.n	800e984 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 f93e 	bl	800ebe4 <USBD_CtlSendStatus>
      break;
 800e968:	e00c      	b.n	800e984 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e96a:	6839      	ldr	r1, [r7, #0]
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f8eb 	bl	800eb48 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e972:	4b07      	ldr	r3, [pc, #28]	; (800e990 <USBD_SetConfig+0x148>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	4619      	mov	r1, r3
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff f8f8 	bl	800db6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e97e:	2303      	movs	r3, #3
 800e980:	73fb      	strb	r3, [r7, #15]
      break;
 800e982:	bf00      	nop
  }

  return ret;
 800e984:	7bfb      	ldrb	r3, [r7, #15]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	2000030a 	.word	0x2000030a

0800e994 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	88db      	ldrh	r3, [r3, #6]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d004      	beq.n	800e9b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 f8cd 	bl	800eb48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e9ae:	e023      	b.n	800e9f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	dc02      	bgt.n	800e9c2 <USBD_GetConfig+0x2e>
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	dc03      	bgt.n	800e9c8 <USBD_GetConfig+0x34>
 800e9c0:	e015      	b.n	800e9ee <USBD_GetConfig+0x5a>
 800e9c2:	2b03      	cmp	r3, #3
 800e9c4:	d00b      	beq.n	800e9de <USBD_GetConfig+0x4a>
 800e9c6:	e012      	b.n	800e9ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f8c7 	bl	800eb6a <USBD_CtlSendData>
        break;
 800e9dc:	e00c      	b.n	800e9f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	3304      	adds	r3, #4
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 f8bf 	bl	800eb6a <USBD_CtlSendData>
        break;
 800e9ec:	e004      	b.n	800e9f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 f8a9 	bl	800eb48 <USBD_CtlError>
        break;
 800e9f6:	bf00      	nop
}
 800e9f8:	bf00      	nop
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	3b01      	subs	r3, #1
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	d81e      	bhi.n	800ea56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	88db      	ldrh	r3, [r3, #6]
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d004      	beq.n	800ea2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 f890 	bl	800eb48 <USBD_CtlError>
        break;
 800ea28:	e01a      	b.n	800ea60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d005      	beq.n	800ea46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	f043 0202 	orr.w	r2, r3, #2
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	330c      	adds	r3, #12
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 f88b 	bl	800eb6a <USBD_CtlSendData>
      break;
 800ea54:	e004      	b.n	800ea60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 f875 	bl	800eb48 <USBD_CtlError>
      break;
 800ea5e:	bf00      	nop
  }
}
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	885b      	ldrh	r3, [r3, #2]
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d106      	bne.n	800ea88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f8ae 	bl	800ebe4 <USBD_CtlSendStatus>
  }
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	2b02      	cmp	r3, #2
 800eaa6:	d80b      	bhi.n	800eac0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	885b      	ldrh	r3, [r3, #2]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d10c      	bne.n	800eaca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f893 	bl	800ebe4 <USBD_CtlSendStatus>
      }
      break;
 800eabe:	e004      	b.n	800eaca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f840 	bl	800eb48 <USBD_CtlError>
      break;
 800eac8:	e000      	b.n	800eacc <USBD_ClrFeature+0x3c>
      break;
 800eaca:	bf00      	nop
  }
}
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	781a      	ldrb	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	3301      	adds	r3, #1
 800eaee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	781a      	ldrb	r2, [r3, #0]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3301      	adds	r3, #1
 800eafc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eafe:	68f8      	ldr	r0, [r7, #12]
 800eb00:	f7ff fabc 	bl	800e07c <SWAPBYTE>
 800eb04:	4603      	mov	r3, r0
 800eb06:	461a      	mov	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	3301      	adds	r3, #1
 800eb16:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f7ff faaf 	bl	800e07c <SWAPBYTE>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f7ff faa2 	bl	800e07c <SWAPBYTE>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	80da      	strh	r2, [r3, #6]
}
 800eb40:	bf00      	nop
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb52:	2180      	movs	r1, #128	; 0x80
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7f4 fa89 	bl	800306c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7f4 fa85 	bl	800306c <USBD_LL_StallEP>
}
 800eb62:	bf00      	nop
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b084      	sub	sp, #16
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	60f8      	str	r0, [r7, #12]
 800eb72:	60b9      	str	r1, [r7, #8]
 800eb74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2202      	movs	r2, #2
 800eb7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	2100      	movs	r1, #0
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7f4 fad0 	bl	8003136 <USBD_LL_Transmit>

  return USBD_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	68ba      	ldr	r2, [r7, #8]
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f7f4 fabf 	bl	8003136 <USBD_LL_Transmit>

  return USBD_OK;
 800ebb8:	2300      	movs	r3, #0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	60f8      	str	r0, [r7, #12]
 800ebca:	60b9      	str	r1, [r7, #8]
 800ebcc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7f4 fac3 	bl	8003160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3710      	adds	r7, #16
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2204      	movs	r2, #4
 800ebf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7f4 fa9b 	bl	8003136 <USBD_LL_Transmit>

  return USBD_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2205      	movs	r2, #5
 800ec16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	2100      	movs	r1, #0
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f7f4 fa9d 	bl	8003160 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08c      	sub	sp, #48	; 0x30
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	603b      	str	r3, [r7, #0]
 800ec38:	4603      	mov	r3, r0
 800ec3a:	71fb      	strb	r3, [r7, #7]
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	71bb      	strb	r3, [r7, #6]
 800ec40:	4613      	mov	r3, r2
 800ec42:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800ec44:	79fb      	ldrb	r3, [r7, #7]
 800ec46:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800ec48:	79bb      	ldrb	r3, [r7, #6]
 800ec4a:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800ec4c:	797b      	ldrb	r3, [r7, #5]
 800ec4e:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ec50:	f107 030c 	add.w	r3, r7, #12
 800ec54:	2207      	movs	r2, #7
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f001 f979 	bl	800ff50 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec5e:	f107 0318 	add.w	r3, r7, #24
 800ec62:	2218      	movs	r2, #24
 800ec64:	2100      	movs	r1, #0
 800ec66:	4618      	mov	r0, r3
 800ec68:	f001 f972 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ec6c:	233f      	movs	r3, #63	; 0x3f
 800ec6e:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800ec70:	238a      	movs	r3, #138	; 0x8a
 800ec72:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800ec74:	f107 0314 	add.w	r3, r7, #20
 800ec78:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800ec7a:	2303      	movs	r3, #3
 800ec7c:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800ec7e:	f107 030c 	add.w	r3, r7, #12
 800ec82:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800ec84:	2307      	movs	r3, #7
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ec88:	f107 0318 	add.w	r3, r7, #24
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f000 fe7c 	bl	800f98c <hci_send_req>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	da01      	bge.n	800ec9e <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800ec9a:	23ff      	movs	r3, #255	; 0xff
 800ec9c:	e014      	b.n	800ecc8 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800ec9e:	7b3b      	ldrb	r3, [r7, #12]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800eca4:	7b3b      	ldrb	r3, [r7, #12]
 800eca6:	e00f      	b.n	800ecc8 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800eca8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800ecb2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800ecbc:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3730      	adds	r7, #48	; 0x30
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800ecd0:	b590      	push	{r4, r7, lr}
 800ecd2:	b095      	sub	sp, #84	; 0x54
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	4608      	mov	r0, r1
 800ecda:	4611      	mov	r1, r2
 800ecdc:	461a      	mov	r2, r3
 800ecde:	4623      	mov	r3, r4
 800ece0:	71fb      	strb	r3, [r7, #7]
 800ece2:	4603      	mov	r3, r0
 800ece4:	80bb      	strh	r3, [r7, #4]
 800ece6:	460b      	mov	r3, r1
 800ece8:	807b      	strh	r3, [r7, #2]
 800ecea:	4613      	mov	r3, r2
 800ecec:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800ecf4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800ecf8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ecfc:	4413      	add	r3, r2
 800ecfe:	330e      	adds	r3, #14
 800ed00:	2b28      	cmp	r3, #40	; 0x28
 800ed02:	d901      	bls.n	800ed08 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800ed04:	2342      	movs	r3, #66	; 0x42
 800ed06:	e0ce      	b.n	800eea6 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800ed08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ed10:	4413      	add	r3, r2
 800ed12:	79fa      	ldrb	r2, [r7, #7]
 800ed14:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ed18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800ed22:	88bb      	ldrh	r3, [r7, #4]
 800ed24:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800ed26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed2a:	f107 0208 	add.w	r2, r7, #8
 800ed2e:	4413      	add	r3, r2
 800ed30:	88ba      	ldrh	r2, [r7, #4]
 800ed32:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ed34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed38:	3302      	adds	r3, #2
 800ed3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800ed3e:	887b      	ldrh	r3, [r7, #2]
 800ed40:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800ed42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed46:	f107 0208 	add.w	r2, r7, #8
 800ed4a:	4413      	add	r3, r2
 800ed4c:	887a      	ldrh	r2, [r7, #2]
 800ed4e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ed50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed54:	3302      	adds	r3, #2
 800ed56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800ed5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ed62:	4413      	add	r3, r2
 800ed64:	79ba      	ldrb	r2, [r7, #6]
 800ed66:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ed6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed6e:	3301      	adds	r3, #1
 800ed70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800ed74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ed7c:	4413      	add	r3, r2
 800ed7e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ed82:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ed86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800ed90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed94:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ed98:	4413      	add	r3, r2
 800ed9a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800ed9e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800eda2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eda6:	3301      	adds	r3, #1
 800eda8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800edac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edb0:	f107 0208 	add.w	r2, r7, #8
 800edb4:	4413      	add	r3, r2
 800edb6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800edba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800edbc:	4618      	mov	r0, r3
 800edbe:	f001 f8b9 	bl	800ff34 <memcpy>
  indx +=  LocalNameLen;
 800edc2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800edc6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800edca:	4413      	add	r3, r2
 800edcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800edd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edd4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800edd8:	4413      	add	r3, r2
 800edda:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800edde:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ede2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ede6:	3301      	adds	r3, #1
 800ede8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800edec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edf0:	f107 0208 	add.w	r2, r7, #8
 800edf4:	4413      	add	r3, r2
 800edf6:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800edfa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800edfc:	4618      	mov	r0, r3
 800edfe:	f001 f899 	bl	800ff34 <memcpy>
  indx +=  ServiceUUIDLen;  
 800ee02:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ee06:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ee0a:	4413      	add	r3, r2
 800ee0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800ee10:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ee14:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800ee18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee1c:	f107 0208 	add.w	r2, r7, #8
 800ee20:	4413      	add	r3, r2
 800ee22:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800ee26:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ee28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee2c:	3302      	adds	r3, #2
 800ee2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800ee32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ee36:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800ee3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee3e:	f107 0208 	add.w	r2, r7, #8
 800ee42:	4413      	add	r3, r2
 800ee44:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800ee48:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800ee4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee4e:	3302      	adds	r3, #2
 800ee50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ee54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ee58:	2218      	movs	r2, #24
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f001 f877 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ee62:	233f      	movs	r3, #63	; 0x3f
 800ee64:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800ee66:	2383      	movs	r3, #131	; 0x83
 800ee68:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800ee6a:	f107 0308 	add.w	r3, r7, #8
 800ee6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800ee70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee74:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800ee76:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800ee7a:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800ee80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ee84:	2100      	movs	r1, #0
 800ee86:	4618      	mov	r0, r3
 800ee88:	f000 fd80 	bl	800f98c <hci_send_req>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	da01      	bge.n	800ee96 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800ee92:	23ff      	movs	r3, #255	; 0xff
 800ee94:	e007      	b.n	800eea6 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800ee96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d002      	beq.n	800eea4 <aci_gap_set_discoverable+0x1d4>
    return status;
 800ee9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eea2:	e000      	b.n	800eea6 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800eea4:	2300      	movs	r3, #0
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3754      	adds	r7, #84	; 0x54
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd90      	pop	{r4, r7, pc}

0800eeae <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800eeae:	b590      	push	{r4, r7, lr}
 800eeb0:	b091      	sub	sp, #68	; 0x44
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	603a      	str	r2, [r7, #0]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	4603      	mov	r3, r0
 800eeba:	71fb      	strb	r3, [r7, #7]
 800eebc:	460b      	mov	r3, r1
 800eebe:	71bb      	strb	r3, [r7, #6]
 800eec0:	4613      	mov	r3, r2
 800eec2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800eec4:	79fb      	ldrb	r3, [r7, #7]
 800eec6:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800eec8:	79bb      	ldrb	r3, [r7, #6]
 800eeca:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800eecc:	79bb      	ldrb	r3, [r7, #6]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00a      	beq.n	800eee8 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800eed2:	683a      	ldr	r2, [r7, #0]
 800eed4:	f107 030e 	add.w	r3, r7, #14
 800eed8:	6814      	ldr	r4, [r2, #0]
 800eeda:	6850      	ldr	r0, [r2, #4]
 800eedc:	6891      	ldr	r1, [r2, #8]
 800eede:	68d2      	ldr	r2, [r2, #12]
 800eee0:	601c      	str	r4, [r3, #0]
 800eee2:	6058      	str	r0, [r3, #4]
 800eee4:	6099      	str	r1, [r3, #8]
 800eee6:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800eee8:	797b      	ldrb	r3, [r7, #5]
 800eeea:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800eeec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800eef0:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800eef2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800eef6:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800eefa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eefc:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800ef00:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800ef04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ef08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef0c:	2218      	movs	r2, #24
 800ef0e:	2100      	movs	r1, #0
 800ef10:	4618      	mov	r0, r3
 800ef12:	f001 f81d 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ef16:	233f      	movs	r3, #63	; 0x3f
 800ef18:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800ef1a:	2386      	movs	r3, #134	; 0x86
 800ef1c:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800ef1e:	f107 030c 	add.w	r3, r7, #12
 800ef22:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800ef24:	231a      	movs	r3, #26
 800ef26:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800ef28:	f107 030b 	add.w	r3, r7, #11
 800ef2c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800ef32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef36:	2100      	movs	r1, #0
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 fd27 	bl	800f98c <hci_send_req>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	da01      	bge.n	800ef48 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800ef44:	23ff      	movs	r3, #255	; 0xff
 800ef46:	e005      	b.n	800ef54 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800ef48:	7afb      	ldrb	r3, [r7, #11]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800ef4e:	7afb      	ldrb	r3, [r7, #11]
 800ef50:	e000      	b.n	800ef54 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3744      	adds	r7, #68	; 0x44
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd90      	pop	{r4, r7, pc}

0800ef5c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b092      	sub	sp, #72	; 0x48
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	6039      	str	r1, [r7, #0]
 800ef66:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800ef6e:	79fb      	ldrb	r3, [r7, #7]
 800ef70:	2b1f      	cmp	r3, #31
 800ef72:	d901      	bls.n	800ef78 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800ef74:	2342      	movs	r3, #66	; 0x42
 800ef76:	e03f      	b.n	800eff8 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800ef78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ef80:	4413      	add	r3, r2
 800ef82:	79fa      	ldrb	r2, [r7, #7]
 800ef84:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800ef88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800ef92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef96:	f107 0208 	add.w	r2, r7, #8
 800ef9a:	4413      	add	r3, r2
 800ef9c:	79fa      	ldrb	r2, [r7, #7]
 800ef9e:	6839      	ldr	r1, [r7, #0]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 ffc7 	bl	800ff34 <memcpy>
  indx +=  AdvLen;
 800efa6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800efaa:	79fb      	ldrb	r3, [r7, #7]
 800efac:	4413      	add	r3, r2
 800efae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800efb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800efb6:	2218      	movs	r2, #24
 800efb8:	2100      	movs	r1, #0
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 ffc8 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800efc0:	233f      	movs	r3, #63	; 0x3f
 800efc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800efc4:	238e      	movs	r3, #142	; 0x8e
 800efc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800efc8:	f107 0308 	add.w	r3, r7, #8
 800efcc:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800efce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800efd2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800efd4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800efd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800efda:	2301      	movs	r3, #1
 800efdc:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800efde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800efe2:	2100      	movs	r1, #0
 800efe4:	4618      	mov	r0, r3
 800efe6:	f000 fcd1 	bl	800f98c <hci_send_req>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	da01      	bge.n	800eff4 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800eff0:	23ff      	movs	r3, #255	; 0xff
 800eff2:	e001      	b.n	800eff8 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800eff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3748      	adds	r7, #72	; 0x48
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b088      	sub	sp, #32
 800f004:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f006:	f107 0308 	add.w	r3, r7, #8
 800f00a:	2218      	movs	r2, #24
 800f00c:	2100      	movs	r1, #0
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 ff9e 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f014:	233f      	movs	r3, #63	; 0x3f
 800f016:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800f018:	f240 1301 	movw	r3, #257	; 0x101
 800f01c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f01e:	1dfb      	adds	r3, r7, #7
 800f020:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f022:	2301      	movs	r3, #1
 800f024:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800f026:	f107 0308 	add.w	r3, r7, #8
 800f02a:	2100      	movs	r1, #0
 800f02c:	4618      	mov	r0, r3
 800f02e:	f000 fcad 	bl	800f98c <hci_send_req>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	da01      	bge.n	800f03c <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800f038:	23ff      	movs	r3, #255	; 0xff
 800f03a:	e000      	b.n	800f03e <aci_gatt_init+0x3e>

  return status;
 800f03c:	79fb      	ldrb	r3, [r7, #7]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3720      	adds	r7, #32
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b090      	sub	sp, #64	; 0x40
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6039      	str	r1, [r7, #0]
 800f04e:	4611      	mov	r1, r2
 800f050:	461a      	mov	r2, r3
 800f052:	4603      	mov	r3, r0
 800f054:	71fb      	strb	r3, [r7, #7]
 800f056:	460b      	mov	r3, r1
 800f058:	71bb      	strb	r3, [r7, #6]
 800f05a:	4613      	mov	r3, r2
 800f05c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800f05e:	2300      	movs	r3, #0
 800f060:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800f064:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f068:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f06c:	4413      	add	r3, r2
 800f06e:	79fa      	ldrb	r2, [r7, #7]
 800f070:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f074:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f078:	3301      	adds	r3, #1
 800f07a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800f07e:	79fb      	ldrb	r3, [r7, #7]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d103      	bne.n	800f08c <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800f084:	2302      	movs	r3, #2
 800f086:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f08a:	e002      	b.n	800f092 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800f08c:	2310      	movs	r3, #16
 800f08e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800f092:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f096:	f107 020c 	add.w	r2, r7, #12
 800f09a:	4413      	add	r3, r2
 800f09c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 ff46 	bl	800ff34 <memcpy>
  indx +=  uuid_len;
 800f0a8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f0ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f0b0:	4413      	add	r3, r2
 800f0b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800f0b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f0be:	4413      	add	r3, r2
 800f0c0:	79ba      	ldrb	r2, [r7, #6]
 800f0c2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f0c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800f0d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f0d8:	4413      	add	r3, r2
 800f0da:	797a      	ldrb	r2, [r7, #5]
 800f0dc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f0e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f0ea:	f107 0320 	add.w	r3, r7, #32
 800f0ee:	2203      	movs	r2, #3
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 ff2c 	bl	800ff50 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f0f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0fc:	2218      	movs	r2, #24
 800f0fe:	2100      	movs	r1, #0
 800f100:	4618      	mov	r0, r3
 800f102:	f000 ff25 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f106:	233f      	movs	r3, #63	; 0x3f
 800f108:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800f10a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800f10e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800f110:	f107 030c 	add.w	r3, r7, #12
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800f116:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f11a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800f11c:	f107 0320 	add.w	r3, r7, #32
 800f120:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800f122:	2303      	movs	r3, #3
 800f124:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800f126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f12a:	2100      	movs	r1, #0
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fc2d 	bl	800f98c <hci_send_req>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	da01      	bge.n	800f13c <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f138:	23ff      	movs	r3, #255	; 0xff
 800f13a:	e00c      	b.n	800f156 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800f13c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <aci_gatt_add_serv+0x104>
    return resp.status;
 800f144:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f148:	e005      	b.n	800f156 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800f14a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800f14e:	b29a      	uxth	r2, r3
 800f150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f152:	801a      	strh	r2, [r3, #0]

  return 0;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3740      	adds	r7, #64	; 0x40
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b092      	sub	sp, #72	; 0x48
 800f162:	af00      	add	r7, sp, #0
 800f164:	603a      	str	r2, [r7, #0]
 800f166:	461a      	mov	r2, r3
 800f168:	4603      	mov	r3, r0
 800f16a:	80fb      	strh	r3, [r7, #6]
 800f16c:	460b      	mov	r3, r1
 800f16e:	717b      	strb	r3, [r7, #5]
 800f170:	4613      	mov	r3, r2
 800f172:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800f17a:	88fb      	ldrh	r3, [r7, #6]
 800f17c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800f17e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f182:	f107 020c 	add.w	r2, r7, #12
 800f186:	4413      	add	r3, r2
 800f188:	88fa      	ldrh	r2, [r7, #6]
 800f18a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f18c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f190:	3302      	adds	r3, #2
 800f192:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800f196:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f19a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f19e:	4413      	add	r3, r2
 800f1a0:	797a      	ldrb	r2, [r7, #5]
 800f1a2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f1a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800f1b0:	797b      	ldrb	r3, [r7, #5]
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	d103      	bne.n	800f1be <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800f1b6:	2302      	movs	r3, #2
 800f1b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f1bc:	e002      	b.n	800f1c4 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800f1be:	2310      	movs	r3, #16
 800f1c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800f1c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1c8:	f107 020c 	add.w	r2, r7, #12
 800f1cc:	4413      	add	r3, r2
 800f1ce:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800f1d2:	6839      	ldr	r1, [r7, #0]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 fead 	bl	800ff34 <memcpy>
  indx +=  uuid_len;
 800f1da:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800f1de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800f1e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f1f0:	4413      	add	r3, r2
 800f1f2:	793a      	ldrb	r2, [r7, #4]
 800f1f4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f1f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800f202:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f206:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f20a:	4413      	add	r3, r2
 800f20c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f210:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f214:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f218:	3301      	adds	r3, #1
 800f21a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800f21e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f222:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f226:	4413      	add	r3, r2
 800f228:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f22c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f230:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f234:	3301      	adds	r3, #1
 800f236:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800f23a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f23e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f242:	4413      	add	r3, r2
 800f244:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f248:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f24c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f250:	3301      	adds	r3, #1
 800f252:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800f256:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f25a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f25e:	4413      	add	r3, r2
 800f260:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f264:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f268:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f26c:	3301      	adds	r3, #1
 800f26e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800f272:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f276:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f27a:	4413      	add	r3, r2
 800f27c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f280:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f284:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f288:	3301      	adds	r3, #1
 800f28a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f28e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f292:	2203      	movs	r2, #3
 800f294:	2100      	movs	r1, #0
 800f296:	4618      	mov	r0, r3
 800f298:	f000 fe5a 	bl	800ff50 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f29c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2a0:	2218      	movs	r2, #24
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f000 fe53 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f2aa:	233f      	movs	r3, #63	; 0x3f
 800f2ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800f2ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f2b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800f2b4:	f107 030c 	add.w	r3, r7, #12
 800f2b8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800f2ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f2be:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800f2c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800f2ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f000 fb5b 	bl	800f98c <hci_send_req>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	da01      	bge.n	800f2e0 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800f2dc:	23ff      	movs	r3, #255	; 0xff
 800f2de:	e00c      	b.n	800f2fa <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800f2e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d002      	beq.n	800f2ee <aci_gatt_add_char+0x190>
    return resp.status;
 800f2e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2ec:	e005      	b.n	800f2fa <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800f2ee:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2f6:	801a      	strh	r2, [r3, #0]

  return 0;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3748      	adds	r7, #72	; 0x48
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800f302:	b590      	push	{r4, r7, lr}
 800f304:	b0ab      	sub	sp, #172	; 0xac
 800f306:	af00      	add	r7, sp, #0
 800f308:	4604      	mov	r4, r0
 800f30a:	4608      	mov	r0, r1
 800f30c:	4611      	mov	r1, r2
 800f30e:	461a      	mov	r2, r3
 800f310:	4623      	mov	r3, r4
 800f312:	80fb      	strh	r3, [r7, #6]
 800f314:	4603      	mov	r3, r0
 800f316:	80bb      	strh	r3, [r7, #4]
 800f318:	460b      	mov	r3, r1
 800f31a:	70fb      	strb	r3, [r7, #3]
 800f31c:	4613      	mov	r3, r2
 800f31e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800f320:	2300      	movs	r3, #0
 800f322:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800f326:	78bb      	ldrb	r3, [r7, #2]
 800f328:	2b7a      	cmp	r3, #122	; 0x7a
 800f32a:	d901      	bls.n	800f330 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800f32c:	2342      	movs	r3, #66	; 0x42
 800f32e:	e076      	b.n	800f41e <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 800f330:	88fb      	ldrh	r3, [r7, #6]
 800f332:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800f334:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f338:	f107 0208 	add.w	r2, r7, #8
 800f33c:	4413      	add	r3, r2
 800f33e:	88fa      	ldrh	r2, [r7, #6]
 800f340:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f342:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f346:	3302      	adds	r3, #2
 800f348:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800f34c:	88bb      	ldrh	r3, [r7, #4]
 800f34e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800f350:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f354:	f107 0208 	add.w	r2, r7, #8
 800f358:	4413      	add	r3, r2
 800f35a:	88ba      	ldrh	r2, [r7, #4]
 800f35c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f35e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f362:	3302      	adds	r3, #2
 800f364:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800f368:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f36c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f370:	4413      	add	r3, r2
 800f372:	78fa      	ldrb	r2, [r7, #3]
 800f374:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f378:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f37c:	3301      	adds	r3, #1
 800f37e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800f382:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f386:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f38a:	4413      	add	r3, r2
 800f38c:	78ba      	ldrb	r2, [r7, #2]
 800f38e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f392:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f396:	3301      	adds	r3, #1
 800f398:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800f39c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f3a0:	f107 0208 	add.w	r2, r7, #8
 800f3a4:	4413      	add	r3, r2
 800f3a6:	78ba      	ldrb	r2, [r7, #2]
 800f3a8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f000 fdc1 	bl	800ff34 <memcpy>
  indx +=  charValueLen;
 800f3b2:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800f3b6:	78bb      	ldrb	r3, [r7, #2]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f3be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f3c2:	2218      	movs	r2, #24
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 fdc2 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f3cc:	233f      	movs	r3, #63	; 0x3f
 800f3ce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800f3d2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800f3d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800f3da:	f107 0308 	add.w	r3, r7, #8
 800f3de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800f3e2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f3e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800f3ea:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800f3ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800f3f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f000 fac4 	bl	800f98c <hci_send_req>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	da01      	bge.n	800f40e <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 800f40a:	23ff      	movs	r3, #255	; 0xff
 800f40c:	e007      	b.n	800f41e <aci_gatt_update_char_value+0x11c>

  if (status) {
 800f40e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f412:	2b00      	cmp	r3, #0
 800f414:	d002      	beq.n	800f41c <aci_gatt_update_char_value+0x11a>
    return status;
 800f416:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f41a:	e000      	b.n	800f41e <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	37ac      	adds	r7, #172	; 0xac
 800f422:	46bd      	mov	sp, r7
 800f424:	bd90      	pop	{r4, r7, pc}

0800f426 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b08a      	sub	sp, #40	; 0x28
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	4603      	mov	r3, r0
 800f42e:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800f430:	88fb      	ldrh	r3, [r7, #6]
 800f432:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800f434:	f107 0310 	add.w	r3, r7, #16
 800f438:	2218      	movs	r2, #24
 800f43a:	2100      	movs	r1, #0
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 fd87 	bl	800ff50 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800f442:	233f      	movs	r3, #63	; 0x3f
 800f444:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800f446:	f240 1327 	movw	r3, #295	; 0x127
 800f44a:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800f44c:	f107 030c 	add.w	r3, r7, #12
 800f450:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800f452:	2302      	movs	r3, #2
 800f454:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800f456:	f107 030b 	add.w	r3, r7, #11
 800f45a:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800f45c:	2301      	movs	r3, #1
 800f45e:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800f460:	f107 0310 	add.w	r3, r7, #16
 800f464:	2100      	movs	r1, #0
 800f466:	4618      	mov	r0, r3
 800f468:	f000 fa90 	bl	800f98c <hci_send_req>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	da01      	bge.n	800f476 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800f472:	23ff      	movs	r3, #255	; 0xff
 800f474:	e000      	b.n	800f478 <aci_gatt_allow_read+0x52>

    return status;
 800f476:	7afb      	ldrb	r3, [r7, #11]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3728      	adds	r7, #40	; 0x28
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b0aa      	sub	sp, #168	; 0xa8
 800f484:	af00      	add	r7, sp, #0
 800f486:	4603      	mov	r3, r0
 800f488:	603a      	str	r2, [r7, #0]
 800f48a:	71fb      	strb	r3, [r7, #7]
 800f48c:	460b      	mov	r3, r1
 800f48e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800f496:	79bb      	ldrb	r3, [r7, #6]
 800f498:	2b7e      	cmp	r3, #126	; 0x7e
 800f49a:	d901      	bls.n	800f4a0 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 800f49c:	2342      	movs	r3, #66	; 0x42
 800f49e:	e052      	b.n	800f546 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 800f4a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f4a8:	4413      	add	r3, r2
 800f4aa:	79fa      	ldrb	r2, [r7, #7]
 800f4ac:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f4b0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800f4ba:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4be:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f4c2:	4413      	add	r3, r2
 800f4c4:	79ba      	ldrb	r2, [r7, #6]
 800f4c6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f4ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800f4d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4d8:	f107 0208 	add.w	r2, r7, #8
 800f4dc:	4413      	add	r3, r2
 800f4de:	79ba      	ldrb	r2, [r7, #6]
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 fd26 	bl	800ff34 <memcpy>
  indx +=  len;
 800f4e8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800f4ec:	79bb      	ldrb	r3, [r7, #6]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f4f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f4f8:	2218      	movs	r2, #24
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 fd27 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f502:	233f      	movs	r3, #63	; 0x3f
 800f504:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800f508:	230c      	movs	r3, #12
 800f50a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800f50e:	f107 0308 	add.w	r3, r7, #8
 800f512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800f516:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f51a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800f51e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800f522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800f526:	2301      	movs	r3, #1
 800f528:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800f52c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f530:	2100      	movs	r1, #0
 800f532:	4618      	mov	r0, r3
 800f534:	f000 fa2a 	bl	800f98c <hci_send_req>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	da01      	bge.n	800f542 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800f53e:	23ff      	movs	r3, #255	; 0xff
 800f540:	e001      	b.n	800f546 <aci_hal_write_config_data+0xc6>

  return status;
 800f542:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 800f546:	4618      	mov	r0, r3
 800f548:	37a8      	adds	r7, #168	; 0xa8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b08a      	sub	sp, #40	; 0x28
 800f552:	af00      	add	r7, sp, #0
 800f554:	4603      	mov	r3, r0
 800f556:	460a      	mov	r2, r1
 800f558:	71fb      	strb	r3, [r7, #7]
 800f55a:	4613      	mov	r3, r2
 800f55c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800f55e:	79fb      	ldrb	r3, [r7, #7]
 800f560:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800f562:	79bb      	ldrb	r3, [r7, #6]
 800f564:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f566:	f107 0310 	add.w	r3, r7, #16
 800f56a:	2218      	movs	r2, #24
 800f56c:	2100      	movs	r1, #0
 800f56e:	4618      	mov	r0, r3
 800f570:	f000 fcee 	bl	800ff50 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f574:	233f      	movs	r3, #63	; 0x3f
 800f576:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800f578:	230f      	movs	r3, #15
 800f57a:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800f57c:	f107 030c 	add.w	r3, r7, #12
 800f580:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800f582:	2302      	movs	r3, #2
 800f584:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800f586:	f107 030b 	add.w	r3, r7, #11
 800f58a:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800f58c:	2301      	movs	r3, #1
 800f58e:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800f590:	f107 0310 	add.w	r3, r7, #16
 800f594:	2100      	movs	r1, #0
 800f596:	4618      	mov	r0, r3
 800f598:	f000 f9f8 	bl	800f98c <hci_send_req>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	da01      	bge.n	800f5a6 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800f5a2:	23ff      	movs	r3, #255	; 0xff
 800f5a4:	e000      	b.n	800f5a8 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800f5a6:	7afb      	ldrb	r3, [r7, #11]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3728      	adds	r7, #40	; 0x28
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800f5b0:	b590      	push	{r4, r7, lr}
 800f5b2:	b089      	sub	sp, #36	; 0x24
 800f5b4:	af02      	add	r7, sp, #8
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800f5ba:	f107 0410 	add.w	r4, r7, #16
 800f5be:	f107 0215 	add.w	r2, r7, #21
 800f5c2:	f107 0112 	add.w	r1, r7, #18
 800f5c6:	f107 0016 	add.w	r0, r7, #22
 800f5ca:	f107 030e 	add.w	r3, r7, #14
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	4623      	mov	r3, r4
 800f5d2:	f000 f853 	bl	800f67c <hci_le_read_local_version>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800f5da:	7dfb      	ldrb	r3, [r7, #23]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d126      	bne.n	800f62e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800f5e0:	8a7b      	ldrh	r3, [r7, #18]
 800f5e2:	0a1b      	lsrs	r3, r3, #8
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800f5ec:	8a7b      	ldrh	r3, [r7, #18]
 800f5ee:	021b      	lsls	r3, r3, #8
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	b21a      	sxth	r2, r3
 800f5fc:	89fb      	ldrh	r3, [r7, #14]
 800f5fe:	091b      	lsrs	r3, r3, #4
 800f600:	b29b      	uxth	r3, r3
 800f602:	011b      	lsls	r3, r3, #4
 800f604:	b21b      	sxth	r3, r3
 800f606:	b2db      	uxtb	r3, r3
 800f608:	b21b      	sxth	r3, r3
 800f60a:	4313      	orrs	r3, r2
 800f60c:	b21b      	sxth	r3, r3
 800f60e:	b29a      	uxth	r2, r3
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	b21a      	sxth	r2, r3
 800f61a:	89fb      	ldrh	r3, [r7, #14]
 800f61c:	b21b      	sxth	r3, r3
 800f61e:	f003 030f 	and.w	r3, r3, #15
 800f622:	b21b      	sxth	r3, r3
 800f624:	4313      	orrs	r3, r2
 800f626:	b21b      	sxth	r3, r3
 800f628:	b29a      	uxth	r2, r3
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800f62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f630:	4618      	mov	r0, r3
 800f632:	371c      	adds	r7, #28
 800f634:	46bd      	mov	sp, r7
 800f636:	bd90      	pop	{r4, r7, pc}

0800f638 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b088      	sub	sp, #32
 800f63c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f63e:	f107 0308 	add.w	r3, r7, #8
 800f642:	2218      	movs	r2, #24
 800f644:	2100      	movs	r1, #0
 800f646:	4618      	mov	r0, r3
 800f648:	f000 fc82 	bl	800ff50 <memset>
  rq.ogf = OGF_HOST_CTL;
 800f64c:	2303      	movs	r3, #3
 800f64e:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800f650:	2303      	movs	r3, #3
 800f652:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f654:	1dfb      	adds	r3, r7, #7
 800f656:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f658:	2301      	movs	r3, #1
 800f65a:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f65c:	f107 0308 	add.w	r3, r7, #8
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f000 f992 	bl	800f98c <hci_send_req>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	da01      	bge.n	800f672 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800f66e:	23ff      	movs	r3, #255	; 0xff
 800f670:	e000      	b.n	800f674 <hci_reset+0x3c>
  
  return status;  
 800f672:	79fb      	ldrb	r3, [r7, #7]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3720      	adds	r7, #32
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b08e      	sub	sp, #56	; 0x38
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
 800f688:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f68a:	f107 0314 	add.w	r3, r7, #20
 800f68e:	2209      	movs	r2, #9
 800f690:	2100      	movs	r1, #0
 800f692:	4618      	mov	r0, r3
 800f694:	f000 fc5c 	bl	800ff50 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f698:	f107 0320 	add.w	r3, r7, #32
 800f69c:	2218      	movs	r2, #24
 800f69e:	2100      	movs	r1, #0
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f000 fc55 	bl	800ff50 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800f6a6:	2304      	movs	r3, #4
 800f6a8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800f6b6:	f107 0314 	add.w	r3, r7, #20
 800f6ba:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800f6bc:	2309      	movs	r3, #9
 800f6be:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f6c0:	f107 0320 	add.w	r3, r7, #32
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f000 f960 	bl	800f98c <hci_send_req>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	da01      	bge.n	800f6d6 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800f6d2:	23ff      	movs	r3, #255	; 0xff
 800f6d4:	e018      	b.n	800f708 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800f6d6:	7d3b      	ldrb	r3, [r7, #20]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <hci_le_read_local_version+0x64>
    return resp.status;
 800f6dc:	7d3b      	ldrb	r3, [r7, #20]
 800f6de:	e013      	b.n	800f708 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800f6e0:	7d7a      	ldrb	r2, [r7, #21]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800f6e6:	8afa      	ldrh	r2, [r7, #22]
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800f6ec:	7e3a      	ldrb	r2, [r7, #24]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800f6f2:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800f6fc:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800f700:	b29a      	uxth	r2, r3
 800f702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f704:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800f706:	2300      	movs	r3, #0
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3738      	adds	r7, #56	; 0x38
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b092      	sub	sp, #72	; 0x48
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	6039      	str	r1, [r7, #0]
 800f71a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800f71c:	f107 0310 	add.w	r3, r7, #16
 800f720:	2220      	movs	r2, #32
 800f722:	2100      	movs	r1, #0
 800f724:	4618      	mov	r0, r3
 800f726:	f000 fc13 	bl	800ff50 <memset>
  scan_resp_cp.length = length;
 800f72a:	79fb      	ldrb	r3, [r7, #7]
 800f72c:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800f72e:	79fb      	ldrb	r3, [r7, #7]
 800f730:	2b1f      	cmp	r3, #31
 800f732:	bf28      	it	cs
 800f734:	231f      	movcs	r3, #31
 800f736:	b2db      	uxtb	r3, r3
 800f738:	461a      	mov	r2, r3
 800f73a:	f107 0310 	add.w	r3, r7, #16
 800f73e:	3301      	adds	r3, #1
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	4618      	mov	r0, r3
 800f744:	f000 fbf6 	bl	800ff34 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f748:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f74c:	2218      	movs	r2, #24
 800f74e:	2100      	movs	r1, #0
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fbfd 	bl	800ff50 <memset>
  rq.ogf = OGF_LE_CTL;
 800f756:	2308      	movs	r3, #8
 800f758:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800f75a:	2309      	movs	r3, #9
 800f75c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800f75e:	f107 0310 	add.w	r3, r7, #16
 800f762:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800f764:	2320      	movs	r3, #32
 800f766:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800f768:	f107 030f 	add.w	r3, r7, #15
 800f76c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800f76e:	2301      	movs	r3, #1
 800f770:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f776:	2100      	movs	r1, #0
 800f778:	4618      	mov	r0, r3
 800f77a:	f000 f907 	bl	800f98c <hci_send_req>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	da01      	bge.n	800f788 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800f784:	23ff      	movs	r3, #255	; 0xff
 800f786:	e000      	b.n	800f78a <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800f788:	7bfb      	ldrb	r3, [r7, #15]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3748      	adds	r7, #72	; 0x48
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800f792:	b480      	push	{r7}
 800f794:	b085      	sub	sp, #20
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	3308      	adds	r3, #8
 800f79e:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b04      	cmp	r3, #4
 800f7a6:	d001      	beq.n	800f7ac <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e00c      	b.n	800f7c6 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3302      	adds	r3, #2
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f7ba:	3b03      	subs	r3, #3
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d001      	beq.n	800f7c4 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	e000      	b.n	800f7c6 <verify_packet+0x34>
  
  return 0;      
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3714      	adds	r7, #20
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
	...

0800f7d4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b0a6      	sub	sp, #152	; 0x98
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	607b      	str	r3, [r7, #4]
 800f7dc:	4603      	mov	r3, r0
 800f7de:	81fb      	strh	r3, [r7, #14]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	81bb      	strh	r3, [r7, #12]
 800f7e4:	4613      	mov	r3, r2
 800f7e6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f7e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7f0:	b21a      	sxth	r2, r3
 800f7f2:	89fb      	ldrh	r3, [r7, #14]
 800f7f4:	029b      	lsls	r3, r3, #10
 800f7f6:	b21b      	sxth	r3, r3
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	b21b      	sxth	r3, r3
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800f800:	7afb      	ldrb	r3, [r7, #11]
 800f802:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800f804:	2301      	movs	r3, #1
 800f806:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f808:	f107 0318 	add.w	r3, r7, #24
 800f80c:	3301      	adds	r3, #1
 800f80e:	461a      	mov	r2, r3
 800f810:	f107 0314 	add.w	r3, r7, #20
 800f814:	8819      	ldrh	r1, [r3, #0]
 800f816:	789b      	ldrb	r3, [r3, #2]
 800f818:	8011      	strh	r1, [r2, #0]
 800f81a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f81c:	f107 0318 	add.w	r3, r7, #24
 800f820:	3304      	adds	r3, #4
 800f822:	7afa      	ldrb	r2, [r7, #11]
 800f824:	6879      	ldr	r1, [r7, #4]
 800f826:	4618      	mov	r0, r3
 800f828:	f000 fb84 	bl	800ff34 <memcpy>
  
  if (hciContext.io.Send)
 800f82c:	4b08      	ldr	r3, [pc, #32]	; (800f850 <send_cmd+0x7c>)
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d009      	beq.n	800f848 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800f834:	4b06      	ldr	r3, [pc, #24]	; (800f850 <send_cmd+0x7c>)
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	7afa      	ldrb	r2, [r7, #11]
 800f83a:	b292      	uxth	r2, r2
 800f83c:	3204      	adds	r2, #4
 800f83e:	b291      	uxth	r1, r2
 800f840:	f107 0218 	add.w	r2, r7, #24
 800f844:	4610      	mov	r0, r2
 800f846:	4798      	blx	r3
  }
}
 800f848:	bf00      	nop
 800f84a:	3798      	adds	r7, #152	; 0x98
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	200005c8 	.word	0x200005c8

0800f854 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800f85e:	e00a      	b.n	800f876 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800f860:	f107 030c 	add.w	r3, r7, #12
 800f864:	4619      	mov	r1, r3
 800f866:	6838      	ldr	r0, [r7, #0]
 800f868:	f000 faea 	bl	800fe40 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4619      	mov	r1, r3
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fa51 	bl	800fd18 <list_insert_head>
  while (!list_is_empty(src_list))
 800f876:	6838      	ldr	r0, [r7, #0]
 800f878:	f000 fa2c 	bl	800fcd4 <list_is_empty>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d0ee      	beq.n	800f860 <move_list+0xc>
  }
}
 800f882:	bf00      	nop
 800f884:	bf00      	nop
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f892:	e009      	b.n	800f8a8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800f894:	1d3b      	adds	r3, r7, #4
 800f896:	4619      	mov	r1, r3
 800f898:	4809      	ldr	r0, [pc, #36]	; (800f8c0 <free_event_list+0x34>)
 800f89a:	f000 faaa 	bl	800fdf2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	4808      	ldr	r0, [pc, #32]	; (800f8c4 <free_event_list+0x38>)
 800f8a4:	f000 fa5e 	bl	800fd64 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f8a8:	4806      	ldr	r0, [pc, #24]	; (800f8c4 <free_event_list+0x38>)
 800f8aa:	f000 faf0 	bl	800fe8e <list_get_size>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	ddef      	ble.n	800f894 <free_event_list+0x8>
  }
}
 800f8b4:	bf00      	nop
 800f8b6:	bf00      	nop
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	200028a4 	.word	0x200028a4
 800f8c4:	2000289c 	.word	0x2000289c

0800f8c8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d002      	beq.n	800f8de <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800f8d8:	4a18      	ldr	r2, [pc, #96]	; (800f93c <hci_init+0x74>)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800f8de:	4818      	ldr	r0, [pc, #96]	; (800f940 <hci_init+0x78>)
 800f8e0:	f000 f9e8 	bl	800fcb4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800f8e4:	4817      	ldr	r0, [pc, #92]	; (800f944 <hci_init+0x7c>)
 800f8e6:	f000 f9e5 	bl	800fcb4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800f8ea:	f7f1 f8bb 	bl	8000a64 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	73fb      	strb	r3, [r7, #15]
 800f8f2:	e00c      	b.n	800f90e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f8f4:	7bfb      	ldrb	r3, [r7, #15]
 800f8f6:	228c      	movs	r2, #140	; 0x8c
 800f8f8:	fb02 f303 	mul.w	r3, r2, r3
 800f8fc:	4a12      	ldr	r2, [pc, #72]	; (800f948 <hci_init+0x80>)
 800f8fe:	4413      	add	r3, r2
 800f900:	4619      	mov	r1, r3
 800f902:	480f      	ldr	r0, [pc, #60]	; (800f940 <hci_init+0x78>)
 800f904:	f000 fa2e 	bl	800fd64 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f908:	7bfb      	ldrb	r3, [r7, #15]
 800f90a:	3301      	adds	r3, #1
 800f90c:	73fb      	strb	r3, [r7, #15]
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	2b04      	cmp	r3, #4
 800f912:	d9ef      	bls.n	800f8f4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800f914:	4b09      	ldr	r3, [pc, #36]	; (800f93c <hci_init+0x74>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d003      	beq.n	800f924 <hci_init+0x5c>
 800f91c:	4b07      	ldr	r3, [pc, #28]	; (800f93c <hci_init+0x74>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2000      	movs	r0, #0
 800f922:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f924:	4b05      	ldr	r3, [pc, #20]	; (800f93c <hci_init+0x74>)
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d002      	beq.n	800f932 <hci_init+0x6a>
 800f92c:	4b03      	ldr	r3, [pc, #12]	; (800f93c <hci_init+0x74>)
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	4798      	blx	r3
}
 800f932:	bf00      	nop
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	200005c8 	.word	0x200005c8
 800f940:	2000289c 	.word	0x2000289c
 800f944:	200028a4 	.word	0x200028a4
 800f948:	2000030c 	.word	0x2000030c

0800f94c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a0b      	ldr	r2, [pc, #44]	; (800f988 <hci_register_io_bus+0x3c>)
 800f95a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	4a09      	ldr	r2, [pc, #36]	; (800f988 <hci_register_io_bus+0x3c>)
 800f962:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	691b      	ldr	r3, [r3, #16]
 800f968:	4a07      	ldr	r2, [pc, #28]	; (800f988 <hci_register_io_bus+0x3c>)
 800f96a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	699b      	ldr	r3, [r3, #24]
 800f970:	4a05      	ldr	r2, [pc, #20]	; (800f988 <hci_register_io_bus+0x3c>)
 800f972:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	4a03      	ldr	r2, [pc, #12]	; (800f988 <hci_register_io_bus+0x3c>)
 800f97a:	6093      	str	r3, [r2, #8]
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	200005c8 	.word	0x200005c8

0800f98c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08e      	sub	sp, #56	; 0x38
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	460b      	mov	r3, r1
 800f996:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	885b      	ldrh	r3, [r3, #2]
 800f99c:	b21b      	sxth	r3, r3
 800f99e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9a2:	b21a      	sxth	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	029b      	lsls	r3, r3, #10
 800f9aa:	b21b      	sxth	r3, r3
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	b21b      	sxth	r3, r3
 800f9b0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800f9b6:	f107 0308 	add.w	r3, r7, #8
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f000 f97a 	bl	800fcb4 <list_init_head>

  free_event_list();
 800f9c0:	f7ff ff64 	bl	800f88c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	8818      	ldrh	r0, [r3, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	8859      	ldrh	r1, [r3, #2]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	f7ff fefd 	bl	800f7d4 <send_cmd>
  
  if (async)
 800f9da:	78fb      	ldrb	r3, [r7, #3]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d001      	beq.n	800f9e4 <hci_send_req+0x58>
  {
    return 0;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	e0e5      	b.n	800fbb0 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800f9e4:	f7f6 fa16 	bl	8005e14 <HAL_GetTick>
 800f9e8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f9ea:	f7f6 fa13 	bl	8005e14 <HAL_GetTick>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f9f8:	f200 80b6 	bhi.w	800fb68 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800f9fc:	486e      	ldr	r0, [pc, #440]	; (800fbb8 <hci_send_req+0x22c>)
 800f9fe:	f000 f969 	bl	800fcd4 <list_is_empty>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d000      	beq.n	800fa0a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800fa08:	e7ef      	b.n	800f9ea <hci_send_req+0x5e>
      {
        break;
 800fa0a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800fa0c:	f107 0310 	add.w	r3, r7, #16
 800fa10:	4619      	mov	r1, r3
 800fa12:	4869      	ldr	r0, [pc, #420]	; (800fbb8 <hci_send_req+0x22c>)
 800fa14:	f000 f9ed 	bl	800fdf2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	3308      	adds	r3, #8
 800fa1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	2b04      	cmp	r3, #4
 800fa24:	d17b      	bne.n	800fb1e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800fa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa28:	3301      	adds	r3, #1
 800fa2a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	3308      	adds	r3, #8
 800fa30:	3303      	adds	r3, #3
 800fa32:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fa3a:	3b03      	subs	r3, #3
 800fa3c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800fa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	2b3e      	cmp	r3, #62	; 0x3e
 800fa44:	d04d      	beq.n	800fae2 <hci_send_req+0x156>
 800fa46:	2b3e      	cmp	r3, #62	; 0x3e
 800fa48:	dc6b      	bgt.n	800fb22 <hci_send_req+0x196>
 800fa4a:	2b10      	cmp	r3, #16
 800fa4c:	f000 808e 	beq.w	800fb6c <hci_send_req+0x1e0>
 800fa50:	2b10      	cmp	r3, #16
 800fa52:	dc66      	bgt.n	800fb22 <hci_send_req+0x196>
 800fa54:	2b0e      	cmp	r3, #14
 800fa56:	d024      	beq.n	800faa2 <hci_send_req+0x116>
 800fa58:	2b0f      	cmp	r3, #15
 800fa5a:	d162      	bne.n	800fb22 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	885b      	ldrh	r3, [r3, #2]
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	f040 8081 	bne.w	800fb70 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	2b0f      	cmp	r3, #15
 800fa74:	d004      	beq.n	800fa80 <hci_send_req+0xf4>
          if (cs->status) {
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d053      	beq.n	800fb26 <hci_send_req+0x19a>
            goto failed;
 800fa7e:	e07a      	b.n	800fb76 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	695a      	ldr	r2, [r3, #20]
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	bf28      	it	cs
 800fa8a:	461a      	movcs	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6918      	ldr	r0, [r3, #16]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	695b      	ldr	r3, [r3, #20]
 800fa98:	461a      	mov	r2, r3
 800fa9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa9c:	f000 fa4a 	bl	800ff34 <memcpy>
        goto done;
 800faa0:	e07a      	b.n	800fb98 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800faac:	b29b      	uxth	r3, r3
 800faae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d15f      	bne.n	800fb74 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	3303      	adds	r3, #3
 800fab8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800faba:	6a3b      	ldr	r3, [r7, #32]
 800fabc:	3b03      	subs	r3, #3
 800fabe:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	695a      	ldr	r2, [r3, #20]
 800fac4:	6a3b      	ldr	r3, [r7, #32]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	bf28      	it	cs
 800faca:	461a      	movcs	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6918      	ldr	r0, [r3, #16]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	695b      	ldr	r3, [r3, #20]
 800fad8:	461a      	mov	r2, r3
 800fada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fadc:	f000 fa2a 	bl	800ff34 <memcpy>
        goto done;
 800fae0:	e05a      	b.n	800fb98 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800fae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	461a      	mov	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d11a      	bne.n	800fb2a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800faf4:	6a3b      	ldr	r3, [r7, #32]
 800faf6:	3b01      	subs	r3, #1
 800faf8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	695a      	ldr	r2, [r3, #20]
 800fafe:	6a3b      	ldr	r3, [r7, #32]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	bf28      	it	cs
 800fb04:	461a      	movcs	r2, r3
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6918      	ldr	r0, [r3, #16]
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	1c59      	adds	r1, r3, #1
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	695b      	ldr	r3, [r3, #20]
 800fb16:	461a      	mov	r2, r3
 800fb18:	f000 fa0c 	bl	800ff34 <memcpy>
        goto done;
 800fb1c:	e03c      	b.n	800fb98 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800fb1e:	bf00      	nop
 800fb20:	e004      	b.n	800fb2c <hci_send_req+0x1a0>
        break;
 800fb22:	bf00      	nop
 800fb24:	e002      	b.n	800fb2c <hci_send_req+0x1a0>
          break;
 800fb26:	bf00      	nop
 800fb28:	e000      	b.n	800fb2c <hci_send_req+0x1a0>
          break;
 800fb2a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800fb2c:	4823      	ldr	r0, [pc, #140]	; (800fbbc <hci_send_req+0x230>)
 800fb2e:	f000 f8d1 	bl	800fcd4 <list_is_empty>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00d      	beq.n	800fb54 <hci_send_req+0x1c8>
 800fb38:	481f      	ldr	r0, [pc, #124]	; (800fbb8 <hci_send_req+0x22c>)
 800fb3a:	f000 f8cb 	bl	800fcd4 <list_is_empty>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d007      	beq.n	800fb54 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	4619      	mov	r1, r3
 800fb48:	481c      	ldr	r0, [pc, #112]	; (800fbbc <hci_send_req+0x230>)
 800fb4a:	f000 f90b 	bl	800fd64 <list_insert_tail>
      hciReadPacket=NULL;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	613b      	str	r3, [r7, #16]
 800fb52:	e008      	b.n	800fb66 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800fb54:	693a      	ldr	r2, [r7, #16]
 800fb56:	f107 0308 	add.w	r3, r7, #8
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 f901 	bl	800fd64 <list_insert_tail>
      hciReadPacket=NULL;
 800fb62:	2300      	movs	r3, #0
 800fb64:	613b      	str	r3, [r7, #16]
  {
 800fb66:	e73d      	b.n	800f9e4 <hci_send_req+0x58>
        goto failed;
 800fb68:	bf00      	nop
 800fb6a:	e004      	b.n	800fb76 <hci_send_req+0x1ea>
        goto failed;
 800fb6c:	bf00      	nop
 800fb6e:	e002      	b.n	800fb76 <hci_send_req+0x1ea>
          goto failed;
 800fb70:	bf00      	nop
 800fb72:	e000      	b.n	800fb76 <hci_send_req+0x1ea>
          goto failed;
 800fb74:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d004      	beq.n	800fb86 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	4619      	mov	r1, r3
 800fb80:	480e      	ldr	r0, [pc, #56]	; (800fbbc <hci_send_req+0x230>)
 800fb82:	f000 f8c9 	bl	800fd18 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fb86:	f107 0308 	add.w	r3, r7, #8
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	480a      	ldr	r0, [pc, #40]	; (800fbb8 <hci_send_req+0x22c>)
 800fb8e:	f7ff fe61 	bl	800f854 <move_list>

  return -1;
 800fb92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb96:	e00b      	b.n	800fbb0 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4807      	ldr	r0, [pc, #28]	; (800fbbc <hci_send_req+0x230>)
 800fb9e:	f000 f8bb 	bl	800fd18 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fba2:	f107 0308 	add.w	r3, r7, #8
 800fba6:	4619      	mov	r1, r3
 800fba8:	4803      	ldr	r0, [pc, #12]	; (800fbb8 <hci_send_req+0x22c>)
 800fbaa:	f7ff fe53 	bl	800f854 <move_list>

  return 0;
 800fbae:	2300      	movs	r3, #0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3738      	adds	r7, #56	; 0x38
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	200028a4 	.word	0x200028a4
 800fbbc:	2000289c 	.word	0x2000289c

0800fbc0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800fbca:	e013      	b.n	800fbf4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800fbcc:	1d3b      	adds	r3, r7, #4
 800fbce:	4619      	mov	r1, r3
 800fbd0:	480e      	ldr	r0, [pc, #56]	; (800fc0c <hci_user_evt_proc+0x4c>)
 800fbd2:	f000 f90e 	bl	800fdf2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800fbd6:	4b0e      	ldr	r3, [pc, #56]	; (800fc10 <hci_user_evt_proc+0x50>)
 800fbd8:	69db      	ldr	r3, [r3, #28]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d005      	beq.n	800fbea <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800fbde:	4b0c      	ldr	r3, [pc, #48]	; (800fc10 <hci_user_evt_proc+0x50>)
 800fbe0:	69db      	ldr	r3, [r3, #28]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	3208      	adds	r2, #8
 800fbe6:	4610      	mov	r0, r2
 800fbe8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4619      	mov	r1, r3
 800fbee:	4809      	ldr	r0, [pc, #36]	; (800fc14 <hci_user_evt_proc+0x54>)
 800fbf0:	f000 f8b8 	bl	800fd64 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800fbf4:	4805      	ldr	r0, [pc, #20]	; (800fc0c <hci_user_evt_proc+0x4c>)
 800fbf6:	f000 f86d 	bl	800fcd4 <list_is_empty>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d0e5      	beq.n	800fbcc <hci_user_evt_proc+0xc>
  }
}
 800fc00:	bf00      	nop
 800fc02:	bf00      	nop
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	200028a4 	.word	0x200028a4
 800fc10:	200005c8 	.word	0x200005c8
 800fc14:	2000289c 	.word	0x2000289c

0800fc18 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800fc20:	2300      	movs	r3, #0
 800fc22:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800fc24:	2300      	movs	r3, #0
 800fc26:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800fc28:	481f      	ldr	r0, [pc, #124]	; (800fca8 <hci_notify_asynch_evt+0x90>)
 800fc2a:	f000 f853 	bl	800fcd4 <list_is_empty>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d132      	bne.n	800fc9a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800fc34:	f107 030c 	add.w	r3, r7, #12
 800fc38:	4619      	mov	r1, r3
 800fc3a:	481b      	ldr	r0, [pc, #108]	; (800fca8 <hci_notify_asynch_evt+0x90>)
 800fc3c:	f000 f8d9 	bl	800fdf2 <list_remove_head>
    
    if (hciContext.io.Receive)
 800fc40:	4b1a      	ldr	r3, [pc, #104]	; (800fcac <hci_notify_asynch_evt+0x94>)
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d02a      	beq.n	800fc9e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800fc48:	4b18      	ldr	r3, [pc, #96]	; (800fcac <hci_notify_asynch_evt+0x94>)
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	68fa      	ldr	r2, [r7, #12]
 800fc4e:	3208      	adds	r2, #8
 800fc50:	2180      	movs	r1, #128	; 0x80
 800fc52:	4610      	mov	r0, r2
 800fc54:	4798      	blx	r3
 800fc56:	4603      	mov	r3, r0
 800fc58:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800fc5a:	7cfb      	ldrb	r3, [r7, #19]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d016      	beq.n	800fc8e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	7cfa      	ldrb	r2, [r7, #19]
 800fc64:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff fd91 	bl	800f792 <verify_packet>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d105      	bne.n	800fc82 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	4619      	mov	r1, r3
 800fc7a:	480d      	ldr	r0, [pc, #52]	; (800fcb0 <hci_notify_asynch_evt+0x98>)
 800fc7c:	f000 f872 	bl	800fd64 <list_insert_tail>
 800fc80:	e00d      	b.n	800fc9e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	4619      	mov	r1, r3
 800fc86:	4808      	ldr	r0, [pc, #32]	; (800fca8 <hci_notify_asynch_evt+0x90>)
 800fc88:	f000 f846 	bl	800fd18 <list_insert_head>
 800fc8c:	e007      	b.n	800fc9e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	4619      	mov	r1, r3
 800fc92:	4805      	ldr	r0, [pc, #20]	; (800fca8 <hci_notify_asynch_evt+0x90>)
 800fc94:	f000 f840 	bl	800fd18 <list_insert_head>
 800fc98:	e001      	b.n	800fc9e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800fc9e:	697b      	ldr	r3, [r7, #20]

}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3718      	adds	r7, #24
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	2000289c 	.word	0x2000289c
 800fcac:	200005c8 	.word	0x200005c8
 800fcb0:	200028a4 	.word	0x200028a4

0800fcb4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	605a      	str	r2, [r3, #4]
}
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b087      	sub	sp, #28
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcdc:	f3ef 8310 	mrs	r3, PRIMASK
 800fce0:	60fb      	str	r3, [r7, #12]
  return(result);
 800fce2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fce6:	b672      	cpsid	i
}
 800fce8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d102      	bne.n	800fcfa <list_is_empty+0x26>
  {
    return_value = 1;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	75fb      	strb	r3, [r7, #23]
 800fcf8:	e001      	b.n	800fcfe <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	75fb      	strb	r3, [r7, #23]
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	f383 8810 	msr	PRIMASK, r3
}
 800fd08:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800fd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	371c      	adds	r7, #28
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b087      	sub	sp, #28
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd22:	f3ef 8310 	mrs	r3, PRIMASK
 800fd26:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd28:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd2c:	b672      	cpsid	i
}
 800fd2e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	683a      	ldr	r2, [r7, #0]
 800fd42:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	683a      	ldr	r2, [r7, #0]
 800fd4a:	605a      	str	r2, [r3, #4]
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	f383 8810 	msr	PRIMASK, r3
}
 800fd56:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fd58:	bf00      	nop
 800fd5a:	371c      	adds	r7, #28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b087      	sub	sp, #28
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd6e:	f3ef 8310 	mrs	r3, PRIMASK
 800fd72:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd74:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd78:	b672      	cpsid	i
}
 800fd7a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	685a      	ldr	r2, [r3, #4]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	683a      	ldr	r2, [r7, #0]
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	f383 8810 	msr	PRIMASK, r3
}
 800fda2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fda4:	bf00      	nop
 800fda6:	371c      	adds	r7, #28
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdb8:	f3ef 8310 	mrs	r3, PRIMASK
 800fdbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdc2:	b672      	cpsid	i
}
 800fdc4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	6812      	ldr	r2, [r2, #0]
 800fdce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	6852      	ldr	r2, [r2, #4]
 800fdd8:	605a      	str	r2, [r3, #4]
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	f383 8810 	msr	PRIMASK, r3
}
 800fde4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fde6:	bf00      	nop
 800fde8:	371c      	adds	r7, #28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b086      	sub	sp, #24
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdfc:	f3ef 8310 	mrs	r3, PRIMASK
 800fe00:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe02:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe06:	b672      	cpsid	i
}
 800fe08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7ff ffca 	bl	800fdb0 <list_remove_node>
  (*node)->next = NULL;
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2200      	movs	r2, #0
 800fe22:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	605a      	str	r2, [r3, #4]
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	f383 8810 	msr	PRIMASK, r3
}
 800fe36:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fe38:	bf00      	nop
 800fe3a:	3718      	adds	r7, #24
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe4a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe50:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe54:	b672      	cpsid	i
}
 800fe56:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	685a      	ldr	r2, [r3, #4]
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7ff ffa3 	bl	800fdb0 <list_remove_node>
  (*node)->next = NULL;
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2200      	movs	r2, #0
 800fe78:	605a      	str	r2, [r3, #4]
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	f383 8810 	msr	PRIMASK, r3
}
 800fe84:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fe86:	bf00      	nop
 800fe88:	3718      	adds	r7, #24
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800fe8e:	b480      	push	{r7}
 800fe90:	b089      	sub	sp, #36	; 0x24
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
  int size = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe9a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe9e:	613b      	str	r3, [r7, #16]
  return(result);
 800fea0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fea4:	b672      	cpsid	i
}
 800fea6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800feae:	e005      	b.n	800febc <list_get_size+0x2e>
  {
    size++;
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	3301      	adds	r3, #1
 800feb4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800febc:	69ba      	ldr	r2, [r7, #24]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d1f5      	bne.n	800feb0 <list_get_size+0x22>
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f383 8810 	msr	PRIMASK, r3
}
 800fece:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800fed0:	69fb      	ldr	r3, [r7, #28]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3724      	adds	r7, #36	; 0x24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
	...

0800fee0 <__errno>:
 800fee0:	4b01      	ldr	r3, [pc, #4]	; (800fee8 <__errno+0x8>)
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	200000a0 	.word	0x200000a0

0800feec <__libc_init_array>:
 800feec:	b570      	push	{r4, r5, r6, lr}
 800feee:	4d0d      	ldr	r5, [pc, #52]	; (800ff24 <__libc_init_array+0x38>)
 800fef0:	4c0d      	ldr	r4, [pc, #52]	; (800ff28 <__libc_init_array+0x3c>)
 800fef2:	1b64      	subs	r4, r4, r5
 800fef4:	10a4      	asrs	r4, r4, #2
 800fef6:	2600      	movs	r6, #0
 800fef8:	42a6      	cmp	r6, r4
 800fefa:	d109      	bne.n	800ff10 <__libc_init_array+0x24>
 800fefc:	4d0b      	ldr	r5, [pc, #44]	; (800ff2c <__libc_init_array+0x40>)
 800fefe:	4c0c      	ldr	r4, [pc, #48]	; (800ff30 <__libc_init_array+0x44>)
 800ff00:	f000 fc4e 	bl	80107a0 <_init>
 800ff04:	1b64      	subs	r4, r4, r5
 800ff06:	10a4      	asrs	r4, r4, #2
 800ff08:	2600      	movs	r6, #0
 800ff0a:	42a6      	cmp	r6, r4
 800ff0c:	d105      	bne.n	800ff1a <__libc_init_array+0x2e>
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff14:	4798      	blx	r3
 800ff16:	3601      	adds	r6, #1
 800ff18:	e7ee      	b.n	800fef8 <__libc_init_array+0xc>
 800ff1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff1e:	4798      	blx	r3
 800ff20:	3601      	adds	r6, #1
 800ff22:	e7f2      	b.n	800ff0a <__libc_init_array+0x1e>
 800ff24:	08010de8 	.word	0x08010de8
 800ff28:	08010de8 	.word	0x08010de8
 800ff2c:	08010de8 	.word	0x08010de8
 800ff30:	08010dec 	.word	0x08010dec

0800ff34 <memcpy>:
 800ff34:	440a      	add	r2, r1
 800ff36:	4291      	cmp	r1, r2
 800ff38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff3c:	d100      	bne.n	800ff40 <memcpy+0xc>
 800ff3e:	4770      	bx	lr
 800ff40:	b510      	push	{r4, lr}
 800ff42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff4a:	4291      	cmp	r1, r2
 800ff4c:	d1f9      	bne.n	800ff42 <memcpy+0xe>
 800ff4e:	bd10      	pop	{r4, pc}

0800ff50 <memset>:
 800ff50:	4402      	add	r2, r0
 800ff52:	4603      	mov	r3, r0
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d100      	bne.n	800ff5a <memset+0xa>
 800ff58:	4770      	bx	lr
 800ff5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff5e:	e7f9      	b.n	800ff54 <memset+0x4>

0800ff60 <_free_r>:
 800ff60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff62:	2900      	cmp	r1, #0
 800ff64:	d048      	beq.n	800fff8 <_free_r+0x98>
 800ff66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff6a:	9001      	str	r0, [sp, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ff72:	bfb8      	it	lt
 800ff74:	18e4      	addlt	r4, r4, r3
 800ff76:	f000 f8cd 	bl	8010114 <__malloc_lock>
 800ff7a:	4a20      	ldr	r2, [pc, #128]	; (800fffc <_free_r+0x9c>)
 800ff7c:	9801      	ldr	r0, [sp, #4]
 800ff7e:	6813      	ldr	r3, [r2, #0]
 800ff80:	4615      	mov	r5, r2
 800ff82:	b933      	cbnz	r3, 800ff92 <_free_r+0x32>
 800ff84:	6063      	str	r3, [r4, #4]
 800ff86:	6014      	str	r4, [r2, #0]
 800ff88:	b003      	add	sp, #12
 800ff8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff8e:	f000 b8c7 	b.w	8010120 <__malloc_unlock>
 800ff92:	42a3      	cmp	r3, r4
 800ff94:	d90b      	bls.n	800ffae <_free_r+0x4e>
 800ff96:	6821      	ldr	r1, [r4, #0]
 800ff98:	1862      	adds	r2, r4, r1
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	bf04      	itt	eq
 800ff9e:	681a      	ldreq	r2, [r3, #0]
 800ffa0:	685b      	ldreq	r3, [r3, #4]
 800ffa2:	6063      	str	r3, [r4, #4]
 800ffa4:	bf04      	itt	eq
 800ffa6:	1852      	addeq	r2, r2, r1
 800ffa8:	6022      	streq	r2, [r4, #0]
 800ffaa:	602c      	str	r4, [r5, #0]
 800ffac:	e7ec      	b.n	800ff88 <_free_r+0x28>
 800ffae:	461a      	mov	r2, r3
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	b10b      	cbz	r3, 800ffb8 <_free_r+0x58>
 800ffb4:	42a3      	cmp	r3, r4
 800ffb6:	d9fa      	bls.n	800ffae <_free_r+0x4e>
 800ffb8:	6811      	ldr	r1, [r2, #0]
 800ffba:	1855      	adds	r5, r2, r1
 800ffbc:	42a5      	cmp	r5, r4
 800ffbe:	d10b      	bne.n	800ffd8 <_free_r+0x78>
 800ffc0:	6824      	ldr	r4, [r4, #0]
 800ffc2:	4421      	add	r1, r4
 800ffc4:	1854      	adds	r4, r2, r1
 800ffc6:	42a3      	cmp	r3, r4
 800ffc8:	6011      	str	r1, [r2, #0]
 800ffca:	d1dd      	bne.n	800ff88 <_free_r+0x28>
 800ffcc:	681c      	ldr	r4, [r3, #0]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	6053      	str	r3, [r2, #4]
 800ffd2:	4421      	add	r1, r4
 800ffd4:	6011      	str	r1, [r2, #0]
 800ffd6:	e7d7      	b.n	800ff88 <_free_r+0x28>
 800ffd8:	d902      	bls.n	800ffe0 <_free_r+0x80>
 800ffda:	230c      	movs	r3, #12
 800ffdc:	6003      	str	r3, [r0, #0]
 800ffde:	e7d3      	b.n	800ff88 <_free_r+0x28>
 800ffe0:	6825      	ldr	r5, [r4, #0]
 800ffe2:	1961      	adds	r1, r4, r5
 800ffe4:	428b      	cmp	r3, r1
 800ffe6:	bf04      	itt	eq
 800ffe8:	6819      	ldreq	r1, [r3, #0]
 800ffea:	685b      	ldreq	r3, [r3, #4]
 800ffec:	6063      	str	r3, [r4, #4]
 800ffee:	bf04      	itt	eq
 800fff0:	1949      	addeq	r1, r1, r5
 800fff2:	6021      	streq	r1, [r4, #0]
 800fff4:	6054      	str	r4, [r2, #4]
 800fff6:	e7c7      	b.n	800ff88 <_free_r+0x28>
 800fff8:	b003      	add	sp, #12
 800fffa:	bd30      	pop	{r4, r5, pc}
 800fffc:	200005e8 	.word	0x200005e8

08010000 <_malloc_r>:
 8010000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010002:	1ccd      	adds	r5, r1, #3
 8010004:	f025 0503 	bic.w	r5, r5, #3
 8010008:	3508      	adds	r5, #8
 801000a:	2d0c      	cmp	r5, #12
 801000c:	bf38      	it	cc
 801000e:	250c      	movcc	r5, #12
 8010010:	2d00      	cmp	r5, #0
 8010012:	4606      	mov	r6, r0
 8010014:	db01      	blt.n	801001a <_malloc_r+0x1a>
 8010016:	42a9      	cmp	r1, r5
 8010018:	d903      	bls.n	8010022 <_malloc_r+0x22>
 801001a:	230c      	movs	r3, #12
 801001c:	6033      	str	r3, [r6, #0]
 801001e:	2000      	movs	r0, #0
 8010020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010022:	f000 f877 	bl	8010114 <__malloc_lock>
 8010026:	4921      	ldr	r1, [pc, #132]	; (80100ac <_malloc_r+0xac>)
 8010028:	680a      	ldr	r2, [r1, #0]
 801002a:	4614      	mov	r4, r2
 801002c:	b99c      	cbnz	r4, 8010056 <_malloc_r+0x56>
 801002e:	4f20      	ldr	r7, [pc, #128]	; (80100b0 <_malloc_r+0xb0>)
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	b923      	cbnz	r3, 801003e <_malloc_r+0x3e>
 8010034:	4621      	mov	r1, r4
 8010036:	4630      	mov	r0, r6
 8010038:	f000 f83c 	bl	80100b4 <_sbrk_r>
 801003c:	6038      	str	r0, [r7, #0]
 801003e:	4629      	mov	r1, r5
 8010040:	4630      	mov	r0, r6
 8010042:	f000 f837 	bl	80100b4 <_sbrk_r>
 8010046:	1c43      	adds	r3, r0, #1
 8010048:	d123      	bne.n	8010092 <_malloc_r+0x92>
 801004a:	230c      	movs	r3, #12
 801004c:	6033      	str	r3, [r6, #0]
 801004e:	4630      	mov	r0, r6
 8010050:	f000 f866 	bl	8010120 <__malloc_unlock>
 8010054:	e7e3      	b.n	801001e <_malloc_r+0x1e>
 8010056:	6823      	ldr	r3, [r4, #0]
 8010058:	1b5b      	subs	r3, r3, r5
 801005a:	d417      	bmi.n	801008c <_malloc_r+0x8c>
 801005c:	2b0b      	cmp	r3, #11
 801005e:	d903      	bls.n	8010068 <_malloc_r+0x68>
 8010060:	6023      	str	r3, [r4, #0]
 8010062:	441c      	add	r4, r3
 8010064:	6025      	str	r5, [r4, #0]
 8010066:	e004      	b.n	8010072 <_malloc_r+0x72>
 8010068:	6863      	ldr	r3, [r4, #4]
 801006a:	42a2      	cmp	r2, r4
 801006c:	bf0c      	ite	eq
 801006e:	600b      	streq	r3, [r1, #0]
 8010070:	6053      	strne	r3, [r2, #4]
 8010072:	4630      	mov	r0, r6
 8010074:	f000 f854 	bl	8010120 <__malloc_unlock>
 8010078:	f104 000b 	add.w	r0, r4, #11
 801007c:	1d23      	adds	r3, r4, #4
 801007e:	f020 0007 	bic.w	r0, r0, #7
 8010082:	1ac2      	subs	r2, r0, r3
 8010084:	d0cc      	beq.n	8010020 <_malloc_r+0x20>
 8010086:	1a1b      	subs	r3, r3, r0
 8010088:	50a3      	str	r3, [r4, r2]
 801008a:	e7c9      	b.n	8010020 <_malloc_r+0x20>
 801008c:	4622      	mov	r2, r4
 801008e:	6864      	ldr	r4, [r4, #4]
 8010090:	e7cc      	b.n	801002c <_malloc_r+0x2c>
 8010092:	1cc4      	adds	r4, r0, #3
 8010094:	f024 0403 	bic.w	r4, r4, #3
 8010098:	42a0      	cmp	r0, r4
 801009a:	d0e3      	beq.n	8010064 <_malloc_r+0x64>
 801009c:	1a21      	subs	r1, r4, r0
 801009e:	4630      	mov	r0, r6
 80100a0:	f000 f808 	bl	80100b4 <_sbrk_r>
 80100a4:	3001      	adds	r0, #1
 80100a6:	d1dd      	bne.n	8010064 <_malloc_r+0x64>
 80100a8:	e7cf      	b.n	801004a <_malloc_r+0x4a>
 80100aa:	bf00      	nop
 80100ac:	200005e8 	.word	0x200005e8
 80100b0:	200005ec 	.word	0x200005ec

080100b4 <_sbrk_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4d06      	ldr	r5, [pc, #24]	; (80100d0 <_sbrk_r+0x1c>)
 80100b8:	2300      	movs	r3, #0
 80100ba:	4604      	mov	r4, r0
 80100bc:	4608      	mov	r0, r1
 80100be:	602b      	str	r3, [r5, #0]
 80100c0:	f7f2 fe1a 	bl	8002cf8 <_sbrk>
 80100c4:	1c43      	adds	r3, r0, #1
 80100c6:	d102      	bne.n	80100ce <_sbrk_r+0x1a>
 80100c8:	682b      	ldr	r3, [r5, #0]
 80100ca:	b103      	cbz	r3, 80100ce <_sbrk_r+0x1a>
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	bd38      	pop	{r3, r4, r5, pc}
 80100d0:	200028ac 	.word	0x200028ac

080100d4 <siprintf>:
 80100d4:	b40e      	push	{r1, r2, r3}
 80100d6:	b500      	push	{lr}
 80100d8:	b09c      	sub	sp, #112	; 0x70
 80100da:	ab1d      	add	r3, sp, #116	; 0x74
 80100dc:	9002      	str	r0, [sp, #8]
 80100de:	9006      	str	r0, [sp, #24]
 80100e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80100e4:	4809      	ldr	r0, [pc, #36]	; (801010c <siprintf+0x38>)
 80100e6:	9107      	str	r1, [sp, #28]
 80100e8:	9104      	str	r1, [sp, #16]
 80100ea:	4909      	ldr	r1, [pc, #36]	; (8010110 <siprintf+0x3c>)
 80100ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80100f0:	9105      	str	r1, [sp, #20]
 80100f2:	6800      	ldr	r0, [r0, #0]
 80100f4:	9301      	str	r3, [sp, #4]
 80100f6:	a902      	add	r1, sp, #8
 80100f8:	f000 f874 	bl	80101e4 <_svfiprintf_r>
 80100fc:	9b02      	ldr	r3, [sp, #8]
 80100fe:	2200      	movs	r2, #0
 8010100:	701a      	strb	r2, [r3, #0]
 8010102:	b01c      	add	sp, #112	; 0x70
 8010104:	f85d eb04 	ldr.w	lr, [sp], #4
 8010108:	b003      	add	sp, #12
 801010a:	4770      	bx	lr
 801010c:	200000a0 	.word	0x200000a0
 8010110:	ffff0208 	.word	0xffff0208

08010114 <__malloc_lock>:
 8010114:	4801      	ldr	r0, [pc, #4]	; (801011c <__malloc_lock+0x8>)
 8010116:	f000 baf9 	b.w	801070c <__retarget_lock_acquire_recursive>
 801011a:	bf00      	nop
 801011c:	200028b4 	.word	0x200028b4

08010120 <__malloc_unlock>:
 8010120:	4801      	ldr	r0, [pc, #4]	; (8010128 <__malloc_unlock+0x8>)
 8010122:	f000 baf4 	b.w	801070e <__retarget_lock_release_recursive>
 8010126:	bf00      	nop
 8010128:	200028b4 	.word	0x200028b4

0801012c <__ssputs_r>:
 801012c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010130:	688e      	ldr	r6, [r1, #8]
 8010132:	429e      	cmp	r6, r3
 8010134:	4682      	mov	sl, r0
 8010136:	460c      	mov	r4, r1
 8010138:	4690      	mov	r8, r2
 801013a:	461f      	mov	r7, r3
 801013c:	d838      	bhi.n	80101b0 <__ssputs_r+0x84>
 801013e:	898a      	ldrh	r2, [r1, #12]
 8010140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010144:	d032      	beq.n	80101ac <__ssputs_r+0x80>
 8010146:	6825      	ldr	r5, [r4, #0]
 8010148:	6909      	ldr	r1, [r1, #16]
 801014a:	eba5 0901 	sub.w	r9, r5, r1
 801014e:	6965      	ldr	r5, [r4, #20]
 8010150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010158:	3301      	adds	r3, #1
 801015a:	444b      	add	r3, r9
 801015c:	106d      	asrs	r5, r5, #1
 801015e:	429d      	cmp	r5, r3
 8010160:	bf38      	it	cc
 8010162:	461d      	movcc	r5, r3
 8010164:	0553      	lsls	r3, r2, #21
 8010166:	d531      	bpl.n	80101cc <__ssputs_r+0xa0>
 8010168:	4629      	mov	r1, r5
 801016a:	f7ff ff49 	bl	8010000 <_malloc_r>
 801016e:	4606      	mov	r6, r0
 8010170:	b950      	cbnz	r0, 8010188 <__ssputs_r+0x5c>
 8010172:	230c      	movs	r3, #12
 8010174:	f8ca 3000 	str.w	r3, [sl]
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801017e:	81a3      	strh	r3, [r4, #12]
 8010180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010188:	6921      	ldr	r1, [r4, #16]
 801018a:	464a      	mov	r2, r9
 801018c:	f7ff fed2 	bl	800ff34 <memcpy>
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801019a:	81a3      	strh	r3, [r4, #12]
 801019c:	6126      	str	r6, [r4, #16]
 801019e:	6165      	str	r5, [r4, #20]
 80101a0:	444e      	add	r6, r9
 80101a2:	eba5 0509 	sub.w	r5, r5, r9
 80101a6:	6026      	str	r6, [r4, #0]
 80101a8:	60a5      	str	r5, [r4, #8]
 80101aa:	463e      	mov	r6, r7
 80101ac:	42be      	cmp	r6, r7
 80101ae:	d900      	bls.n	80101b2 <__ssputs_r+0x86>
 80101b0:	463e      	mov	r6, r7
 80101b2:	4632      	mov	r2, r6
 80101b4:	6820      	ldr	r0, [r4, #0]
 80101b6:	4641      	mov	r1, r8
 80101b8:	f000 faaa 	bl	8010710 <memmove>
 80101bc:	68a3      	ldr	r3, [r4, #8]
 80101be:	6822      	ldr	r2, [r4, #0]
 80101c0:	1b9b      	subs	r3, r3, r6
 80101c2:	4432      	add	r2, r6
 80101c4:	60a3      	str	r3, [r4, #8]
 80101c6:	6022      	str	r2, [r4, #0]
 80101c8:	2000      	movs	r0, #0
 80101ca:	e7db      	b.n	8010184 <__ssputs_r+0x58>
 80101cc:	462a      	mov	r2, r5
 80101ce:	f000 fab9 	bl	8010744 <_realloc_r>
 80101d2:	4606      	mov	r6, r0
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d1e1      	bne.n	801019c <__ssputs_r+0x70>
 80101d8:	6921      	ldr	r1, [r4, #16]
 80101da:	4650      	mov	r0, sl
 80101dc:	f7ff fec0 	bl	800ff60 <_free_r>
 80101e0:	e7c7      	b.n	8010172 <__ssputs_r+0x46>
	...

080101e4 <_svfiprintf_r>:
 80101e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e8:	4698      	mov	r8, r3
 80101ea:	898b      	ldrh	r3, [r1, #12]
 80101ec:	061b      	lsls	r3, r3, #24
 80101ee:	b09d      	sub	sp, #116	; 0x74
 80101f0:	4607      	mov	r7, r0
 80101f2:	460d      	mov	r5, r1
 80101f4:	4614      	mov	r4, r2
 80101f6:	d50e      	bpl.n	8010216 <_svfiprintf_r+0x32>
 80101f8:	690b      	ldr	r3, [r1, #16]
 80101fa:	b963      	cbnz	r3, 8010216 <_svfiprintf_r+0x32>
 80101fc:	2140      	movs	r1, #64	; 0x40
 80101fe:	f7ff feff 	bl	8010000 <_malloc_r>
 8010202:	6028      	str	r0, [r5, #0]
 8010204:	6128      	str	r0, [r5, #16]
 8010206:	b920      	cbnz	r0, 8010212 <_svfiprintf_r+0x2e>
 8010208:	230c      	movs	r3, #12
 801020a:	603b      	str	r3, [r7, #0]
 801020c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010210:	e0d1      	b.n	80103b6 <_svfiprintf_r+0x1d2>
 8010212:	2340      	movs	r3, #64	; 0x40
 8010214:	616b      	str	r3, [r5, #20]
 8010216:	2300      	movs	r3, #0
 8010218:	9309      	str	r3, [sp, #36]	; 0x24
 801021a:	2320      	movs	r3, #32
 801021c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010220:	f8cd 800c 	str.w	r8, [sp, #12]
 8010224:	2330      	movs	r3, #48	; 0x30
 8010226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103d0 <_svfiprintf_r+0x1ec>
 801022a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801022e:	f04f 0901 	mov.w	r9, #1
 8010232:	4623      	mov	r3, r4
 8010234:	469a      	mov	sl, r3
 8010236:	f813 2b01 	ldrb.w	r2, [r3], #1
 801023a:	b10a      	cbz	r2, 8010240 <_svfiprintf_r+0x5c>
 801023c:	2a25      	cmp	r2, #37	; 0x25
 801023e:	d1f9      	bne.n	8010234 <_svfiprintf_r+0x50>
 8010240:	ebba 0b04 	subs.w	fp, sl, r4
 8010244:	d00b      	beq.n	801025e <_svfiprintf_r+0x7a>
 8010246:	465b      	mov	r3, fp
 8010248:	4622      	mov	r2, r4
 801024a:	4629      	mov	r1, r5
 801024c:	4638      	mov	r0, r7
 801024e:	f7ff ff6d 	bl	801012c <__ssputs_r>
 8010252:	3001      	adds	r0, #1
 8010254:	f000 80aa 	beq.w	80103ac <_svfiprintf_r+0x1c8>
 8010258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801025a:	445a      	add	r2, fp
 801025c:	9209      	str	r2, [sp, #36]	; 0x24
 801025e:	f89a 3000 	ldrb.w	r3, [sl]
 8010262:	2b00      	cmp	r3, #0
 8010264:	f000 80a2 	beq.w	80103ac <_svfiprintf_r+0x1c8>
 8010268:	2300      	movs	r3, #0
 801026a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801026e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010272:	f10a 0a01 	add.w	sl, sl, #1
 8010276:	9304      	str	r3, [sp, #16]
 8010278:	9307      	str	r3, [sp, #28]
 801027a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801027e:	931a      	str	r3, [sp, #104]	; 0x68
 8010280:	4654      	mov	r4, sl
 8010282:	2205      	movs	r2, #5
 8010284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010288:	4851      	ldr	r0, [pc, #324]	; (80103d0 <_svfiprintf_r+0x1ec>)
 801028a:	f7ef ffa1 	bl	80001d0 <memchr>
 801028e:	9a04      	ldr	r2, [sp, #16]
 8010290:	b9d8      	cbnz	r0, 80102ca <_svfiprintf_r+0xe6>
 8010292:	06d0      	lsls	r0, r2, #27
 8010294:	bf44      	itt	mi
 8010296:	2320      	movmi	r3, #32
 8010298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801029c:	0711      	lsls	r1, r2, #28
 801029e:	bf44      	itt	mi
 80102a0:	232b      	movmi	r3, #43	; 0x2b
 80102a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102a6:	f89a 3000 	ldrb.w	r3, [sl]
 80102aa:	2b2a      	cmp	r3, #42	; 0x2a
 80102ac:	d015      	beq.n	80102da <_svfiprintf_r+0xf6>
 80102ae:	9a07      	ldr	r2, [sp, #28]
 80102b0:	4654      	mov	r4, sl
 80102b2:	2000      	movs	r0, #0
 80102b4:	f04f 0c0a 	mov.w	ip, #10
 80102b8:	4621      	mov	r1, r4
 80102ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102be:	3b30      	subs	r3, #48	; 0x30
 80102c0:	2b09      	cmp	r3, #9
 80102c2:	d94e      	bls.n	8010362 <_svfiprintf_r+0x17e>
 80102c4:	b1b0      	cbz	r0, 80102f4 <_svfiprintf_r+0x110>
 80102c6:	9207      	str	r2, [sp, #28]
 80102c8:	e014      	b.n	80102f4 <_svfiprintf_r+0x110>
 80102ca:	eba0 0308 	sub.w	r3, r0, r8
 80102ce:	fa09 f303 	lsl.w	r3, r9, r3
 80102d2:	4313      	orrs	r3, r2
 80102d4:	9304      	str	r3, [sp, #16]
 80102d6:	46a2      	mov	sl, r4
 80102d8:	e7d2      	b.n	8010280 <_svfiprintf_r+0x9c>
 80102da:	9b03      	ldr	r3, [sp, #12]
 80102dc:	1d19      	adds	r1, r3, #4
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	9103      	str	r1, [sp, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	bfbb      	ittet	lt
 80102e6:	425b      	neglt	r3, r3
 80102e8:	f042 0202 	orrlt.w	r2, r2, #2
 80102ec:	9307      	strge	r3, [sp, #28]
 80102ee:	9307      	strlt	r3, [sp, #28]
 80102f0:	bfb8      	it	lt
 80102f2:	9204      	strlt	r2, [sp, #16]
 80102f4:	7823      	ldrb	r3, [r4, #0]
 80102f6:	2b2e      	cmp	r3, #46	; 0x2e
 80102f8:	d10c      	bne.n	8010314 <_svfiprintf_r+0x130>
 80102fa:	7863      	ldrb	r3, [r4, #1]
 80102fc:	2b2a      	cmp	r3, #42	; 0x2a
 80102fe:	d135      	bne.n	801036c <_svfiprintf_r+0x188>
 8010300:	9b03      	ldr	r3, [sp, #12]
 8010302:	1d1a      	adds	r2, r3, #4
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	9203      	str	r2, [sp, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	bfb8      	it	lt
 801030c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010310:	3402      	adds	r4, #2
 8010312:	9305      	str	r3, [sp, #20]
 8010314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103e0 <_svfiprintf_r+0x1fc>
 8010318:	7821      	ldrb	r1, [r4, #0]
 801031a:	2203      	movs	r2, #3
 801031c:	4650      	mov	r0, sl
 801031e:	f7ef ff57 	bl	80001d0 <memchr>
 8010322:	b140      	cbz	r0, 8010336 <_svfiprintf_r+0x152>
 8010324:	2340      	movs	r3, #64	; 0x40
 8010326:	eba0 000a 	sub.w	r0, r0, sl
 801032a:	fa03 f000 	lsl.w	r0, r3, r0
 801032e:	9b04      	ldr	r3, [sp, #16]
 8010330:	4303      	orrs	r3, r0
 8010332:	3401      	adds	r4, #1
 8010334:	9304      	str	r3, [sp, #16]
 8010336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033a:	4826      	ldr	r0, [pc, #152]	; (80103d4 <_svfiprintf_r+0x1f0>)
 801033c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010340:	2206      	movs	r2, #6
 8010342:	f7ef ff45 	bl	80001d0 <memchr>
 8010346:	2800      	cmp	r0, #0
 8010348:	d038      	beq.n	80103bc <_svfiprintf_r+0x1d8>
 801034a:	4b23      	ldr	r3, [pc, #140]	; (80103d8 <_svfiprintf_r+0x1f4>)
 801034c:	bb1b      	cbnz	r3, 8010396 <_svfiprintf_r+0x1b2>
 801034e:	9b03      	ldr	r3, [sp, #12]
 8010350:	3307      	adds	r3, #7
 8010352:	f023 0307 	bic.w	r3, r3, #7
 8010356:	3308      	adds	r3, #8
 8010358:	9303      	str	r3, [sp, #12]
 801035a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801035c:	4433      	add	r3, r6
 801035e:	9309      	str	r3, [sp, #36]	; 0x24
 8010360:	e767      	b.n	8010232 <_svfiprintf_r+0x4e>
 8010362:	fb0c 3202 	mla	r2, ip, r2, r3
 8010366:	460c      	mov	r4, r1
 8010368:	2001      	movs	r0, #1
 801036a:	e7a5      	b.n	80102b8 <_svfiprintf_r+0xd4>
 801036c:	2300      	movs	r3, #0
 801036e:	3401      	adds	r4, #1
 8010370:	9305      	str	r3, [sp, #20]
 8010372:	4619      	mov	r1, r3
 8010374:	f04f 0c0a 	mov.w	ip, #10
 8010378:	4620      	mov	r0, r4
 801037a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801037e:	3a30      	subs	r2, #48	; 0x30
 8010380:	2a09      	cmp	r2, #9
 8010382:	d903      	bls.n	801038c <_svfiprintf_r+0x1a8>
 8010384:	2b00      	cmp	r3, #0
 8010386:	d0c5      	beq.n	8010314 <_svfiprintf_r+0x130>
 8010388:	9105      	str	r1, [sp, #20]
 801038a:	e7c3      	b.n	8010314 <_svfiprintf_r+0x130>
 801038c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010390:	4604      	mov	r4, r0
 8010392:	2301      	movs	r3, #1
 8010394:	e7f0      	b.n	8010378 <_svfiprintf_r+0x194>
 8010396:	ab03      	add	r3, sp, #12
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	462a      	mov	r2, r5
 801039c:	4b0f      	ldr	r3, [pc, #60]	; (80103dc <_svfiprintf_r+0x1f8>)
 801039e:	a904      	add	r1, sp, #16
 80103a0:	4638      	mov	r0, r7
 80103a2:	f3af 8000 	nop.w
 80103a6:	1c42      	adds	r2, r0, #1
 80103a8:	4606      	mov	r6, r0
 80103aa:	d1d6      	bne.n	801035a <_svfiprintf_r+0x176>
 80103ac:	89ab      	ldrh	r3, [r5, #12]
 80103ae:	065b      	lsls	r3, r3, #25
 80103b0:	f53f af2c 	bmi.w	801020c <_svfiprintf_r+0x28>
 80103b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103b6:	b01d      	add	sp, #116	; 0x74
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103bc:	ab03      	add	r3, sp, #12
 80103be:	9300      	str	r3, [sp, #0]
 80103c0:	462a      	mov	r2, r5
 80103c2:	4b06      	ldr	r3, [pc, #24]	; (80103dc <_svfiprintf_r+0x1f8>)
 80103c4:	a904      	add	r1, sp, #16
 80103c6:	4638      	mov	r0, r7
 80103c8:	f000 f87a 	bl	80104c0 <_printf_i>
 80103cc:	e7eb      	b.n	80103a6 <_svfiprintf_r+0x1c2>
 80103ce:	bf00      	nop
 80103d0:	08010dac 	.word	0x08010dac
 80103d4:	08010db6 	.word	0x08010db6
 80103d8:	00000000 	.word	0x00000000
 80103dc:	0801012d 	.word	0x0801012d
 80103e0:	08010db2 	.word	0x08010db2

080103e4 <_printf_common>:
 80103e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103e8:	4616      	mov	r6, r2
 80103ea:	4699      	mov	r9, r3
 80103ec:	688a      	ldr	r2, [r1, #8]
 80103ee:	690b      	ldr	r3, [r1, #16]
 80103f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80103f4:	4293      	cmp	r3, r2
 80103f6:	bfb8      	it	lt
 80103f8:	4613      	movlt	r3, r2
 80103fa:	6033      	str	r3, [r6, #0]
 80103fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010400:	4607      	mov	r7, r0
 8010402:	460c      	mov	r4, r1
 8010404:	b10a      	cbz	r2, 801040a <_printf_common+0x26>
 8010406:	3301      	adds	r3, #1
 8010408:	6033      	str	r3, [r6, #0]
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	0699      	lsls	r1, r3, #26
 801040e:	bf42      	ittt	mi
 8010410:	6833      	ldrmi	r3, [r6, #0]
 8010412:	3302      	addmi	r3, #2
 8010414:	6033      	strmi	r3, [r6, #0]
 8010416:	6825      	ldr	r5, [r4, #0]
 8010418:	f015 0506 	ands.w	r5, r5, #6
 801041c:	d106      	bne.n	801042c <_printf_common+0x48>
 801041e:	f104 0a19 	add.w	sl, r4, #25
 8010422:	68e3      	ldr	r3, [r4, #12]
 8010424:	6832      	ldr	r2, [r6, #0]
 8010426:	1a9b      	subs	r3, r3, r2
 8010428:	42ab      	cmp	r3, r5
 801042a:	dc26      	bgt.n	801047a <_printf_common+0x96>
 801042c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010430:	1e13      	subs	r3, r2, #0
 8010432:	6822      	ldr	r2, [r4, #0]
 8010434:	bf18      	it	ne
 8010436:	2301      	movne	r3, #1
 8010438:	0692      	lsls	r2, r2, #26
 801043a:	d42b      	bmi.n	8010494 <_printf_common+0xb0>
 801043c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010440:	4649      	mov	r1, r9
 8010442:	4638      	mov	r0, r7
 8010444:	47c0      	blx	r8
 8010446:	3001      	adds	r0, #1
 8010448:	d01e      	beq.n	8010488 <_printf_common+0xa4>
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	68e5      	ldr	r5, [r4, #12]
 801044e:	6832      	ldr	r2, [r6, #0]
 8010450:	f003 0306 	and.w	r3, r3, #6
 8010454:	2b04      	cmp	r3, #4
 8010456:	bf08      	it	eq
 8010458:	1aad      	subeq	r5, r5, r2
 801045a:	68a3      	ldr	r3, [r4, #8]
 801045c:	6922      	ldr	r2, [r4, #16]
 801045e:	bf0c      	ite	eq
 8010460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010464:	2500      	movne	r5, #0
 8010466:	4293      	cmp	r3, r2
 8010468:	bfc4      	itt	gt
 801046a:	1a9b      	subgt	r3, r3, r2
 801046c:	18ed      	addgt	r5, r5, r3
 801046e:	2600      	movs	r6, #0
 8010470:	341a      	adds	r4, #26
 8010472:	42b5      	cmp	r5, r6
 8010474:	d11a      	bne.n	80104ac <_printf_common+0xc8>
 8010476:	2000      	movs	r0, #0
 8010478:	e008      	b.n	801048c <_printf_common+0xa8>
 801047a:	2301      	movs	r3, #1
 801047c:	4652      	mov	r2, sl
 801047e:	4649      	mov	r1, r9
 8010480:	4638      	mov	r0, r7
 8010482:	47c0      	blx	r8
 8010484:	3001      	adds	r0, #1
 8010486:	d103      	bne.n	8010490 <_printf_common+0xac>
 8010488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010490:	3501      	adds	r5, #1
 8010492:	e7c6      	b.n	8010422 <_printf_common+0x3e>
 8010494:	18e1      	adds	r1, r4, r3
 8010496:	1c5a      	adds	r2, r3, #1
 8010498:	2030      	movs	r0, #48	; 0x30
 801049a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801049e:	4422      	add	r2, r4
 80104a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104a8:	3302      	adds	r3, #2
 80104aa:	e7c7      	b.n	801043c <_printf_common+0x58>
 80104ac:	2301      	movs	r3, #1
 80104ae:	4622      	mov	r2, r4
 80104b0:	4649      	mov	r1, r9
 80104b2:	4638      	mov	r0, r7
 80104b4:	47c0      	blx	r8
 80104b6:	3001      	adds	r0, #1
 80104b8:	d0e6      	beq.n	8010488 <_printf_common+0xa4>
 80104ba:	3601      	adds	r6, #1
 80104bc:	e7d9      	b.n	8010472 <_printf_common+0x8e>
	...

080104c0 <_printf_i>:
 80104c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104c4:	460c      	mov	r4, r1
 80104c6:	4691      	mov	r9, r2
 80104c8:	7e27      	ldrb	r7, [r4, #24]
 80104ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80104cc:	2f78      	cmp	r7, #120	; 0x78
 80104ce:	4680      	mov	r8, r0
 80104d0:	469a      	mov	sl, r3
 80104d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104d6:	d807      	bhi.n	80104e8 <_printf_i+0x28>
 80104d8:	2f62      	cmp	r7, #98	; 0x62
 80104da:	d80a      	bhi.n	80104f2 <_printf_i+0x32>
 80104dc:	2f00      	cmp	r7, #0
 80104de:	f000 80d8 	beq.w	8010692 <_printf_i+0x1d2>
 80104e2:	2f58      	cmp	r7, #88	; 0x58
 80104e4:	f000 80a3 	beq.w	801062e <_printf_i+0x16e>
 80104e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80104f0:	e03a      	b.n	8010568 <_printf_i+0xa8>
 80104f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80104f6:	2b15      	cmp	r3, #21
 80104f8:	d8f6      	bhi.n	80104e8 <_printf_i+0x28>
 80104fa:	a001      	add	r0, pc, #4	; (adr r0, 8010500 <_printf_i+0x40>)
 80104fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010500:	08010559 	.word	0x08010559
 8010504:	0801056d 	.word	0x0801056d
 8010508:	080104e9 	.word	0x080104e9
 801050c:	080104e9 	.word	0x080104e9
 8010510:	080104e9 	.word	0x080104e9
 8010514:	080104e9 	.word	0x080104e9
 8010518:	0801056d 	.word	0x0801056d
 801051c:	080104e9 	.word	0x080104e9
 8010520:	080104e9 	.word	0x080104e9
 8010524:	080104e9 	.word	0x080104e9
 8010528:	080104e9 	.word	0x080104e9
 801052c:	08010679 	.word	0x08010679
 8010530:	0801059d 	.word	0x0801059d
 8010534:	0801065b 	.word	0x0801065b
 8010538:	080104e9 	.word	0x080104e9
 801053c:	080104e9 	.word	0x080104e9
 8010540:	0801069b 	.word	0x0801069b
 8010544:	080104e9 	.word	0x080104e9
 8010548:	0801059d 	.word	0x0801059d
 801054c:	080104e9 	.word	0x080104e9
 8010550:	080104e9 	.word	0x080104e9
 8010554:	08010663 	.word	0x08010663
 8010558:	680b      	ldr	r3, [r1, #0]
 801055a:	1d1a      	adds	r2, r3, #4
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	600a      	str	r2, [r1, #0]
 8010560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010568:	2301      	movs	r3, #1
 801056a:	e0a3      	b.n	80106b4 <_printf_i+0x1f4>
 801056c:	6825      	ldr	r5, [r4, #0]
 801056e:	6808      	ldr	r0, [r1, #0]
 8010570:	062e      	lsls	r6, r5, #24
 8010572:	f100 0304 	add.w	r3, r0, #4
 8010576:	d50a      	bpl.n	801058e <_printf_i+0xce>
 8010578:	6805      	ldr	r5, [r0, #0]
 801057a:	600b      	str	r3, [r1, #0]
 801057c:	2d00      	cmp	r5, #0
 801057e:	da03      	bge.n	8010588 <_printf_i+0xc8>
 8010580:	232d      	movs	r3, #45	; 0x2d
 8010582:	426d      	negs	r5, r5
 8010584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010588:	485e      	ldr	r0, [pc, #376]	; (8010704 <_printf_i+0x244>)
 801058a:	230a      	movs	r3, #10
 801058c:	e019      	b.n	80105c2 <_printf_i+0x102>
 801058e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010592:	6805      	ldr	r5, [r0, #0]
 8010594:	600b      	str	r3, [r1, #0]
 8010596:	bf18      	it	ne
 8010598:	b22d      	sxthne	r5, r5
 801059a:	e7ef      	b.n	801057c <_printf_i+0xbc>
 801059c:	680b      	ldr	r3, [r1, #0]
 801059e:	6825      	ldr	r5, [r4, #0]
 80105a0:	1d18      	adds	r0, r3, #4
 80105a2:	6008      	str	r0, [r1, #0]
 80105a4:	0628      	lsls	r0, r5, #24
 80105a6:	d501      	bpl.n	80105ac <_printf_i+0xec>
 80105a8:	681d      	ldr	r5, [r3, #0]
 80105aa:	e002      	b.n	80105b2 <_printf_i+0xf2>
 80105ac:	0669      	lsls	r1, r5, #25
 80105ae:	d5fb      	bpl.n	80105a8 <_printf_i+0xe8>
 80105b0:	881d      	ldrh	r5, [r3, #0]
 80105b2:	4854      	ldr	r0, [pc, #336]	; (8010704 <_printf_i+0x244>)
 80105b4:	2f6f      	cmp	r7, #111	; 0x6f
 80105b6:	bf0c      	ite	eq
 80105b8:	2308      	moveq	r3, #8
 80105ba:	230a      	movne	r3, #10
 80105bc:	2100      	movs	r1, #0
 80105be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105c2:	6866      	ldr	r6, [r4, #4]
 80105c4:	60a6      	str	r6, [r4, #8]
 80105c6:	2e00      	cmp	r6, #0
 80105c8:	bfa2      	ittt	ge
 80105ca:	6821      	ldrge	r1, [r4, #0]
 80105cc:	f021 0104 	bicge.w	r1, r1, #4
 80105d0:	6021      	strge	r1, [r4, #0]
 80105d2:	b90d      	cbnz	r5, 80105d8 <_printf_i+0x118>
 80105d4:	2e00      	cmp	r6, #0
 80105d6:	d04d      	beq.n	8010674 <_printf_i+0x1b4>
 80105d8:	4616      	mov	r6, r2
 80105da:	fbb5 f1f3 	udiv	r1, r5, r3
 80105de:	fb03 5711 	mls	r7, r3, r1, r5
 80105e2:	5dc7      	ldrb	r7, [r0, r7]
 80105e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105e8:	462f      	mov	r7, r5
 80105ea:	42bb      	cmp	r3, r7
 80105ec:	460d      	mov	r5, r1
 80105ee:	d9f4      	bls.n	80105da <_printf_i+0x11a>
 80105f0:	2b08      	cmp	r3, #8
 80105f2:	d10b      	bne.n	801060c <_printf_i+0x14c>
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	07df      	lsls	r7, r3, #31
 80105f8:	d508      	bpl.n	801060c <_printf_i+0x14c>
 80105fa:	6923      	ldr	r3, [r4, #16]
 80105fc:	6861      	ldr	r1, [r4, #4]
 80105fe:	4299      	cmp	r1, r3
 8010600:	bfde      	ittt	le
 8010602:	2330      	movle	r3, #48	; 0x30
 8010604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010608:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801060c:	1b92      	subs	r2, r2, r6
 801060e:	6122      	str	r2, [r4, #16]
 8010610:	f8cd a000 	str.w	sl, [sp]
 8010614:	464b      	mov	r3, r9
 8010616:	aa03      	add	r2, sp, #12
 8010618:	4621      	mov	r1, r4
 801061a:	4640      	mov	r0, r8
 801061c:	f7ff fee2 	bl	80103e4 <_printf_common>
 8010620:	3001      	adds	r0, #1
 8010622:	d14c      	bne.n	80106be <_printf_i+0x1fe>
 8010624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010628:	b004      	add	sp, #16
 801062a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801062e:	4835      	ldr	r0, [pc, #212]	; (8010704 <_printf_i+0x244>)
 8010630:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	680e      	ldr	r6, [r1, #0]
 8010638:	061f      	lsls	r7, r3, #24
 801063a:	f856 5b04 	ldr.w	r5, [r6], #4
 801063e:	600e      	str	r6, [r1, #0]
 8010640:	d514      	bpl.n	801066c <_printf_i+0x1ac>
 8010642:	07d9      	lsls	r1, r3, #31
 8010644:	bf44      	itt	mi
 8010646:	f043 0320 	orrmi.w	r3, r3, #32
 801064a:	6023      	strmi	r3, [r4, #0]
 801064c:	b91d      	cbnz	r5, 8010656 <_printf_i+0x196>
 801064e:	6823      	ldr	r3, [r4, #0]
 8010650:	f023 0320 	bic.w	r3, r3, #32
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	2310      	movs	r3, #16
 8010658:	e7b0      	b.n	80105bc <_printf_i+0xfc>
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	f043 0320 	orr.w	r3, r3, #32
 8010660:	6023      	str	r3, [r4, #0]
 8010662:	2378      	movs	r3, #120	; 0x78
 8010664:	4828      	ldr	r0, [pc, #160]	; (8010708 <_printf_i+0x248>)
 8010666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801066a:	e7e3      	b.n	8010634 <_printf_i+0x174>
 801066c:	065e      	lsls	r6, r3, #25
 801066e:	bf48      	it	mi
 8010670:	b2ad      	uxthmi	r5, r5
 8010672:	e7e6      	b.n	8010642 <_printf_i+0x182>
 8010674:	4616      	mov	r6, r2
 8010676:	e7bb      	b.n	80105f0 <_printf_i+0x130>
 8010678:	680b      	ldr	r3, [r1, #0]
 801067a:	6826      	ldr	r6, [r4, #0]
 801067c:	6960      	ldr	r0, [r4, #20]
 801067e:	1d1d      	adds	r5, r3, #4
 8010680:	600d      	str	r5, [r1, #0]
 8010682:	0635      	lsls	r5, r6, #24
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	d501      	bpl.n	801068c <_printf_i+0x1cc>
 8010688:	6018      	str	r0, [r3, #0]
 801068a:	e002      	b.n	8010692 <_printf_i+0x1d2>
 801068c:	0671      	lsls	r1, r6, #25
 801068e:	d5fb      	bpl.n	8010688 <_printf_i+0x1c8>
 8010690:	8018      	strh	r0, [r3, #0]
 8010692:	2300      	movs	r3, #0
 8010694:	6123      	str	r3, [r4, #16]
 8010696:	4616      	mov	r6, r2
 8010698:	e7ba      	b.n	8010610 <_printf_i+0x150>
 801069a:	680b      	ldr	r3, [r1, #0]
 801069c:	1d1a      	adds	r2, r3, #4
 801069e:	600a      	str	r2, [r1, #0]
 80106a0:	681e      	ldr	r6, [r3, #0]
 80106a2:	6862      	ldr	r2, [r4, #4]
 80106a4:	2100      	movs	r1, #0
 80106a6:	4630      	mov	r0, r6
 80106a8:	f7ef fd92 	bl	80001d0 <memchr>
 80106ac:	b108      	cbz	r0, 80106b2 <_printf_i+0x1f2>
 80106ae:	1b80      	subs	r0, r0, r6
 80106b0:	6060      	str	r0, [r4, #4]
 80106b2:	6863      	ldr	r3, [r4, #4]
 80106b4:	6123      	str	r3, [r4, #16]
 80106b6:	2300      	movs	r3, #0
 80106b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106bc:	e7a8      	b.n	8010610 <_printf_i+0x150>
 80106be:	6923      	ldr	r3, [r4, #16]
 80106c0:	4632      	mov	r2, r6
 80106c2:	4649      	mov	r1, r9
 80106c4:	4640      	mov	r0, r8
 80106c6:	47d0      	blx	sl
 80106c8:	3001      	adds	r0, #1
 80106ca:	d0ab      	beq.n	8010624 <_printf_i+0x164>
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	079b      	lsls	r3, r3, #30
 80106d0:	d413      	bmi.n	80106fa <_printf_i+0x23a>
 80106d2:	68e0      	ldr	r0, [r4, #12]
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	4298      	cmp	r0, r3
 80106d8:	bfb8      	it	lt
 80106da:	4618      	movlt	r0, r3
 80106dc:	e7a4      	b.n	8010628 <_printf_i+0x168>
 80106de:	2301      	movs	r3, #1
 80106e0:	4632      	mov	r2, r6
 80106e2:	4649      	mov	r1, r9
 80106e4:	4640      	mov	r0, r8
 80106e6:	47d0      	blx	sl
 80106e8:	3001      	adds	r0, #1
 80106ea:	d09b      	beq.n	8010624 <_printf_i+0x164>
 80106ec:	3501      	adds	r5, #1
 80106ee:	68e3      	ldr	r3, [r4, #12]
 80106f0:	9903      	ldr	r1, [sp, #12]
 80106f2:	1a5b      	subs	r3, r3, r1
 80106f4:	42ab      	cmp	r3, r5
 80106f6:	dcf2      	bgt.n	80106de <_printf_i+0x21e>
 80106f8:	e7eb      	b.n	80106d2 <_printf_i+0x212>
 80106fa:	2500      	movs	r5, #0
 80106fc:	f104 0619 	add.w	r6, r4, #25
 8010700:	e7f5      	b.n	80106ee <_printf_i+0x22e>
 8010702:	bf00      	nop
 8010704:	08010dbd 	.word	0x08010dbd
 8010708:	08010dce 	.word	0x08010dce

0801070c <__retarget_lock_acquire_recursive>:
 801070c:	4770      	bx	lr

0801070e <__retarget_lock_release_recursive>:
 801070e:	4770      	bx	lr

08010710 <memmove>:
 8010710:	4288      	cmp	r0, r1
 8010712:	b510      	push	{r4, lr}
 8010714:	eb01 0402 	add.w	r4, r1, r2
 8010718:	d902      	bls.n	8010720 <memmove+0x10>
 801071a:	4284      	cmp	r4, r0
 801071c:	4623      	mov	r3, r4
 801071e:	d807      	bhi.n	8010730 <memmove+0x20>
 8010720:	1e43      	subs	r3, r0, #1
 8010722:	42a1      	cmp	r1, r4
 8010724:	d008      	beq.n	8010738 <memmove+0x28>
 8010726:	f811 2b01 	ldrb.w	r2, [r1], #1
 801072a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801072e:	e7f8      	b.n	8010722 <memmove+0x12>
 8010730:	4402      	add	r2, r0
 8010732:	4601      	mov	r1, r0
 8010734:	428a      	cmp	r2, r1
 8010736:	d100      	bne.n	801073a <memmove+0x2a>
 8010738:	bd10      	pop	{r4, pc}
 801073a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801073e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010742:	e7f7      	b.n	8010734 <memmove+0x24>

08010744 <_realloc_r>:
 8010744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010746:	4607      	mov	r7, r0
 8010748:	4614      	mov	r4, r2
 801074a:	460e      	mov	r6, r1
 801074c:	b921      	cbnz	r1, 8010758 <_realloc_r+0x14>
 801074e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010752:	4611      	mov	r1, r2
 8010754:	f7ff bc54 	b.w	8010000 <_malloc_r>
 8010758:	b922      	cbnz	r2, 8010764 <_realloc_r+0x20>
 801075a:	f7ff fc01 	bl	800ff60 <_free_r>
 801075e:	4625      	mov	r5, r4
 8010760:	4628      	mov	r0, r5
 8010762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010764:	f000 f814 	bl	8010790 <_malloc_usable_size_r>
 8010768:	42a0      	cmp	r0, r4
 801076a:	d20f      	bcs.n	801078c <_realloc_r+0x48>
 801076c:	4621      	mov	r1, r4
 801076e:	4638      	mov	r0, r7
 8010770:	f7ff fc46 	bl	8010000 <_malloc_r>
 8010774:	4605      	mov	r5, r0
 8010776:	2800      	cmp	r0, #0
 8010778:	d0f2      	beq.n	8010760 <_realloc_r+0x1c>
 801077a:	4631      	mov	r1, r6
 801077c:	4622      	mov	r2, r4
 801077e:	f7ff fbd9 	bl	800ff34 <memcpy>
 8010782:	4631      	mov	r1, r6
 8010784:	4638      	mov	r0, r7
 8010786:	f7ff fbeb 	bl	800ff60 <_free_r>
 801078a:	e7e9      	b.n	8010760 <_realloc_r+0x1c>
 801078c:	4635      	mov	r5, r6
 801078e:	e7e7      	b.n	8010760 <_realloc_r+0x1c>

08010790 <_malloc_usable_size_r>:
 8010790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010794:	1f18      	subs	r0, r3, #4
 8010796:	2b00      	cmp	r3, #0
 8010798:	bfbc      	itt	lt
 801079a:	580b      	ldrlt	r3, [r1, r0]
 801079c:	18c0      	addlt	r0, r0, r3
 801079e:	4770      	bx	lr

080107a0 <_init>:
 80107a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a2:	bf00      	nop
 80107a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107a6:	bc08      	pop	{r3}
 80107a8:	469e      	mov	lr, r3
 80107aa:	4770      	bx	lr

080107ac <_fini>:
 80107ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ae:	bf00      	nop
 80107b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b2:	bc08      	pop	{r3}
 80107b4:	469e      	mov	lr, r3
 80107b6:	4770      	bx	lr
