
visa_sensortile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010638  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  080107c8  080107c8  000207c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010df0  08010df0  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08010df0  08010df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010df8  08010df8  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010df8  08010df8  00020df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dfc  08010dfc  00020dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08010e00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027b8  20000104  08010f04  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028bc  08010f04  000328bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046ca1  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007400  00000000  00000000  00076dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  0007e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002800  00000000  00000000  00080c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a0e  00000000  00000000  00083478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000327d7  00000000  00000000  000b4e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bf07  00000000  00000000  000e765d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f3564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b7d8  00000000  00000000  001f35b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000104 	.word	0x20000104
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107b0 	.word	0x080107b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000108 	.word	0x20000108
 80001cc:	080107b0 	.word	0x080107b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  TargetType_t BoardType Nucleo/BlueCoin/SensorTile
  * @retval None
  */
void InitTargetPlatform(TargetType_t BoardType)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0c6      	sub	sp, #280	; 0x118
 800056c:	af02      	add	r7, sp, #8
 800056e:	4602      	mov	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
  TargetBoardFeatures.BoardType = BoardType;
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <InitTargetPlatform+0x68>)
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	7013      	strb	r3, [r2, #0]
   * for looking the MOTENV1 Initialization phase */
  HAL_Delay(10000);
#endif /* ENABLE_USB_DEBUG */
  
  /* Initialize LED */
  BSP_LED_Init( LED1 );
 800057c:	2000      	movs	r0, #0
 800057e:	f004 fa7f 	bl	8004a80 <BSP_LED_Init>

  STLBLE_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 8000582:	f107 000c 	add.w	r0, r7, #12
 8000586:	2330      	movs	r3, #48	; 0x30
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2335      	movs	r3, #53	; 0x35
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2332      	movs	r3, #50	; 0x32
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <InitTargetPlatform+0x6c>)
 8000592:	4911      	ldr	r1, [pc, #68]	; (80005d8 <InitTargetPlatform+0x70>)
 8000594:	f00f fda6 	bl	80100e4 <siprintf>
 8000598:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800059c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fc16 	bl	8002dd8 <CDC_Fill_Buffer>
          "\r\n",
          STLBLE_PACKAGENAME,
          STLBLE_VERSION_MAJOR,STLBLE_VERSION_MINOR,STLBLE_VERSION_PATCH);

  /* Reset all the Target's Features */
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	2100      	movs	r1, #0
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <InitTargetPlatform+0x68>)
 80005b2:	f00f fcd5 	bl	800ff60 <memset>
  /* Discovery and Intialize all the Target's Features */
  Sensor_IO_SPI_CS_Init_All();
 80005b6:	f004 fb0f 	bl	8004bd8 <Sensor_IO_SPI_CS_Init_All>
  Init_MEM1_Sensors();
 80005ba:	f000 f80f 	bl	80005dc <Init_MEM1_Sensors>
  
  TargetBoardFeatures.LedStatus = 0; /*Off by default */
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <InitTargetPlatform+0x68>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80005c6:	bf00      	nop
 80005c8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200005f0 	.word	0x200005f0
 80005d4:	080107c8 	.word	0x080107c8
 80005d8:	080107d0 	.word	0x080107d0

080005dc <Init_MEM1_Sensors>:
/** @brief Initialize all the MEMS1 sensors
 * @param None
 * @retval None
 */
static void Init_MEM1_Sensors(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c8      	sub	sp, #288	; 0x120
 80005e0:	af00      	add	r7, sp, #0
  /* Humidity Temperature1 */
  if(BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY|ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80005e2:	2105      	movs	r1, #5
 80005e4:	2000      	movs	r0, #0
 80005e6:	f004 fe7f 	bl	80052e8 <BSP_ENV_SENSOR_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d126      	bne.n	800063e <Init_MEM1_Sensors+0x62>
  {
    STLBLE_PRINTF("OK Humidity Sensor\n\r");
 80005f0:	463b      	mov	r3, r7
 80005f2:	495e      	ldr	r1, [pc, #376]	; (800076c <Init_MEM1_Sensors+0x190>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00f fd75 	bl	80100e4 <siprintf>
 80005fa:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 80005fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000602:	463b      	mov	r3, r7
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fbe6 	bl	8002dd8 <CDC_Fill_Buffer>
    TargetBoardFeatures.HandleHumSensor=1;
 800060c:	4b58      	ldr	r3, [pc, #352]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]

    STLBLE_PRINTF("OK Temperature Sensor1\n\r");
 8000612:	463b      	mov	r3, r7
 8000614:	4957      	ldr	r1, [pc, #348]	; (8000774 <Init_MEM1_Sensors+0x198>)
 8000616:	4618      	mov	r0, r3
 8000618:	f00f fd64 	bl	80100e4 <siprintf>
 800061c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000620:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000624:	463b      	mov	r3, r7
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fbd5 	bl	8002dd8 <CDC_Fill_Buffer>
    TargetBoardFeatures.NumTempSensors++;
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	4a4e      	ldr	r2, [pc, #312]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000636:	6093      	str	r3, [r2, #8]
    TargetBoardFeatures.HandleTempSensors[0]=1;
 8000638:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800063a:	2201      	movs	r2, #1
 800063c:	60da      	str	r2, [r3, #12]
  }

  /* Temperature2 Pressure */
  if(BSP_ENV_SENSOR_Init(LPS22HB_0, ENV_TEMPERATURE|ENV_PRESSURE)==BSP_ERROR_NONE)
 800063e:	2103      	movs	r1, #3
 8000640:	2001      	movs	r0, #1
 8000642:	f004 fe51 	bl	80052e8 <BSP_ENV_SENSOR_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d126      	bne.n	800069a <Init_MEM1_Sensors+0xbe>
  {
     STLBLE_PRINTF("OK Temperature Sensor2\n\r");
 800064c:	463b      	mov	r3, r7
 800064e:	494a      	ldr	r1, [pc, #296]	; (8000778 <Init_MEM1_Sensors+0x19c>)
 8000650:	4618      	mov	r0, r3
 8000652:	f00f fd47 	bl	80100e4 <siprintf>
 8000656:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800065a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800065e:	463b      	mov	r3, r7
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fbb8 	bl	8002dd8 <CDC_Fill_Buffer>
     TargetBoardFeatures.NumTempSensors++;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	3301      	adds	r3, #1
 800066e:	4a40      	ldr	r2, [pc, #256]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000670:	6093      	str	r3, [r2, #8]
     TargetBoardFeatures.HandleTempSensors[1]=1;
 8000672:	4b3f      	ldr	r3, [pc, #252]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000674:	2201      	movs	r2, #1
 8000676:	611a      	str	r2, [r3, #16]

     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 8000678:	463b      	mov	r3, r7
 800067a:	4940      	ldr	r1, [pc, #256]	; (800077c <Init_MEM1_Sensors+0x1a0>)
 800067c:	4618      	mov	r0, r3
 800067e:	f00f fd31 	bl	80100e4 <siprintf>
 8000682:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8000686:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800068a:	463b      	mov	r3, r7
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fba2 	bl	8002dd8 <CDC_Fill_Buffer>
     TargetBoardFeatures.HandlePressSensor=1;
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000696:	2201      	movs	r2, #1
 8000698:	615a      	str	r2, [r3, #20]
  }

  if(TargetBoardFeatures.HandleHumSensor) {
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d014      	beq.n	80006cc <Init_MEM1_Sensors+0xf0>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_HUMIDITY)==BSP_ERROR_NONE)
 80006a2:	2104      	movs	r1, #4
 80006a4:	2000      	movs	r0, #0
 80006a6:	f004 fedf 	bl	8005468 <BSP_ENV_SENSOR_Enable>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10d      	bne.n	80006cc <Init_MEM1_Sensors+0xf0>
    {
      STLBLE_PRINTF("Enabled Humidity Sensor\n\r");
 80006b0:	463b      	mov	r3, r7
 80006b2:	4933      	ldr	r1, [pc, #204]	; (8000780 <Init_MEM1_Sensors+0x1a4>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00f fd15 	bl	80100e4 <siprintf>
 80006ba:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80006be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80006c2:	463b      	mov	r3, r7
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fb86 	bl	8002dd8 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[0]){
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <Init_MEM1_Sensors+0x194>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <Init_MEM1_Sensors+0x122>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80006d4:	2101      	movs	r1, #1
 80006d6:	2000      	movs	r0, #0
 80006d8:	f004 fec6 	bl	8005468 <BSP_ENV_SENSOR_Enable>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10d      	bne.n	80006fe <Init_MEM1_Sensors+0x122>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor1\n\r");
 80006e2:	463b      	mov	r3, r7
 80006e4:	4927      	ldr	r1, [pc, #156]	; (8000784 <Init_MEM1_Sensors+0x1a8>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00f fcfc 	bl	80100e4 <siprintf>
 80006ec:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80006f0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80006f4:	463b      	mov	r3, r7
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fb6d 	bl	8002dd8 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[1]){
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d014      	beq.n	8000730 <Init_MEM1_Sensors+0x154>
    if(BSP_ENV_SENSOR_Enable( LPS22HB_0, ENV_TEMPERATURE)==BSP_ERROR_NONE) 
 8000706:	2101      	movs	r1, #1
 8000708:	2001      	movs	r0, #1
 800070a:	f004 fead 	bl	8005468 <BSP_ENV_SENSOR_Enable>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <Init_MEM1_Sensors+0x154>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor2\n\r");
 8000714:	463b      	mov	r3, r7
 8000716:	491c      	ldr	r1, [pc, #112]	; (8000788 <Init_MEM1_Sensors+0x1ac>)
 8000718:	4618      	mov	r0, r3
 800071a:	f00f fce3 	bl	80100e4 <siprintf>
 800071e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000722:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000726:	463b      	mov	r3, r7
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fb54 	bl	8002dd8 <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandlePressSensor) {
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d014      	beq.n	8000762 <Init_MEM1_Sensors+0x186>
    if(BSP_ENV_SENSOR_Enable(LPS22HB_0, ENV_PRESSURE)==BSP_ERROR_NONE)
 8000738:	2102      	movs	r1, #2
 800073a:	2001      	movs	r0, #1
 800073c:	f004 fe94 	bl	8005468 <BSP_ENV_SENSOR_Enable>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10d      	bne.n	8000762 <Init_MEM1_Sensors+0x186>
    {
      STLBLE_PRINTF("Enabled Pressure Sensor\n\r");
 8000746:	463b      	mov	r3, r7
 8000748:	4910      	ldr	r1, [pc, #64]	; (800078c <Init_MEM1_Sensors+0x1b0>)
 800074a:	4618      	mov	r0, r3
 800074c:	f00f fcca 	bl	80100e4 <siprintf>
 8000750:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8000754:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000758:	463b      	mov	r3, r7
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fb3b 	bl	8002dd8 <CDC_Fill_Buffer>
    }
  }
}
 8000762:	bf00      	nop
 8000764:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	0801080c 	.word	0x0801080c
 8000770:	200005f0 	.word	0x200005f0
 8000774:	08010824 	.word	0x08010824
 8000778:	08010840 	.word	0x08010840
 800077c:	0801085c 	.word	0x0801085c
 8000780:	08010874 	.word	0x08010874
 8000784:	08010890 	.word	0x08010890
 8000788:	080108b0 	.word	0x080108b0
 800078c:	080108d0 	.word	0x080108d0

08000790 <LedOnTargetPlatform>:
  * @brief  This function switches on the LED
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  BSP_LED_On( LED1 );
 8000794:	2000      	movs	r0, #0
 8000796:	f004 f9c3 	bl	8004b20 <BSP_LED_On>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <LedOffTargetPlatform>:
  * @brief  This function switches off the LED
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  BSP_LED_Off( LED1 );
 80007a2:	2000      	movs	r0, #0
 80007a4:	f004 f9ea 	bl	8004b7c <BSP_LED_Off>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80007b4:	f008 fb44 	bl	8008e40 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a27      	ldr	r2, [pc, #156]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2104      	movs	r1, #4
 8000804:	481c      	ldr	r0, [pc, #112]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000806:	f006 f9cd 	bl	8006ba4 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800080a:	2320      	movs	r3, #32
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HCI_TL_SPI_Init+0xd0>)
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <HCI_TL_SPI_Init+0xd4>)
 800081e:	f005 ff0b 	bl	8006638 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000822:	2301      	movs	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <HCI_TL_SPI_Init+0xd8>)
 800083a:	f005 fefd 	bl	8006638 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800083e:	2304      	movs	r3, #4
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000856:	f005 feef 	bl	8006638 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2104      	movs	r1, #4
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000860:	f006 f9a0 	bl	8006ba4 <HAL_GPIO_WritePin>
    
  return BSP_SPI1_Init();
 8000864:	f004 fb32 	bl	8004ecc <BSP_SPI1_Init>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400
 800087c:	10110000 	.word	0x10110000
 8000880:	48000800 	.word	0x48000800
 8000884:	48001c00 	.word	0x48001c00

08000888 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800088c:	2120      	movs	r1, #32
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <HCI_TL_SPI_DeInit+0x24>)
 8000890:	f006 f87c 	bl	800698c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HCI_TL_SPI_DeInit+0x28>)
 8000898:	f006 f878 	bl	800698c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HCI_TL_SPI_DeInit+0x2c>)
 80008a0:	f006 f874 	bl	800698c <HAL_GPIO_DeInit>
  return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	48000800 	.word	0x48000800
 80008b0:	48000400 	.word	0x48000400
 80008b4:	48001c00 	.word	0x48001c00

080008b8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <HCI_TL_SPI_Reset+0x2c>)
 80008c2:	f006 f96f 	bl	8006ba4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80008c6:	2005      	movs	r0, #5
 80008c8:	f000 ff4e 	bl	8001768 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <HCI_TL_SPI_Reset+0x2c>)
 80008d2:	f006 f967 	bl	8006ba4 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 ff46 	bl	8001768 <HAL_Delay>
  return 0;
 80008dc:	2300      	movs	r3, #0
}  
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	48001c00 	.word	0x48001c00

080008e8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80008f8:	23ff      	movs	r3, #255	; 0xff
 80008fa:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80008fc:	4a25      	ldr	r2, [pc, #148]	; (8000994 <HCI_TL_SPI_Receive+0xac>)
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000906:	6018      	str	r0, [r3, #0]
 8000908:	3304      	adds	r3, #4
 800090a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	4821      	ldr	r0, [pc, #132]	; (8000998 <HCI_TL_SPI_Receive+0xb0>)
 8000912:	f006 f947 	bl	8006ba4 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000916:	f107 010c 	add.w	r1, r7, #12
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2205      	movs	r2, #5
 8000920:	4618      	mov	r0, r3
 8000922:	f004 faf7 	bl	8004f14 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8000926:	7b3b      	ldrb	r3, [r7, #12]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d129      	bne.n	8000980 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800092c:	7c3b      	ldrb	r3, [r7, #16]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21a      	sxth	r2, r3
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b21b      	sxth	r3, r3
 8000936:	4313      	orrs	r3, r2
 8000938:	b21b      	sxth	r3, r3
 800093a:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 800093c:	8bfb      	ldrh	r3, [r7, #30]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01e      	beq.n	8000980 <HCI_TL_SPI_Receive+0x98>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 8000942:	8bfa      	ldrh	r2, [r7, #30]
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	429a      	cmp	r2, r3
 8000948:	d901      	bls.n	800094e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 800094e:	2300      	movs	r3, #0
 8000950:	777b      	strb	r3, [r7, #29]
 8000952:	e010      	b.n	8000976 <HCI_TL_SPI_Receive+0x8e>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8000954:	f107 011b 	add.w	r1, r7, #27
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	2201      	movs	r2, #1
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fad8 	bl	8004f14 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000964:	7f7b      	ldrb	r3, [r7, #29]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	7efa      	ldrb	r2, [r7, #27]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000970:	7f7b      	ldrb	r3, [r7, #29]
 8000972:	3301      	adds	r3, #1
 8000974:	777b      	strb	r3, [r7, #29]
 8000976:	7f7b      	ldrb	r3, [r7, #29]
 8000978:	b29b      	uxth	r3, r3
 800097a:	8bfa      	ldrh	r2, [r7, #30]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8e9      	bhi.n	8000954 <HCI_TL_SPI_Receive+0x6c>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2104      	movs	r1, #4
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <HCI_TL_SPI_Receive+0xb0>)
 8000986:	f006 f90d 	bl	8006ba4 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 800098a:	7f7b      	ldrb	r3, [r7, #29]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	080108ec 	.word	0x080108ec
 8000998:	48000400 	.word	0x48000400

0800099c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80009a8:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <HCI_TL_SPI_Send+0x9c>)
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b2:	6018      	str	r0, [r3, #0]
 80009b4:	3304      	adds	r3, #4
 80009b6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f005 fa34 	bl	8005e24 <HAL_GetTick>
 80009bc:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2104      	movs	r1, #4
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <HCI_TL_SPI_Send+0xa0>)
 80009c8:	f006 f8ec 	bl	8006ba4 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80009cc:	f107 0108 	add.w	r1, r7, #8
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2205      	movs	r2, #5
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 fa9c 	bl	8004f14 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d10f      	bne.n	8000a02 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80009e2:	7a7b      	ldrb	r3, [r7, #9]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	887a      	ldrh	r2, [r7, #2]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d806      	bhi.n	80009fa <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4913      	ldr	r1, [pc, #76]	; (8000a40 <HCI_TL_SPI_Send+0xa4>)
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f004 fa8e 	bl	8004f14 <BSP_SPI1_SendRecv>
 80009f8:	e006      	b.n	8000a08 <HCI_TL_SPI_Send+0x6c>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80009fa:	f06f 0301 	mvn.w	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e002      	b.n	8000a08 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a06:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HCI_TL_SPI_Send+0xa0>)
 8000a0e:	f006 f8c9 	bl	8006ba4 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000a12:	f005 fa07 	bl	8005e24 <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d903      	bls.n	8000a28 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000a20:	f06f 0302 	mvn.w	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
      break;
 8000a26:	e002      	b.n	8000a2e <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dbc7      	blt.n	80009be <HCI_TL_SPI_Send+0x22>
  
  return result;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	080108f4 	.word	0x080108f4
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	20000120 	.word	0x20000120

08000a44 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <IsDataAvailable+0x1c>)
 8000a4c:	f006 f892 	bl	8006b74 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	bf0c      	ite	eq
 8000a56:	2301      	moveq	r3, #1
 8000a58:	2300      	movne	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
} 
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	48000800 	.word	0x48000800

08000a64 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <hci_tl_lowlevel_init+0x50>)
 8000a6c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <hci_tl_lowlevel_init+0x54>)
 8000a70:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <hci_tl_lowlevel_init+0x58>)
 8000a74:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <hci_tl_lowlevel_init+0x5c>)
 8000a78:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <hci_tl_lowlevel_init+0x60>)
 8000a7c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <hci_tl_lowlevel_init+0x64>)
 8000a80:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00e ff69 	bl	800f95c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8000a8a:	4910      	ldr	r1, [pc, #64]	; (8000acc <hci_tl_lowlevel_init+0x68>)
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <hci_tl_lowlevel_init+0x6c>)
 8000a8e:	f005 fd8f 	bl	80065b0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <hci_tl_lowlevel_init+0x70>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <hci_tl_lowlevel_init+0x6c>)
 8000a98:	f005 fd70 	bl	800657c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f005 fad4 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aa6:	2017      	movs	r0, #23
 8000aa8:	f005 faed 	bl	8006086 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	080007ad 	.word	0x080007ad
 8000ab8:	08000889 	.word	0x08000889
 8000abc:	0800099d 	.word	0x0800099d
 8000ac0:	080008e9 	.word	0x080008e9
 8000ac4:	080008b9 	.word	0x080008b9
 8000ac8:	08004f55 	.word	0x08004f55
 8000acc:	16000005 	.word	0x16000005
 8000ad0:	200008f4 	.word	0x200008f4
 8000ad4:	08000ad9 	.word	0x08000ad9

08000ad8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8000adc:	e008      	b.n	8000af0 <hci_tl_lowlevel_isr+0x18>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f00f f8a2 	bl	800fc28 <hci_notify_asynch_evt>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d108      	bne.n	8000afc <hci_tl_lowlevel_isr+0x24>
      return;
	}
    HCI_ProcessEvent=1;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <hci_tl_lowlevel_isr+0x28>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
  while(IsDataAvailable())
 8000af0:	f7ff ffa8 	bl	8000a44 <IsDataAvailable>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f1      	bne.n	8000ade <hci_tl_lowlevel_isr+0x6>
 8000afa:	e000      	b.n	8000afe <hci_tl_lowlevel_isr+0x26>
      return;
 8000afc:	bf00      	nop
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200008fc 	.word	0x200008fc

08000b04 <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	b0cd      	sub	sp, #308	; 0x134
 8000b08:	af06      	add	r7, sp, #24
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Set NVIC Group Priority to 4
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000b0a:	f005 f91b 	bl	8005d44 <HAL_Init>
  
  /* Configure the System clock */
  SystemClock_Config();
 8000b0e:	f000 fd9d 	bl	800164c <SystemClock_Config>
  
  InitTargetPlatform(TARGET_SENSORTILE);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fd28 	bl	8000568 <InitTargetPlatform>
  
  STLBLE_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8000b18:	f005 f990 	bl	8005e3c <HAL_GetHalVersion>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	0e1d      	lsrs	r5, r3, #24
 8000b20:	f005 f98c 	bl	8005e3c <HAL_GetHalVersion>
 8000b24:	4603      	mov	r3, r0
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	b2de      	uxtb	r6, r3
 8000b2a:	f005 f987 	bl	8005e3c <HAL_GetHalVersion>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b2dc      	uxtb	r4, r3
 8000b34:	f005 f982 	bl	8005e3c <HAL_GetHalVersion>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	1d38      	adds	r0, r7, #4
 8000b3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b42:	9204      	str	r2, [sp, #16]
 8000b44:	4a4a      	ldr	r2, [pc, #296]	; (8000c70 <main+0x16c>)
 8000b46:	9203      	str	r2, [sp, #12]
 8000b48:	4a4a      	ldr	r2, [pc, #296]	; (8000c74 <main+0x170>)
 8000b4a:	9202      	str	r2, [sp, #8]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	9400      	str	r4, [sp, #0]
 8000b50:	4633      	mov	r3, r6
 8000b52:	462a      	mov	r2, r5
 8000b54:	4948      	ldr	r1, [pc, #288]	; (8000c78 <main+0x174>)
 8000b56:	f00f fac5 	bl	80100e4 <siprintf>
 8000b5a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8000b5e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 f936 	bl	8002dd8 <CDC_Fill_Buffer>
                        HAL_GetHalVersion()      &0xFF,
                        __DATE__,__TIME__,
                        uhCCR1_Val/10);
  
#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF("Debug Connection         Enabled\r\n");
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4943      	ldr	r1, [pc, #268]	; (8000c7c <main+0x178>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00f fab7 	bl	80100e4 <siprintf>
 8000b76:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000b7a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 f928 	bl	8002dd8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  STLBLE_PRINTF("Debug Notify Trasmission Enabled\r\n");
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	493d      	ldr	r1, [pc, #244]	; (8000c80 <main+0x17c>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00f faa9 	bl	80100e4 <siprintf>
 8000b92:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8000b96:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f91a 	bl	8002dd8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Initialize the BlueNRG */
  Init_BlueNRG_Stack();
 8000ba4:	f000 fba8 	bl	80012f8 <Init_BlueNRG_Stack>
  
  /* Initialize the BlueNRG Custom services */
  Init_BlueNRG_Custom_Services();  
 8000ba8:	f000 fcf4 	bl	8001594 <Init_BlueNRG_Custom_Services>
  
  MX_GPIO_Init();
 8000bac:	f000 f8c6 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb0:	f000 f8a6 	bl	8000d00 <MX_DMA_Init>
  MX_UART5_Init();
 8000bb4:	f000 f874 	bl	8000ca0 <MX_UART5_Init>
  us100_init(&huart5, &hdma_uart5_rx);
 8000bb8:	4932      	ldr	r1, [pc, #200]	; (8000c84 <main+0x180>)
 8000bba:	4833      	ldr	r0, [pc, #204]	; (8000c88 <main+0x184>)
 8000bbc:	f004 fff6 	bl	8005bac <us100_init>

  /* US-100 distance */
  int distance = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* initialize timers */
  InitTimers();
 8000bc6:	f000 fb55 	bl	8001274 <InitTimers>
  
  StartTime = HAL_GetTick();
 8000bca:	f005 f92b 	bl	8005e24 <HAL_GetTick>
 8000bce:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  /* Infinite loop */
  while (1)
  {
    /* Led Blinking when there is not a client connected */
    if(!connected) 
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <main+0x188>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d12a      	bne.n	8000c30 <main+0x12c>
    {
      if(!TargetBoardFeatures.LedStatus) 
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <main+0x18c>)
 8000bdc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d113      	bne.n	8000c0c <main+0x108>
      {
        if(HAL_GetTick()-StartTime > 1000)
 8000be4:	f005 f91e 	bl	8005e24 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bf4:	d91c      	bls.n	8000c30 <main+0x12c>
        {
          LedOnTargetPlatform();
 8000bf6:	f7ff fdcb 	bl	8000790 <LedOnTargetPlatform>
          TargetBoardFeatures.LedStatus =1;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <main+0x18c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000c02:	f005 f90f 	bl	8005e24 <HAL_GetTick>
 8000c06:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000c0a:	e011      	b.n	8000c30 <main+0x12c>
        }
      } 
      else 
      {
        if(HAL_GetTick()-StartTime > 50)
 8000c0c:	f005 f90a 	bl	8005e24 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b32      	cmp	r3, #50	; 0x32
 8000c1a:	d909      	bls.n	8000c30 <main+0x12c>
        {
          LedOffTargetPlatform();
 8000c1c:	f7ff fdbf 	bl	800079e <LedOffTargetPlatform>
          TargetBoardFeatures.LedStatus =0;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <main+0x18c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000c28:	f005 f8fc 	bl	8005e24 <HAL_GetTick>
 8000c2c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
        }
      }
    }
    
    /* handle BLE event */
    if(HCI_ProcessEvent) 
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <main+0x190>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d004      	beq.n	8000c42 <main+0x13e>
    {
      HCI_ProcessEvent=0;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <main+0x190>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
      hci_user_evt_proc();
 8000c3e:	f00e ffc7 	bl	800fbd0 <hci_user_evt_proc>
    }
    
    /* Update the BLE advertise data and make the Board connectable */
    if(set_connectable)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <main+0x194>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d004      	beq.n	8000c54 <main+0x150>
    {
      setConnectable();
 8000c4a:	f001 fa65 	bl	8002118 <setConnectable>
      set_connectable = FALSE;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <main+0x194>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
    }

    us100_data_available();
 8000c54:	f004 ffe8 	bl	8005c28 <us100_data_available>
    
    /* Environmental Data */
    if(SendEnv) 
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <main+0x198>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <main+0x166>
    {
      SendEnv=0;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <main+0x198>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
      SendEnvironmentalData();
 8000c66:	f000 f8c1 	bl	8000dec <SendEnvironmentalData>
    }

    /* Wait for Interrupt */
    __WFI();
 8000c6a:	bf30      	wfi
    if(!connected) 
 8000c6c:	e7b1      	b.n	8000bd2 <main+0xce>
 8000c6e:	bf00      	nop
 8000c70:	08010964 	.word	0x08010964
 8000c74:	08010970 	.word	0x08010970
 8000c78:	080108fc 	.word	0x080108fc
 8000c7c:	0801097c 	.word	0x0801097c
 8000c80:	080109a0 	.word	0x080109a0
 8000c84:	20000ad8 	.word	0x20000ad8
 8000c88:	20000954 	.word	0x20000954
 8000c8c:	20000228 	.word	0x20000228
 8000c90:	200005f0 	.word	0x200005f0
 8000c94:	200008fc 	.word	0x200008fc
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000224 	.word	0x20000224

08000ca0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_UART5_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cb0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_UART5_Init+0x58>)
 8000ce4:	f00b f985 	bl	800bff2 <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 fd53 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000954 	.word	0x20000954
 8000cfc:	40005000 	.word	0x40005000

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6493      	str	r3, [r2, #72]	; 0x48
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_DMA_Init+0x38>)
 8000d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2039      	movs	r0, #57	; 0x39
 8000d24:	f005 f993 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000d28:	2039      	movs	r0, #57	; 0x39
 8000d2a:	f005 f9ac 	bl	8006086 <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_GPIO_Init+0x44>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <MX_GPIO_Init+0x44>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_GPIO_Init+0x44>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_GPIO_Init+0x44>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <MX_GPIO_Init+0x44>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_GPIO_Init+0x44>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_TIM_OC_DelayElapsedCallback>:
* @brief  Output Compare callback in non blocking mode 
* @param  htim : TIM OC handle
* @retval None
*/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t uhCapture=0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  
  /* TIM1_CH1 toggling with frequency = 2Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7f1b      	ldrb	r3, [r3, #28]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10e      	bne.n	8000db6 <HAL_TIM_OC_DelayElapsedCallback+0x32>
  {
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f00a fd14 	bl	800b7c8 <HAL_TIM_ReadCapturedValue>
 8000da0:	60f8      	str	r0, [r7, #12]
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000dac:	3308      	adds	r3, #8
 8000dae:	6353      	str	r3, [r2, #52]	; 0x34
    SendEnv=1;
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
  }
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000908 	.word	0x20000908
 8000dc4:	20000224 	.word	0x20000224

08000dc8 <HAL_TIM_PeriodElapsedCallback>:
* @brief  Period elapsed callback in non blocking mode for Environmental timer
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim == (&TimHandle)) 
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d102      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    CDC_TIM_PeriodElapsedCallback(htim);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f002 f827 	bl	8002e2c <CDC_TIM_PeriodElapsedCallback>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20002328 	.word	0x20002328

08000dec <SendEnvironmentalData>:
* @brief  Send Environmetal Data (Temperature/Pressure/Humidity) to BLE
* @param  None
* @retval None
*/
static void SendEnvironmentalData(void)
{  
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ce      	sub	sp, #312	; 0x138
 8000df0:	af00      	add	r7, sp, #0
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000df2:	4ba7      	ldr	r3, [pc, #668]	; (8001090 <SendEnvironmentalData+0x2a4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	0a1b      	lsrs	r3, r3, #8
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00e      	beq.n	8000e20 <SendEnvironmentalData+0x34>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"Sending: ");
 8000e02:	49a4      	ldr	r1, [pc, #656]	; (8001094 <SendEnvironmentalData+0x2a8>)
 8000e04:	48a4      	ldr	r0, [pc, #656]	; (8001098 <SendEnvironmentalData+0x2ac>)
 8000e06:	f00f f96d 	bl	80100e4 <siprintf>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4aa3      	ldr	r2, [pc, #652]	; (800109c <SendEnvironmentalData+0x2b0>)
 8000e0e:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8000e10:	4ba2      	ldr	r3, [pc, #648]	; (800109c <SendEnvironmentalData+0x2b0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	489f      	ldr	r0, [pc, #636]	; (8001098 <SendEnvironmentalData+0x2ac>)
 8000e1a:	f000 fd7f 	bl	800191c <Term_Update>
 8000e1e:	e00d      	b.n	8000e3c <SendEnvironmentalData+0x50>
  } 
  else 
  {
    STLBLE_PRINTF("Sending: ");
 8000e20:	463b      	mov	r3, r7
 8000e22:	499c      	ldr	r1, [pc, #624]	; (8001094 <SendEnvironmentalData+0x2a8>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00f f95d 	bl	80100e4 <siprintf>
 8000e2a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8000e2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000e32:	463b      	mov	r3, r7
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 ffce 	bl	8002dd8 <CDC_Fill_Buffer>
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Pressure,Humidity, and Temperatures*/
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV)) 
 8000e3c:	4b94      	ldr	r3, [pc, #592]	; (8001090 <SendEnvironmentalData+0x2a4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 81d9 	beq.w	80011fe <SendEnvironmentalData+0x412>
  {
    float SensorValue;
    int32_t PressToSend=0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t HumToSend=0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    int32_t decPart, intPart;
    uint16_t distance = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    
    if (US100_ENABLE) {
    	distance = us100_get_distance();
 8000e6a:	f004 ff25 	bl	8005cb8 <us100_get_distance>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    	Temp1ToSend = distance;
 8000e74:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000e78:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    }

    if(TargetBoardFeatures.HandlePressSensor) 
 8000e7c:	4b88      	ldr	r3, [pc, #544]	; (80010a0 <SendEnvironmentalData+0x2b4>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d055      	beq.n	8000f30 <SendEnvironmentalData+0x144>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8000e84:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f004 fb2d 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8000e92:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 3a90 	vmov	r3, s15
 8000e9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ea2:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8000ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb6:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80010a4 <SendEnvironmentalData+0x2b8>
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec2:	ee17 3a90 	vmov	r3, s15
 8000ec6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      PressToSend=intPart*100+decPart;
 8000eca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ece:	2264      	movs	r2, #100	; 0x64
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000ed8:	4413      	add	r3, r2
 8000eda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000ede:	4b6c      	ldr	r3, [pc, #432]	; (8001090 <SendEnvironmentalData+0x2a4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d010      	beq.n	8000f10 <SendEnvironmentalData+0x124>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Press=%ld ",PressToSend);
 8000eee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000ef2:	496d      	ldr	r1, [pc, #436]	; (80010a8 <SendEnvironmentalData+0x2bc>)
 8000ef4:	4868      	ldr	r0, [pc, #416]	; (8001098 <SendEnvironmentalData+0x2ac>)
 8000ef6:	f00f f8f5 	bl	80100e4 <siprintf>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a67      	ldr	r2, [pc, #412]	; (800109c <SendEnvironmentalData+0x2b0>)
 8000efe:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000f00:	4b66      	ldr	r3, [pc, #408]	; (800109c <SendEnvironmentalData+0x2b0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	4863      	ldr	r0, [pc, #396]	; (8001098 <SendEnvironmentalData+0x2ac>)
 8000f0a:	f000 fd07 	bl	800191c <Term_Update>
 8000f0e:	e00f      	b.n	8000f30 <SendEnvironmentalData+0x144>
      } 
      else 
      {
        STLBLE_PRINTF("Press=%ld ",PressToSend);
 8000f10:	463b      	mov	r3, r7
 8000f12:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000f16:	4964      	ldr	r1, [pc, #400]	; (80010a8 <SendEnvironmentalData+0x2bc>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00f f8e3 	bl	80100e4 <siprintf>
 8000f1e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000f22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f26:	463b      	mov	r3, r7
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 ff54 	bl	8002dd8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 8000f30:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <SendEnvironmentalData+0x2b4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d05a      	beq.n	8000fee <SendEnvironmentalData+0x202>
    {
      
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8000f38:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2104      	movs	r1, #4
 8000f40:	2000      	movs	r0, #0
 8000f42:	f004 fad3 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000f46:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f4e:	ee17 3a90 	vmov	r3, s15
 8000f52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000f56:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8000f5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f76:	ee17 3a90 	vmov	r3, s15
 8000f7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      HumToSend = intPart*10+decPart;
 8000f7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <SendEnvironmentalData+0x2a4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d011      	beq.n	8000fce <SendEnvironmentalData+0x1e2>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Hum=%d ",HumToSend);
 8000faa:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8000fae:	461a      	mov	r2, r3
 8000fb0:	493e      	ldr	r1, [pc, #248]	; (80010ac <SendEnvironmentalData+0x2c0>)
 8000fb2:	4839      	ldr	r0, [pc, #228]	; (8001098 <SendEnvironmentalData+0x2ac>)
 8000fb4:	f00f f896 	bl	80100e4 <siprintf>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a38      	ldr	r2, [pc, #224]	; (800109c <SendEnvironmentalData+0x2b0>)
 8000fbc:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <SendEnvironmentalData+0x2b0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4834      	ldr	r0, [pc, #208]	; (8001098 <SendEnvironmentalData+0x2ac>)
 8000fc8:	f000 fca8 	bl	800191c <Term_Update>
 8000fcc:	e00f      	b.n	8000fee <SendEnvironmentalData+0x202>
      } 
      else 
      {
        STLBLE_PRINTF("Hum=%d ",HumToSend);
 8000fce:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <SendEnvironmentalData+0x2c0>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00f f884 	bl	80100e4 <siprintf>
 8000fdc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000fe0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fef5 	bl	8002dd8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <SendEnvironmentalData+0x2b4>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	f040 80cb 	bne.w	800118e <SendEnvironmentalData+0x3a2>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000ff8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2101      	movs	r1, #1
 8001000:	2000      	movs	r0, #0
 8001002:	f004 fa73 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8001006:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 800100a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800100e:	ee17 3a90 	vmov	r3, s15
 8001012:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001016:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 800101a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800102e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001036:	ee17 3a90 	vmov	r3, s15
 800103a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Temp1ToSend = intPart*10+decPart;
 800103e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001042:	b29b      	uxth	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4413      	add	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001052:	b29b      	uxth	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <SendEnvironmentalData+0x2a4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <SendEnvironmentalData+0x2c8>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp=%d ",Temp1ToSend);
 800106c:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8001070:	461a      	mov	r2, r3
 8001072:	490f      	ldr	r1, [pc, #60]	; (80010b0 <SendEnvironmentalData+0x2c4>)
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <SendEnvironmentalData+0x2ac>)
 8001076:	f00f f835 	bl	80100e4 <siprintf>
 800107a:	4603      	mov	r3, r0
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <SendEnvironmentalData+0x2b0>)
 800107e:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SendEnvironmentalData+0x2b0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <SendEnvironmentalData+0x2ac>)
 800108a:	f000 fc47 	bl	800191c <Term_Update>
 800108e:	e021      	b.n	80010d4 <SendEnvironmentalData+0x2e8>
 8001090:	20000220 	.word	0x20000220
 8001094:	080109c4 	.word	0x080109c4
 8001098:	200009d8 	.word	0x200009d8
 800109c:	20000b20 	.word	0x20000b20
 80010a0:	200005f0 	.word	0x200005f0
 80010a4:	42c80000 	.word	0x42c80000
 80010a8:	080109d0 	.word	0x080109d0
 80010ac:	080109dc 	.word	0x080109dc
 80010b0:	080109e4 	.word	0x080109e4
      } 
      else 
      {
        STLBLE_PRINTF("Temp=%d ",Temp1ToSend);
 80010b4:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 80010b8:	463b      	mov	r3, r7
 80010ba:	4966      	ldr	r1, [pc, #408]	; (8001254 <SendEnvironmentalData+0x468>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f00f f811 	bl	80100e4 <siprintf>
 80010c2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80010c6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80010ca:	463b      	mov	r3, r7
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fe82 	bl	8002dd8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 80010d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010d8:	461a      	mov	r2, r3
 80010da:	2101      	movs	r1, #1
 80010dc:	2001      	movs	r0, #1
 80010de:	f004 fa05 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80010e2:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 80010e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ea:	ee17 3a90 	vmov	r3, s15
 80010ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010f2:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80010f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001106:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001112:	ee17 3a90 	vmov	r3, s15
 8001116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Temp2ToSend = intPart*10+decPart;
 800111a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800111e:	b29b      	uxth	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4413      	add	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	b29a      	uxth	r2, r3
 800112a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800112e:	b29b      	uxth	r3, r3
 8001130:	4413      	add	r3, r2
 8001132:	b29b      	uxth	r3, r3
 8001134:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <SendEnvironmentalData+0x46c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d011      	beq.n	800116c <SendEnvironmentalData+0x380>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp2=%d ",Temp2ToSend);
 8001148:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800114c:	461a      	mov	r2, r3
 800114e:	4943      	ldr	r1, [pc, #268]	; (800125c <SendEnvironmentalData+0x470>)
 8001150:	4843      	ldr	r0, [pc, #268]	; (8001260 <SendEnvironmentalData+0x474>)
 8001152:	f00e ffc7 	bl	80100e4 <siprintf>
 8001156:	4603      	mov	r3, r0
 8001158:	4a42      	ldr	r2, [pc, #264]	; (8001264 <SendEnvironmentalData+0x478>)
 800115a:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 800115c:	4b41      	ldr	r3, [pc, #260]	; (8001264 <SendEnvironmentalData+0x478>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	483e      	ldr	r0, [pc, #248]	; (8001260 <SendEnvironmentalData+0x474>)
 8001166:	f000 fbd9 	bl	800191c <Term_Update>
 800116a:	e03e      	b.n	80011ea <SendEnvironmentalData+0x3fe>
      } 
      else 
      {
        STLBLE_PRINTF("Temp2=%d ",Temp2ToSend);
 800116c:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 8001170:	463b      	mov	r3, r7
 8001172:	493a      	ldr	r1, [pc, #232]	; (800125c <SendEnvironmentalData+0x470>)
 8001174:	4618      	mov	r0, r3
 8001176:	f00e ffb5 	bl	80100e4 <siprintf>
 800117a:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800117e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001182:	463b      	mov	r3, r7
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fe26 	bl	8002dd8 <CDC_Fill_Buffer>
 800118c:	e02d      	b.n	80011ea <SendEnvironmentalData+0x3fe>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    } 
    else if(TargetBoardFeatures.NumTempSensors==1)
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <SendEnvironmentalData+0x47c>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d129      	bne.n	80011ea <SendEnvironmentalData+0x3fe>
//        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
//      }
//      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
//      Temp1ToSend = intPart*10+decPart;
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <SendEnvironmentalData+0x46c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d011      	beq.n	80011ca <SendEnvironmentalData+0x3de>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp1=%d ",Temp1ToSend);
 80011a6:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 80011aa:	461a      	mov	r2, r3
 80011ac:	492f      	ldr	r1, [pc, #188]	; (800126c <SendEnvironmentalData+0x480>)
 80011ae:	482c      	ldr	r0, [pc, #176]	; (8001260 <SendEnvironmentalData+0x474>)
 80011b0:	f00e ff98 	bl	80100e4 <siprintf>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <SendEnvironmentalData+0x478>)
 80011b8:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <SendEnvironmentalData+0x478>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	4827      	ldr	r0, [pc, #156]	; (8001260 <SendEnvironmentalData+0x474>)
 80011c4:	f000 fbaa 	bl	800191c <Term_Update>
 80011c8:	e00f      	b.n	80011ea <SendEnvironmentalData+0x3fe>
      }
      else
      {
        STLBLE_PRINTF("Temp1=%d ",Temp1ToSend);
 80011ca:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 80011ce:	463b      	mov	r3, r7
 80011d0:	4926      	ldr	r1, [pc, #152]	; (800126c <SendEnvironmentalData+0x480>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00e ff86 	bl	80100e4 <siprintf>
 80011d8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80011dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80011e0:	463b      	mov	r3, r7
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fdf7 	bl	8002dd8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
    }
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 80011ea:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 80011ee:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 80011f2:	f8b7 1132 	ldrh.w	r1, [r7, #306]	; 0x132
 80011f6:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80011fa:	f000 fdf9 	bl	8001df0 <Environmental_Update>
  }
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <SendEnvironmentalData+0x46c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00e      	beq.n	800122c <SendEnvironmentalData+0x440>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"\r\n");
 800120e:	4918      	ldr	r1, [pc, #96]	; (8001270 <SendEnvironmentalData+0x484>)
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <SendEnvironmentalData+0x474>)
 8001212:	f00e ff67 	bl	80100e4 <siprintf>
 8001216:	4603      	mov	r3, r0
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <SendEnvironmentalData+0x478>)
 800121a:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <SendEnvironmentalData+0x478>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <SendEnvironmentalData+0x474>)
 8001226:	f000 fb79 	bl	800191c <Term_Update>
  else 
  {
    STLBLE_PRINTF("\r\n");
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
}
 800122a:	e00d      	b.n	8001248 <SendEnvironmentalData+0x45c>
    STLBLE_PRINTF("\r\n");
 800122c:	463b      	mov	r3, r7
 800122e:	4910      	ldr	r1, [pc, #64]	; (8001270 <SendEnvironmentalData+0x484>)
 8001230:	4618      	mov	r0, r3
 8001232:	f00e ff57 	bl	80100e4 <siprintf>
 8001236:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 800123a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800123e:	463b      	mov	r3, r7
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fdc8 	bl	8002dd8 <CDC_Fill_Buffer>
}
 8001248:	bf00      	nop
 800124a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	080109e4 	.word	0x080109e4
 8001258:	20000220 	.word	0x20000220
 800125c:	080109f0 	.word	0x080109f0
 8001260:	200009d8 	.word	0x200009d8
 8001264:	20000b20 	.word	0x20000b20
 8001268:	200005f0 	.word	0x200005f0
 800126c:	080109fc 	.word	0x080109fc
 8001270:	08010a08 	.word	0x08010a08

08001274 <InitTimers>:
*  - 1 for sending the Environmental info
* @param  None
* @retval None
*/
static void InitTimers(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
  
  /* Timer Output Compare Configuration Structure declaration */
  TIM_OC_InitTypeDef sConfig;
  
  /* Compute the prescaler value to have TIM3 counter clock equal to 10 KHz */
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <InitTimers+0x74>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <InitTimers+0x78>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0b5b      	lsrs	r3, r3, #13
 8001286:	3b01      	subs	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
  
  /* Set TIM1 instance (Motion)*/
  /* Set TIM1 instance */
  TimCCHandle.Instance = TIM1;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <InitTimers+0x7c>)
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <InitTimers+0x80>)
 800128e:	601a      	str	r2, [r3, #0]
  TimCCHandle.Init.Period        = 65535;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <InitTimers+0x7c>)
 8001292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001296:	60da      	str	r2, [r3, #12]
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8001298:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <InitTimers+0x7c>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	6053      	str	r3, [r2, #4]
  TimCCHandle.Init.ClockDivision = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <InitTimers+0x7c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <InitTimers+0x7c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <InitTimers+0x7c>)
 80012ac:	f009 fe76 	bl	800af9c <HAL_TIM_OC_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <InitTimers+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80012b6:	f000 fa6f 	bl	8001798 <Error_Handler>
  }
  
  /* Configure the Output Compare channels */
  /* Common configuration for all channels */
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 80012ba:	2330      	movs	r3, #48	; 0x30
 80012bc:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 80012be:	2302      	movs	r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
  
  /* Output Compare Toggle Mode configuration: Channel1 */
  sConfig.Pulse = uhCCR1_Val;
 80012c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012c6:	607b      	str	r3, [r7, #4]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <InitTimers+0x7c>)
 80012d0:	f00a fa04 	bl	800b6dc <HAL_TIM_OC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <InitTimers+0x6a>
  {
    /* Configuration Error */
    Error_Handler();
 80012da:	f000 fa5d 	bl	8001798 <Error_Handler>
  }  
  
}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000004 	.word	0x20000004
 80012ec:	d1b71759 	.word	0xd1b71759
 80012f0:	20000908 	.word	0x20000908
 80012f4:	40012c00 	.word	0x40012c00

080012f8 <Init_BlueNRG_Stack>:
/** @brief Initialize the BlueNRG Stack
* @param None
* @retval None
*/
static void Init_BlueNRG_Stack(void)
{
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	b0dd      	sub	sp, #372	; 0x174
 80012fc:	af0a      	add	r7, sp, #40	; 0x28
  const char BoardName[8] = {NAME_STLBLE,0};
 80012fe:	4a99      	ldr	r2, [pc, #612]	; (8001564 <Init_BlueNRG_Stack+0x26c>)
 8001300:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001308:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t  hwVersion;
  uint16_t fwVersion;
  
#ifdef STATIC_BLE_MAC
  {
    uint8_t tmp_bdaddr[6]= {STATIC_BLE_MAC};
 800130c:	4a96      	ldr	r2, [pc, #600]	; (8001568 <Init_BlueNRG_Stack+0x270>)
 800130e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001312:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001316:	6018      	str	r0, [r3, #0]
 8001318:	3304      	adds	r3, #4
 800131a:	8019      	strh	r1, [r3, #0]
    int32_t i;
    for(i=0;i<6;i++)
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001322:	e010      	b.n	8001346 <Init_BlueNRG_Stack+0x4e>
      bdaddr[i] = tmp_bdaddr[i];
 8001324:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001328:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800132c:	4413      	add	r3, r2
 800132e:	7819      	ldrb	r1, [r3, #0]
 8001330:	4a8e      	ldr	r2, [pc, #568]	; (800156c <Init_BlueNRG_Stack+0x274>)
 8001332:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001336:	4413      	add	r3, r2
 8001338:	460a      	mov	r2, r1
 800133a:	701a      	strb	r2, [r3, #0]
    for(i=0;i<6;i++)
 800133c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001340:	3301      	adds	r3, #1
 8001342:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001346:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800134a:	2b05      	cmp	r3, #5
 800134c:	ddea      	ble.n	8001324 <Init_BlueNRG_Stack+0x2c>
  }
#endif /* STATIC_BLE_MAC */

  /* Initialize the BlueNRG HCI */
  hci_init(HCI_Event_CB, NULL);
 800134e:	2100      	movs	r1, #0
 8001350:	4887      	ldr	r0, [pc, #540]	; (8001570 <Init_BlueNRG_Stack+0x278>)
 8001352:	f00e fac1 	bl	800f8d8 <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001356:	f507 728b 	add.w	r2, r7, #278	; 0x116
 800135a:	f207 1319 	addw	r3, r7, #281	; 0x119
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f00e f92d 	bl	800f5c0 <getBlueNRGVersion>
  * Reset BlueNRG again otherwise we won't
  * be able to change its MAC address.
  * aci_hal_write_config_data() must be the first
  * command after reset otherwise it will fail.
  */
  hci_reset();
 8001366:	f00e f96f 	bl	800f648 <hci_reset>
  
  HAL_Delay(100);
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f000 f9fc 	bl	8001768 <HAL_Delay>
    bdaddr[4] = (((STLBLE_VERSION_MAJOR-48)*10) + (STLBLE_VERSION_MINOR-48)+100)&0xFF;
    bdaddr[5] = 0xC0; /* for a Legal BLE Random MAC */
  }
#else /* STATIC_BLE_MAC */
  
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001370:	4a7e      	ldr	r2, [pc, #504]	; (800156c <Init_BlueNRG_Stack+0x274>)
 8001372:	2106      	movs	r1, #6
 8001374:	2000      	movs	r0, #0
 8001376:	f00e f88b 	bl	800f490 <aci_hal_write_config_data>
 800137a:	4603      	mov	r3, r0
 800137c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if(ret)
 8001380:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001384:	2b00      	cmp	r3, #0
 8001386:	d010      	beq.n	80013aa <Init_BlueNRG_Stack+0xb2>
  {
    STLBLE_PRINTF("\r\nSetting Pubblic BD_ADDR failed\r\n");
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4979      	ldr	r1, [pc, #484]	; (8001574 <Init_BlueNRG_Stack+0x27c>)
 800138e:	4618      	mov	r0, r3
 8001390:	f00e fea8 	bl	80100e4 <siprintf>
 8001394:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8001398:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fd18 	bl	8002dd8 <CDC_Fill_Buffer>
    goto fail;
 80013a8:	e0d7      	b.n	800155a <Init_BlueNRG_Stack+0x262>
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_init();    
 80013aa:	f00d fe31 	bl	800f010 <aci_gatt_init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  if(ret)
 80013b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d010      	beq.n	80013de <Init_BlueNRG_Stack+0xe6>
  {
    STLBLE_PRINTF("\r\nGATT_Init failed\r\n");
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	496d      	ldr	r1, [pc, #436]	; (8001578 <Init_BlueNRG_Stack+0x280>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00e fe8e 	bl	80100e4 <siprintf>
 80013c8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80013cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 fcfe 	bl	8002dd8 <CDC_Fill_Buffer>
    goto fail;
 80013dc:	e0bd      	b.n	800155a <Init_BlueNRG_Stack+0x262>
  }
  

    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80013de:	f507 728f 	add.w	r2, r7, #286	; 0x11e
 80013e2:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	2207      	movs	r2, #7
 80013f2:	2100      	movs	r1, #0
 80013f4:	2001      	movs	r0, #1
 80013f6:	f00d fc23 	bl	800ec40 <aci_gap_init_IDB05A1>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  
  if(ret != BLE_STATUS_SUCCESS)
 8001400:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001404:	2b00      	cmp	r3, #0
 8001406:	d010      	beq.n	800142a <Init_BlueNRG_Stack+0x132>
  {
    STLBLE_PRINTF("\r\nGAP_Init failed\r\n");
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	495b      	ldr	r1, [pc, #364]	; (800157c <Init_BlueNRG_Stack+0x284>)
 800140e:	4618      	mov	r0, r3
 8001410:	f00e fe68 	bl	80100e4 <siprintf>
 8001414:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8001418:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fcd8 	bl	8002dd8 <CDC_Fill_Buffer>
    goto fail;
 8001428:	e097      	b.n	800155a <Init_BlueNRG_Stack+0x262>
    STLBLE_PRINTF("\r\nSetting the Static Random BD_ADDR failed\r\n");
    goto fail;
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800142a:	f8b7 011e 	ldrh.w	r0, [r7, #286]	; 0x11e
 800142e:	f8b7 111c 	ldrh.w	r1, [r7, #284]	; 0x11c
 8001432:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2307      	movs	r3, #7
 800143a:	2200      	movs	r2, #0
 800143c:	f00d ff69 	bl	800f312 <aci_gatt_update_char_value>
 8001440:	4603      	mov	r3, r0
 8001442:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                                   7/*strlen(BoardName)*/, (uint8_t *)BoardName);
  
  if(ret)
 8001446:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800144a:	2b00      	cmp	r3, #0
 800144c:	d010      	beq.n	8001470 <Init_BlueNRG_Stack+0x178>
  {
    STLBLE_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	494b      	ldr	r1, [pc, #300]	; (8001580 <Init_BlueNRG_Stack+0x288>)
 8001454:	4618      	mov	r0, r3
 8001456:	f00e fe45 	bl	80100e4 <siprintf>
 800145a:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 800145e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fcb5 	bl	8002dd8 <CDC_Fill_Buffer>
    while(1);
 800146e:	e7fe      	b.n	800146e <Init_BlueNRG_Stack+0x176>
  }
  
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001470:	2301      	movs	r3, #1
 8001472:	9303      	str	r3, [sp, #12]
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <Init_BlueNRG_Stack+0x28c>)
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	2300      	movs	r3, #0
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	2310      	movs	r3, #16
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2307      	movs	r3, #7
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2001      	movs	r0, #1
 8001488:	f00d fd19 	bl	800eebe <aci_gap_set_auth_requirement>
 800148c:	4603      	mov	r3, r0
 800148e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                                     OOB_AUTH_DATA_ABSENT,
                                     NULL, 7, 16,
                                     USE_FIXED_PIN_FOR_PAIRING, 123456,
                                     BONDING);
  if (ret != BLE_STATUS_SUCCESS) 
 8001492:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001496:	2b00      	cmp	r3, #0
 8001498:	d010      	beq.n	80014bc <Init_BlueNRG_Stack+0x1c4>
  {
    STLBLE_PRINTF("\r\nGAP setting Authentication failed\r\n");
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	493a      	ldr	r1, [pc, #232]	; (8001588 <Init_BlueNRG_Stack+0x290>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00e fe1f 	bl	80100e4 <siprintf>
 80014a6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 80014aa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fc8f 	bl	8002dd8 <CDC_Fill_Buffer>
    goto fail;
 80014ba:	e04e      	b.n	800155a <Init_BlueNRG_Stack+0x262>
  }
  
  STLBLE_PRINTF("SERVER: BLE Stack Initialized \r\n"
 80014bc:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80014c0:	469c      	mov	ip, r3
 80014c2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	461c      	mov	r4, r3
 80014cc:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f003 020f 	and.w	r2, r3, #15
 80014d8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80014dc:	2b30      	cmp	r3, #48	; 0x30
 80014de:	d905      	bls.n	80014ec <Init_BlueNRG_Stack+0x1f4>
 80014e0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	3360      	adds	r3, #96	; 0x60
 80014ea:	e000      	b.n	80014ee <Init_BlueNRG_Stack+0x1f6>
 80014ec:	2361      	movs	r3, #97	; 0x61
 80014ee:	491f      	ldr	r1, [pc, #124]	; (800156c <Init_BlueNRG_Stack+0x274>)
 80014f0:	7949      	ldrb	r1, [r1, #5]
 80014f2:	460d      	mov	r5, r1
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <Init_BlueNRG_Stack+0x274>)
 80014f6:	7909      	ldrb	r1, [r1, #4]
 80014f8:	460e      	mov	r6, r1
 80014fa:	491c      	ldr	r1, [pc, #112]	; (800156c <Init_BlueNRG_Stack+0x274>)
 80014fc:	78c9      	ldrb	r1, [r1, #3]
 80014fe:	60f9      	str	r1, [r7, #12]
 8001500:	491a      	ldr	r1, [pc, #104]	; (800156c <Init_BlueNRG_Stack+0x274>)
 8001502:	7889      	ldrb	r1, [r1, #2]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	4919      	ldr	r1, [pc, #100]	; (800156c <Init_BlueNRG_Stack+0x274>)
 8001508:	7849      	ldrb	r1, [r1, #1]
 800150a:	6079      	str	r1, [r7, #4]
 800150c:	4917      	ldr	r1, [pc, #92]	; (800156c <Init_BlueNRG_Stack+0x274>)
 800150e:	7809      	ldrb	r1, [r1, #0]
 8001510:	f107 0010 	add.w	r0, r7, #16
 8001514:	9109      	str	r1, [sp, #36]	; 0x24
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	9108      	str	r1, [sp, #32]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	9107      	str	r1, [sp, #28]
 800151e:	68f9      	ldr	r1, [r7, #12]
 8001520:	9106      	str	r1, [sp, #24]
 8001522:	9605      	str	r6, [sp, #20]
 8001524:	9504      	str	r5, [sp, #16]
 8001526:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800152a:	9103      	str	r1, [sp, #12]
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	9400      	str	r4, [sp, #0]
 8001532:	4663      	mov	r3, ip
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <Init_BlueNRG_Stack+0x294>)
 8001536:	4916      	ldr	r1, [pc, #88]	; (8001590 <Init_BlueNRG_Stack+0x298>)
 8001538:	f00e fdd4 	bl	80100e4 <siprintf>
 800153c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8001540:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fc44 	bl	8002dd8 <CDC_Fill_Buffer>
                    (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a',
                    BoardName,
                    bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  
  /* Set output power level */
  aci_hal_set_tx_power_level(1,4);
 8001550:	2104      	movs	r1, #4
 8001552:	2001      	movs	r0, #1
 8001554:	f00e f803 	bl	800f55e <aci_hal_set_tx_power_level>
  
  return;
 8001558:	e000      	b.n	800155c <Init_BlueNRG_Stack+0x264>
  
fail:
  return;
 800155a:	bf00      	nop
}
 800155c:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001560:	46bd      	mov	sp, r7
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	08010b38 	.word	0x08010b38
 8001568:	08010b40 	.word	0x08010b40
 800156c:	20000900 	.word	0x20000900
 8001570:	080029c1 	.word	0x080029c1
 8001574:	08010a0c 	.word	0x08010a0c
 8001578:	08010a30 	.word	0x08010a30
 800157c:	08010a48 	.word	0x08010a48
 8001580:	08010a5c 	.word	0x08010a5c
 8001584:	0001e240 	.word	0x0001e240
 8001588:	08010a84 	.word	0x08010a84
 800158c:	08010aac 	.word	0x08010aac
 8001590:	08010ab8 	.word	0x08010ab8

08001594 <Init_BlueNRG_Custom_Services>:
/** @brief Initialize all the Custom BlueNRG services
* @param None
* @retval None
*/
static void Init_BlueNRG_Custom_Services(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0c6      	sub	sp, #280	; 0x118
 8001598:	af00      	add	r7, sp, #0
  int ret;
  
  ret = Add_HWServW2ST_Service();
 800159a:	f000 fb2b 	bl	8001bf4 <Add_HWServW2ST_Service>
 800159e:	4603      	mov	r3, r0
 80015a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 80015a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10e      	bne.n	80015ca <Init_BlueNRG_Custom_Services+0x36>
  {
    STLBLE_PRINTF("HW      Service W2ST added successfully\r\n");
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4923      	ldr	r1, [pc, #140]	; (800163c <Init_BlueNRG_Custom_Services+0xa8>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00e fd97 	bl	80100e4 <siprintf>
 80015b6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80015ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fc08 	bl	8002dd8 <CDC_Fill_Buffer>
 80015c8:	e00d      	b.n	80015e6 <Init_BlueNRG_Custom_Services+0x52>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding HW Service W2ST\r\n");
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	491c      	ldr	r1, [pc, #112]	; (8001640 <Init_BlueNRG_Custom_Services+0xac>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00e fd88 	bl	80100e4 <siprintf>
 80015d4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80015d8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fbf9 	bl	8002dd8 <CDC_Fill_Buffer>
  }
  
  ret = Add_ConfigW2ST_Service();
 80015e6:	f000 f8db 	bl	80017a0 <Add_ConfigW2ST_Service>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 80015f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10e      	bne.n	8001616 <Init_BlueNRG_Custom_Services+0x82>
  {
    STLBLE_PRINTF("Config  Service W2ST added successfully\r\n");
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4912      	ldr	r1, [pc, #72]	; (8001644 <Init_BlueNRG_Custom_Services+0xb0>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00e fd71 	bl	80100e4 <siprintf>
 8001602:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8001606:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f001 fbe2 	bl	8002dd8 <CDC_Fill_Buffer>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
  }
}
 8001614:	e00d      	b.n	8001632 <Init_BlueNRG_Custom_Services+0x9e>
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	490b      	ldr	r1, [pc, #44]	; (8001648 <Init_BlueNRG_Custom_Services+0xb4>)
 800161a:	4618      	mov	r0, r3
 800161c:	f00e fd62 	bl	80100e4 <siprintf>
 8001620:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8001624:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f001 fbd3 	bl	8002dd8 <CDC_Fill_Buffer>
}
 8001632:	bf00      	nop
 8001634:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	08010b48 	.word	0x08010b48
 8001640:	08010b74 	.word	0x08010b74
 8001644:	08010b9c 	.word	0x08010b9c
 8001648:	08010bc8 	.word	0x08010bc8

0800164c <SystemClock_Config>:
* @brief  System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0ba      	sub	sp, #232	; 0xe8
 8001650:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001652:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001666:	2244      	movs	r2, #68	; 0x44
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f00e fc78 	bl	800ff60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	2288      	movs	r2, #136	; 0x88
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00e fc71 	bl	800ff60 <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <SystemClock_Config+0x118>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	4a38      	ldr	r2, [pc, #224]	; (8001764 <SystemClock_Config+0x118>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6593      	str	r3, [r2, #88]	; 0x58
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <SystemClock_Config+0x118>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 8001696:	f007 fbb5 	bl	8008e04 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800169a:	2304      	movs	r3, #4
 800169c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016aa:	4618      	mov	r0, r3
 80016ac:	f007 fbd8 	bl	8008e60 <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d000      	beq.n	80016b8 <SystemClock_Config+0x6c>
  {
    while(1);
 80016b6:	e7fe      	b.n	80016b6 <SystemClock_Config+0x6a>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 80016b8:	f008 fca8 	bl	800a00c <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 80016bc:	2310      	movs	r3, #16
 80016be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 80016ce:	23b0      	movs	r3, #176	; 0xb0
 80016d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80016da:	2301      	movs	r3, #1
 80016dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 80016e0:	2306      	movs	r3, #6
 80016e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 80016e6:	2328      	movs	r3, #40	; 0x28
 80016e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 80016f2:	2304      	movs	r3, #4
 80016f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001702:	4618      	mov	r0, r3
 8001704:	f007 fbac 	bl	8008e60 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d000      	beq.n	8001710 <SystemClock_Config+0xc4>
  {
    while(1);
 800170e:	e7fe      	b.n	800170e <SystemClock_Config+0xc2>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8001710:	f008 fc94 	bl	800a03c <HAL_RCCEx_EnableMSIPLLMode>
  
  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001718:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800171a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800171e:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	4618      	mov	r0, r3
 8001726:	f008 f987 	bl	8009a38 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800172a:	230f      	movs	r3, #15
 800172c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2303      	movs	r3, #3
 8001732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001748:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800174c:	2104      	movs	r1, #4
 800174e:	4618      	mov	r0, r3
 8001750:	f007 ff6c 	bl	800962c <HAL_RCC_ClockConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d000      	beq.n	800175c <SystemClock_Config+0x110>
  {
    while(1);
 800175a:	e7fe      	b.n	800175a <SystemClock_Config+0x10e>
  }
}
 800175c:	bf00      	nop
 800175e:	37e8      	adds	r7, #232	; 0xe8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_Delay>:
* @note This is a user implementation using WFI state
* @param Delay: specifies the delay time length, in milliseconds.
* @retval None
*/
void HAL_Delay(__IO uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8001774:	f004 fb56 	bl	8005e24 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800177a:	e000      	b.n	800177e <HAL_Delay+0x16>
  {
    __WFI();
 800177c:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay)
 800177e:	f004 fb51 	bl	8005e24 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3f6      	bcc.n	800177c <HAL_Delay+0x14>
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <Error_Handler>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x4>
	...

080017a0 <Add_ConfigW2ST_Service>:
* @brief  Add the Config service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_ConfigW2ST_Service(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  
  uint8_t uuid[16];
  
  COPY_CONFIG_SERVICE_UUID(uuid);
 80017a6:	231b      	movs	r3, #27
 80017a8:	713b      	strb	r3, [r7, #4]
 80017aa:	23c5      	movs	r3, #197	; 0xc5
 80017ac:	717b      	strb	r3, [r7, #5]
 80017ae:	23d5      	movs	r3, #213	; 0xd5
 80017b0:	71bb      	strb	r3, [r7, #6]
 80017b2:	23a5      	movs	r3, #165	; 0xa5
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	2302      	movs	r3, #2
 80017b8:	723b      	strb	r3, [r7, #8]
 80017ba:	2300      	movs	r3, #0
 80017bc:	727b      	strb	r3, [r7, #9]
 80017be:	23b4      	movs	r3, #180	; 0xb4
 80017c0:	72bb      	strb	r3, [r7, #10]
 80017c2:	239a      	movs	r3, #154	; 0x9a
 80017c4:	72fb      	strb	r3, [r7, #11]
 80017c6:	23e1      	movs	r3, #225	; 0xe1
 80017c8:	733b      	strb	r3, [r7, #12]
 80017ca:	2311      	movs	r3, #17
 80017cc:	737b      	strb	r3, [r7, #13]
 80017ce:	230f      	movs	r3, #15
 80017d0:	73bb      	strb	r3, [r7, #14]
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	2300      	movs	r3, #0
 80017d8:	743b      	strb	r3, [r7, #16]
 80017da:	2300      	movs	r3, #0
 80017dc:	747b      	strb	r3, [r7, #17]
 80017de:	2300      	movs	r3, #0
 80017e0:	74bb      	strb	r3, [r7, #18]
 80017e2:	2300      	movs	r3, #0
 80017e4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);
 80017e6:	1d39      	adds	r1, r7, #4
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <Add_ConfigW2ST_Service+0xe4>)
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2304      	movs	r3, #4
 80017ee:	2201      	movs	r2, #1
 80017f0:	2002      	movs	r0, #2
 80017f2:	f00d fc30 	bl	800f056 <aci_gatt_add_serv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
  
  if (ret != BLE_STATUS_SUCCESS)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d139      	bne.n	8001874 <Add_ConfigW2ST_Service+0xd4>
    goto fail;
  
  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 8001800:	231b      	movs	r3, #27
 8001802:	713b      	strb	r3, [r7, #4]
 8001804:	23c5      	movs	r3, #197	; 0xc5
 8001806:	717b      	strb	r3, [r7, #5]
 8001808:	23d5      	movs	r3, #213	; 0xd5
 800180a:	71bb      	strb	r3, [r7, #6]
 800180c:	23a5      	movs	r3, #165	; 0xa5
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	2302      	movs	r3, #2
 8001812:	723b      	strb	r3, [r7, #8]
 8001814:	2300      	movs	r3, #0
 8001816:	727b      	strb	r3, [r7, #9]
 8001818:	2336      	movs	r3, #54	; 0x36
 800181a:	72bb      	strb	r3, [r7, #10]
 800181c:	23ac      	movs	r3, #172	; 0xac
 800181e:	72fb      	strb	r3, [r7, #11]
 8001820:	23e1      	movs	r3, #225	; 0xe1
 8001822:	733b      	strb	r3, [r7, #12]
 8001824:	2311      	movs	r3, #17
 8001826:	737b      	strb	r3, [r7, #13]
 8001828:	230f      	movs	r3, #15
 800182a:	73bb      	strb	r3, [r7, #14]
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	2302      	movs	r3, #2
 8001832:	743b      	strb	r3, [r7, #16]
 8001834:	2300      	movs	r3, #0
 8001836:	747b      	strb	r3, [r7, #17]
 8001838:	2300      	movs	r3, #0
 800183a:	74bb      	strb	r3, [r7, #18]
 800183c:	2300      	movs	r3, #0
 800183e:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <Add_ConfigW2ST_Service+0xe4>)
 8001842:	8818      	ldrh	r0, [r3, #0]
 8001844:	1d3a      	adds	r2, r7, #4
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <Add_ConfigW2ST_Service+0xe8>)
 8001848:	9305      	str	r3, [sp, #20]
 800184a:	2301      	movs	r3, #1
 800184c:	9304      	str	r3, [sp, #16]
 800184e:	2310      	movs	r3, #16
 8001850:	9303      	str	r3, [sp, #12]
 8001852:	2305      	movs	r3, #5
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2300      	movs	r3, #0
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2314      	movs	r3, #20
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2314      	movs	r3, #20
 8001860:	2102      	movs	r1, #2
 8001862:	f00d fc84 	bl	800f16e <aci_gatt_add_char>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &ConfigCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <Add_ConfigW2ST_Service+0xd8>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 8001870:	2300      	movs	r3, #0
 8001872:	e003      	b.n	800187c <Add_ConfigW2ST_Service+0xdc>
    goto fail;
 8001874:	bf00      	nop
 8001876:	e000      	b.n	800187a <Add_ConfigW2ST_Service+0xda>
    goto fail;
 8001878:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding Configuration service.\n");
  return BLE_STATUS_ERROR;
 800187a:	2347      	movs	r3, #71	; 0x47
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000232 	.word	0x20000232
 8001888:	20000234 	.word	0x20000234

0800188c <Stderr_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Stderr_Update(uint8_t *data,uint8_t length)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af02      	add	r7, sp, #8
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages*/
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e02d      	b.n	80018fa <Stderr_Update+0x6e>
  {
    DataToSend = (length-Offset);
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	2b14      	cmp	r3, #20
 80018aa:	bf28      	it	cs
 80018ac:	2314      	movcs	r3, #20
 80018ae:	73bb      	strb	r3, [r7, #14]
    
    /* keep a copy */
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	7bba      	ldrb	r2, [r7, #14]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <Stderr_Update+0x80>)
 80018bc:	f00e fb42 	bl	800ff44 <memcpy>
    LastStderrLen = DataToSend;
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <Stderr_Update+0x84>)
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <Stderr_Update+0x88>)
 80018c8:	8818      	ldrh	r0, [r3, #0]
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <Stderr_Update+0x8c>)
 80018cc:	8819      	ldrh	r1, [r3, #0]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	7bba      	ldrb	r2, [r7, #14]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	2200      	movs	r2, #0
 80018dc:	f00d fd19 	bl	800f312 <aci_gatt_update_char_value>
 80018e0:	4603      	mov	r3, r0
 80018e2:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS)
 80018e4:	7b7b      	ldrb	r3, [r7, #13]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <Stderr_Update+0x62>
    {
      return BLE_STATUS_ERROR;
 80018ea:	2347      	movs	r3, #71	; 0x47
 80018ec:	e00a      	b.n	8001904 <Stderr_Update+0x78>
    }
    HAL_Delay(10);
 80018ee:	200a      	movs	r0, #10
 80018f0:	f7ff ff3a 	bl	8001768 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3314      	adds	r3, #20
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3cd      	bcc.n	800189e <Stderr_Update+0x12>
  }
  
  return BLE_STATUS_SUCCESS;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000023c 	.word	0x2000023c
 8001910:	20000250 	.word	0x20000250
 8001914:	20000236 	.word	0x20000236
 8001918:	2000023a 	.word	0x2000023a

0800191c <Term_Update>:
* @param  uint8_t *data string to write
* @param  uint8_t lenght lengt of string to write
* @retval tBleStatus      Status
*/
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0c6      	sub	sp, #280	; 0x118
 8001920:	af02      	add	r7, sp, #8
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	6018      	str	r0, [r3, #0]
 8001926:	460a      	mov	r2, r1
 8001928:	1cfb      	adds	r3, r7, #3
 800192a:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 800192c:	2300      	movs	r3, #0
 800192e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001932:	e04d      	b.n	80019d0 <Term_Update+0xb4>
  {
    DataToSend = (length-Offset);
 8001934:	1cfb      	adds	r3, r7, #3
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8001942:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001946:	2b14      	cmp	r3, #20
 8001948:	bf28      	it	cs
 800194a:	2314      	movcs	r3, #20
 800194c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    
    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 8001950:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001954:	1d3a      	adds	r2, r7, #4
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4413      	add	r3, r2
 800195a:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800195e:	4619      	mov	r1, r3
 8001960:	4821      	ldr	r0, [pc, #132]	; (80019e8 <Term_Update+0xcc>)
 8001962:	f00e faef 	bl	800ff44 <memcpy>
    LastTermLen = DataToSend;
 8001966:	4a21      	ldr	r2, [pc, #132]	; (80019ec <Term_Update+0xd0>)
 8001968:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800196c:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <Term_Update+0xd4>)
 8001970:	8818      	ldrh	r0, [r3, #0]
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <Term_Update+0xd8>)
 8001974:	8819      	ldrh	r1, [r3, #0]
 8001976:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800197a:	1d3a      	adds	r2, r7, #4
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	4413      	add	r3, r2
 8001980:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4613      	mov	r3, r2
 8001988:	2200      	movs	r2, #0
 800198a:	f00d fcc2 	bl	800f312 <aci_gatt_update_char_value>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
    if (ret != BLE_STATUS_SUCCESS) 
 8001994:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001998:	2b00      	cmp	r3, #0
 800199a:	d011      	beq.n	80019c0 <Term_Update+0xa4>
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	4915      	ldr	r1, [pc, #84]	; (80019f8 <Term_Update+0xdc>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00e fb9e 	bl	80100e4 <siprintf>
 80019a8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80019ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fa0e 	bl	8002dd8 <CDC_Fill_Buffer>
      return BLE_STATUS_ERROR;
 80019bc:	2347      	movs	r3, #71	; 0x47
 80019be:	e00e      	b.n	80019de <Term_Update+0xc2>
    }
    HAL_Delay(20);
 80019c0:	2014      	movs	r0, #20
 80019c2:	f7ff fed1 	bl	8001768 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 80019c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ca:	3314      	adds	r3, #20
 80019cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019d0:	1cfb      	adds	r3, r7, #3
 80019d2:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3ab      	bcc.n	8001934 <Term_Update+0x18>
  }
  
  return BLE_STATUS_SUCCESS;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000254 	.word	0x20000254
 80019ec:	20000268 	.word	0x20000268
 80019f0:	20000236 	.word	0x20000236
 80019f4:	20000238 	.word	0x20000238
 80019f8:	08010bf4 	.word	0x08010bf4

080019fc <Stderr_Update_AfterRead>:
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Stderr_Update_AfterRead(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <Stderr_Update_AfterRead+0x34>)
 8001a04:	8818      	ldrh	r0, [r3, #0]
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <Stderr_Update_AfterRead+0x38>)
 8001a08:	8819      	ldrh	r1, [r3, #0]
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <Stderr_Update_AfterRead+0x3c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <Stderr_Update_AfterRead+0x40>)
 8001a10:	9200      	str	r2, [sp, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f00d fc7d 	bl	800f312 <aci_gatt_update_char_value>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) 
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <Stderr_Update_AfterRead+0x2a>
  {
    return BLE_STATUS_ERROR;
 8001a22:	2347      	movs	r3, #71	; 0x47
 8001a24:	e000      	b.n	8001a28 <Stderr_Update_AfterRead+0x2c>
  }
  
  return BLE_STATUS_SUCCESS;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000236 	.word	0x20000236
 8001a34:	2000023a 	.word	0x2000023a
 8001a38:	20000250 	.word	0x20000250
 8001a3c:	2000023c 	.word	0x2000023c

08001a40 <Term_Update_AfterRead>:
* @brief  Update Terminal characteristic value after a read request
* @param None
* @retval tBleStatus      Status
*/
static tBleStatus Term_Update_AfterRead(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0c4      	sub	sp, #272	; 0x110
 8001a44:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <Term_Update_AfterRead+0x84>)
 8001a48:	8818      	ldrh	r0, [r3, #0]
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <Term_Update_AfterRead+0x88>)
 8001a4c:	8819      	ldrh	r1, [r3, #0]
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <Term_Update_AfterRead+0x8c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <Term_Update_AfterRead+0x90>)
 8001a54:	9200      	str	r2, [sp, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f00d fc5b 	bl	800f312 <aci_gatt_update_char_value>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  if (ret != BLE_STATUS_SUCCESS) 
 8001a62:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d026      	beq.n	8001ab8 <Term_Update_AfterRead+0x78>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <Term_Update_AfterRead+0x94>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0a5b      	lsrs	r3, r3, #9
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00e      	beq.n	8001a98 <Term_Update_AfterRead+0x58>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Stdout Char\r\n");
 8001a7a:	4917      	ldr	r1, [pc, #92]	; (8001ad8 <Term_Update_AfterRead+0x98>)
 8001a7c:	4817      	ldr	r0, [pc, #92]	; (8001adc <Term_Update_AfterRead+0x9c>)
 8001a7e:	f00e fb31 	bl	80100e4 <siprintf>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <Term_Update_AfterRead+0xa0>)
 8001a86:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <Term_Update_AfterRead+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4812      	ldr	r0, [pc, #72]	; (8001adc <Term_Update_AfterRead+0x9c>)
 8001a92:	f7ff fefb 	bl	800188c <Stderr_Update>
 8001a96:	e00d      	b.n	8001ab4 <Term_Update_AfterRead+0x74>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 8001a98:	463b      	mov	r3, r7
 8001a9a:	490f      	ldr	r1, [pc, #60]	; (8001ad8 <Term_Update_AfterRead+0x98>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00e fb21 	bl	80100e4 <siprintf>
 8001aa2:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8001aa6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 f992 	bl	8002dd8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001ab4:	2347      	movs	r3, #71	; 0x47
 8001ab6:	e000      	b.n	8001aba <Term_Update_AfterRead+0x7a>
  }
  
  return BLE_STATUS_SUCCESS;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000236 	.word	0x20000236
 8001ac8:	20000238 	.word	0x20000238
 8001acc:	20000268 	.word	0x20000268
 8001ad0:	20000254 	.word	0x20000254
 8001ad4:	20000220 	.word	0x20000220
 8001ad8:	08010bf4 	.word	0x08010bf4
 8001adc:	200009d8 	.word	0x200009d8
 8001ae0:	20000b20 	.word	0x20000b20

08001ae4 <Config_Notify>:
 * @param  uint8_t Command Replay to this Command
 * @param  uint8_t data result to send back
 * @retval tBleStatus Status
 */
tBleStatus Config_Notify(uint32_t Feature,uint8_t Command,uint8_t data)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0c8      	sub	sp, #288	; 0x120
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	6018      	str	r0, [r3, #0]
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	1cfb      	adds	r3, r7, #3
 8001af4:	4602      	mov	r2, r0
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	1cbb      	adds	r3, r7, #2
 8001afa:	460a      	mov	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t buff[2+4+1+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001afe:	f004 f991 	bl	8005e24 <HAL_GetTick>
 8001b02:	4603      	mov	r3, r0
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
 8001b0c:	f004 f98a 	bl	8005e24 <HAL_GetTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	0adb      	lsrs	r3, r3, #11
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  STORE_BE_32(buff+2,Feature);
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e1b      	lsrs	r3, r3, #24
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
  buff[6] = Command;
 8001b48:	1cfb      	adds	r3, r7, #3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  buff[7] = data;
 8001b50:	1cbb      	adds	r3, r7, #2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  
  ret = aci_gatt_update_char_value (ConfigServW2STHandle, ConfigCharHandle, 0, 8,buff);
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <Config_Notify+0xf8>)
 8001b5a:	8818      	ldrh	r0, [r3, #0]
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <Config_Notify+0xfc>)
 8001b5e:	8819      	ldrh	r1, [r3, #0]
 8001b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2308      	movs	r3, #8
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f00d fbd2 	bl	800f312 <aci_gatt_update_char_value>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  if (ret != BLE_STATUS_SUCCESS)
 8001b74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d028      	beq.n	8001bce <Config_Notify+0xea>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <Config_Notify+0x100>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0a5b      	lsrs	r3, r3, #9
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00e      	beq.n	8001baa <Config_Notify+0xc6>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Configuration Char\r\n");
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <Config_Notify+0x104>)
 8001b8e:	4817      	ldr	r0, [pc, #92]	; (8001bec <Config_Notify+0x108>)
 8001b90:	f00e faa8 	bl	80100e4 <siprintf>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <Config_Notify+0x10c>)
 8001b98:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <Config_Notify+0x10c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4812      	ldr	r0, [pc, #72]	; (8001bec <Config_Notify+0x108>)
 8001ba4:	f7ff fe72 	bl	800188c <Stderr_Update>
 8001ba8:	e00f      	b.n	8001bca <Config_Notify+0xe6>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Configuration Char\r\n");
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	490e      	ldr	r1, [pc, #56]	; (8001be8 <Config_Notify+0x104>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00e fa97 	bl	80100e4 <siprintf>
 8001bb6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001bba:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 f907 	bl	8002dd8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001bca:	2347      	movs	r3, #71	; 0x47
 8001bcc:	e000      	b.n	8001bd0 <Config_Notify+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000232 	.word	0x20000232
 8001be0:	20000234 	.word	0x20000234
 8001be4:	20000220 	.word	0x20000220
 8001be8:	08010c14 	.word	0x08010c14
 8001bec:	200009d8 	.word	0x200009d8
 8001bf0:	20000b20 	.word	0x20000b20

08001bf4 <Add_HWServW2ST_Service>:
* @brief  Add the HW Features service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_HWServW2ST_Service(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberChars = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	617b      	str	r3, [r7, #20]
  
  uint8_t uuid[16];
  
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001bfe:	231b      	movs	r3, #27
 8001c00:	703b      	strb	r3, [r7, #0]
 8001c02:	23c5      	movs	r3, #197	; 0xc5
 8001c04:	707b      	strb	r3, [r7, #1]
 8001c06:	23d5      	movs	r3, #213	; 0xd5
 8001c08:	70bb      	strb	r3, [r7, #2]
 8001c0a:	23a5      	movs	r3, #165	; 0xa5
 8001c0c:	70fb      	strb	r3, [r7, #3]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	713b      	strb	r3, [r7, #4]
 8001c12:	2300      	movs	r3, #0
 8001c14:	717b      	strb	r3, [r7, #5]
 8001c16:	23b4      	movs	r3, #180	; 0xb4
 8001c18:	71bb      	strb	r3, [r7, #6]
 8001c1a:	239a      	movs	r3, #154	; 0x9a
 8001c1c:	71fb      	strb	r3, [r7, #7]
 8001c1e:	23e1      	movs	r3, #225	; 0xe1
 8001c20:	723b      	strb	r3, [r7, #8]
 8001c22:	2311      	movs	r3, #17
 8001c24:	727b      	strb	r3, [r7, #9]
 8001c26:	2301      	movs	r3, #1
 8001c28:	72bb      	strb	r3, [r7, #10]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	72fb      	strb	r3, [r7, #11]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	733b      	strb	r3, [r7, #12]
 8001c32:	2300      	movs	r3, #0
 8001c34:	737b      	strb	r3, [r7, #13]
 8001c36:	2300      	movs	r3, #0
 8001c38:	73bb      	strb	r3, [r7, #14]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	0052      	lsls	r2, r2, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4639      	mov	r1, r7
 8001c50:	4a62      	ldr	r2, [pc, #392]	; (8001ddc <Add_HWServW2ST_Service+0x1e8>)
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f00d f9fd 	bl	800f056 <aci_gatt_add_serv>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberChars,
                          &HWServW2STHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001c60:	7cfb      	ldrb	r3, [r7, #19]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80b0 	bne.w	8001dc8 <Add_HWServW2ST_Service+0x1d4>
  {
    goto fail;
  }
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001c68:	231b      	movs	r3, #27
 8001c6a:	703b      	strb	r3, [r7, #0]
 8001c6c:	23c5      	movs	r3, #197	; 0xc5
 8001c6e:	707b      	strb	r3, [r7, #1]
 8001c70:	23d5      	movs	r3, #213	; 0xd5
 8001c72:	70bb      	strb	r3, [r7, #2]
 8001c74:	23a5      	movs	r3, #165	; 0xa5
 8001c76:	70fb      	strb	r3, [r7, #3]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	713b      	strb	r3, [r7, #4]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	717b      	strb	r3, [r7, #5]
 8001c80:	2336      	movs	r3, #54	; 0x36
 8001c82:	71bb      	strb	r3, [r7, #6]
 8001c84:	23ac      	movs	r3, #172	; 0xac
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	23e1      	movs	r3, #225	; 0xe1
 8001c8a:	723b      	strb	r3, [r7, #8]
 8001c8c:	2311      	movs	r3, #17
 8001c8e:	727b      	strb	r3, [r7, #9]
 8001c90:	2301      	movs	r3, #1
 8001c92:	72bb      	strb	r3, [r7, #10]
 8001c94:	2300      	movs	r3, #0
 8001c96:	72fb      	strb	r3, [r7, #11]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	733b      	strb	r3, [r7, #12]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	737b      	strb	r3, [r7, #13]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73bb      	strb	r3, [r7, #14]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001ca8:	4b4d      	ldr	r3, [pc, #308]	; (8001de0 <Add_HWServW2ST_Service+0x1ec>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d10b      	bne.n	8001cc8 <Add_HWServW2ST_Service+0xd4>
  {
    uuid[14] |= 0x05; /* Two Temperature values*/
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	f043 0305 	orr.w	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2*2;
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e00e      	b.n	8001ce6 <Add_HWServW2ST_Service+0xf2>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <Add_HWServW2ST_Service+0x1ec>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10a      	bne.n	8001ce6 <Add_HWServW2ST_Service+0xf2>
  {
    uuid[14] |= 0x04; /* One Temperature value*/
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3302      	adds	r3, #2
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001ce4:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <Add_HWServW2ST_Service+0x1ec>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <Add_HWServW2ST_Service+0x110>
  {
    uuid[14] |= 0x08; /* Humidity */
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001cf8:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001d02:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <Add_HWServW2ST_Service+0x1ec>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <Add_HWServW2ST_Service+0x12e>
  {
    uuid[14] |= 0x10; /* Pressure value*/
 8001d0c:	7bbb      	ldrb	r3, [r7, #14]
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=4;
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001d20:	701a      	strb	r2, [r3, #0]
  }
  
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, EnvironmentalCharSize,
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <Add_HWServW2ST_Service+0x1e8>)
 8001d24:	8818      	ldrh	r0, [r3, #0]
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <Add_HWServW2ST_Service+0x1f0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	463a      	mov	r2, r7
 8001d2c:	492e      	ldr	r1, [pc, #184]	; (8001de8 <Add_HWServW2ST_Service+0x1f4>)
 8001d2e:	9105      	str	r1, [sp, #20]
 8001d30:	2100      	movs	r1, #0
 8001d32:	9104      	str	r1, [sp, #16]
 8001d34:	2110      	movs	r1, #16
 8001d36:	9103      	str	r1, [sp, #12]
 8001d38:	2104      	movs	r1, #4
 8001d3a:	9102      	str	r1, [sp, #8]
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	9101      	str	r1, [sp, #4]
 8001d40:	2112      	movs	r1, #18
 8001d42:	9100      	str	r1, [sp, #0]
 8001d44:	2102      	movs	r1, #2
 8001d46:	f00d fa12 	bl	800f16e <aci_gatt_add_char>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001d4e:	7cfb      	ldrb	r3, [r7, #19]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d13b      	bne.n	8001dcc <Add_HWServW2ST_Service+0x1d8>
  {
    goto fail;
  }
  
  COPY_LED_W2ST_CHAR_UUID(uuid);
 8001d54:	231b      	movs	r3, #27
 8001d56:	703b      	strb	r3, [r7, #0]
 8001d58:	23c5      	movs	r3, #197	; 0xc5
 8001d5a:	707b      	strb	r3, [r7, #1]
 8001d5c:	23d5      	movs	r3, #213	; 0xd5
 8001d5e:	70bb      	strb	r3, [r7, #2]
 8001d60:	23a5      	movs	r3, #165	; 0xa5
 8001d62:	70fb      	strb	r3, [r7, #3]
 8001d64:	2302      	movs	r3, #2
 8001d66:	713b      	strb	r3, [r7, #4]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	717b      	strb	r3, [r7, #5]
 8001d6c:	2336      	movs	r3, #54	; 0x36
 8001d6e:	71bb      	strb	r3, [r7, #6]
 8001d70:	23ac      	movs	r3, #172	; 0xac
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	23e1      	movs	r3, #225	; 0xe1
 8001d76:	723b      	strb	r3, [r7, #8]
 8001d78:	2311      	movs	r3, #17
 8001d7a:	727b      	strb	r3, [r7, #9]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	72bb      	strb	r3, [r7, #10]
 8001d80:	2300      	movs	r3, #0
 8001d82:	72fb      	strb	r3, [r7, #11]
 8001d84:	2300      	movs	r3, #0
 8001d86:	733b      	strb	r3, [r7, #12]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	737b      	strb	r3, [r7, #13]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73bb      	strb	r3, [r7, #14]
 8001d90:	2320      	movs	r3, #32
 8001d92:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <Add_HWServW2ST_Service+0x1e8>)
 8001d96:	8818      	ldrh	r0, [r3, #0]
 8001d98:	463a      	mov	r2, r7
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <Add_HWServW2ST_Service+0x1f8>)
 8001d9c:	9305      	str	r3, [sp, #20]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9304      	str	r3, [sp, #16]
 8001da2:	2310      	movs	r3, #16
 8001da4:	9303      	str	r3, [sp, #12]
 8001da6:	2304      	movs	r3, #4
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	2300      	movs	r3, #0
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	2312      	movs	r3, #18
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2303      	movs	r3, #3
 8001db4:	2102      	movs	r1, #2
 8001db6:	f00d f9da 	bl	800f16e <aci_gatt_add_char>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &LedCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <Add_HWServW2ST_Service+0x1dc>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e005      	b.n	8001dd4 <Add_HWServW2ST_Service+0x1e0>
    goto fail;
 8001dc8:	bf00      	nop
 8001dca:	e002      	b.n	8001dd2 <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001dcc:	bf00      	nop
 8001dce:	e000      	b.n	8001dd2 <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001dd0:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding HW's Characteristcs service.\n");
  return BLE_STATUS_ERROR;
 8001dd2:	2347      	movs	r3, #71	; 0x47
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000022c 	.word	0x2000022c
 8001de0:	200005f0 	.word	0x200005f0
 8001de4:	20000001 	.word	0x20000001
 8001de8:	2000022e 	.word	0x2000022e
 8001dec:	20000230 	.word	0x20000230

08001df0 <Environmental_Update>:
* @param  int16_t Temp2 Temperature in tenths of degree second sensor
* @param  int16_t Temp1 Temperature in tenths of degree first sensor
* @retval tBleStatus   Status
*/
tBleStatus Environmental_Update(int32_t Press,uint16_t Hum,int16_t Temp2,int16_t Temp1)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b0cd      	sub	sp, #308	; 0x134
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	f107 040c 	add.w	r4, r7, #12
 8001dfa:	6020      	str	r0, [r4, #0]
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f107 030a 	add.w	r3, r7, #10
 8001e06:	4622      	mov	r2, r4
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	4602      	mov	r2, r0
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	1dbb      	adds	r3, r7, #6
 8001e14:	460a      	mov	r2, r1
 8001e16:	801a      	strh	r2, [r3, #0]
  tBleStatus ret;
  uint8_t BuffPos;
  
  uint8_t buff[2+4/*Press*/+2/*Hum*/+2/*Temp2*/+2/*Temp1*/];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001e18:	f004 f804 	bl	8005e24 <HAL_GetTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001e26:	f003 fffd 	bl	8005e24 <HAL_GetTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	0adb      	lsrs	r3, r3, #11
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  BuffPos=2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <Environmental_Update+0x238>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d032      	beq.n	8001ea8 <Environmental_Update+0xb8>
  {
    STORE_LE_32(buff+BuffPos,Press);
 8001e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e46:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f107 020c 	add.w	r2, r7, #12
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	1219      	asrs	r1, r3, #8
 8001e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e62:	3301      	adds	r3, #1
 8001e64:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1419      	asrs	r1, r3, #16
 8001e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e80:	4413      	add	r3, r2
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1619      	asrs	r1, r3, #24
 8001e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001e92:	3303      	adds	r3, #3
 8001e94:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
    BuffPos+=4;
 8001e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001ea8:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <Environmental_Update+0x238>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <Environmental_Update+0xf8>
  {
    STORE_LE_16(buff+BuffPos,Hum);
 8001eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001eb4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001eb8:	4413      	add	r3, r2
 8001eba:	f107 020a 	add.w	r2, r7, #10
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	f107 030a 	add.w	r3, r7, #10
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001ee8:	4b4f      	ldr	r3, [pc, #316]	; (8002028 <Environmental_Update+0x238>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d138      	bne.n	8001f62 <Environmental_Update+0x172>
  {
    STORE_LE_16(buff+BuffPos,Temp2);
 8001ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ef4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ef8:	4413      	add	r3, r2
 8001efa:	f107 0208 	add.w	r2, r7, #8
 8001efe:	8812      	ldrh	r2, [r2, #0]
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0c:	121b      	asrs	r3, r3, #8
 8001f0e:	b219      	sxth	r1, r3
 8001f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f14:	3301      	adds	r3, #1
 8001f16:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b2ca      	uxtb	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f24:	3302      	adds	r3, #2
 8001f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    STORE_LE_16(buff+BuffPos,Temp1);
 8001f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f2e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f32:	4413      	add	r3, r2
 8001f34:	1dba      	adds	r2, r7, #6
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	1dbb      	adds	r3, r7, #6
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	121b      	asrs	r3, r3, #8
 8001f44:	b219      	sxth	r1, r3
 8001f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f50:	4413      	add	r3, r2
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8001f60:	e01e      	b.n	8001fa0 <Environmental_Update+0x1b0>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <Environmental_Update+0x238>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d11a      	bne.n	8001fa0 <Environmental_Update+0x1b0>
  {
    STORE_LE_16(buff+BuffPos,Temp1);
 8001f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f6e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f72:	4413      	add	r3, r2
 8001f74:	1dba      	adds	r2, r7, #6
 8001f76:	8812      	ldrh	r2, [r2, #0]
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	1dbb      	adds	r3, r7, #6
 8001f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f82:	121b      	asrs	r3, r3, #8
 8001f84:	b219      	sxth	r1, r3
 8001f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f90:	4413      	add	r3, r2
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, EnvironmentalCharSize,buff);
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <Environmental_Update+0x23c>)
 8001fa2:	8818      	ldrh	r0, [r3, #0]
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <Environmental_Update+0x240>)
 8001fa6:	8819      	ldrh	r1, [r3, #0]
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <Environmental_Update+0x244>)
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f00d f9ac 	bl	800f312 <aci_gatt_update_char_value>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  
  if (ret != BLE_STATUS_SUCCESS)
 8001fc0:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d028      	beq.n	800201a <Environmental_Update+0x22a>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <Environmental_Update+0x248>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0a5b      	lsrs	r3, r3, #9
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00e      	beq.n	8001ff6 <Environmental_Update+0x206>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
 8001fd8:	4918      	ldr	r1, [pc, #96]	; (800203c <Environmental_Update+0x24c>)
 8001fda:	4819      	ldr	r0, [pc, #100]	; (8002040 <Environmental_Update+0x250>)
 8001fdc:	f00e f882 	bl	80100e4 <siprintf>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <Environmental_Update+0x254>)
 8001fe4:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <Environmental_Update+0x254>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	4619      	mov	r1, r3
 8001fee:	4814      	ldr	r0, [pc, #80]	; (8002040 <Environmental_Update+0x250>)
 8001ff0:	f7ff fc4c 	bl	800188c <Stderr_Update>
 8001ff4:	e00f      	b.n	8002016 <Environmental_Update+0x226>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Environmental Char\r\n");
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4910      	ldr	r1, [pc, #64]	; (800203c <Environmental_Update+0x24c>)
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00e f871 	bl	80100e4 <siprintf>
 8002002:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8002006:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fee1 	bl	8002dd8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8002016:	2347      	movs	r3, #71	; 0x47
 8002018:	e000      	b.n	800201c <Environmental_Update+0x22c>
  }
  return BLE_STATUS_SUCCESS;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	200005f0 	.word	0x200005f0
 800202c:	2000022c 	.word	0x2000022c
 8002030:	2000022e 	.word	0x2000022e
 8002034:	20000001 	.word	0x20000001
 8002038:	20000220 	.word	0x20000220
 800203c:	08010c38 	.word	0x08010c38
 8002040:	200009d8 	.word	0x200009d8
 8002044:	20000b20 	.word	0x20000b20

08002048 <LED_Update>:
* @brief  Update LEDs characteristic value
* @param  uint8_t LedStatus LEDs status 0/1 (off/on)
* @retval tBleStatus   Status
*/
tBleStatus LED_Update(uint8_t LedStatus)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0c8      	sub	sp, #288	; 0x120
 800204c:	af02      	add	r7, sp, #8
 800204e:	4602      	mov	r2, r0
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  
  uint8_t buff[2+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8002054:	f003 fee6 	bl	8005e24 <HAL_GetTick>
 8002058:	4603      	mov	r3, r0
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002062:	f003 fedf 	bl	8005e24 <HAL_GetTick>
 8002066:	4603      	mov	r3, r0
 8002068:	0adb      	lsrs	r3, r3, #11
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
  buff[2] = LedStatus;
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, LedCharHandle, 0, 2+1,buff);
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <LED_Update+0xb4>)
 800207a:	8818      	ldrh	r0, [r3, #0]
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <LED_Update+0xb8>)
 800207e:	8819      	ldrh	r1, [r3, #0]
 8002080:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2303      	movs	r3, #3
 8002088:	2200      	movs	r2, #0
 800208a:	f00d f942 	bl	800f312 <aci_gatt_update_char_value>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
  if (ret != BLE_STATUS_SUCCESS)
 8002094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002098:	2b00      	cmp	r3, #0
 800209a:	d028      	beq.n	80020ee <LED_Update+0xa6>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <LED_Update+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0a5b      	lsrs	r3, r3, #9
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00e      	beq.n	80020ca <LED_Update+0x82>
    {
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating LED Char\r\n");
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <LED_Update+0xc0>)
 80020ae:	4817      	ldr	r0, [pc, #92]	; (800210c <LED_Update+0xc4>)
 80020b0:	f00e f818 	bl	80100e4 <siprintf>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a16      	ldr	r2, [pc, #88]	; (8002110 <LED_Update+0xc8>)
 80020b8:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <LED_Update+0xc8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	4812      	ldr	r0, [pc, #72]	; (800210c <LED_Update+0xc4>)
 80020c4:	f7ff fbe2 	bl	800188c <Stderr_Update>
 80020c8:	e00f      	b.n	80020ea <LED_Update+0xa2>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Temp Char\r\n");
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4911      	ldr	r1, [pc, #68]	; (8002114 <LED_Update+0xcc>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f00e f807 	bl	80100e4 <siprintf>
 80020d6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80020da:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fe77 	bl	8002dd8 <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 80020ea:	2347      	movs	r3, #71	; 0x47
 80020ec:	e000      	b.n	80020f0 <LED_Update+0xa8>
  }
  return BLE_STATUS_SUCCESS;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000022c 	.word	0x2000022c
 8002100:	20000230 	.word	0x20000230
 8002104:	20000220 	.word	0x20000220
 8002108:	08010c5c 	.word	0x08010c5c
 800210c:	200009d8 	.word	0x200009d8
 8002110:	20000b20 	.word	0x20000b20
 8002114:	08010c78 	.word	0x08010c78

08002118 <setConnectable>:
 * @brief  Puts the device in connectable mode.
 * @param  None 
 * @retval None
 */
void setConnectable(void)
{  
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	b092      	sub	sp, #72	; 0x48
 800211c:	af08      	add	r7, sp, #32
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_STLBLE};
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <setConnectable+0x108>)
 8002120:	f107 0320 	add.w	r3, r7, #32
 8002124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002128:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t manuf_data[26] = {
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <setConnectable+0x10c>)
 800212e:	1d3c      	adds	r4, r7, #4
 8002130:	461d      	mov	r5, r3
 8002132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800213a:	c403      	stmia	r4!, {r0, r1}
 800213c:	8022      	strh	r2, [r4, #0]
    0x00,
    0x00, /* BLE MAC stop */
  };
  
  /* BLE MAC */
  manuf_data[20] = bdaddr[5];
 800213e:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <setConnectable+0x110>)
 8002140:	795b      	ldrb	r3, [r3, #5]
 8002142:	763b      	strb	r3, [r7, #24]
  manuf_data[21] = bdaddr[4];
 8002144:	4b38      	ldr	r3, [pc, #224]	; (8002228 <setConnectable+0x110>)
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	767b      	strb	r3, [r7, #25]
  manuf_data[22] = bdaddr[3];
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <setConnectable+0x110>)
 800214c:	78db      	ldrb	r3, [r3, #3]
 800214e:	76bb      	strb	r3, [r7, #26]
  manuf_data[23] = bdaddr[2];
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <setConnectable+0x110>)
 8002152:	789b      	ldrb	r3, [r3, #2]
 8002154:	76fb      	strb	r3, [r7, #27]
  manuf_data[24] = bdaddr[1];
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <setConnectable+0x110>)
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	773b      	strb	r3, [r7, #28]
  manuf_data[25] = bdaddr[0];
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <setConnectable+0x110>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	777b      	strb	r3, [r7, #29]
  
  manuf_data[16] |= 0x20; /* Led */
 8002162:	7d3b      	ldrb	r3, [r7, #20]
 8002164:	f043 0320 	orr.w	r3, r3, #32
 8002168:	b2db      	uxtb	r3, r3
 800216a:	753b      	strb	r3, [r7, #20]
  
  if(TargetBoardFeatures.HandleGGComponent)
 800216c:	4b2f      	ldr	r3, [pc, #188]	; (800222c <setConnectable+0x114>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <setConnectable+0x66>
  {
    manuf_data[17] |= 0x02; /* Battery Present */
 8002174:	7d7b      	ldrb	r3, [r7, #21]
 8002176:	f043 0302 	orr.w	r3, r3, #2
 800217a:	b2db      	uxtb	r3, r3
 800217c:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.NumTempSensors==2)
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <setConnectable+0x114>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d105      	bne.n	8002192 <setConnectable+0x7a>
  {
    manuf_data[17] |= 0x05; /* Two Temperature values*/
 8002186:	7d7b      	ldrb	r3, [r7, #21]
 8002188:	f043 0305 	orr.w	r3, r3, #5
 800218c:	b2db      	uxtb	r3, r3
 800218e:	757b      	strb	r3, [r7, #21]
 8002190:	e008      	b.n	80021a4 <setConnectable+0x8c>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <setConnectable+0x114>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d104      	bne.n	80021a4 <setConnectable+0x8c>
  {
    manuf_data[17] |= 0x04; /* One Temperature value*/
 800219a:	7d7b      	ldrb	r3, [r7, #21]
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <setConnectable+0x114>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <setConnectable+0x9e>
  {
    manuf_data[17] |= 0x08; /* Humidity */
 80021ac:	7d7b      	ldrb	r3, [r7, #21]
 80021ae:	f043 0308 	orr.w	r3, r3, #8
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <setConnectable+0x114>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <setConnectable+0xb0>
  {
    manuf_data[17] |= 0x10; /* Pressure value*/
 80021be:	7d7b      	ldrb	r3, [r7, #21]
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	757b      	strb	r3, [r7, #21]
  }
  
  /* DS3 DIL24  present*/
  if(TargetBoardFeatures.HWAdvanceFeatures) 
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <setConnectable+0x114>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <setConnectable+0xc2>
  {
    /* Accelerometer Events */
    manuf_data[18] |=0x04;
 80021d0:	7dbb      	ldrb	r3, [r7, #22]
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	75bb      	strb	r3, [r7, #22]
  }
  
  
  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
 80021da:	2100      	movs	r1, #0
 80021dc:	2000      	movs	r0, #0
 80021de:	f00d fa9f 	bl	800f720 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 80021e2:	2300      	movs	r3, #0
 80021e4:	9306      	str	r3, [sp, #24]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9305      	str	r3, [sp, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	9304      	str	r3, [sp, #16]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9303      	str	r3, [sp, #12]
 80021f2:	f107 0320 	add.w	r3, r7, #32
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	2308      	movs	r3, #8
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2300      	movs	r3, #0
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2000      	movs	r0, #0
 8002208:	f00c fd6a 	bl	800ece0 <aci_gap_set_discoverable>
#endif /* STATIC_BLE_MAC */
                           NO_WHITE_LIST_USE,
                           sizeof(local_name), local_name, 0, NULL, 0, 0);
  
  /* Send Advertising data */
  aci_gap_update_adv_data(26, manuf_data);
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	201a      	movs	r0, #26
 8002212:	f00c feab 	bl	800ef6c <aci_gap_update_adv_data>
}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bdb0      	pop	{r4, r5, r7, pc}
 800221e:	bf00      	nop
 8002220:	08010c94 	.word	0x08010c94
 8002224:	08010c9c 	.word	0x08010c9c
 8002228:	20000900 	.word	0x20000900
 800222c:	200005f0 	.word	0x200005f0

08002230 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	b0c9      	sub	sp, #292	; 0x124
 8002234:	af04      	add	r7, sp, #16
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	6018      	str	r0, [r3, #0]
 800223a:	460a      	mov	r2, r1
 800223c:	1cbb      	adds	r3, r7, #2
 800223e:	801a      	strh	r2, [r3, #0]
  connected = TRUE;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <GAP_ConnectionComplete_CB+0x90>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002246:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <GAP_ConnectionComplete_CB+0x94>)
 8002248:	1cbb      	adds	r3, r7, #2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	8013      	strh	r3, [r2, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3305      	adds	r3, #5
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461d      	mov	r5, r3
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461e      	mov	r6, r3
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3303      	adds	r3, #3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3302      	adds	r3, #2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461c      	mov	r4, r3
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f107 000c 	add.w	r0, r7, #12
 800228a:	9303      	str	r3, [sp, #12]
 800228c:	9402      	str	r4, [sp, #8]
 800228e:	9101      	str	r1, [sp, #4]
 8002290:	9200      	str	r2, [sp, #0]
 8002292:	4633      	mov	r3, r6
 8002294:	462a      	mov	r2, r5
 8002296:	490c      	ldr	r1, [pc, #48]	; (80022c8 <GAP_ConnectionComplete_CB+0x98>)
 8002298:	f00d ff24 	bl	80100e4 <siprintf>
 800229c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80022a0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fd94 	bl	8002dd8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <GAP_ConnectionComplete_CB+0x9c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
  
}
 80022b6:	bf00      	nop
 80022b8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022bc:	46bd      	mov	sp, r7
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c0:	20000228 	.word	0x20000228
 80022c4:	2000026a 	.word	0x2000026a
 80022c8:	08010cb8 	.word	0x08010cb8
 80022cc:	20000220 	.word	0x20000220

080022d0 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0c2      	sub	sp, #264	; 0x108
 80022d4:	af00      	add	r7, sp, #0
  connected = FALSE;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <GAP_DisconnectionComplete_CB+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION  
  STLBLE_PRINTF("<<<<<<DISCONNECTED\r\n");
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4911      	ldr	r1, [pc, #68]	; (8002324 <GAP_DisconnectionComplete_CB+0x54>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f00d feff 	bl	80100e4 <siprintf>
 80022e6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 80022ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fd70 	bl	8002dd8 <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */  

  /* Make the device connectable again. */
  set_connectable = TRUE;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <GAP_DisconnectionComplete_CB+0x58>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

  ConnectionBleStatus=0;
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <GAP_DisconnectionComplete_CB+0x5c>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8002304:	2100      	movs	r1, #0
 8002306:	480a      	ldr	r0, [pc, #40]	; (8002330 <GAP_DisconnectionComplete_CB+0x60>)
 8002308:	f008 ffec 	bl	800b2e4 <HAL_TIM_OC_Stop_IT>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <GAP_DisconnectionComplete_CB+0x46>
    /* Stopping Error */
    Error_Handler();
 8002312:	f7ff fa41 	bl	8001798 <Error_Handler>
  }
}
 8002316:	bf00      	nop
 8002318:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000228 	.word	0x20000228
 8002324:	08010cdc 	.word	0x08010cdc
 8002328:	20000000 	.word	0x20000000
 800232c:	20000220 	.word	0x20000220
 8002330:	20000908 	.word	0x20000908

08002334 <Read_Request_CB>:
* @brief  This function is called when there is a Bluetooth Read request
* @param  uint16_t handle Handle of the attribute
* @retval None
*/
void Read_Request_CB(uint16_t handle)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
  if(handle == EnvironmentalCharHandle + 1)
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	4b7f      	ldr	r3, [pc, #508]	; (8002540 <Read_Request_CB+0x20c>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	429a      	cmp	r2, r3
 8002348:	f040 80cf 	bne.w	80024ea <Read_Request_CB+0x1b6>
  {
    /* Read Request for Pressure,Humidity, and Temperatures*/
    float SensorValue;
    int32_t PressToSend=0;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    uint16_t HumToSend=0;
 8002350:	2300      	movs	r3, #0
 8002352:	837b      	strh	r3, [r7, #26]
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8002354:	2300      	movs	r3, #0
 8002356:	833b      	strh	r3, [r7, #24]
 8002358:	2300      	movs	r3, #0
 800235a:	82fb      	strh	r3, [r7, #22]
    int32_t decPart, intPart;
    uint16_t distance = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	82bb      	strh	r3, [r7, #20]
    
    if (US100_ENABLE) {
    	distance = us100_get_distance();
 8002360:	f003 fcaa 	bl	8005cb8 <us100_get_distance>
 8002364:	4603      	mov	r3, r0
 8002366:	82bb      	strh	r3, [r7, #20]
    	Temp1ToSend = distance;
 8002368:	8abb      	ldrh	r3, [r7, #20]
 800236a:	82fb      	strh	r3, [r7, #22]
    }

    if(TargetBoardFeatures.HandlePressSensor) 
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <Read_Request_CB+0x210>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d026      	beq.n	80023c2 <Read_Request_CB+0x8e>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	461a      	mov	r2, r3
 800237a:	2102      	movs	r1, #2
 800237c:	2001      	movs	r0, #1
 800237e:	f003 f8b5 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8002382:	edd7 7a02 	vldr	s15, [r7, #8]
 8002386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800238a:	ee17 3a90 	vmov	r3, s15
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	ed97 7a02 	vldr	s14, [r7, #8]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800239e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002548 <Read_Request_CB+0x214>
 80023a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ae:	ee17 3a90 	vmov	r3, s15
 80023b2:	60fb      	str	r3, [r7, #12]
      PressToSend=intPart*100+decPart;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2264      	movs	r2, #100	; 0x64
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	61fb      	str	r3, [r7, #28]
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 80023c2:	4b60      	ldr	r3, [pc, #384]	; (8002544 <Read_Request_CB+0x210>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02a      	beq.n	8002420 <Read_Request_CB+0xec>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	461a      	mov	r2, r3
 80023d0:	2104      	movs	r1, #4
 80023d2:	2000      	movs	r0, #0
 80023d4:	f003 f88a 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80023d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002404:	ee17 3a90 	vmov	r3, s15
 8002408:	60fb      	str	r3, [r7, #12]
      HumToSend = intPart*10+decPart;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4413      	add	r3, r2
 800241e:	837b      	strh	r3, [r7, #26]
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <Read_Request_CB+0x210>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d157      	bne.n	80024d8 <Read_Request_CB+0x1a4>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	461a      	mov	r2, r3
 800242e:	2101      	movs	r1, #1
 8002430:	2000      	movs	r0, #0
 8002432:	f003 f85b 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8002436:	edd7 7a02 	vldr	s15, [r7, #8]
 800243a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243e:	ee17 3a90 	vmov	r3, s15
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	ed97 7a02 	vldr	s14, [r7, #8]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002456:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800245a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002462:	ee17 3a90 	vmov	r3, s15
 8002466:	60fb      	str	r3, [r7, #12]
      Temp1ToSend = intPart*10+decPart; 
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4413      	add	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4413      	add	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	82fb      	strh	r3, [r7, #22]
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8002480:	f107 0308 	add.w	r3, r7, #8
 8002484:	461a      	mov	r2, r3
 8002486:	2101      	movs	r1, #1
 8002488:	2001      	movs	r0, #1
 800248a:	f003 f82f 	bl	80054ec <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 800248e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002496:	ee17 3a90 	vmov	r3, s15
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	ed97 7a02 	vldr	s14, [r7, #8]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ba:	ee17 3a90 	vmov	r3, s15
 80024be:	60fb      	str	r3, [r7, #12]
      Temp2ToSend = intPart*10+decPart;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	833b      	strh	r3, [r7, #24]
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
      Temp1ToSend = intPart*10+decPart;
      */
    }
    
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 80024d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024dc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024e0:	8b79      	ldrh	r1, [r7, #26]
 80024e2:	69f8      	ldr	r0, [r7, #28]
 80024e4:	f7ff fc84 	bl	8001df0 <Environmental_Update>
 80024e8:	e01d      	b.n	8002526 <Read_Request_CB+0x1f2>
  } 
  else if(handle == LedCharHandle + 1)
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <Read_Request_CB+0x218>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d106      	bne.n	8002504 <Read_Request_CB+0x1d0>
  {
    /* Read Request for Led Status */
    LED_Update(TargetBoardFeatures.LedStatus);
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <Read_Request_CB+0x210>)
 80024f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fda3 	bl	8002048 <LED_Update>
 8002502:	e010      	b.n	8002526 <Read_Request_CB+0x1f2>
  }
  else if (handle == StdErrCharHandle + 1) 
 8002504:	88fa      	ldrh	r2, [r7, #6]
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <Read_Request_CB+0x21c>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	429a      	cmp	r2, r3
 800250e:	d102      	bne.n	8002516 <Read_Request_CB+0x1e2>
  {
    /* Send again the last packet for StdError */
    Stderr_Update_AfterRead();
 8002510:	f7ff fa74 	bl	80019fc <Stderr_Update_AfterRead>
 8002514:	e007      	b.n	8002526 <Read_Request_CB+0x1f2>
  } 
  else if (handle == TermCharHandle + 1)
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <Read_Request_CB+0x220>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	429a      	cmp	r2, r3
 8002520:	d101      	bne.n	8002526 <Read_Request_CB+0x1f2>
  {
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 8002522:	f7ff fa8d 	bl	8001a40 <Term_Update_AfterRead>
  }
  
  //EXIT:
  if(connection_handle != 0)
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <Read_Request_CB+0x224>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <Read_Request_CB+0x204>
    aci_gatt_allow_read(connection_handle);
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <Read_Request_CB+0x224>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f00c ff7f 	bl	800f436 <aci_gatt_allow_read>
}
 8002538:	bf00      	nop
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	2000022e 	.word	0x2000022e
 8002544:	200005f0 	.word	0x200005f0
 8002548:	42c80000 	.word	0x42c80000
 800254c:	20000230 	.word	0x20000230
 8002550:	2000023a 	.word	0x2000023a
 8002554:	20000238 	.word	0x20000238
 8002558:	2000026a 	.word	0x2000026a

0800255c <Attribute_Modified_CB>:
* @param uint8_t *att_data attribute data
* @param uint8_t data_length length of the data
* @retval None
*/
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0c6      	sub	sp, #280	; 0x118
 8002560:	af00      	add	r7, sp, #0
 8002562:	463b      	mov	r3, r7
 8002564:	6019      	str	r1, [r3, #0]
 8002566:	4611      	mov	r1, r2
 8002568:	1dbb      	adds	r3, r7, #6
 800256a:	4602      	mov	r2, r0
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	1d7b      	adds	r3, r7, #5
 8002570:	460a      	mov	r2, r1
 8002572:	701a      	strb	r2, [r3, #0]
  if(attr_handle == ConfigCharHandle + 2) 
 8002574:	1dbb      	adds	r3, r7, #6
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	4ba4      	ldr	r3, [pc, #656]	; (800280c <Attribute_Modified_CB+0x2b0>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3302      	adds	r3, #2
 800257e:	429a      	cmp	r2, r3
 8002580:	f000 8172 	beq.w	8002868 <Attribute_Modified_CB+0x30c>
  {
    ;/* do nothing... only for removing the message "Notification UNKNOW handle" */
  }
  else if(attr_handle == EnvironmentalCharHandle + 2)
 8002584:	1dbb      	adds	r3, r7, #6
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	4ba1      	ldr	r3, [pc, #644]	; (8002810 <Attribute_Modified_CB+0x2b4>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	3302      	adds	r3, #2
 800258e:	429a      	cmp	r2, r3
 8002590:	d172      	bne.n	8002678 <Attribute_Modified_CB+0x11c>
  {
    if (att_data[0] == 01) 
 8002592:	463b      	mov	r3, r7
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d11c      	bne.n	80025d6 <Attribute_Modified_CB+0x7a>
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
 800259c:	4b9d      	ldr	r3, [pc, #628]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	4a9b      	ldr	r2, [pc, #620]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80025a6:	6013      	str	r3, [r2, #0]
      
      /* Start the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 80025a8:	2100      	movs	r1, #0
 80025aa:	489b      	ldr	r0, [pc, #620]	; (8002818 <Attribute_Modified_CB+0x2bc>)
 80025ac:	f008 fd4e 	bl	800b04c <HAL_TIM_OC_Start_IT>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <Attribute_Modified_CB+0x5e>
      {
        /* Starting Error */
        Error_Handler();
 80025b6:	f7ff f8ef 	bl	8001798 <Error_Handler>
      }
      
      /* Set the new Capture compare value */
      {
        uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 80025ba:	4b97      	ldr	r3, [pc, #604]	; (8002818 <Attribute_Modified_CB+0x2bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* Set the Capture Compare Register value */
        __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 80025c4:	4b94      	ldr	r3, [pc, #592]	; (8002818 <Attribute_Modified_CB+0x2bc>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80025d0:	3308      	adds	r3, #8
 80025d2:	6353      	str	r3, [r2, #52]	; 0x34
 80025d4:	e013      	b.n	80025fe <Attribute_Modified_CB+0xa2>
      }
    } 
    else if (att_data[0] == 0)
 80025d6:	463b      	mov	r3, r7
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10e      	bne.n	80025fe <Attribute_Modified_CB+0xa2>
    {
      W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	4a8a      	ldr	r2, [pc, #552]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80025ea:	6013      	str	r3, [r2, #0]
      
      /* Stop the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 80025ec:	2100      	movs	r1, #0
 80025ee:	488a      	ldr	r0, [pc, #552]	; (8002818 <Attribute_Modified_CB+0x2bc>)
 80025f0:	f008 fe78 	bl	800b2e4 <HAL_TIM_OC_Stop_IT>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <Attribute_Modified_CB+0xa2>
      {
        /* Stopping Error */
        Error_Handler();
 80025fa:	f7ff f8cd 	bl	8001798 <Error_Handler>
      }
    }
#ifdef ENABLE_USB_DEBUG_CONNECTION
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d019      	beq.n	8002642 <Attribute_Modified_CB+0xe6>
    {
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 800260e:	4b81      	ldr	r3, [pc, #516]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <Attribute_Modified_CB+0xc4>
 800261c:	4b7f      	ldr	r3, [pc, #508]	; (800281c <Attribute_Modified_CB+0x2c0>)
 800261e:	e000      	b.n	8002622 <Attribute_Modified_CB+0xc6>
 8002620:	4b7f      	ldr	r3, [pc, #508]	; (8002820 <Attribute_Modified_CB+0x2c4>)
 8002622:	461a      	mov	r2, r3
 8002624:	497f      	ldr	r1, [pc, #508]	; (8002824 <Attribute_Modified_CB+0x2c8>)
 8002626:	4880      	ldr	r0, [pc, #512]	; (8002828 <Attribute_Modified_CB+0x2cc>)
 8002628:	f00d fd5c 	bl	80100e4 <siprintf>
 800262c:	4603      	mov	r3, r0
 800262e:	4a7f      	ldr	r2, [pc, #508]	; (800282c <Attribute_Modified_CB+0x2d0>)
 8002630:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8002632:	4b7e      	ldr	r3, [pc, #504]	; (800282c <Attribute_Modified_CB+0x2d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	487b      	ldr	r0, [pc, #492]	; (8002828 <Attribute_Modified_CB+0x2cc>)
 800263c:	f7ff f96e 	bl	800191c <Term_Update>
    else
    {
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
    }
  }
}
 8002640:	e112      	b.n	8002868 <Attribute_Modified_CB+0x30c>
      STLBLE_PRINTF("--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <Attribute_Modified_CB+0xf8>
 8002650:	4a72      	ldr	r2, [pc, #456]	; (800281c <Attribute_Modified_CB+0x2c0>)
 8002652:	e000      	b.n	8002656 <Attribute_Modified_CB+0xfa>
 8002654:	4a72      	ldr	r2, [pc, #456]	; (8002820 <Attribute_Modified_CB+0x2c4>)
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	4972      	ldr	r1, [pc, #456]	; (8002824 <Attribute_Modified_CB+0x2c8>)
 800265c:	4618      	mov	r0, r3
 800265e:	f00d fd41 	bl	80100e4 <siprintf>
 8002662:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8002666:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fbb1 	bl	8002dd8 <CDC_Fill_Buffer>
}
 8002676:	e0f7      	b.n	8002868 <Attribute_Modified_CB+0x30c>
  else if(attr_handle == StdErrCharHandle + 2)
 8002678:	1dbb      	adds	r3, r7, #6
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	4b6c      	ldr	r3, [pc, #432]	; (8002830 <Attribute_Modified_CB+0x2d4>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	3302      	adds	r3, #2
 8002682:	429a      	cmp	r2, r3
 8002684:	d118      	bne.n	80026b8 <Attribute_Modified_CB+0x15c>
    if (att_data[0] == 01) 
 8002686:	463b      	mov	r3, r7
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <Attribute_Modified_CB+0x142>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
 8002690:	4b60      	ldr	r3, [pc, #384]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002698:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	e0e4      	b.n	8002868 <Attribute_Modified_CB+0x30c>
    else if (att_data[0] == 0)
 800269e:	463b      	mov	r3, r7
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 80df 	bne.w	8002868 <Attribute_Modified_CB+0x30c>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
 80026aa:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026b2:	4a58      	ldr	r2, [pc, #352]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80026b4:	6013      	str	r3, [r2, #0]
}
 80026b6:	e0d7      	b.n	8002868 <Attribute_Modified_CB+0x30c>
  else if(attr_handle == TermCharHandle + 2)
 80026b8:	1dbb      	adds	r3, r7, #6
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <Attribute_Modified_CB+0x2d8>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	3302      	adds	r3, #2
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d118      	bne.n	80026f8 <Attribute_Modified_CB+0x19c>
    if (att_data[0] == 01) 
 80026c6:	463b      	mov	r3, r7
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <Attribute_Modified_CB+0x182>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_TERM);
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	e0c4      	b.n	8002868 <Attribute_Modified_CB+0x30c>
    else if (att_data[0] == 0)
 80026de:	463b      	mov	r3, r7
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 80bf 	bne.w	8002868 <Attribute_Modified_CB+0x30c>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_TERM);
 80026ea:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f2:	4a48      	ldr	r2, [pc, #288]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80026f4:	6013      	str	r3, [r2, #0]
}
 80026f6:	e0b7      	b.n	8002868 <Attribute_Modified_CB+0x30c>
  else if(attr_handle == LedCharHandle + 2)
 80026f8:	1dbb      	adds	r3, r7, #6
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <Attribute_Modified_CB+0x2dc>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	3302      	adds	r3, #2
 8002702:	429a      	cmp	r2, r3
 8002704:	d15b      	bne.n	80027be <Attribute_Modified_CB+0x262>
    if (att_data[0] == 01) 
 8002706:	463b      	mov	r3, r7
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10c      	bne.n	800272a <Attribute_Modified_CB+0x1ce>
      W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	4a3e      	ldr	r2, [pc, #248]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 800271a:	6013      	str	r3, [r2, #0]
      LED_Update(TargetBoardFeatures.LedStatus);
 800271c:	4b47      	ldr	r3, [pc, #284]	; (800283c <Attribute_Modified_CB+0x2e0>)
 800271e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fc90 	bl	8002048 <LED_Update>
 8002728:	e00a      	b.n	8002740 <Attribute_Modified_CB+0x1e4>
    else if (att_data[0] == 0)
 800272a:	463b      	mov	r3, r7
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <Attribute_Modified_CB+0x1e4>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
 8002734:	4b37      	ldr	r3, [pc, #220]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 0302 	bic.w	r3, r3, #2
 800273c:	4a35      	ldr	r2, [pc, #212]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 800273e:	6013      	str	r3, [r2, #0]
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01a      	beq.n	8002786 <Attribute_Modified_CB+0x22a>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <Attribute_Modified_CB+0x208>
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <Attribute_Modified_CB+0x2c0>)
 8002762:	e000      	b.n	8002766 <Attribute_Modified_CB+0x20a>
 8002764:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <Attribute_Modified_CB+0x2c4>)
 8002766:	461a      	mov	r2, r3
 8002768:	4935      	ldr	r1, [pc, #212]	; (8002840 <Attribute_Modified_CB+0x2e4>)
 800276a:	482f      	ldr	r0, [pc, #188]	; (8002828 <Attribute_Modified_CB+0x2cc>)
 800276c:	f00d fcba 	bl	80100e4 <siprintf>
 8002770:	4603      	mov	r3, r0
 8002772:	4a2e      	ldr	r2, [pc, #184]	; (800282c <Attribute_Modified_CB+0x2d0>)
 8002774:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <Attribute_Modified_CB+0x2d0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	482a      	ldr	r0, [pc, #168]	; (8002828 <Attribute_Modified_CB+0x2cc>)
 8002780:	f7ff f8cc 	bl	800191c <Term_Update>
}
 8002784:	e070      	b.n	8002868 <Attribute_Modified_CB+0x30c>
      STLBLE_PRINTF("--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <Attribute_Modified_CB+0x23e>
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <Attribute_Modified_CB+0x2c0>)
 8002798:	e000      	b.n	800279c <Attribute_Modified_CB+0x240>
 800279a:	4a21      	ldr	r2, [pc, #132]	; (8002820 <Attribute_Modified_CB+0x2c4>)
 800279c:	f107 0308 	add.w	r3, r7, #8
 80027a0:	4927      	ldr	r1, [pc, #156]	; (8002840 <Attribute_Modified_CB+0x2e4>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	f00d fc9e 	bl	80100e4 <siprintf>
 80027a8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80027ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fb0e 	bl	8002dd8 <CDC_Fill_Buffer>
}
 80027bc:	e054      	b.n	8002868 <Attribute_Modified_CB+0x30c>
  else if (attr_handle == ConfigCharHandle + 1) 
 80027be:	1dbb      	adds	r3, r7, #6
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <Attribute_Modified_CB+0x2b0>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d107      	bne.n	80027dc <Attribute_Modified_CB+0x280>
    ConfigCommandParsing(att_data, data_length);    
 80027cc:	1d7b      	adds	r3, r7, #5
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	463b      	mov	r3, r7
 80027d2:	4611      	mov	r1, r2
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	f000 f84f 	bl	8002878 <ConfigCommandParsing>
}
 80027da:	e045      	b.n	8002868 <Attribute_Modified_CB+0x30c>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <Attribute_Modified_CB+0x2b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0a5b      	lsrs	r3, r3, #9
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d02d      	beq.n	8002848 <Attribute_Modified_CB+0x2ec>
      BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
 80027ec:	4915      	ldr	r1, [pc, #84]	; (8002844 <Attribute_Modified_CB+0x2e8>)
 80027ee:	480e      	ldr	r0, [pc, #56]	; (8002828 <Attribute_Modified_CB+0x2cc>)
 80027f0:	f00d fc78 	bl	80100e4 <siprintf>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <Attribute_Modified_CB+0x2d0>)
 80027f8:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <Attribute_Modified_CB+0x2d0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4619      	mov	r1, r3
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <Attribute_Modified_CB+0x2cc>)
 8002804:	f7ff f842 	bl	800188c <Stderr_Update>
}
 8002808:	e02e      	b.n	8002868 <Attribute_Modified_CB+0x30c>
 800280a:	bf00      	nop
 800280c:	20000234 	.word	0x20000234
 8002810:	2000022e 	.word	0x2000022e
 8002814:	20000220 	.word	0x20000220
 8002818:	20000908 	.word	0x20000908
 800281c:	08010cf4 	.word	0x08010cf4
 8002820:	08010cf8 	.word	0x08010cf8
 8002824:	08010cfc 	.word	0x08010cfc
 8002828:	200009d8 	.word	0x200009d8
 800282c:	20000b20 	.word	0x20000b20
 8002830:	2000023a 	.word	0x2000023a
 8002834:	20000238 	.word	0x20000238
 8002838:	20000230 	.word	0x20000230
 800283c:	200005f0 	.word	0x200005f0
 8002840:	08010d0c 	.word	0x08010d0c
 8002844:	08010d1c 	.word	0x08010d1c
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	4909      	ldr	r1, [pc, #36]	; (8002874 <Attribute_Modified_CB+0x318>)
 800284e:	4618      	mov	r0, r3
 8002850:	f00d fc48 	bl	80100e4 <siprintf>
 8002854:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8002858:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fab8 	bl	8002dd8 <CDC_Fill_Buffer>
}
 8002868:	bf00      	nop
 800286a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	08010d1c 	.word	0x08010d1c

08002878 <ConfigCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
static void ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b0c6      	sub	sp, #280	; 0x118
 800287c:	af00      	add	r7, sp, #0
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	6018      	str	r0, [r3, #0]
 8002882:	460a      	mov	r2, r1
 8002884:	1cfb      	adds	r3, r7, #3
 8002886:	701a      	strb	r2, [r3, #0]
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3303      	adds	r3, #3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3302      	adds	r3, #2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	431a      	orrs	r2, r3
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint8_t Command = att_data[4];
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	791b      	ldrb	r3, [r3, #4]
 80028be:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  uint8_t Data    = att_data[5];
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	795b      	ldrb	r3, [r3, #5]
 80028c8:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  switch (FeatureMask) {
 80028cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d4:	d162      	bne.n	800299c <ConfigCommandParsing+0x124>
    case FEATURE_MASK_LED:
      /* Led events */
#ifdef ENABLE_USB_DEBUG_CONNECTION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) {
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <ConfigCommandParsing+0x130>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <ConfigCommandParsing+0x94>
        BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x\n\r",FeatureMask,Command);
 80028e6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80028ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80028ee:	492f      	ldr	r1, [pc, #188]	; (80029ac <ConfigCommandParsing+0x134>)
 80028f0:	482f      	ldr	r0, [pc, #188]	; (80029b0 <ConfigCommandParsing+0x138>)
 80028f2:	f00d fbf7 	bl	80100e4 <siprintf>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4a2e      	ldr	r2, [pc, #184]	; (80029b4 <ConfigCommandParsing+0x13c>)
 80028fa:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <ConfigCommandParsing+0x13c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4619      	mov	r1, r3
 8002904:	482a      	ldr	r0, [pc, #168]	; (80029b0 <ConfigCommandParsing+0x138>)
 8002906:	f7ff f809 	bl	800191c <Term_Update>
 800290a:	e012      	b.n	8002932 <ConfigCommandParsing+0xba>
      } else {
        STLBLE_PRINTF("Conf Sig F=%lx C=%2x\r\n",FeatureMask,Command);
 800290c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002910:	f107 000c 	add.w	r0, r7, #12
 8002914:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002918:	4927      	ldr	r1, [pc, #156]	; (80029b8 <ConfigCommandParsing+0x140>)
 800291a:	f00d fbe3 	bl	80100e4 <siprintf>
 800291e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8002922:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fa53 	bl	8002dd8 <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_CONNECTION */
     switch(Command) {
 8002932:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002936:	2b00      	cmp	r3, #0
 8002938:	d011      	beq.n	800295e <ConfigCommandParsing+0xe6>
 800293a:	2b01      	cmp	r3, #1
 800293c:	d11f      	bne.n	800297e <ConfigCommandParsing+0x106>
      case 1:
        TargetBoardFeatures.LedStatus=1;
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <ConfigCommandParsing+0x144>)
 8002940:	2201      	movs	r2, #1
 8002942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOnTargetPlatform();
 8002946:	f7fd ff23 	bl	8000790 <LedOnTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 800294a:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800294e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002952:	4619      	mov	r1, r3
 8002954:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002958:	f7ff f8c4 	bl	8001ae4 <Config_Notify>
        break;
 800295c:	e00f      	b.n	800297e <ConfigCommandParsing+0x106>
      case 0:
        TargetBoardFeatures.LedStatus=0;
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <ConfigCommandParsing+0x144>)
 8002960:	2200      	movs	r2, #0
 8002962:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOffTargetPlatform();
 8002966:	f7fd ff1a 	bl	800079e <LedOffTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 800296a:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800296e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002978:	f7ff f8b4 	bl	8001ae4 <Config_Notify>
        break;
 800297c:	bf00      	nop
     }
     /* Update the LED feature */
     if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED)) {
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <ConfigCommandParsing+0x130>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <ConfigCommandParsing+0x122>
       LED_Update(TargetBoardFeatures.LedStatus);
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <ConfigCommandParsing+0x144>)
 8002990:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fb57 	bl	8002048 <LED_Update>
     }
    break;
 800299a:	bf00      	nop
  }
}
 800299c:	bf00      	nop
 800299e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000220 	.word	0x20000220
 80029ac:	08010d3c 	.word	0x08010d3c
 80029b0:	200009d8 	.word	0x200009d8
 80029b4:	20000b20 	.word	0x20000b20
 80029b8:	08010d54 	.word	0x08010d54
 80029bc:	200005f0 	.word	0x200005f0

080029c0 <HCI_Event_CB>:
*         parsed.
* @param  void *pckt Pointer to the ACI packet
* @retval None
*/
void HCI_Event_CB(void *pckt)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pckt;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3301      	adds	r3, #1
 80029d0:	623b      	str	r3, [r7, #32]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d14a      	bne.n	8002a70 <HCI_Event_CB+0xb0>
  {
    return;
  }
  
  switch(event_pckt->evt)
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2bff      	cmp	r3, #255	; 0xff
 80029e0:	d01f      	beq.n	8002a22 <HCI_Event_CB+0x62>
 80029e2:	2bff      	cmp	r3, #255	; 0xff
 80029e4:	dc49      	bgt.n	8002a7a <HCI_Event_CB+0xba>
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d002      	beq.n	80029f0 <HCI_Event_CB+0x30>
 80029ea:	2b3e      	cmp	r3, #62	; 0x3e
 80029ec:	d003      	beq.n	80029f6 <HCI_Event_CB+0x36>
 80029ee:	e044      	b.n	8002a7a <HCI_Event_CB+0xba>
  {
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80029f0:	f7ff fc6e 	bl	80022d0 <GAP_DisconnectionComplete_CB>
    }
    break;
 80029f4:	e041      	b.n	8002a7a <HCI_Event_CB+0xba>
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	3302      	adds	r3, #2
 80029fa:	613b      	str	r3, [r7, #16]
      
      switch(evt->subevent)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d137      	bne.n	8002a74 <HCI_Event_CB+0xb4>
      {
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1d5a      	adds	r2, r3, #5
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f7ff fc09 	bl	8002230 <GAP_ConnectionComplete_CB>
        }
        break;
 8002a1e:	bf00      	nop
      }
    }
    break;
 8002a20:	e028      	b.n	8002a74 <HCI_Event_CB+0xb4>
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	3302      	adds	r3, #2
 8002a26:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f640 4201 	movw	r2, #3073	; 0xc01
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HCI_Event_CB+0x92>
 8002a36:	f640 4214 	movw	r2, #3092	; 0xc14
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11c      	bne.n	8002a78 <HCI_Event_CB+0xb8>
      {
      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data; 
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3302      	adds	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);                    
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	885b      	ldrh	r3, [r3, #2]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fc72 	bl	8002334 <Read_Request_CB>
        }
        break;
 8002a50:	e00d      	b.n	8002a6e <HCI_Event_CB+0xae>
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3302      	adds	r3, #2
 8002a56:	617b      	str	r3, [r7, #20]
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	885b      	ldrh	r3, [r3, #2]
 8002a5c:	b298      	uxth	r0, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1dd9      	adds	r1, r3, #7
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	791b      	ldrb	r3, [r3, #4]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff fd78 	bl	800255c <Attribute_Modified_CB>
        }
        break;
 8002a6c:	bf00      	nop
      }
    }
    break;
 8002a6e:	e003      	b.n	8002a78 <HCI_Event_CB+0xb8>
    return;
 8002a70:	bf00      	nop
 8002a72:	e002      	b.n	8002a7a <HCI_Event_CB+0xba>
    break;
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <HCI_Event_CB+0xba>
    break;
 8002a78:	bf00      	nop
  }
}
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b0ac      	sub	sp, #176	; 0xb0
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2288      	movs	r2, #136	; 0x88
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f00d fa5d 	bl	800ff60 <memset>
  if(huart->Instance==UART5)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a47      	ldr	r2, [pc, #284]	; (8002bc8 <HAL_UART_MspInit+0x148>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	f040 8086 	bne.w	8002bbe <HAL_UART_MspInit+0x13e>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f006 ffba 	bl	8009a38 <HAL_RCCEx_PeriphCLKConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002aca:	f7fe fe65 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8002ada:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0a:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <HAL_UART_MspInit+0x14c>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b16:	2304      	movs	r3, #4
 8002b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b2e:	2308      	movs	r3, #8
 8002b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4825      	ldr	r0, [pc, #148]	; (8002bd0 <HAL_UART_MspInit+0x150>)
 8002b3c:	f003 fd7c 	bl	8006638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b64:	4619      	mov	r1, r3
 8002b66:	481b      	ldr	r0, [pc, #108]	; (8002bd4 <HAL_UART_MspInit+0x154>)
 8002b68:	f003 fd66 	bl	8006638 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_UART_MspInit+0x15c>)
 8002b70:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b74:	2202      	movs	r2, #2
 8002b76:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b98:	2220      	movs	r2, #32
 8002b9a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002ba2:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002ba4:	f003 faa4 	bl	80060f0 <HAL_DMA_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002bae:	f7fe fdf3 	bl	8001798 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002bb6:	671a      	str	r2, [r3, #112]	; 0x70
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_UART_MspInit+0x158>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002bbe:	bf00      	nop
 8002bc0:	37b0      	adds	r7, #176	; 0xb0
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40005000 	.word	0x40005000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	48000c00 	.word	0x48000c00
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	20000ad8 	.word	0x20000ad8
 8002bdc:	4002041c 	.word	0x4002041c

08002be0 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_TIM_OC_MspInit+0x38>)
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_TIM_OC_MspInit+0x38>)
 8002bee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bf2:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_TIM_OC_MspInit+0x38>)
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2108      	movs	r1, #8
 8002c04:	201b      	movs	r0, #27
 8002c06:	f003 fa22 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c0a:	201b      	movs	r0, #27
 8002c0c:	f003 fa3b 	bl	8006086 <HAL_NVIC_EnableIRQ>
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000

08002c1c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <HardFault_Handler+0x4>

08002c30 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <MemManage_Handler+0x4>

08002c36 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <BusFault_Handler+0x4>

08002c3c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <UsageFault_Handler+0x4>

08002c42 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c70:	f003 f8c4 	bl	8005dfc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002c74:	f003 fa2f 	bl	80060d6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <DMA2_Channel2_IRQHandler+0x10>)
 8002c82:	f003 fb8e 	bl	80063a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000ad8 	.word	0x20000ad8

08002c90 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimCCHandle);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <TIM1_CC_IRQHandler+0x10>)
 8002c96:	f008 fc01 	bl	800b49c <HAL_TIM_IRQHandler>
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000908 	.word	0x20000908

08002ca4 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti5);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <EXTI9_5_IRQHandler+0x10>)
 8002caa:	f003 fc95 	bl	80065d8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200008f4 	.word	0x200008f4

08002cb8 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <OTG_FS_IRQHandler+0x10>)
 8002cbe:	f005 fa27 	bl	8008110 <HAL_PCD_IRQHandler>
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20002374 	.word	0x20002374

08002ccc <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <TIM3_IRQHandler+0x10>)
 8002cd2:	f008 fbe3 	bl	800b49c <HAL_TIM_IRQHandler>
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20002328 	.word	0x20002328

08002ce0 <I2C3_EV_IRQHandler>:

/**
* @brief This function handles I2C3 event interrupt.
*/
void I2C3_EV_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hbusi2c3);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <I2C3_EV_IRQHandler+0x10>)
 8002ce6:	f004 fa75 	bl	80071d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000277c 	.word	0x2000277c

08002cf4 <I2C3_ER_IRQHandler>:

/**
* @brief This function handles I2C3 error interrupt.
*/
void I2C3_ER_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hbusi2c3);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <I2C3_ER_IRQHandler+0x10>)
 8002cfa:	f004 fa85 	bl	8007208 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000277c 	.word	0x2000277c

08002d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <_sbrk+0x5c>)
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <_sbrk+0x60>)
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <_sbrk+0x64>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <_sbrk+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d38:	f00d f8da 	bl	800fef0 <__errno>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	220c      	movs	r2, #12
 8002d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d46:	e009      	b.n	8002d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <_sbrk+0x64>)
 8002d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20018000 	.word	0x20018000
 8002d68:	00000400 	.word	0x00000400
 8002d6c:	2000026c 	.word	0x2000026c
 8002d70:	200028c0 	.word	0x200028c0

08002d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <SystemInit+0x5c>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <SystemInit+0x5c>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <SystemInit+0x60>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <SystemInit+0x60>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <SystemInit+0x60>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <SystemInit+0x60>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <SystemInit+0x60>)
 8002da0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002da4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002da8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <SystemInit+0x60>)
 8002dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002db0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <SystemInit+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <SystemInit+0x60>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <SystemInit+0x60>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <CDC_Fill_Buffer>:
  * @param  Buf: pointer to the tx buffer
  * @param  TotalLen: number of bytes to be sent
  * @retval Result of the operation: USBD_OK if all operations are OK
  */
uint8_t CDC_Fill_Buffer(uint8_t* Buf, uint32_t TotalLen)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint16_t i;
  
  for (i = 0; i < TotalLen; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	81fb      	strh	r3, [r7, #14]
 8002de6:	e011      	b.n	8002e0c <CDC_Fill_Buffer+0x34>
  {
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 8002de8:	89fb      	ldrh	r3, [r7, #14]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	441a      	add	r2, r3
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <CDC_Fill_Buffer+0x4c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	7811      	ldrb	r1, [r2, #0]
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <CDC_Fill_Buffer+0x50>)
 8002df6:	54d1      	strb	r1, [r2, r3]
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <CDC_Fill_Buffer+0x4c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <CDC_Fill_Buffer+0x4c>)
 8002e04:	6013      	str	r3, [r2, #0]
  for (i = 0; i < TotalLen; i++)
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	81fb      	strh	r3, [r7, #14]
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8e9      	bhi.n	8002de8 <CDC_Fill_Buffer+0x10>
  }
  return (USBD_OK);
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000270 	.word	0x20000270
 8002e28:	20001328 	.word	0x20001328

08002e2c <CDC_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void CDC_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;
  
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d030      	beq.n	8002ea2 <CDC_TIM_PeriodElapsedCallback+0x76>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d905      	bls.n	8002e58 <CDC_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e005      	b.n	8002e64 <CDC_TIM_PeriodElapsedCallback+0x38>
    }
    else 
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	60fb      	str	r3, [r7, #12]
    }
    
    buffptr = UserTxBufPtrOut;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60bb      	str	r3, [r7, #8]
    
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <CDC_TIM_PeriodElapsedCallback+0x88>)
 8002e6e:	4413      	add	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4810      	ldr	r0, [pc, #64]	; (8002eb8 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8002e76:	f00a fe0d 	bl	800da94 <USBD_CDC_SetTxBuffer>
    
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8002e7a:	480f      	ldr	r0, [pc, #60]	; (8002eb8 <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8002e7c:	f00a fe28 	bl	800dad0 <USBD_CDC_TransmitPacket>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <CDC_TIM_PeriodElapsedCallback+0x76>
    {
      UserTxBufPtrOut += buffsize;
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e90:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e9a:	d102      	bne.n	8002ea2 <CDC_TIM_PeriodElapsedCallback+0x76>
      {
        UserTxBufPtrOut = 0;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000274 	.word	0x20000274
 8002eb0:	20000270 	.word	0x20000270
 8002eb4:	20001328 	.word	0x20001328
 8002eb8:	20000624 	.word	0x20000624

08002ebc <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f00a fe6b 	bl	800dbae <USBD_LL_SetupStage>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f00a fea5 	bl	800dc58 <USBD_LL_DataOutStage>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	3348      	adds	r3, #72	; 0x48
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f00a feee 	bl	800dd1e <USBD_LL_DataInStage>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f00b f802 	bl	800df62 <USBD_LL_SOF>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00a ff68 	bl	800de4a <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f80:	2101      	movs	r1, #1
 8002f82:	4618      	mov	r0, r3
 8002f84:	f00a ffaf 	bl	800dee6 <USBD_LL_SetSpeed>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f00a ffb1 	bl	800df06 <USBD_LL_Suspend>
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f00a ffb9 	bl	800df32 <USBD_LL_Resume>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00b f807 	bl	800dff2 <USBD_LL_IsoOUTIncomplete>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f00a ffcf 	bl	800dfa6 <USBD_LL_IsoINIncomplete>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800301e:	4618      	mov	r0, r3
 8003020:	f00b f80d 	bl	800e03e <USBD_LL_DevConnected>
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800303a:	4618      	mov	r0, r3
 800303c:	f00b f80a 	bl	800e054 <USBD_LL_DevDisconnected>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	70fb      	strb	r3, [r7, #3]
 800305a:	460b      	mov	r3, r1
 800305c:	70bb      	strb	r3, [r7, #2]
 800305e:	4613      	mov	r3, r2
 8003060:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003068:	78bb      	ldrb	r3, [r7, #2]
 800306a:	883a      	ldrh	r2, [r7, #0]
 800306c:	78f9      	ldrb	r1, [r7, #3]
 800306e:	f005 fc18 	bl	80088a2 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f005 fce8 	bl	8008a68 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 fd37 	bl	8008b2c <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80030da:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80030dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da0b      	bge.n	80030fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	333e      	adds	r3, #62	; 0x3e
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	e00b      	b.n	8003114 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003112:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f005 fb8e 	bl	8008858 <HAL_PCD_SetAddress>
  return USBD_OK; 
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	460b      	mov	r3, r1
 8003154:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800315c:	7af9      	ldrb	r1, [r7, #11]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	f005 fc44 	bl	80089ee <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	460b      	mov	r3, r1
 800317e:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003186:	7af9      	ldrb	r1, [r7, #11]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	f005 fbf1 	bl	8008972 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800319c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031a0:	f7ff fde8 	bl	8002d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031a6:	e003      	b.n	80031b0 <LoopCopyDataInit>

080031a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031ae:	3104      	adds	r1, #4

080031b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031b0:	480a      	ldr	r0, [pc, #40]	; (80031dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031b8:	d3f6      	bcc.n	80031a8 <CopyDataInit>
	ldr	r2, =_sbss
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031bc:	e002      	b.n	80031c4 <LoopFillZerobss>

080031be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031c0:	f842 3b04 	str.w	r3, [r2], #4

080031c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <LoopForever+0x16>)
	cmp	r2, r3
 80031c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031c8:	d3f9      	bcc.n	80031be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ca:	f00c fe97 	bl	800fefc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ce:	f7fd fc99 	bl	8000b04 <main>

080031d2 <LoopForever>:

LoopForever:
    b LoopForever
 80031d2:	e7fe      	b.n	80031d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80031d8:	08010e00 	.word	0x08010e00
	ldr	r0, =_sdata
 80031dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80031e0:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 80031e4:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 80031e8:	200028bc 	.word	0x200028bc

080031ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031ec:	e7fe      	b.n	80031ec <ADC1_2_IRQHandler>
	...

080031f0 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8003200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e030      	b.n	800326a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	7b1a      	ldrb	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <HTS221_RegisterBusIO+0x84>)
 8003244:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HTS221_RegisterBusIO+0x88>)
 800324a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4798      	blx	r3
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	e002      	b.n	800326a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003268:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	080038a7 	.word	0x080038a7
 8003278:	08003909 	.word	0x08003909

0800327c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 faa4 	bl	80037dc <HTS221_Initialize>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800329e:	e004      	b.n	80032aa <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d111      	bne.n	80032e8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f878 	bl	80033ba <HTS221_HUM_Disable>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d4:	e00d      	b.n	80032f2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f95f 	bl	800359a <HTS221_TEMP_Disable>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032e6:	e004      	b.n	80032f2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	331c      	adds	r3, #28
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fc28 	bl	8003b60 <hts221_device_id_get>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800331a:	e000      	b.n	800331e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4a07      	ldr	r2, [pc, #28]	; (800336c <HTS221_GetCapabilities+0x44>)
 800334e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <HTS221_GetCapabilities+0x44>)
 8003354:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	41480000 	.word	0x41480000

08003370 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e015      	b.n	80033b2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	331c      	adds	r3, #28
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fbf3 	bl	8003b82 <hts221_power_on_set>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a6:	e004      	b.n	80033b2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e015      	b.n	80033fc <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	331c      	adds	r3, #28
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fbce 	bl	8003b82 <hts221_power_on_set>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033f0:	e004      	b.n	80033fc <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f96f 	bl	80036f4 <HTS221_GetOutputDataRate>
 8003416:	4603      	mov	r3, r0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800342c:	ed97 0a00 	vldr	s0, [r7]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9a3 	bl	800377c <HTS221_SetOutputDataRate>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	331c      	adds	r3, #28
 800344e:	f107 020c 	add.w	r2, r7, #12
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fc58 	bl	8003d0a <hts221_hum_adc_point_0_get>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003464:	e06b      	b.n	800353e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f103 021c 	add.w	r2, r3, #28
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	3304      	adds	r3, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f000 fbaa 	bl	8003bce <hts221_hum_rh_point_0_get>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003484:	e05b      	b.n	800353e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f103 021c 	add.w	r2, r3, #28
 800348c:	f107 030c 	add.w	r3, r7, #12
 8003490:	3308      	adds	r3, #8
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f000 fc5c 	bl	8003d52 <hts221_hum_adc_point_1_get>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80034a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a4:	e04b      	b.n	800353e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f103 021c 	add.w	r2, r3, #28
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	330c      	adds	r3, #12
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f000 fba8 	bl	8003c0a <hts221_hum_rh_point_1_get>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034c4:	e03b      	b.n	800353e <HTS221_HUM_GetHumidity+0xfe>
 80034c6:	2300      	movs	r3, #0
 80034c8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	331c      	adds	r3, #28
 80034ce:	f107 021c 	add.w	r2, r7, #28
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fafd 	bl	8003ad4 <hts221_humidity_raw_get>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034e4:	e02b      	b.n	800353e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80034e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f99a 	bl	8003834 <Linear_Interpolation>
 8003500:	eef0 7a40 	vmov.f32	s15, s0
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003518:	d503      	bpl.n	8003522 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003548 <HTS221_HUM_GetHumidity+0x108>
 800352c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003534:	dd02      	ble.n	800353c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HTS221_HUM_GetHumidity+0x10c>)
 800353a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	42c80000 	.word	0x42c80000
 800354c:	42c80000 	.word	0x42c80000

08003550 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e015      	b.n	8003592 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	331c      	adds	r3, #28
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fb03 	bl	8003b82 <hts221_power_on_set>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003586:	e004      	b.n	8003592 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e015      	b.n	80035dc <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10b      	bne.n	80035d2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	331c      	adds	r3, #28
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fade 	bl	8003b82 <hts221_power_on_set>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80035cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035d0:	e004      	b.n	80035dc <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80035ee:	6839      	ldr	r1, [r7, #0]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f87f 	bl	80036f4 <HTS221_GetOutputDataRate>
 80035f6:	4603      	mov	r3, r0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800360c:	ed97 0a00 	vldr	s0, [r7]
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8b3 	bl	800377c <HTS221_SetOutputDataRate>
 8003616:	4603      	mov	r3, r0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	331c      	adds	r3, #28
 800362e:	f107 020c 	add.w	r2, r7, #12
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fbb0 	bl	8003d9a <hts221_temp_adc_point_0_get>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003644:	e052      	b.n	80036ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f103 021c 	add.w	r2, r3, #28
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	3304      	adds	r3, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 faf6 	bl	8003c46 <hts221_temp_deg_point_0_get>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003664:	e042      	b.n	80036ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f103 021c 	add.w	r2, r3, #28
 800366c:	f107 030c 	add.w	r3, r7, #12
 8003670:	3308      	adds	r3, #8
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f000 fbb4 	bl	8003de2 <hts221_temp_adc_point_1_get>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003684:	e032      	b.n	80036ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 021c 	add.w	r2, r3, #28
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	330c      	adds	r3, #12
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f000 fb07 	bl	8003ca8 <hts221_temp_deg_point_1_get>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036a4:	e022      	b.n	80036ec <HTS221_TEMP_GetTemperature+0xcc>
 80036a6:	2300      	movs	r3, #0
 80036a8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	331c      	adds	r3, #28
 80036ae:	f107 021c 	add.w	r2, r7, #28
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fa30 	bl	8003b1a <hts221_temperature_raw_get>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036c4:	e012      	b.n	80036ec <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80036c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	eeb0 0a67 	vmov.f32	s0, s15
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f8aa 	bl	8003834 <Linear_Interpolation>
 80036e0:	eef0 7a40 	vmov.f32	s15, s0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3720      	adds	r7, #32
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	331c      	adds	r3, #28
 8003706:	f107 020b 	add.w	r2, r7, #11
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f983 	bl	8003a18 <hts221_data_rate_get>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371c:	e025      	b.n	800376a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d81d      	bhi.n	8003760 <HTS221_GetOutputDataRate+0x6c>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <HTS221_GetOutputDataRate+0x38>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	0800373d 	.word	0x0800373d
 8003730:	08003747 	.word	0x08003747
 8003734:	08003751 	.word	0x08003751
 8003738:	08003759 	.word	0x08003759
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
      break;
 8003744:	e010      	b.n	8003768 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800374c:	601a      	str	r2, [r3, #0]
      break;
 800374e:	e00b      	b.n	8003768 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HTS221_GetOutputDataRate+0x80>)
 8003754:	601a      	str	r2, [r3, #0]
      break;
 8003756:	e007      	b.n	8003768 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HTS221_GetOutputDataRate+0x84>)
 800375c:	601a      	str	r2, [r3, #0]
      break;
 800375e:	e003      	b.n	8003768 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003764:	60fb      	str	r3, [r7, #12]
      break;
 8003766:	bf00      	nop
  }

  return ret;
 8003768:	68fb      	ldr	r3, [r7, #12]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40e00000 	.word	0x40e00000
 8003778:	41480000 	.word	0x41480000

0800377c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003788:	edd7 7a00 	vldr	s15, [r7]
 800378c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d801      	bhi.n	800379e <HTS221_SetOutputDataRate+0x22>
 800379a:	2301      	movs	r3, #1
 800379c:	e00b      	b.n	80037b6 <HTS221_SetOutputDataRate+0x3a>
 800379e:	edd7 7a00 	vldr	s15, [r7]
 80037a2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d801      	bhi.n	80037b4 <HTS221_SetOutputDataRate+0x38>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e000      	b.n	80037b6 <HTS221_SetOutputDataRate+0x3a>
 80037b4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80037b6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	331c      	adds	r3, #28
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f902 	bl	80039ca <hts221_data_rate_set>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80037cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037d0:	e000      	b.n	80037d4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	331c      	adds	r3, #28
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f9c9 	bl	8003b82 <hts221_power_on_set>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037fa:	e017      	b.n	800382c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	331c      	adds	r3, #28
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f940 	bl	8003a88 <hts221_block_data_update_set>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003812:	e00b      	b.n	800382c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003814:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffaf 	bl	800377c <HTS221_SetOutputDataRate>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003828:	e000      	b.n	800382c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	ed93 7a03 	vldr	s14, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	edd3 7a01 	vldr	s15, [r3, #4]
 800384c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003850:	edd7 7a00 	vldr	s15, [r7]
 8003854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	edd3 6a02 	vldr	s13, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	edd3 7a01 	vldr	s15, [r3, #4]
 8003864:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	ed93 6a00 	vldr	s12, [r3]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	edd3 7a03 	vldr	s15, [r3, #12]
 8003874:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003878:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800387c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edd3 6a02 	vldr	s13, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	edd3 7a00 	vldr	s15, [r3]
 800388c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003890:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003894:	eef0 7a66 	vmov.f32	s15, s13
}
 8003898:	eeb0 0a67 	vmov.f32	s0, s15
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038a6:	b590      	push	{r4, r7, lr}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	461a      	mov	r2, r3
 80038b2:	460b      	mov	r3, r1
 80038b4:	72fb      	strb	r3, [r7, #11]
 80038b6:	4613      	mov	r3, r2
 80038b8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10e      	bne.n	80038e4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	695c      	ldr	r4, [r3, #20]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	7b1b      	ldrb	r3, [r3, #12]
 80038ce:	b298      	uxth	r0, r3
 80038d0:	7afb      	ldrb	r3, [r7, #11]
 80038d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	b299      	uxth	r1, r3
 80038da:	893b      	ldrh	r3, [r7, #8]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	47a0      	blx	r4
 80038e0:	4603      	mov	r3, r0
 80038e2:	e00d      	b.n	8003900 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	695c      	ldr	r4, [r3, #20]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	7b1b      	ldrb	r3, [r3, #12]
 80038ec:	b298      	uxth	r0, r3
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	b299      	uxth	r1, r3
 80038f8:	893b      	ldrh	r3, [r7, #8]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	47a0      	blx	r4
 80038fe:	4603      	mov	r3, r0
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}

08003908 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	460b      	mov	r3, r1
 8003916:	72fb      	strb	r3, [r7, #11]
 8003918:	4613      	mov	r3, r2
 800391a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10e      	bne.n	8003946 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	691c      	ldr	r4, [r3, #16]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	7b1b      	ldrb	r3, [r3, #12]
 8003930:	b298      	uxth	r0, r3
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003938:	b2db      	uxtb	r3, r3
 800393a:	b299      	uxth	r1, r3
 800393c:	893b      	ldrh	r3, [r7, #8]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	47a0      	blx	r4
 8003942:	4603      	mov	r3, r0
 8003944:	e00d      	b.n	8003962 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	691c      	ldr	r4, [r3, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	7b1b      	ldrb	r3, [r3, #12]
 800394e:	b298      	uxth	r0, r3
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003956:	b2db      	uxtb	r3, r3
 8003958:	b299      	uxth	r1, r3
 800395a:	893b      	ldrh	r3, [r7, #8]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	47a0      	blx	r4
 8003960:	4603      	mov	r3, r0
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd90      	pop	{r4, r7, pc}

0800396a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800396a:	b590      	push	{r4, r7, lr}
 800396c:	b087      	sub	sp, #28
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	461a      	mov	r2, r3
 8003976:	460b      	mov	r3, r1
 8003978:	72fb      	strb	r3, [r7, #11]
 800397a:	4613      	mov	r3, r2
 800397c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685c      	ldr	r4, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6898      	ldr	r0, [r3, #8]
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	7af9      	ldrb	r1, [r7, #11]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	47a0      	blx	r4
 800398e:	6178      	str	r0, [r7, #20]
  return ret;
 8003990:	697b      	ldr	r3, [r7, #20]
}
 8003992:	4618      	mov	r0, r3
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}

0800399a <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800399a:	b590      	push	{r4, r7, lr}
 800399c:	b087      	sub	sp, #28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	461a      	mov	r2, r3
 80039a6:	460b      	mov	r3, r1
 80039a8:	72fb      	strb	r3, [r7, #11]
 80039aa:	4613      	mov	r3, r2
 80039ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681c      	ldr	r4, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6898      	ldr	r0, [r3, #8]
 80039b6:	893b      	ldrh	r3, [r7, #8]
 80039b8:	7af9      	ldrb	r1, [r7, #11]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	47a0      	blx	r4
 80039be:	6178      	str	r0, [r7, #20]
  return ret;
 80039c0:	697b      	ldr	r3, [r7, #20]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}

080039ca <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80039d6:	f107 0208 	add.w	r2, r7, #8
 80039da:	2301      	movs	r3, #1
 80039dc:	2120      	movs	r1, #32
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffc3 	bl	800396a <hts221_read_reg>
 80039e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	7a3b      	ldrb	r3, [r7, #8]
 80039f6:	f362 0301 	bfi	r3, r2, #0, #2
 80039fa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80039fc:	f107 0208 	add.w	r2, r7, #8
 8003a00:	2301      	movs	r3, #1
 8003a02:	2120      	movs	r1, #32
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ffc8 	bl	800399a <hts221_write_reg>
 8003a0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003a22:	f107 0208 	add.w	r2, r7, #8
 8003a26:	2301      	movs	r3, #1
 8003a28:	2120      	movs	r1, #32
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff9d 	bl	800396a <hts221_read_reg>
 8003a30:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003a32:	7a3b      	ldrb	r3, [r7, #8]
 8003a34:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d81a      	bhi.n	8003a74 <hts221_data_rate_get+0x5c>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <hts221_data_rate_get+0x2c>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a5d 	.word	0x08003a5d
 8003a4c:	08003a65 	.word	0x08003a65
 8003a50:	08003a6d 	.word	0x08003a6d
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
      break;
 8003a5a:	e00f      	b.n	8003a7c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
      break;
 8003a62:	e00b      	b.n	8003a7c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2202      	movs	r2, #2
 8003a68:	701a      	strb	r2, [r3, #0]
      break;
 8003a6a:	e007      	b.n	8003a7c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	701a      	strb	r2, [r3, #0]
      break;
 8003a72:	e003      	b.n	8003a7c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2204      	movs	r2, #4
 8003a78:	701a      	strb	r2, [r3, #0]
      break;
 8003a7a:	bf00      	nop
  }

  return ret;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop

08003a88 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003a94:	f107 0208 	add.w	r2, r7, #8
 8003a98:	2301      	movs	r3, #1
 8003a9a:	2120      	movs	r1, #32
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff64 	bl	800396a <hts221_read_reg>
 8003aa2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	7a3b      	ldrb	r3, [r7, #8]
 8003ab4:	f362 0382 	bfi	r3, r2, #2, #1
 8003ab8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003aba:	f107 0208 	add.w	r2, r7, #8
 8003abe:	2301      	movs	r3, #1
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff69 	bl	800399a <hts221_write_reg>
 8003ac8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003ade:	f107 0208 	add.w	r2, r7, #8
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	2128      	movs	r1, #40	; 0x28
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff3f 	bl	800396a <hts221_read_reg>
 8003aec:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003aee:	7a7b      	ldrb	r3, [r7, #9]
 8003af0:	b21a      	sxth	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	7a3b      	ldrb	r3, [r7, #8]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b21a      	sxth	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	801a      	strh	r2, [r3, #0]
  return ret;
 8003b10:	68fb      	ldr	r3, [r7, #12]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003b24:	f107 0208 	add.w	r2, r7, #8
 8003b28:	2302      	movs	r3, #2
 8003b2a:	212a      	movs	r1, #42	; 0x2a
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff1c 	bl	800396a <hts221_read_reg>
 8003b32:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003b34:	7a7b      	ldrb	r3, [r7, #9]
 8003b36:	b21a      	sxth	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	7a3b      	ldrb	r3, [r7, #8]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	b21a      	sxth	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	801a      	strh	r2, [r3, #0]
  return ret;
 8003b56:	68fb      	ldr	r3, [r7, #12]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	210f      	movs	r1, #15
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fefa 	bl	800396a <hts221_read_reg>
 8003b76:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003b8e:	f107 0208 	add.w	r2, r7, #8
 8003b92:	2301      	movs	r3, #1
 8003b94:	2120      	movs	r1, #32
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fee7 	bl	800396a <hts221_read_reg>
 8003b9c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10f      	bne.n	8003bc4 <hts221_power_on_set+0x42>
    reg.pd = val;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	7a3b      	ldrb	r3, [r7, #8]
 8003bae:	f362 13c7 	bfi	r3, r2, #7, #1
 8003bb2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003bb4:	f107 0208 	add.w	r2, r7, #8
 8003bb8:	2301      	movs	r3, #1
 8003bba:	2120      	movs	r1, #32
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff feec 	bl	800399a <hts221_write_reg>
 8003bc2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003bd8:	f107 020b 	add.w	r2, r7, #11
 8003bdc:	2301      	movs	r3, #1
 8003bde:	2130      	movs	r1, #48	; 0x30
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fec2 	bl	800396a <hts221_read_reg>
 8003be6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003bf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003c00:	68fb      	ldr	r3, [r7, #12]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003c14:	f107 020b 	add.w	r2, r7, #11
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2131      	movs	r1, #49	; 0x31
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fea4 	bl	800396a <hts221_read_reg>
 8003c22:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003c50:	f107 020f 	add.w	r2, r7, #15
 8003c54:	2301      	movs	r3, #1
 8003c56:	2132      	movs	r1, #50	; 0x32
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fe86 	bl	800396a <hts221_read_reg>
 8003c5e:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11b      	bne.n	8003c9e <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003c66:	f107 0210 	add.w	r2, r7, #16
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	2135      	movs	r1, #53	; 0x35
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fe7b 	bl	800396a <hts221_read_reg>
 8003c74:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003c76:	7c3b      	ldrb	r3, [r7, #16]
 8003c78:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	4413      	add	r3, r2
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c90:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003c9e:	697b      	ldr	r3, [r7, #20]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003cb2:	f107 020f 	add.w	r2, r7, #15
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	2133      	movs	r1, #51	; 0x33
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe55 	bl	800396a <hts221_read_reg>
 8003cc0:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11b      	bne.n	8003d00 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003cc8:	f107 0210 	add.w	r2, r7, #16
 8003ccc:	2301      	movs	r3, #1
 8003cce:	2135      	movs	r1, #53	; 0x35
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fe4a 	bl	800396a <hts221_read_reg>
 8003cd6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003cd8:	7c3b      	ldrb	r3, [r7, #16]
 8003cda:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	4413      	add	r3, r2
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003d00:	697b      	ldr	r3, [r7, #20]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003d14:	f107 0208 	add.w	r2, r7, #8
 8003d18:	2302      	movs	r3, #2
 8003d1a:	2136      	movs	r1, #54	; 0x36
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fe24 	bl	800396a <hts221_read_reg>
 8003d22:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003d24:	7a7b      	ldrb	r3, [r7, #9]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	7a3b      	ldrb	r3, [r7, #8]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003d36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003d48:	68fb      	ldr	r3, [r7, #12]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003d5c:	f107 0208 	add.w	r2, r7, #8
 8003d60:	2302      	movs	r3, #2
 8003d62:	213a      	movs	r1, #58	; 0x3a
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fe00 	bl	800396a <hts221_read_reg>
 8003d6a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003d6c:	7a7b      	ldrb	r3, [r7, #9]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	7a3b      	ldrb	r3, [r7, #8]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003d7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003d90:	68fb      	ldr	r3, [r7, #12]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003da4:	f107 0208 	add.w	r2, r7, #8
 8003da8:	2302      	movs	r3, #2
 8003daa:	213c      	movs	r1, #60	; 0x3c
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fddc 	bl	800396a <hts221_read_reg>
 8003db2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003db4:	7a7b      	ldrb	r3, [r7, #9]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	7a3b      	ldrb	r3, [r7, #8]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003dc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003dec:	f107 0208 	add.w	r2, r7, #8
 8003df0:	2302      	movs	r3, #2
 8003df2:	213e      	movs	r1, #62	; 0x3e
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fdb8 	bl	800396a <hts221_read_reg>
 8003dfa:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003dfc:	7a7b      	ldrb	r3, [r7, #9]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	7a3b      	ldrb	r3, [r7, #8]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003e20:	68fb      	ldr	r3, [r7, #12]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	e04d      	b.n	8003ee4 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	7b1a      	ldrb	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <LPS22HB_RegisterBusIO+0xc4>)
 8003e84:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <LPS22HB_RegisterBusIO+0xc8>)
 8003e8a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e020      	b.n	8003ee4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4798      	blx	r3
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e016      	b.n	8003ee4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d112      	bne.n	8003ee4 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2110      	movs	r1, #16
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9df 	bl	8004296 <LPS22HB_Write_Reg>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ee2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	08004557 	.word	0x08004557
 8003ef4:	080045dd 	.word	0x080045dd

08003ef8 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 faca 	bl	80044a4 <LPS22HB_Initialize>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f1a:	e004      	b.n	8003f26 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d111      	bne.n	8003f64 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f877 	bl	8004034 <LPS22HB_PRESS_Disable>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f50:	e00d      	b.n	8003f6e <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f918 	bl	8004188 <LPS22HB_TEMP_Disable>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f62:	e004      	b.n	8003f6e <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	331c      	adds	r3, #28
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fcd0 	bl	800492c <lps22hb_device_id_get>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f96:	e000      	b.n	8003f9a <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <LPS22HB_GetCapabilities+0x44>)
 8003fd2:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <LPS22HB_GetCapabilities+0x44>)
 8003fd8:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	42960000 	.word	0x42960000

08003fec <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e014      	b.n	800402c <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f103 021c 	add.w	r2, r3, #28
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f000 fbd5 	bl	80047c0 <lps22hb_data_rate_set>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004020:	e004      	b.n	800402c <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e024      	b.n	8004094 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11a      	bne.n	800408a <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f103 021c 	add.w	r2, r3, #28
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	332b      	adds	r3, #43	; 0x2b
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f000 fbd3 	bl	800480c <lps22hb_data_rate_get>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 800406c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004070:	e010      	b.n	8004094 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	331c      	adds	r3, #28
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fba1 	bl	80047c0 <lps22hb_data_rate_set>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004088:	e004      	b.n	8004094 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f90f 	bl	80042cc <LPS22HB_GetOutputDataRate>
 80040ae:	4603      	mov	r3, r0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d106      	bne.n	80040dc <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80040ce:	ed97 0a00 	vldr	s0, [r7]
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f94e 	bl	8004374 <LPS22HB_SetOutputDataRate_When_Enabled>
 80040d8:	4603      	mov	r3, r0
 80040da:	e005      	b.n	80040e8 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80040dc:	ed97 0a00 	vldr	s0, [r7]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f99f 	bl	8004424 <LPS22HB_SetOutputDataRate_When_Disabled>
 80040e6:	4603      	mov	r3, r0
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80040fa:	f107 030c 	add.w	r3, r7, #12
 80040fe:	2204      	movs	r2, #4
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f00b ff2c 	bl	800ff60 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	331c      	adds	r3, #28
 800410c:	f107 020c 	add.w	r2, r7, #12
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fbbe 	bl	8004894 <lps22hb_pressure_raw_get>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800411e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004122:	e009      	b.n	8004138 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 facc 	bl	80046c4 <lps22hb_from_lsb_to_hpa>
 800412c:	eef0 7a40 	vmov.f32	s15, s0
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e014      	b.n	8004180 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f103 021c 	add.w	r2, r3, #28
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f000 fb2b 	bl	80047c0 <lps22hb_data_rate_set>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004174:	e004      	b.n	8004180 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e024      	b.n	80041e8 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11a      	bne.n	80041de <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 021c 	add.w	r2, r3, #28
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	332b      	adds	r3, #43	; 0x2b
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f000 fb29 	bl	800480c <lps22hb_data_rate_get>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c4:	e010      	b.n	80041e8 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	331c      	adds	r3, #28
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 faf7 	bl	80047c0 <lps22hb_data_rate_set>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041dc:	e004      	b.n	80041e8 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80041fa:	6839      	ldr	r1, [r7, #0]
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f865 	bl	80042cc <LPS22HB_GetOutputDataRate>
 8004202:	4603      	mov	r3, r0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800421e:	2b01      	cmp	r3, #1
 8004220:	d106      	bne.n	8004230 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004222:	ed97 0a00 	vldr	s0, [r7]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8a4 	bl	8004374 <LPS22HB_SetOutputDataRate_When_Enabled>
 800422c:	4603      	mov	r3, r0
 800422e:	e005      	b.n	800423c <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004230:	ed97 0a00 	vldr	s0, [r7]
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f8f5 	bl	8004424 <LPS22HB_SetOutputDataRate_When_Disabled>
 800423a:	4603      	mov	r3, r0
  }
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800424e:	f107 030c 	add.w	r3, r7, #12
 8004252:	2202      	movs	r2, #2
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f00b fe82 	bl	800ff60 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	331c      	adds	r3, #28
 8004260:	f107 020c 	add.w	r2, r7, #12
 8004264:	4611      	mov	r1, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb3d 	bl	80048e6 <lps22hb_temperature_raw_get>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004276:	e00a      	b.n	800428e <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8004278:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fa39 	bl	80046f4 <lps22hb_from_lsb_to_degc>
 8004282:	eef0 7a40 	vmov.f32	s15, s0
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	70fb      	strb	r3, [r7, #3]
 80042a2:	4613      	mov	r3, r2
 80042a4:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f103 001c 	add.w	r0, r3, #28
 80042ac:	1cba      	adds	r2, r7, #2
 80042ae:	78f9      	ldrb	r1, [r7, #3]
 80042b0:	2301      	movs	r3, #1
 80042b2:	f000 f9ee 	bl	8004692 <lps22hb_write_reg>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80042bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042c0:	e000      	b.n	80042c4 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	331c      	adds	r3, #28
 80042de:	f107 020b 	add.w	r2, r7, #11
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fa91 	bl	800480c <lps22hb_data_rate_get>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f4:	e031      	b.n	800435a <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80042f6:	7afb      	ldrb	r3, [r7, #11]
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d829      	bhi.n	8004350 <LPS22HB_GetOutputDataRate+0x84>
 80042fc:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <LPS22HB_GetOutputDataRate+0x38>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	0800431d 	.word	0x0800431d
 8004308:	08004327 	.word	0x08004327
 800430c:	08004331 	.word	0x08004331
 8004310:	08004339 	.word	0x08004339
 8004314:	08004341 	.word	0x08004341
 8004318:	08004349 	.word	0x08004349
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
      break;
 8004324:	e018      	b.n	8004358 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800432c:	601a      	str	r2, [r3, #0]
      break;
 800432e:	e013      	b.n	8004358 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <LPS22HB_GetOutputDataRate+0x98>)
 8004334:	601a      	str	r2, [r3, #0]
      break;
 8004336:	e00f      	b.n	8004358 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <LPS22HB_GetOutputDataRate+0x9c>)
 800433c:	601a      	str	r2, [r3, #0]
      break;
 800433e:	e00b      	b.n	8004358 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <LPS22HB_GetOutputDataRate+0xa0>)
 8004344:	601a      	str	r2, [r3, #0]
      break;
 8004346:	e007      	b.n	8004358 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <LPS22HB_GetOutputDataRate+0xa4>)
 800434c:	601a      	str	r2, [r3, #0]
      break;
 800434e:	e003      	b.n	8004358 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004354:	60fb      	str	r3, [r7, #12]
      break;
 8004356:	bf00      	nop
  }

  return ret;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	41200000 	.word	0x41200000
 8004368:	41c80000 	.word	0x41c80000
 800436c:	42480000 	.word	0x42480000
 8004370:	42960000 	.word	0x42960000

08004374 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004380:	edd7 7a00 	vldr	s15, [r7]
 8004384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	d801      	bhi.n	8004396 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8004392:	2301      	movs	r3, #1
 8004394:	e021      	b.n	80043da <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004396:	edd7 7a00 	vldr	s15, [r7]
 800439a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800439e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	d801      	bhi.n	80043ac <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e016      	b.n	80043da <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80043ac:	edd7 7a00 	vldr	s15, [r7]
 80043b0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80043b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043bc:	d801      	bhi.n	80043c2 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 80043be:	2303      	movs	r3, #3
 80043c0:	e00b      	b.n	80043da <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80043c2:	edd7 7a00 	vldr	s15, [r7]
 80043c6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004420 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 80043ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d2:	d801      	bhi.n	80043d8 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80043d4:	2304      	movs	r3, #4
 80043d6:	e000      	b.n	80043da <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80043d8:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80043da:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	331c      	adds	r3, #28
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f9eb 	bl	80047c0 <lps22hb_data_rate_set>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f4:	e00f      	b.n	8004416 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f103 021c 	add.w	r2, r3, #28
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	332b      	adds	r3, #43	; 0x2b
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 fa02 	bl	800480c <lps22hb_data_rate_get>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004412:	e000      	b.n	8004416 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	42480000 	.word	0x42480000

08004424 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004430:	edd7 7a00 	vldr	s15, [r7]
 8004434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	d801      	bhi.n	8004446 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8004442:	2301      	movs	r3, #1
 8004444:	e021      	b.n	800448a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004446:	edd7 7a00 	vldr	s15, [r7]
 800444a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800444e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	d801      	bhi.n	800445c <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8004458:	2302      	movs	r3, #2
 800445a:	e016      	b.n	800448a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800445c:	edd7 7a00 	vldr	s15, [r7]
 8004460:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446c:	d801      	bhi.n	8004472 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800446e:	2303      	movs	r3, #3
 8004470:	e00b      	b.n	800448a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004472:	edd7 7a00 	vldr	s15, [r7]
 8004476:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80044a0 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 800447a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	d801      	bhi.n	8004488 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004484:	2304      	movs	r3, #4
 8004486:	e000      	b.n	800448a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004488:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	42480000 	.word	0x42480000

080044a4 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	331c      	adds	r3, #28
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fa71 	bl	800499a <lps22hb_low_power_set>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80044be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c2:	e044      	b.n	800454e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	331c      	adds	r3, #28
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f978 	bl	80047c0 <lps22hb_data_rate_set>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044da:	e038      	b.n	800454e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	331c      	adds	r3, #28
 80044e0:	2102      	movs	r1, #2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f946 	bl	8004774 <lps22hb_low_pass_filter_mode_set>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044f2:	e02c      	b.n	800454e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	331c      	adds	r3, #28
 80044f8:	2101      	movs	r1, #1
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f914 	bl	8004728 <lps22hb_block_data_update_set>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800450a:	e020      	b.n	800454e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	331c      	adds	r3, #28
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa89 	bl	8004a32 <lps22hb_auto_add_inc_set>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452a:	e010      	b.n	800454e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	331c      	adds	r3, #28
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fa7d 	bl	8004a32 <lps22hb_auto_add_inc_set>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004542:	e004      	b.n	800454e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2203      	movs	r2, #3
 8004548:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004556:	b590      	push	{r4, r7, lr}
 8004558:	b089      	sub	sp, #36	; 0x24
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	461a      	mov	r2, r3
 8004562:	460b      	mov	r3, r1
 8004564:	72fb      	strb	r3, [r7, #11]
 8004566:	4613      	mov	r3, r2
 8004568:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d121      	bne.n	80045be <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	83fb      	strh	r3, [r7, #30]
 800457e:	e018      	b.n	80045b2 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	695c      	ldr	r4, [r3, #20]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	7b1b      	ldrb	r3, [r3, #12]
 8004588:	b298      	uxth	r0, r3
 800458a:	7afb      	ldrb	r3, [r7, #11]
 800458c:	b29a      	uxth	r2, r3
 800458e:	8bfb      	ldrh	r3, [r7, #30]
 8004590:	4413      	add	r3, r2
 8004592:	b299      	uxth	r1, r3
 8004594:	8bfb      	ldrh	r3, [r7, #30]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	441a      	add	r2, r3
 800459a:	2301      	movs	r3, #1
 800459c:	47a0      	blx	r4
 800459e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045aa:	e013      	b.n	80045d4 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80045ac:	8bfb      	ldrh	r3, [r7, #30]
 80045ae:	3301      	adds	r3, #1
 80045b0:	83fb      	strh	r3, [r7, #30]
 80045b2:	8bfa      	ldrh	r2, [r7, #30]
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3e2      	bcc.n	8004580 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	e00a      	b.n	80045d4 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	695c      	ldr	r4, [r3, #20]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	7b1b      	ldrb	r3, [r3, #12]
 80045c6:	b298      	uxth	r0, r3
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	b299      	uxth	r1, r3
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	47a0      	blx	r4
 80045d2:	4603      	mov	r3, r0
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3724      	adds	r7, #36	; 0x24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}

080045dc <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	461a      	mov	r2, r3
 80045e8:	460b      	mov	r3, r1
 80045ea:	72fb      	strb	r3, [r7, #11]
 80045ec:	4613      	mov	r3, r2
 80045ee:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d121      	bne.n	8004644 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	83fb      	strh	r3, [r7, #30]
 8004604:	e018      	b.n	8004638 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	691c      	ldr	r4, [r3, #16]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	7b1b      	ldrb	r3, [r3, #12]
 800460e:	b298      	uxth	r0, r3
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	b29a      	uxth	r2, r3
 8004614:	8bfb      	ldrh	r3, [r7, #30]
 8004616:	4413      	add	r3, r2
 8004618:	b299      	uxth	r1, r3
 800461a:	8bfb      	ldrh	r3, [r7, #30]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	441a      	add	r2, r3
 8004620:	2301      	movs	r3, #1
 8004622:	47a0      	blx	r4
 8004624:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800462c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004630:	e013      	b.n	800465a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004632:	8bfb      	ldrh	r3, [r7, #30]
 8004634:	3301      	adds	r3, #1
 8004636:	83fb      	strh	r3, [r7, #30]
 8004638:	8bfa      	ldrh	r2, [r7, #30]
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	429a      	cmp	r2, r3
 800463e:	d3e2      	bcc.n	8004606 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	e00a      	b.n	800465a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	691c      	ldr	r4, [r3, #16]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	7b1b      	ldrb	r3, [r3, #12]
 800464c:	b298      	uxth	r0, r3
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	b299      	uxth	r1, r3
 8004652:	893b      	ldrh	r3, [r7, #8]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	47a0      	blx	r4
 8004658:	4603      	mov	r3, r0
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3724      	adds	r7, #36	; 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd90      	pop	{r4, r7, pc}

08004662 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004662:	b590      	push	{r4, r7, lr}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	461a      	mov	r2, r3
 800466e:	460b      	mov	r3, r1
 8004670:	72fb      	strb	r3, [r7, #11]
 8004672:	4613      	mov	r3, r2
 8004674:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685c      	ldr	r4, [r3, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6898      	ldr	r0, [r3, #8]
 800467e:	893b      	ldrh	r3, [r7, #8]
 8004680:	7af9      	ldrb	r1, [r7, #11]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	47a0      	blx	r4
 8004686:	6178      	str	r0, [r7, #20]
  return ret;
 8004688:	697b      	ldr	r3, [r7, #20]
}
 800468a:	4618      	mov	r0, r3
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	bd90      	pop	{r4, r7, pc}

08004692 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004692:	b590      	push	{r4, r7, lr}
 8004694:	b087      	sub	sp, #28
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	461a      	mov	r2, r3
 800469e:	460b      	mov	r3, r1
 80046a0:	72fb      	strb	r3, [r7, #11]
 80046a2:	4613      	mov	r3, r2
 80046a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681c      	ldr	r4, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6898      	ldr	r0, [r3, #8]
 80046ae:	893b      	ldrh	r3, [r7, #8]
 80046b0:	7af9      	ldrb	r1, [r7, #11]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	47a0      	blx	r4
 80046b6:	6178      	str	r0, [r7, #20]
  return ret;
 80046b8:	697b      	ldr	r3, [r7, #20]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
	...

080046c4 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80046f0 <lps22hb_from_lsb_to_hpa+0x2c>
 80046da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046de:	eef0 7a66 	vmov.f32	s15, s13
}
 80046e2:	eeb0 0a67 	vmov.f32	s0, s15
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	49800000 	.word	0x49800000

080046f4 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80046fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004724 <lps22hb_from_lsb_to_degc+0x30>
 800470e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004712:	eef0 7a66 	vmov.f32	s15, s13
}
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	42c80000 	.word	0x42c80000

08004728 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004734:	f107 0208 	add.w	r2, r7, #8
 8004738:	2301      	movs	r3, #1
 800473a:	2110      	movs	r1, #16
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff90 	bl	8004662 <lps22hb_read_reg>
 8004742:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	b2da      	uxtb	r2, r3
 8004752:	7a3b      	ldrb	r3, [r7, #8]
 8004754:	f362 0341 	bfi	r3, r2, #1, #1
 8004758:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800475a:	f107 0208 	add.w	r2, r7, #8
 800475e:	2301      	movs	r3, #1
 8004760:	2110      	movs	r1, #16
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff95 	bl	8004692 <lps22hb_write_reg>
 8004768:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800476a:	68fb      	ldr	r3, [r7, #12]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004780:	f107 0208 	add.w	r2, r7, #8
 8004784:	2301      	movs	r3, #1
 8004786:	2110      	movs	r1, #16
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff6a 	bl	8004662 <lps22hb_read_reg>
 800478e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	b2da      	uxtb	r2, r3
 800479e:	7a3b      	ldrb	r3, [r7, #8]
 80047a0:	f362 0383 	bfi	r3, r2, #2, #2
 80047a4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80047a6:	f107 0208 	add.w	r2, r7, #8
 80047aa:	2301      	movs	r3, #1
 80047ac:	2110      	movs	r1, #16
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff6f 	bl	8004692 <lps22hb_write_reg>
 80047b4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80047cc:	f107 0208 	add.w	r2, r7, #8
 80047d0:	2301      	movs	r3, #1
 80047d2:	2110      	movs	r1, #16
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff ff44 	bl	8004662 <lps22hb_read_reg>
 80047da:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10f      	bne.n	8004802 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	7a3b      	ldrb	r3, [r7, #8]
 80047ec:	f362 1306 	bfi	r3, r2, #4, #3
 80047f0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80047f2:	f107 0208 	add.w	r2, r7, #8
 80047f6:	2301      	movs	r3, #1
 80047f8:	2110      	movs	r1, #16
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ff49 	bl	8004692 <lps22hb_write_reg>
 8004800:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004816:	f107 0208 	add.w	r2, r7, #8
 800481a:	2301      	movs	r3, #1
 800481c:	2110      	movs	r1, #16
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff1f 	bl	8004662 <lps22hb_read_reg>
 8004824:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8004826:	7a3b      	ldrb	r3, [r7, #8]
 8004828:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b05      	cmp	r3, #5
 8004830:	d826      	bhi.n	8004880 <lps22hb_data_rate_get+0x74>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <lps22hb_data_rate_get+0x2c>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	08004851 	.word	0x08004851
 800483c:	08004859 	.word	0x08004859
 8004840:	08004861 	.word	0x08004861
 8004844:	08004869 	.word	0x08004869
 8004848:	08004871 	.word	0x08004871
 800484c:	08004879 	.word	0x08004879
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
      break;
 8004856:	e017      	b.n	8004888 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
      break;
 800485e:	e013      	b.n	8004888 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
      break;
 8004866:	e00f      	b.n	8004888 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2203      	movs	r2, #3
 800486c:	701a      	strb	r2, [r3, #0]
      break;
 800486e:	e00b      	b.n	8004888 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2204      	movs	r2, #4
 8004874:	701a      	strb	r2, [r3, #0]
      break;
 8004876:	e007      	b.n	8004888 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2205      	movs	r2, #5
 800487c:	701a      	strb	r2, [r3, #0]
      break;
 800487e:	e003      	b.n	8004888 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	bf00      	nop
  }

  return ret;
 8004888:	68fb      	ldr	r3, [r7, #12]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop

08004894 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 800489e:	f107 0208 	add.w	r2, r7, #8
 80048a2:	2303      	movs	r3, #3
 80048a4:	2128      	movs	r1, #40	; 0x28
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fedb 	bl	8004662 <lps22hb_read_reg>
 80048ac:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80048ae:	7abb      	ldrb	r3, [r7, #10]
 80048b0:	461a      	mov	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	7a7a      	ldrb	r2, [r7, #9]
 80048be:	441a      	add	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	7a3a      	ldrb	r2, [r7, #8]
 80048cc:	441a      	add	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	021a      	lsls	r2, r3, #8
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	601a      	str	r2, [r3, #0]
  return ret;
 80048dc:	68fb      	ldr	r3, [r7, #12]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 80048f0:	f107 0208 	add.w	r2, r7, #8
 80048f4:	2302      	movs	r3, #2
 80048f6:	212b      	movs	r1, #43	; 0x2b
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff feb2 	bl	8004662 <lps22hb_read_reg>
 80048fe:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004900:	7a7b      	ldrb	r3, [r7, #9]
 8004902:	b21a      	sxth	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800490e:	b29b      	uxth	r3, r3
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	b29a      	uxth	r2, r3
 8004914:	7a3b      	ldrb	r3, [r7, #8]
 8004916:	b29b      	uxth	r3, r3
 8004918:	4413      	add	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	b21a      	sxth	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	801a      	strh	r2, [r3, #0]
  return ret;
 8004922:	68fb      	ldr	r3, [r7, #12]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8004936:	2301      	movs	r3, #1
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	210f      	movs	r1, #15
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fe90 	bl	8004662 <lps22hb_read_reg>
 8004942:	60f8      	str	r0, [r7, #12]
  return ret;
 8004944:	68fb      	ldr	r3, [r7, #12]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <lps22hb_boot_set>:
  * @param  val    Change the values of boot in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800495a:	f107 0208 	add.w	r2, r7, #8
 800495e:	2301      	movs	r3, #1
 8004960:	2111      	movs	r1, #17
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fe7d 	bl	8004662 <lps22hb_read_reg>
 8004968:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10f      	bne.n	8004990 <lps22hb_boot_set+0x42>
    ctrl_reg2.boot = val;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	7a3b      	ldrb	r3, [r7, #8]
 800497a:	f362 13c7 	bfi	r3, r2, #7, #1
 800497e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004980:	f107 0208 	add.w	r2, r7, #8
 8004984:	2301      	movs	r3, #1
 8004986:	2111      	movs	r1, #17
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fe82 	bl	8004692 <lps22hb_write_reg>
 800498e:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004990:	68fb      	ldr	r3, [r7, #12]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 80049a6:	f107 0208 	add.w	r2, r7, #8
 80049aa:	2301      	movs	r3, #1
 80049ac:	211a      	movs	r1, #26
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff fe57 	bl	8004662 <lps22hb_read_reg>
 80049b4:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10f      	bne.n	80049dc <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	7a3b      	ldrb	r3, [r7, #8]
 80049c6:	f362 0300 	bfi	r3, r2, #0, #1
 80049ca:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 80049cc:	f107 0208 	add.w	r2, r7, #8
 80049d0:	2301      	movs	r3, #1
 80049d2:	211a      	movs	r1, #26
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff fe5c 	bl	8004692 <lps22hb_write_reg>
 80049da:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80049dc:	68fb      	ldr	r3, [r7, #12]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <lps22hb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hb_i2c_dis_t val)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80049f2:	f107 0208 	add.w	r2, r7, #8
 80049f6:	2301      	movs	r3, #1
 80049f8:	2111      	movs	r1, #17
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fe31 	bl	8004662 <lps22hb_read_reg>
 8004a00:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10f      	bne.n	8004a28 <lps22hb_i2c_interface_set+0x42>
    ctrl_reg2.i2c_dis = (uint8_t)val;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	7a3b      	ldrb	r3, [r7, #8]
 8004a12:	f362 03c3 	bfi	r3, r2, #3, #1
 8004a16:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a18:	f107 0208 	add.w	r2, r7, #8
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	2111      	movs	r1, #17
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fe36 	bl	8004692 <lps22hb_write_reg>
 8004a26:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004a28:	68fb      	ldr	r3, [r7, #12]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a3e:	f107 0208 	add.w	r2, r7, #8
 8004a42:	2301      	movs	r3, #1
 8004a44:	2111      	movs	r1, #17
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fe0b 	bl	8004662 <lps22hb_read_reg>
 8004a4c:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	7a3b      	ldrb	r3, [r7, #8]
 8004a5e:	f362 1304 	bfi	r3, r2, #4, #1
 8004a62:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a64:	f107 0208 	add.w	r2, r7, #8
 8004a68:	2301      	movs	r3, #1
 8004a6a:	2111      	movs	r1, #17
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fe10 	bl	8004692 <lps22hb_write_reg>
 8004a72:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004a74:	68fb      	ldr	r3, [r7, #12]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <BSP_LED_Init+0x94>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <BSP_LED_Init+0x94>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6593      	str	r3, [r2, #88]	; 0x58
 8004a96:	4b1f      	ldr	r3, [pc, #124]	; (8004b14 <BSP_LED_Init+0x94>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8004aa2:	f004 f9cd 	bl	8008e40 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <BSP_LED_Init+0x44>
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <BSP_LED_Init+0x94>)
 8004aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab0:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <BSP_LED_Init+0x94>)
 8004ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ab8:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <BSP_LED_Init+0x94>)
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10b      	bne.n	8004ae2 <BSP_LED_Init+0x62>
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <BSP_LED_Init+0x94>)
 8004acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ace:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <BSP_LED_Init+0x94>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <BSP_LED_Init+0x94>)
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <BSP_LED_Init+0x98>)
 8004ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004af4:	2302      	movs	r3, #2
 8004af6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <BSP_LED_Init+0x9c>)
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	f107 0214 	add.w	r2, r7, #20
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fd96 	bl	8006638 <HAL_GPIO_Init>
}
 8004b0c:	bf00      	nop
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	08010db4 	.word	0x08010db4
 8004b1c:	20000078 	.word	0x20000078

08004b20 <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10d      	bne.n	8004b4c <BSP_LED_On+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <BSP_LED_On+0x54>)
 8004b34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <BSP_LED_On+0x58>)
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2201      	movs	r2, #1
 8004b44:	4619      	mov	r1, r3
 8004b46:	f002 f82d 	bl	8006ba4 <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
}
 8004b4a:	e00f      	b.n	8004b6c <BSP_LED_On+0x4c>
  else if (Led == LEDSWD)
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d10c      	bne.n	8004b6c <BSP_LED_On+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <BSP_LED_On+0x54>)
 8004b56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	4a06      	ldr	r2, [pc, #24]	; (8004b78 <BSP_LED_On+0x58>)
 8004b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2200      	movs	r2, #0
 8004b66:	4619      	mov	r1, r3
 8004b68:	f002 f81c 	bl	8006ba4 <HAL_GPIO_WritePin>
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000078 	.word	0x20000078
 8004b78:	08010db4 	.word	0x08010db4

08004b7c <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10d      	bne.n	8004ba8 <BSP_LED_Off+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <BSP_LED_Off+0x54>)
 8004b90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	4a0f      	ldr	r2, [pc, #60]	; (8004bd4 <BSP_LED_Off+0x58>)
 8004b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f001 ffff 	bl	8006ba4 <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
}
 8004ba6:	e00f      	b.n	8004bc8 <BSP_LED_Off+0x4c>
  else if (Led == LEDSWD)
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10c      	bne.n	8004bc8 <BSP_LED_Off+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <BSP_LED_Off+0x54>)
 8004bb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <BSP_LED_Off+0x58>)
 8004bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f001 ffee 	bl	8006ba4 <HAL_GPIO_WritePin>
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000078 	.word	0x20000078
 8004bd4:	08010db4 	.word	0x08010db4

08004bd8 <Sensor_IO_SPI_CS_Init_All>:
  * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
  * @param  None
  * @retval HAL_StatusTypeDef HAL Status
  */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 8004bde:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	4a43      	ldr	r2, [pc, #268]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004be4:	f043 0302 	orr.w	r3, r3, #2
 8004be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	693b      	ldr	r3, [r7, #16]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	4a3d      	ldr	r2, [pc, #244]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004bfc:	f043 0302 	orr.w	r3, r3, #2
 8004c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8004c0e:	4b38      	ldr	r3, [pc, #224]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	4a37      	ldr	r2, [pc, #220]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c14:	f043 0304 	orr.w	r3, r3, #4
 8004c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c1a:	4b35      	ldr	r3, [pc, #212]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	68bb      	ldr	r3, [r7, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8004c26:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	4a31      	ldr	r2, [pc, #196]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c32:	4b2f      	ldr	r3, [pc, #188]	; (8004cf0 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c44:	482b      	ldr	r0, [pc, #172]	; (8004cf4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c46:	f001 ffad 	bl	8006ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	2110      	movs	r1, #16
 8004c4e:	482a      	ldr	r0, [pc, #168]	; (8004cf8 <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004c50:	f001 ffa8 	bl	8006ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004c54:	2201      	movs	r2, #1
 8004c56:	2102      	movs	r1, #2
 8004c58:	4826      	ldr	r0, [pc, #152]	; (8004cf4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c5a:	f001 ffa3 	bl	8006ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2108      	movs	r1, #8
 8004c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c66:	f001 ff9d 	bl	8006ba4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c72:	2301      	movs	r3, #1
 8004c74:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 8004c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4619      	mov	r1, r3
 8004c82:	481c      	ldr	r0, [pc, #112]	; (8004cf4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c84:	f001 fcd8 	bl	8006638 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c8e:	4819      	ldr	r0, [pc, #100]	; (8004cf4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004c90:	f001 ff88 	bl	8006ba4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8004c94:	2310      	movs	r3, #16
 8004c96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4816      	ldr	r0, [pc, #88]	; (8004cf8 <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004ca0:	f001 fcca 	bl	8006638 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2110      	movs	r1, #16
 8004ca8:	4813      	ldr	r0, [pc, #76]	; (8004cf8 <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004caa:	f001 ff7b 	bl	8006ba4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480e      	ldr	r0, [pc, #56]	; (8004cf4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004cba:	f001 fcbd 	bl	8006638 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	480c      	ldr	r0, [pc, #48]	; (8004cf4 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004cc4:	f001 ff6e 	bl	8006ba4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8004cc8:	2308      	movs	r3, #8
 8004cca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd6:	f001 fcaf 	bl	8006638 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2108      	movs	r1, #8
 8004cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ce2:	f001 ff5f 	bl	8006ba4 <HAL_GPIO_WritePin>

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	48000400 	.word	0x48000400
 8004cf8:	48000800 	.word	0x48000800

08004cfc <BSP_I2C3_Init>:
/**
  * @brief  Initialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_Init(void) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
  
  hbusi2c3.Instance  = I2C3;
 8004d06:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <BSP_I2C3_Init+0x44>)
 8004d08:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <BSP_I2C3_Init+0x48>)
 8004d0a:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&hbusi2c3) == HAL_I2C_STATE_RESET)
 8004d0c:	480c      	ldr	r0, [pc, #48]	; (8004d40 <BSP_I2C3_Init+0x44>)
 8004d0e:	f002 fb1c 	bl	800734a <HAL_I2C_GetState>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10e      	bne.n	8004d36 <BSP_I2C3_Init+0x3a>
  {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C3_MspInit(&hbusi2c3);
 8004d18:	4809      	ldr	r0, [pc, #36]	; (8004d40 <BSP_I2C3_Init+0x44>)
 8004d1a:	f000 f9ef 	bl	80050fc <I2C3_MspInit>
        }
      }
    #endif

    /* Init the I2C */
    if(MX_I2C3_Init(&hbusi2c3) != HAL_OK)
 8004d1e:	4808      	ldr	r0, [pc, #32]	; (8004d40 <BSP_I2C3_Init+0x44>)
 8004d20:	f000 f9c8 	bl	80050b4 <MX_I2C3_Init>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <BSP_I2C3_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004d2a:	f06f 0307 	mvn.w	r3, #7
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	e001      	b.n	8004d36 <BSP_I2C3_Init+0x3a>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
    }	
  }

  return ret;
 8004d36:	687b      	ldr	r3, [r7, #4]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	2000277c 	.word	0x2000277c
 8004d44:	40005c00 	.word	0x40005c00

08004d48 <BSP_I2C3_DeInit>:
/**
  * @brief  DeInitialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_DeInit(void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004d4e:	f06f 0307 	mvn.w	r3, #7
 8004d52:	607b      	str	r3, [r7, #4]
  
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    /* DeInit the I2C */ 
    I2C3_MspDeInit(&hbusi2c3);
 8004d54:	4807      	ldr	r0, [pc, #28]	; (8004d74 <BSP_I2C3_DeInit+0x2c>)
 8004d56:	f000 fa35 	bl	80051c4 <I2C3_MspDeInit>
  #endif  
  
  if (HAL_I2C_DeInit(&hbusi2c3) == HAL_OK) {
 8004d5a:	4806      	ldr	r0, [pc, #24]	; (8004d74 <BSP_I2C3_DeInit+0x2c>)
 8004d5c:	f001 ffc9 	bl	8006cf2 <HAL_I2C_DeInit>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <BSP_I2C3_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8004d6a:	687b      	ldr	r3, [r7, #4]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	2000277c 	.word	0x2000277c

08004d78 <BSP_I2C3_WriteReg>:
  * @param  Addr: Device address on Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af04      	add	r7, sp, #16
 8004d7e:	60ba      	str	r2, [r7, #8]
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	81fb      	strh	r3, [r7, #14]
 8004d86:	460b      	mov	r3, r1
 8004d88:	81bb      	strh	r3, [r7, #12]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004d8e:	f06f 0307 	mvn.w	r3, #7
 8004d92:	617b      	str	r3, [r7, #20]

  if(HAL_I2C_Mem_Write(&hbusi2c3, (uint8_t)DevAddr,
 8004d94:	89fb      	ldrh	r3, [r7, #14]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	b299      	uxth	r1, r3
 8004d9a:	89ba      	ldrh	r2, [r7, #12]
 8004d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da0:	9302      	str	r3, [sp, #8]
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2301      	movs	r3, #1
 8004dac:	4806      	ldr	r0, [pc, #24]	; (8004dc8 <BSP_I2C3_WriteReg+0x50>)
 8004dae:	f001 ffe3 	bl	8006d78 <HAL_I2C_Mem_Write>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <BSP_I2C3_WriteReg+0x44>
                       (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                       (uint8_t *)pData, len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004dbc:	697b      	ldr	r3, [r7, #20]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	2000277c 	.word	0x2000277c

08004dcc <BSP_I2C3_ReadReg>:
  * @brief  Read registers through a bus (8 bits)
  * @param  DevAddr: Device address on BUS
  * @param  Reg: The target register address to read
  * @retval BSP status
  */
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af04      	add	r7, sp, #16
 8004dd2:	60ba      	str	r2, [r7, #8]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	81fb      	strh	r3, [r7, #14]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	81bb      	strh	r3, [r7, #12]
 8004dde:	4613      	mov	r3, r2
 8004de0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004de2:	f06f 0307 	mvn.w	r3, #7
 8004de6:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hbusi2c3, DevAddr, (uint16_t)Reg,
 8004de8:	89ba      	ldrh	r2, [r7, #12]
 8004dea:	89f9      	ldrh	r1, [r7, #14]
 8004dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004df0:	9302      	str	r3, [sp, #8]
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4806      	ldr	r0, [pc, #24]	; (8004e18 <BSP_I2C3_ReadReg+0x4c>)
 8004dfe:	f002 f8cf 	bl	8006fa0 <HAL_I2C_Mem_Read>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <BSP_I2C3_ReadReg+0x40>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004e0c:	697b      	ldr	r3, [r7, #20]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	2000277c 	.word	0x2000277c

08004e1c <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
  
  hbusspi2.Instance  = SPI2;
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <BSP_SPI2_Init+0x40>)
 8004e28:	4a0d      	ldr	r2, [pc, #52]	; (8004e60 <BSP_SPI2_Init+0x44>)
 8004e2a:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 8004e2c:	480b      	ldr	r0, [pc, #44]	; (8004e5c <BSP_SPI2_Init+0x40>)
 8004e2e:	f005 ff47 	bl	800acc0 <HAL_SPI_GetState>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <BSP_SPI2_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 8004e38:	4808      	ldr	r0, [pc, #32]	; (8004e5c <BSP_SPI2_Init+0x40>)
 8004e3a:	f000 f8ed 	bl	8005018 <SPI2_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8004e3e:	4807      	ldr	r0, [pc, #28]	; (8004e5c <BSP_SPI2_Init+0x40>)
 8004e40:	f000 f890 	bl	8004f64 <MX_SPI2_Init>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004e4a:	f06f 0307 	mvn.w	r3, #7
 8004e4e:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004e50:	687b      	ldr	r3, [r7, #4]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200027c8 	.word	0x200027c8
 8004e60:	40003800 	.word	0x40003800

08004e64 <BSP_SPI2_DeInit>:
/**
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004e6a:	f06f 0307 	mvn.w	r3, #7
 8004e6e:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 8004e70:	4807      	ldr	r0, [pc, #28]	; (8004e90 <BSP_SPI2_DeInit+0x2c>)
 8004e72:	f000 f907 	bl	8005084 <SPI2_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi2) == HAL_OK) {
 8004e76:	4806      	ldr	r0, [pc, #24]	; (8004e90 <BSP_SPI2_DeInit+0x2c>)
 8004e78:	f005 fb65 	bl	800a546 <HAL_SPI_DeInit>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <BSP_SPI2_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8004e86:	687b      	ldr	r3, [r7, #4]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200027c8 	.word	0x200027c8

08004e94 <BSP_SPI2_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ea0:	f06f 0305 	mvn.w	r3, #5
 8004ea4:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <BSP_SPI2_Send+0x34>)
 8004eb0:	f005 fb85 	bl	800a5be <HAL_SPI_Transmit>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <BSP_SPI2_Send+0x2a>
  {
      ret = len;
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	200027c8 	.word	0x200027c8

08004ecc <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
  
  hbusspi1.Instance  = SPI1;
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <BSP_SPI1_Init+0x40>)
 8004ed8:	4a0d      	ldr	r2, [pc, #52]	; (8004f10 <BSP_SPI1_Init+0x44>)
 8004eda:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8004edc:	480b      	ldr	r0, [pc, #44]	; (8004f0c <BSP_SPI1_Init+0x40>)
 8004ede:	f005 feef 	bl	800acc0 <HAL_SPI_GetState>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <BSP_SPI1_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbusspi1);
 8004ee8:	4808      	ldr	r0, [pc, #32]	; (8004f0c <BSP_SPI1_Init+0x40>)
 8004eea:	f000 f9c9 	bl	8005280 <SPI1_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8004eee:	4807      	ldr	r0, [pc, #28]	; (8004f0c <BSP_SPI1_Init+0x40>)
 8004ef0:	f000 f984 	bl	80051fc <MX_SPI1_Init>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <BSP_SPI1_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004efa:	f06f 0307 	mvn.w	r3, #7
 8004efe:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	2000282c 	.word	0x2000282c
 8004f10:	40013000 	.word	0x40013000

08004f14 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004f22:	f06f 0305 	mvn.w	r3, #5
 8004f26:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f2e:	9200      	str	r2, [sp, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	4806      	ldr	r0, [pc, #24]	; (8004f50 <BSP_SPI1_SendRecv+0x3c>)
 8004f36:	f005 fcb0 	bl	800a89a <HAL_SPI_TransmitReceive>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <BSP_SPI1_SendRecv+0x30>
  {
      ret = len;
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004f44:	697b      	ldr	r3, [r7, #20]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	2000282c 	.word	0x2000282c

08004f54 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f58:	f000 ff64 	bl	8005e24 <HAL_GetTick>
 8004f5c:	4603      	mov	r3, r0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <MX_SPI2_Init>:

/* SPI2 init function */ 

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a28      	ldr	r2, [pc, #160]	; (8005014 <MX_SPI2_Init+0xb0>)
 8004f74:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f7c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f84:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f8c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa0:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2230      	movs	r2, #48	; 0x30
 8004fa6:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2207      	movs	r2, #7
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	635a      	str	r2, [r3, #52]	; 0x34
  
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f005 fa17 	bl	800a400 <HAL_SPI_Init>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_SPI2_Init+0x78>
  {
    ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
  }
  
  HAL_Delay(5);
 8004fdc:	2005      	movs	r0, #5
 8004fde:	f7fc fbc3 	bl	8001768 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ff0:	601a      	str	r2, [r3, #0]
  HAL_Delay(5);
 8004ff2:	2005      	movs	r0, #5
 8004ff4:	f7fc fbb8 	bl	8001768 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005006:	601a      	str	r2, [r3, #0]
  
  return ret;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40003800 	.word	0x40003800

08005018 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005020:	4b16      	ldr	r3, [pc, #88]	; (800507c <SPI2_MspInit+0x64>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	4a15      	ldr	r2, [pc, #84]	; (800507c <SPI2_MspInit+0x64>)
 8005026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800502a:	6593      	str	r3, [r2, #88]	; 0x58
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <SPI2_MspInit+0x64>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <SPI2_MspInit+0x64>)
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	4a0f      	ldr	r2, [pc, #60]	; (800507c <SPI2_MspInit+0x64>)
 800503e:	f043 0302 	orr.w	r3, r3, #2
 8005042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005044:	4b0d      	ldr	r3, [pc, #52]	; (800507c <SPI2_MspInit+0x64>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
  
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005050:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800505a:	2301      	movs	r3, #1
 800505c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800505e:	2302      	movs	r3, #2
 8005060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005062:	2305      	movs	r3, #5
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005066:	f107 0314 	add.w	r3, r7, #20
 800506a:	4619      	mov	r1, r3
 800506c:	4804      	ldr	r0, [pc, #16]	; (8005080 <SPI2_MspInit+0x68>)
 800506e:	f001 fae3 	bl	8006638 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8005072:	bf00      	nop
 8005074:	3728      	adds	r7, #40	; 0x28
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40021000 	.word	0x40021000
 8005080:	48000400 	.word	0x48000400

08005084 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800508c:	4b07      	ldr	r3, [pc, #28]	; (80050ac <SPI2_MspDeInit+0x28>)
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	4a06      	ldr	r2, [pc, #24]	; (80050ac <SPI2_MspDeInit+0x28>)
 8005092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005096:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 8005098:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800509c:	4804      	ldr	r0, [pc, #16]	; (80050b0 <SPI2_MspDeInit+0x2c>)
 800509e:	f001 fc75 	bl	800698c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	48000400 	.word	0x48000400

080050b4 <MX_I2C3_Init>:

/* I2C3 init function */ 

__weak HAL_StatusTypeDef MX_I2C3_Init(I2C_HandleTypeDef* hi2c)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C3;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <MX_I2C3_Init+0x40>)
 80050c4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10801541;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <MX_I2C3_Init+0x44>)
 80050ca:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0x33;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2233      	movs	r2, #51	; 0x33
 80050d0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	60da      	str	r2, [r3, #12]
  
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 fd7b 	bl	8006bd4 <HAL_I2C_Init>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <MX_I2C3_Init+0x34>
  {
    ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40005c00 	.word	0x40005c00
 80050f8:	10801541 	.word	0x10801541

080050fc <I2C3_MspInit>:

static void I2C3_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b0ac      	sub	sp, #176	; 0xb0
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C3_MspInit 0 */
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8005104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005108:	617b      	str	r3, [r7, #20]
  RCC_PeriphCLKInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 800510a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800510e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4618      	mov	r0, r3
 8005116:	f004 fc8f 	bl	8009a38 <HAL_RCCEx_PeriphCLKConfig>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d000      	beq.n	8005122 <I2C3_MspInit+0x26>
  {
    while(1);
 8005120:	e7fe      	b.n	8005120 <I2C3_MspInit+0x24>
  }
  
  /* Enable I2C GPIO clocks */
  __GPIOC_CLK_ENABLE();
 8005122:	4b26      	ldr	r3, [pc, #152]	; (80051bc <I2C3_MspInit+0xc0>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	4a25      	ldr	r2, [pc, #148]	; (80051bc <I2C3_MspInit+0xc0>)
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <I2C3_MspInit+0xc0>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]
  
  /**I2C3 GPIO Configuration    
  PC1     ------> I2C3_SDA
  PC0     ------> I2C3_SCL 
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800513a:	2303      	movs	r3, #3
 800513c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005140:	2312      	movs	r3, #18
 8005142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005146:	2301      	movs	r3, #1
 8005148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514c:	2303      	movs	r3, #3
 800514e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005152:	2304      	movs	r3, #4
 8005154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005158:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800515c:	4619      	mov	r1, r3
 800515e:	4818      	ldr	r0, [pc, #96]	; (80051c0 <I2C3_MspInit+0xc4>)
 8005160:	f001 fa6a 	bl	8006638 <HAL_GPIO_Init>
  
  /* Peripheral clock enable */
  __HAL_RCC_I2C3_CLK_ENABLE();
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <I2C3_MspInit+0xc0>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	4a14      	ldr	r2, [pc, #80]	; (80051bc <I2C3_MspInit+0xc0>)
 800516a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800516e:	6593      	str	r3, [r2, #88]	; 0x58
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <I2C3_MspInit+0xc0>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
  
  /* Force the I2C peripheral clock reset */
  __I2C3_FORCE_RESET();
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <I2C3_MspInit+0xc0>)
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <I2C3_MspInit+0xc0>)
 8005182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005186:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Release the I2C peripheral clock reset */
  __I2C3_RELEASE_RESET();
 8005188:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <I2C3_MspInit+0xc0>)
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <I2C3_MspInit+0xc0>)
 800518e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005192:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005194:	2200      	movs	r2, #0
 8005196:	2100      	movs	r1, #0
 8005198:	2048      	movs	r0, #72	; 0x48
 800519a:	f000 ff58 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800519e:	2048      	movs	r0, #72	; 0x48
 80051a0:	f000 ff71 	bl	8006086 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80051a4:	2200      	movs	r2, #0
 80051a6:	2100      	movs	r1, #0
 80051a8:	2049      	movs	r0, #73	; 0x49
 80051aa:	f000 ff50 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80051ae:	2049      	movs	r0, #73	; 0x49
 80051b0:	f000 ff69 	bl	8006086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */
  
  /* USER CODE END I2C3_MspInit 1 */
}
 80051b4:	bf00      	nop
 80051b6:	37b0      	adds	r7, #176	; 0xb0
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000
 80051c0:	48000800 	.word	0x48000800

080051c4 <I2C3_MspDeInit>:

static void I2C3_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <I2C3_MspDeInit+0x30>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <I2C3_MspDeInit+0x30>)
 80051d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051d6:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C3 GPIO Configuration    
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 80051d8:	2103      	movs	r1, #3
 80051da:	4807      	ldr	r0, [pc, #28]	; (80051f8 <I2C3_MspDeInit+0x34>)
 80051dc:	f001 fbd6 	bl	800698c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80051e0:	2048      	movs	r0, #72	; 0x48
 80051e2:	f000 ff5e 	bl	80060a2 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80051e6:	2049      	movs	r0, #73	; 0x49
 80051e8:	f000 ff5b 	bl	80060a2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000
 80051f8:	48000800 	.word	0x48000800

080051fc <MX_SPI1_Init>:


/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <MX_SPI1_Init+0x80>)
 800520c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005214:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005222:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005236:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2218      	movs	r2, #24
 800523c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2207      	movs	r2, #7
 8005254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2208      	movs	r2, #8
 8005260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f005 f8cc 	bl	800a400 <HAL_SPI_Init>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005272:	7bfb      	ldrb	r3, [r7, #15]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40013000 	.word	0x40013000

08005280 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	; 0x28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005288:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <SPI1_MspInit+0x64>)
 800528a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528c:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <SPI1_MspInit+0x64>)
 800528e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005292:	6613      	str	r3, [r2, #96]	; 0x60
 8005294:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <SPI1_MspInit+0x64>)
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a0:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <SPI1_MspInit+0x64>)
 80052a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a4:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <SPI1_MspInit+0x64>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ac:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <SPI1_MspInit+0x64>)
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80052b8:	23e0      	movs	r3, #224	; 0xe0
 80052ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052bc:	2302      	movs	r3, #2
 80052be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052c0:	2301      	movs	r3, #1
 80052c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c4:	2303      	movs	r3, #3
 80052c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052c8:	2305      	movs	r3, #5
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052cc:	f107 0314 	add.w	r3, r7, #20
 80052d0:	4619      	mov	r1, r3
 80052d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d6:	f001 f9af 	bl	8006638 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80052da:	bf00      	nop
 80052dc:	3728      	adds	r7, #40	; 0x28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000

080052e8 <BSP_ENV_SENSOR_Init>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80052f6:	2301      	movs	r3, #1
 80052f8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
  ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <BSP_ENV_SENSOR_Init+0x24>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d032      	beq.n	8005370 <BSP_ENV_SENSOR_Init+0x88>
 800530a:	e063      	b.n	80053d4 <BSP_ENV_SENSOR_Init+0xec>
  {
#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800530c:	6838      	ldr	r0, [r7, #0]
 800530e:	f000 f931 	bl	8005574 <HTS221_0_Probe>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <BSP_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800531c:	e098      	b.n	8005450 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800531e:	4a4e      	ldr	r2, [pc, #312]	; (8005458 <BSP_ENV_SENSOR_Init+0x170>)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	494c      	ldr	r1, [pc, #304]	; (800545c <BSP_ENV_SENSOR_Init+0x174>)
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005330:	f107 0108 	add.w	r1, r7, #8
 8005334:	4610      	mov	r0, r2
 8005336:	4798      	blx	r3
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <BSP_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800533e:	f06f 0306 	mvn.w	r3, #6
 8005342:	e085      	b.n	8005450 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005344:	7a3b      	ldrb	r3, [r7, #8]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d103      	bne.n	8005352 <BSP_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005352:	7abb      	ldrb	r3, [r7, #10]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d103      	bne.n	8005360 <BSP_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005360:	7a7b      	ldrb	r3, [r7, #9]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d13a      	bne.n	80053dc <BSP_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800536e:	e035      	b.n	80053dc <BSP_ENV_SENSOR_Init+0xf4>
#endif
#if (USE_ENV_SENSOR_LPS22HB_0 == 1)
    case LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8005370:	6838      	ldr	r0, [r7, #0]
 8005372:	f000 f9a9 	bl	80056c8 <LPS22HB_0_Probe>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <BSP_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005380:	e066      	b.n	8005450 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005382:	4a35      	ldr	r2, [pc, #212]	; (8005458 <BSP_ENV_SENSOR_Init+0x170>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4933      	ldr	r1, [pc, #204]	; (800545c <BSP_ENV_SENSOR_Init+0x174>)
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005394:	f107 0108 	add.w	r1, r7, #8
 8005398:	4610      	mov	r0, r2
 800539a:	4798      	blx	r3
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <BSP_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80053a2:	f06f 0306 	mvn.w	r3, #6
 80053a6:	e053      	b.n	8005450 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80053a8:	7a3b      	ldrb	r3, [r7, #8]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d103      	bne.n	80053b6 <BSP_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80053b6:	7abb      	ldrb	r3, [r7, #10]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d103      	bne.n	80053c4 <BSP_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f043 0304 	orr.w	r3, r3, #4
 80053c2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80053c4:	7a7b      	ldrb	r3, [r7, #9]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d10a      	bne.n	80053e0 <BSP_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	61bb      	str	r3, [r7, #24]
      }
      break;
 80053d2:	e005      	b.n	80053e0 <BSP_ENV_SENSOR_Init+0xf8>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80053d4:	f06f 0301 	mvn.w	r3, #1
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80053da:	e002      	b.n	80053e2 <BSP_ENV_SENSOR_Init+0xfa>
      break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <BSP_ENV_SENSOR_Init+0xfa>
      break;
 80053e0:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <BSP_ENV_SENSOR_Init+0x104>
  {
    return ret;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	e031      	b.n	8005450 <BSP_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e02a      	b.n	8005448 <BSP_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	4013      	ands	r3, r2
 80053f8:	6a3a      	ldr	r2, [r7, #32]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d11e      	bne.n	800543c <BSP_ENV_SENSOR_Init+0x154>
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	4013      	ands	r3, r2
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	429a      	cmp	r2, r3
 8005408:	d118      	bne.n	800543c <BSP_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800540a:	4a15      	ldr	r2, [pc, #84]	; (8005460 <BSP_ENV_SENSOR_Init+0x178>)
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005412:	4814      	ldr	r0, [pc, #80]	; (8005464 <BSP_ENV_SENSOR_Init+0x17c>)
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4413      	add	r3, r2
 800541c:	440b      	add	r3, r1
 800541e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	490d      	ldr	r1, [pc, #52]	; (800545c <BSP_ENV_SENSOR_Init+0x174>)
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <BSP_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005436:	f06f 0304 	mvn.w	r3, #4
 800543a:	e009      	b.n	8005450 <BSP_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	623b      	str	r3, [r7, #32]
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3301      	adds	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d9d1      	bls.n	80053f2 <BSP_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005450:	4618      	mov	r0, r3
 8005452:	3728      	adds	r7, #40	; 0x28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000290 	.word	0x20000290
 800545c:	20002890 	.word	0x20002890
 8005460:	20000080 	.word	0x20000080
 8005464:	20000278 	.word	0x20000278

08005468 <BSP_ENV_SENSOR_Enable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d903      	bls.n	8005480 <BSP_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005478:	f06f 0301 	mvn.w	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e028      	b.n	80054d2 <BSP_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005480:	4a16      	ldr	r2, [pc, #88]	; (80054dc <BSP_ENV_SENSOR_Enable+0x74>)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	4013      	ands	r3, r2
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d11c      	bne.n	80054cc <BSP_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005492:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <BSP_ENV_SENSOR_Enable+0x78>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800549a:	4812      	ldr	r0, [pc, #72]	; (80054e4 <BSP_ENV_SENSOR_Enable+0x7c>)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	4413      	add	r3, r2
 80054a4:	440b      	add	r3, r1
 80054a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	490e      	ldr	r1, [pc, #56]	; (80054e8 <BSP_ENV_SENSOR_Enable+0x80>)
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054b4:	4610      	mov	r0, r2
 80054b6:	4798      	blx	r3
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <BSP_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054be:	f06f 0304 	mvn.w	r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e005      	b.n	80054d2 <BSP_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e002      	b.n	80054d2 <BSP_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80054cc:	f06f 0301 	mvn.w	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80054d2:	68fb      	ldr	r3, [r7, #12]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000298 	.word	0x20000298
 80054e0:	20000080 	.word	0x20000080
 80054e4:	20000278 	.word	0x20000278
 80054e8:	20002890 	.word	0x20002890

080054ec <BSP_ENV_SENSOR_GetValue>:
 *         - ENV_HUMIDITY
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d903      	bls.n	8005506 <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054fe:	f06f 0301 	mvn.w	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e029      	b.n	800555a <BSP_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005506:	4a17      	ldr	r2, [pc, #92]	; (8005564 <BSP_ENV_SENSOR_GetValue+0x78>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4013      	ands	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d11d      	bne.n	8005554 <BSP_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005518:	4a13      	ldr	r2, [pc, #76]	; (8005568 <BSP_ENV_SENSOR_GetValue+0x7c>)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005520:	4812      	ldr	r0, [pc, #72]	; (800556c <BSP_ENV_SENSOR_GetValue+0x80>)
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4613      	mov	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4413      	add	r3, r2
 800552a:	440b      	add	r3, r1
 800552c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	490f      	ldr	r1, [pc, #60]	; (8005570 <BSP_ENV_SENSOR_GetValue+0x84>)
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4610      	mov	r0, r2
 800553e:	4798      	blx	r3
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <BSP_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005546:	f06f 0304 	mvn.w	r3, #4
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e005      	b.n	800555a <BSP_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	e002      	b.n	800555a <BSP_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005554:	f06f 0301 	mvn.w	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800555a:	697b      	ldr	r3, [r7, #20]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000298 	.word	0x20000298
 8005568:	20000080 	.word	0x20000080
 800556c:	20000278 	.word	0x20000278
 8005570:	20002890 	.word	0x20002890

08005574 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b090      	sub	sp, #64	; 0x40
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800557c:	2300      	movs	r3, #0
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8005580:	2300      	movs	r3, #0
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8005584:	23bf      	movs	r3, #191	; 0xbf
 8005586:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = BSP_I2C3_Init;
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <HTS221_0_Probe+0x11c>)
 800558c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = BSP_I2C3_DeInit;
 800558e:	4b41      	ldr	r3, [pc, #260]	; (8005694 <HTS221_0_Probe+0x120>)
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = BSP_I2C3_ReadReg;
 8005592:	4b41      	ldr	r3, [pc, #260]	; (8005698 <HTS221_0_Probe+0x124>)
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 8005596:	4b41      	ldr	r3, [pc, #260]	; (800569c <HTS221_0_Probe+0x128>)
 8005598:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = BSP_GetTick;
 800559a:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <HTS221_0_Probe+0x12c>)
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800559e:	f107 0320 	add.w	r3, r7, #32
 80055a2:	4619      	mov	r1, r3
 80055a4:	483f      	ldr	r0, [pc, #252]	; (80056a4 <HTS221_0_Probe+0x130>)
 80055a6:	f7fd fe23 	bl	80031f0 <HTS221_RegisterBusIO>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055b0:	f06f 0306 	mvn.w	r3, #6
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b6:	e065      	b.n	8005684 <HTS221_0_Probe+0x110>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80055b8:	f107 031f 	add.w	r3, r7, #31
 80055bc:	4619      	mov	r1, r3
 80055be:	4839      	ldr	r0, [pc, #228]	; (80056a4 <HTS221_0_Probe+0x130>)
 80055c0:	f7fd fe9b 	bl	80032fa <HTS221_ReadID>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055ca:	f06f 0306 	mvn.w	r3, #6
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d0:	e058      	b.n	8005684 <HTS221_0_Probe+0x110>
  }
  else if (id != HTS221_ID)
 80055d2:	7ffb      	ldrb	r3, [r7, #31]
 80055d4:	2bbc      	cmp	r3, #188	; 0xbc
 80055d6:	d003      	beq.n	80055e0 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055d8:	f06f 0306 	mvn.w	r3, #6
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055de:	e051      	b.n	8005684 <HTS221_0_Probe+0x110>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	4619      	mov	r1, r3
 80055e6:	482f      	ldr	r0, [pc, #188]	; (80056a4 <HTS221_0_Probe+0x130>)
 80055e8:	f7fd fe9e 	bl	8003328 <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80055ec:	7b3b      	ldrb	r3, [r7, #12]
 80055ee:	461a      	mov	r2, r3
 80055f0:	7b7b      	ldrb	r3, [r7, #13]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	431a      	orrs	r2, r3
                                   uint32_t)cap.Humidity << 2);
 80055f6:	7bbb      	ldrb	r3, [r7, #14]
 80055f8:	009b      	lsls	r3, r3, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80055fa:	4313      	orrs	r3, r2
 80055fc:	4a2a      	ldr	r2, [pc, #168]	; (80056a8 <HTS221_0_Probe+0x134>)
 80055fe:	6013      	str	r3, [r2, #0]

    EnvCompObj[HTS221_0] = &hts221_obj_0;
 8005600:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <HTS221_0_Probe+0x138>)
 8005602:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <HTS221_0_Probe+0x130>)
 8005604:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005606:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <HTS221_0_Probe+0x13c>)
 8005608:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <HTS221_0_Probe+0x140>)
 800560a:	601a      	str	r2, [r3, #0]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <HTS221_0_Probe+0xd4>
 8005616:	7b3b      	ldrb	r3, [r7, #12]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d115      	bne.n	8005648 <HTS221_0_Probe+0xd4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800561c:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <HTS221_0_Probe+0x144>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a26      	ldr	r2, [pc, #152]	; (80056bc <HTS221_0_Probe+0x148>)
 8005622:	4927      	ldr	r1, [pc, #156]	; (80056c0 <HTS221_0_Probe+0x14c>)
 8005624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <HTS221_0_Probe+0x13c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1f      	ldr	r2, [pc, #124]	; (80056ac <HTS221_0_Probe+0x138>)
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	4610      	mov	r0, r2
 8005634:	4798      	blx	r3
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HTS221_0_Probe+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800563c:	f06f 0304 	mvn.w	r3, #4
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005642:	e001      	b.n	8005648 <HTS221_0_Probe+0xd4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005644:	2300      	movs	r3, #0
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <HTS221_0_Probe+0x110>
 8005652:	7bbb      	ldrb	r3, [r7, #14]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d115      	bne.n	8005684 <HTS221_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HTS221_0_Probe+0x144>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	4a17      	ldr	r2, [pc, #92]	; (80056bc <HTS221_0_Probe+0x148>)
 800565e:	4919      	ldr	r1, [pc, #100]	; (80056c4 <HTS221_0_Probe+0x150>)
 8005660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HTS221_0_Probe+0x13c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <HTS221_0_Probe+0x138>)
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	4610      	mov	r0, r2
 8005670:	4798      	blx	r3
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HTS221_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005678:	f06f 0304 	mvn.w	r3, #4
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567e:	e001      	b.n	8005684 <HTS221_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005680:	2300      	movs	r3, #0
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  return ret;
 8005684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005686:	4618      	mov	r0, r3
 8005688:	3740      	adds	r7, #64	; 0x40
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	08004cfd 	.word	0x08004cfd
 8005694:	08004d49 	.word	0x08004d49
 8005698:	08004dcd 	.word	0x08004dcd
 800569c:	08004d79 	.word	0x08004d79
 80056a0:	08004f55 	.word	0x08004f55
 80056a4:	200002a0 	.word	0x200002a0
 80056a8:	20000298 	.word	0x20000298
 80056ac:	20002890 	.word	0x20002890
 80056b0:	20000290 	.word	0x20000290
 80056b4:	20000008 	.word	0x20000008
 80056b8:	20000080 	.word	0x20000080
 80056bc:	20000278 	.word	0x20000278
 80056c0:	2000002c 	.word	0x2000002c
 80056c4:	20000018 	.word	0x20000018

080056c8 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b090      	sub	sp, #64	; 0x40
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;
  
  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_SPI_3WIRES_BUS; /* SPI 3-Wires */
 80056d4:	2302      	movs	r3, #2
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = 0x0;
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_LPS22HB_Init;
 80056de:	4b56      	ldr	r3, [pc, #344]	; (8005838 <LPS22HB_0_Probe+0x170>)
 80056e0:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_LPS22HB_DeInit;
 80056e2:	4b56      	ldr	r3, [pc, #344]	; (800583c <LPS22HB_0_Probe+0x174>)
 80056e4:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_LPS22HB_ReadReg;
 80056e6:	4b56      	ldr	r3, [pc, #344]	; (8005840 <LPS22HB_0_Probe+0x178>)
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_LPS22HB_WriteReg;
 80056ea:	4b56      	ldr	r3, [pc, #344]	; (8005844 <LPS22HB_0_Probe+0x17c>)
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 80056ee:	4b56      	ldr	r3, [pc, #344]	; (8005848 <LPS22HB_0_Probe+0x180>)
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80056f2:	f107 031c 	add.w	r3, r7, #28
 80056f6:	4619      	mov	r1, r3
 80056f8:	4854      	ldr	r0, [pc, #336]	; (800584c <LPS22HB_0_Probe+0x184>)
 80056fa:	f7fe fb97 	bl	8003e2c <LPS22HB_RegisterBusIO>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005704:	f06f 0306 	mvn.w	r3, #6
 8005708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800570a:	e08f      	b.n	800582c <LPS22HB_0_Probe+0x164>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800570c:	f107 031b 	add.w	r3, r7, #27
 8005710:	4619      	mov	r1, r3
 8005712:	484e      	ldr	r0, [pc, #312]	; (800584c <LPS22HB_0_Probe+0x184>)
 8005714:	f7fe fc2f 	bl	8003f76 <LPS22HB_ReadID>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800571e:	f06f 0306 	mvn.w	r3, #6
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005724:	e082      	b.n	800582c <LPS22HB_0_Probe+0x164>
  }
  else if (id != LPS22HB_ID)
 8005726:	7efb      	ldrb	r3, [r7, #27]
 8005728:	2bb1      	cmp	r3, #177	; 0xb1
 800572a:	d003      	beq.n	8005734 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800572c:	f06f 0306 	mvn.w	r3, #6
 8005730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005732:	e07b      	b.n	800582c <LPS22HB_0_Probe+0x164>
  }
  else
  {
    /* LPS22HB_SwResetAndMemoryBoot */
    if (lps22hb_boot_set(&lps22hb_obj_0.Ctx, PROPERTY_ENABLE) != LPS22HB_OK) 
 8005734:	2101      	movs	r1, #1
 8005736:	4846      	ldr	r0, [pc, #280]	; (8005850 <LPS22HB_0_Probe+0x188>)
 8005738:	f7ff f909 	bl	800494e <lps22hb_boot_set>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <LPS22HB_0_Probe+0x80>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005742:	f06f 0306 	mvn.w	r3, #6
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    
    HAL_Delay(1000);
 8005748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800574c:	f7fc f80c 	bl	8001768 <HAL_Delay>
    
    /* Do again the "LPS22HB_RegisterBusIO" */
    {
      uint8_t data = 0x01;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      
      if (LPS22HB_Write_Reg(&lps22hb_obj_0, LPS22HB_CTRL_REG1, data) != LPS22HB_OK) 
 8005756:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800575a:	461a      	mov	r2, r3
 800575c:	2110      	movs	r1, #16
 800575e:	483b      	ldr	r0, [pc, #236]	; (800584c <LPS22HB_0_Probe+0x184>)
 8005760:	f7fe fd99 	bl	8004296 <LPS22HB_Write_Reg>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <LPS22HB_0_Probe+0xa8>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800576a:	f06f 0306 	mvn.w	r3, #6
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }

    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005770:	f107 0308 	add.w	r3, r7, #8
 8005774:	4619      	mov	r1, r3
 8005776:	4835      	ldr	r0, [pc, #212]	; (800584c <LPS22HB_0_Probe+0x184>)
 8005778:	f7fe fc14 	bl	8003fa4 <LPS22HB_GetCapabilities>
    
    EnvCtx[LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((uint32_t)cap.Humidity << 2);
 800577c:	7a3b      	ldrb	r3, [r7, #8]
 800577e:	461a      	mov	r2, r3
 8005780:	7a7b      	ldrb	r3, [r7, #9]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	431a      	orrs	r2, r3
 8005786:	7abb      	ldrb	r3, [r7, #10]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4313      	orrs	r3, r2
 800578c:	4a31      	ldr	r2, [pc, #196]	; (8005854 <LPS22HB_0_Probe+0x18c>)
 800578e:	6053      	str	r3, [r2, #4]
    
    EnvCompObj[LPS22HB_0] = &lps22hb_obj_0;
 8005790:	4b31      	ldr	r3, [pc, #196]	; (8005858 <LPS22HB_0_Probe+0x190>)
 8005792:	4a2e      	ldr	r2, [pc, #184]	; (800584c <LPS22HB_0_Probe+0x184>)
 8005794:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8005796:	4b31      	ldr	r3, [pc, #196]	; (800585c <LPS22HB_0_Probe+0x194>)
 8005798:	4a31      	ldr	r2, [pc, #196]	; (8005860 <LPS22HB_0_Probe+0x198>)
 800579a:	605a      	str	r2, [r3, #4]
    
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d019      	beq.n	80057da <LPS22HB_0_Probe+0x112>
 80057a6:	7a3b      	ldrb	r3, [r7, #8]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d116      	bne.n	80057da <LPS22HB_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80057ac:	4b2d      	ldr	r3, [pc, #180]	; (8005864 <LPS22HB_0_Probe+0x19c>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a2d      	ldr	r2, [pc, #180]	; (8005868 <LPS22HB_0_Probe+0x1a0>)
 80057b2:	3303      	adds	r3, #3
 80057b4:	492d      	ldr	r1, [pc, #180]	; (800586c <LPS22HB_0_Probe+0x1a4>)
 80057b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 80057ba:	4b28      	ldr	r3, [pc, #160]	; (800585c <LPS22HB_0_Probe+0x194>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a25      	ldr	r2, [pc, #148]	; (8005858 <LPS22HB_0_Probe+0x190>)
 80057c2:	6852      	ldr	r2, [r2, #4]
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <LPS22HB_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057ce:	f06f 0304 	mvn.w	r3, #4
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	e001      	b.n	80057da <LPS22HB_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d023      	beq.n	800582c <LPS22HB_0_Probe+0x164>
 80057e4:	7a7b      	ldrb	r3, [r7, #9]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d120      	bne.n	800582c <LPS22HB_0_Probe+0x164>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80057ea:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <LPS22HB_0_Probe+0x19c>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <LPS22HB_0_Probe+0x1a0>)
 80057f0:	3303      	adds	r3, #3
 80057f2:	491f      	ldr	r1, [pc, #124]	; (8005870 <LPS22HB_0_Probe+0x1a8>)
 80057f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 80057f8:	4b18      	ldr	r3, [pc, #96]	; (800585c <LPS22HB_0_Probe+0x194>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a16      	ldr	r2, [pc, #88]	; (8005858 <LPS22HB_0_Probe+0x190>)
 8005800:	6852      	ldr	r2, [r2, #4]
 8005802:	4610      	mov	r0, r2
 8005804:	4798      	blx	r3
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <LPS22HB_0_Probe+0x14c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800580c:	f06f 0304 	mvn.w	r3, #4
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005812:	e001      	b.n	8005818 <LPS22HB_0_Probe+0x150>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005814:	2300      	movs	r3, #0
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 8005818:	2101      	movs	r1, #1
 800581a:	480d      	ldr	r0, [pc, #52]	; (8005850 <LPS22HB_0_Probe+0x188>)
 800581c:	f7ff f8e3 	bl	80049e6 <lps22hb_i2c_interface_set>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <LPS22HB_0_Probe+0x164>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005826:	f06f 0306 	mvn.w	r3, #6
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
    }
  }
  
  return ret;
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800582e:	4618      	mov	r0, r3
 8005830:	3740      	adds	r7, #64	; 0x40
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	08005875 	.word	0x08005875
 800583c:	080058ed 	.word	0x080058ed
 8005840:	08005985 	.word	0x08005985
 8005844:	08005911 	.word	0x08005911
 8005848:	08004f55 	.word	0x08004f55
 800584c:	200002cc 	.word	0x200002cc
 8005850:	200002e8 	.word	0x200002e8
 8005854:	20000298 	.word	0x20000298
 8005858:	20002890 	.word	0x20002890
 800585c:	20000290 	.word	0x20000290
 8005860:	20000040 	.word	0x20000040
 8005864:	20000080 	.word	0x20000080
 8005868:	20000278 	.word	0x20000278
 800586c:	20000064 	.word	0x20000064
 8005870:	20000050 	.word	0x20000050

08005874 <BSP_LPS22HB_Init>:
/**
 * @brief  Initialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_Init(void)
{  
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800587a:	f06f 0305 	mvn.w	r3, #5
 800587e:	61fb      	str	r3, [r7, #28]
  
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005880:	2201      	movs	r2, #1
 8005882:	2108      	movs	r1, #8
 8005884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005888:	f001 f98c 	bl	8006ba4 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800588c:	2303      	movs	r3, #3
 800588e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005894:	2301      	movs	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
  
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8005898:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <BSP_LPS22HB_Init+0x74>)
 800589a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589c:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <BSP_LPS22HB_Init+0x74>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <BSP_LPS22HB_Init+0x74>)
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	607b      	str	r3, [r7, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 80058b0:	2308      	movs	r3, #8
 80058b2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4619      	mov	r1, r3
 80058ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058be:	f000 febb 	bl	8006638 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80058c2:	2201      	movs	r2, #1
 80058c4:	2108      	movs	r1, #8
 80058c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ca:	f001 f96b 	bl	8006ba4 <HAL_GPIO_WritePin>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80058ce:	f7ff faa5 	bl	8004e1c <BSP_SPI2_Init>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <BSP_LPS22HB_Init+0x68>
  {
    ret = BSP_ERROR_NONE;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80058dc:	69fb      	ldr	r3, [r7, #28]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000

080058ec <BSP_LPS22HB_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_DeInit(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80058f2:	f06f 0305 	mvn.w	r3, #5
 80058f6:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 80058f8:	f7ff fab4 	bl	8004e64 <BSP_SPI2_DeInit>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <BSP_LPS22HB_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8005906:	687b      	ldr	r3, [r7, #4]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <BSP_LPS22HB_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60ba      	str	r2, [r7, #8]
 8005918:	461a      	mov	r2, r3
 800591a:	4603      	mov	r3, r0
 800591c:	81fb      	strh	r3, [r7, #14]
 800591e:	460b      	mov	r3, r1
 8005920:	81bb      	strh	r3, [r7, #12]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800592a:	89bb      	ldrh	r3, [r7, #12]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	2108      	movs	r1, #8
 8005934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005938:	f001 f934 	bl	8006ba4 <HAL_GPIO_WritePin>

  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 800593c:	f107 0313 	add.w	r3, r7, #19
 8005940:	2101      	movs	r1, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff faa6 	bl	8004e94 <BSP_SPI2_Send>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d002      	beq.n	8005954 <BSP_LPS22HB_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800594e:	f06f 0305 	mvn.w	r3, #5
 8005952:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI2_Send(pdata, len) != len)
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	4619      	mov	r1, r3
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	f7ff fa9b 	bl	8004e94 <BSP_SPI2_Send>
 800595e:	4602      	mov	r2, r0
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	429a      	cmp	r2, r3
 8005964:	d002      	beq.n	800596c <BSP_LPS22HB_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005966:	f06f 0305 	mvn.w	r3, #5
 800596a:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800596c:	2201      	movs	r2, #1
 800596e:	2108      	movs	r1, #8
 8005970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005974:	f001 f916 	bl	8006ba4 <HAL_GPIO_WritePin>

  return ret;
 8005978:	697b      	ldr	r3, [r7, #20]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <BSP_LPS22HB_ReadReg>:
* @param  pdata the pointer to the data to be read
* @param  len the length of the data to be read
* @retval BSP status
*/
static int32_t BSP_LPS22HB_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60ba      	str	r2, [r7, #8]
 800598c:	461a      	mov	r2, r3
 800598e:	4603      	mov	r3, r0
 8005990:	81fb      	strh	r3, [r7, #14]
 8005992:	460b      	mov	r3, r1
 8005994:	81bb      	strh	r3, [r7, #12]
 8005996:	4613      	mov	r3, r2
 8005998:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800599e:	89bb      	ldrh	r3, [r7, #12]
 80059a0:	74fb      	strb	r3, [r7, #19]
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
 80059a2:	2200      	movs	r2, #0
 80059a4:	2108      	movs	r1, #8
 80059a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059aa:	f001 f8fb 	bl	8006ba4 <HAL_GPIO_WritePin>
  LPS22HB_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	481d      	ldr	r0, [pc, #116]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 80059ba:	f000 f8cd 	bl	8005b58 <LPS22HB_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 80059be:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059cc:	601a      	str	r2, [r3, #0]
  SPI_1LINE_RX(&hbusspi2);  
 80059ce:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059dc:	601a      	str	r2, [r3, #0]
  
  if (len > 1)
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d906      	bls.n	80059f2 <BSP_LPS22HB_ReadReg+0x6e>
  {
    LPS22HB_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	461a      	mov	r2, r3
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	4811      	ldr	r0, [pc, #68]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 80059ec:	f000 f822 	bl	8005a34 <LPS22HB_SPI_Read_nBytes>
 80059f0:	e003      	b.n	80059fa <BSP_LPS22HB_ReadReg+0x76>
  }
  else
  {
    LPS22HB_SPI_Read(&hbusspi2, (pdata));
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	480e      	ldr	r0, [pc, #56]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 80059f6:	f000 f874 	bl	8005ae2 <LPS22HB_SPI_Read>
  }
  
  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);  
 80059fa:	2201      	movs	r2, #1
 80059fc:	2108      	movs	r1, #8
 80059fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a02:	f001 f8cf 	bl	8006ba4 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a14:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <BSP_LPS22HB_ReadReg+0xac>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a24:	601a      	str	r2, [r3, #0]
  
  return ret;
 8005a26:	697b      	ldr	r3, [r7, #20]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200027c8 	.word	0x200027c8

08005a34 <LPS22HB_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LPS22HB_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a42:	b672      	cpsid	i
}
 8005a44:	bf00      	nop
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a54:	601a      	str	r2, [r3, #0]
  
  /* Transfer loop */
  while (nBytesToRead > 1U)
 8005a56:	e013      	b.n	8005a80 <LPS22HB_SPI_Read_nBytes+0x4c>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <LPS22HB_SPI_Read_nBytes+0x4c>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	701a      	strb	r2, [r3, #0]
      val += sizeof(uint8_t);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60bb      	str	r3, [r7, #8]
      nBytesToRead--;
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	80fb      	strh	r3, [r7, #6]
  while (nBytesToRead > 1U)
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d8e8      	bhi.n	8005a58 <LPS22HB_SPI_Read_nBytes+0x24>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a86:	f3bf 8f4f 	dsb	sy
}
 8005a8a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005a8c:	f3bf 8f4f 	dsb	sy
}
 8005a90:	bf00      	nop
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */
  
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005aa2:	b662      	cpsie	i
}
 8005aa4:	bf00      	nop
  
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005aa6:	bf00      	nop
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d1f8      	bne.n	8005aa8 <LPS22HB_SPI_Read_nBytes+0x74>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005ac4:	bf00      	nop
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d0f8      	beq.n	8005ac6 <LPS22HB_SPI_Read_nBytes+0x92>
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LPS22HB_SPI_Read>:
* @param  command: command id.
* @param  uint8_t val: value.
* @retval None
*/
void LPS22HB_SPI_Read(SPI_HandleTypeDef* xSpiHandle, uint8_t *val)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005aec:	b672      	cpsid	i
}
 8005aee:	bf00      	nop
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
  
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]
  __asm("dsb\n");
 8005b00:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005b04:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b18:	b662      	cpsie	i
}
 8005b1a:	bf00      	nop
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005b1c:	bf00      	nop
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d1f8      	bne.n	8005b1e <LPS22HB_SPI_Read+0x3c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b3a:	bf00      	nop
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d0f8      	beq.n	8005b3c <LPS22HB_SPI_Read+0x5a>
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <LPS22HB_SPI_Write>:
* @param  command : command id.
* @param  val : value.
* @retval None
*/
void LPS22HB_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005b64:	bf00      	nop
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d1f8      	bne.n	8005b66 <LPS22HB_SPI_Write+0xe>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	701a      	strb	r2, [r3, #0]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005b7e:	bf00      	nop
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f8      	bne.n	8005b80 <LPS22HB_SPI_Write+0x28>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b8e:	bf00      	nop
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d0f8      	beq.n	8005b90 <LPS22HB_SPI_Write+0x38>
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <us100_init>:
/**
 * Initializes the US-100 UART and DMA.
 * @param huart_init        The UART_HandleTypeDef associated with the UART connected to sensor.
 * @param hdma_uart_rx_init The DMA_HandleTypeDef associated with the DMA to be used with sensor.
 */
void us100_init(UART_HandleTypeDef *huart_init, DMA_HandleTypeDef *hdma_uart_rx_init) {
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	huart = huart_init;
 8005bb6:	4a06      	ldr	r2, [pc, #24]	; (8005bd0 <us100_init+0x24>)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6013      	str	r3, [r2, #0]
	hdma_uart_rx = hdma_uart_rx_init;
 8005bbc:	4a05      	ldr	r2, [pc, #20]	; (8005bd4 <us100_init+0x28>)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6013      	str	r3, [r2, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000300 	.word	0x20000300
 8005bd4:	20000304 	.word	0x20000304

08005bd8 <us100_write>:

/**
 * Writes a value to the sensor.
 * @param val Value to write to sensor.
 */
void us100_write(uint8_t val) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(huart, &val, 1, HAL_MAX_DELAY);
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <us100_write+0x24>)
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	1df9      	adds	r1, r7, #7
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bec:	2201      	movs	r2, #1
 8005bee:	f006 fa4e 	bl	800c08e <HAL_UART_Transmit>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000300 	.word	0x20000300

08005c00 <us100_read>:
/**
 * Read value from the sensor using DMA.
 * @param buffer Buffer to store data received from sensor.
 * @param size   Size of buffer.
 */
void us100_read(uint8_t *buffer, uint8_t size) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive_DMA(huart, buffer, size);
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <us100_read+0x24>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	78fa      	ldrb	r2, [r7, #3]
 8005c12:	b292      	uxth	r2, r2
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f006 face 	bl	800c1b8 <HAL_UART_Receive_DMA>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000300 	.word	0x20000300

08005c28 <us100_data_available>:

/**
 * Function to check if data is available from the US-100 sensor.
 * @return TRUE if data is available and FALSE otherwise.
 */
uint8_t us100_data_available(void) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
	if (state == IDLE)
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <us100_data_available+0x7c>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <us100_data_available+0x2c>
	{
		// Send request to measure distance
		us100_write(cmd_dist);
 8005c34:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <us100_data_available+0x80>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff ffcd 	bl	8005bd8 <us100_write>
		us100_read(UART5_rx_buffer, 2);
 8005c3e:	2102      	movs	r1, #2
 8005c40:	481a      	ldr	r0, [pc, #104]	; (8005cac <us100_data_available+0x84>)
 8005c42:	f7ff ffdd 	bl	8005c00 <us100_read>
		// Change state to wait for response
		state = WAIT_DIST;
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <us100_data_available+0x7c>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
		try = 0;
 8005c4c:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <us100_data_available+0x88>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e014      	b.n	8005c7e <us100_data_available+0x56>
	}
	else if (state == CALC_DIST)
 8005c54:	4b13      	ldr	r3, [pc, #76]	; (8005ca4 <us100_data_available+0x7c>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d110      	bne.n	8005c7e <us100_data_available+0x56>
	{
		// Calculate the distance
		distance = (UART5_rx_buffer[0] << 8) + UART5_rx_buffer[1];
 8005c5c:	4b13      	ldr	r3, [pc, #76]	; (8005cac <us100_data_available+0x84>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	4b11      	ldr	r3, [pc, #68]	; (8005cac <us100_data_available+0x84>)
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <us100_data_available+0x8c>)
 8005c72:	801a      	strh	r2, [r3, #0]
		state = IDLE;
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <us100_data_available+0x7c>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e010      	b.n	8005ca0 <us100_data_available+0x78>
	}

  HAL_Delay(100);
 8005c7e:	2064      	movs	r0, #100	; 0x64
 8005c80:	f7fb fd72 	bl	8001768 <HAL_Delay>

  // Retry after 5 seconds
  if (++try >= 50) {
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <us100_data_available+0x88>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <us100_data_available+0x88>)
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <us100_data_available+0x88>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b31      	cmp	r3, #49	; 0x31
 8005c96:	d902      	bls.n	8005c9e <us100_data_available+0x76>
  	state = IDLE;
 8005c98:	4b02      	ldr	r3, [pc, #8]	; (8005ca4 <us100_data_available+0x7c>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
  }
  return FALSE;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	200002f8 	.word	0x200002f8
 8005ca8:	20000094 	.word	0x20000094
 8005cac:	200002fc 	.word	0x200002fc
 8005cb0:	200002f9 	.word	0x200002f9
 8005cb4:	200002fa 	.word	0x200002fa

08005cb8 <us100_get_distance>:

/**
 * Returns the distance calculated by the US-100 sensor.
 * @return Distance calculated by sensor in millimeters.
 */
uint16_t us100_get_distance(void) {
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0

	distance = (UART5_rx_buffer[0] << 8) + UART5_rx_buffer[1];
 8005cbc:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <us100_get_distance+0x54>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <us100_get_distance+0x54>)
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <us100_get_distance+0x58>)
 8005cd2:	801a      	strh	r2, [r3, #0]

	if (distance > max_mm_distance)
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <us100_get_distance+0x58>)
 8005cd6:	881a      	ldrh	r2, [r3, #0]
 8005cd8:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <us100_get_distance+0x5c>)
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d904      	bls.n	8005cea <us100_get_distance+0x32>
	{
		distance = UINT16_MAX;
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <us100_get_distance+0x58>)
 8005ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	e008      	b.n	8005cfc <us100_get_distance+0x44>
	}
	else if (distance < min_mm_distance) {
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <us100_get_distance+0x58>)
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <us100_get_distance+0x60>)
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d202      	bcs.n	8005cfc <us100_get_distance+0x44>
		distance = 0;
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <us100_get_distance+0x58>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	801a      	strh	r2, [r3, #0]
	}
	return distance;
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <us100_get_distance+0x58>)
 8005cfe:	881b      	ldrh	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	200002fc 	.word	0x200002fc
 8005d10:	200002fa 	.word	0x200002fa
 8005d14:	20000096 	.word	0x20000096
 8005d18:	20000308 	.word	0x20000308

08005d1c <HAL_UART_RxCpltCallback>:
/**
 * Callback function for DMA.
 * @param huart The UART_HandleTypeDef that is utilized for US-100 sensor UART channel.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	if (state == WAIT_DIST) {
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_UART_RxCpltCallback+0x24>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d102      	bne.n	8005d32 <HAL_UART_RxCpltCallback+0x16>
		state = CALC_DIST;
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <HAL_UART_RxCpltCallback+0x24>)
 8005d2e:	2202      	movs	r2, #2
 8005d30:	701a      	strb	r2, [r3, #0]
	}
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	200002f8 	.word	0x200002f8

08005d44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d4e:	2003      	movs	r0, #3
 8005d50:	f000 f972 	bl	8006038 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d54:	200f      	movs	r0, #15
 8005d56:	f000 f815 	bl	8005d84 <HAL_InitTick>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	71fb      	strb	r3, [r7, #7]
 8005d64:	e001      	b.n	8005d6a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d66:	f000 f805 	bl	8005d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005d90:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <HAL_InitTick+0x6c>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d023      	beq.n	8005de0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005d98:	4b16      	ldr	r3, [pc, #88]	; (8005df4 <HAL_InitTick+0x70>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <HAL_InitTick+0x6c>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	4619      	mov	r1, r3
 8005da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f985 	bl	80060be <HAL_SYSTICK_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10f      	bne.n	8005dda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b0f      	cmp	r3, #15
 8005dbe:	d809      	bhi.n	8005dd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc8:	f000 f941 	bl	800604e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <HAL_InitTick+0x74>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	e007      	b.n	8005de4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
 8005dd8:	e004      	b.n	8005de4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	e001      	b.n	8005de4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	2000009c 	.word	0x2000009c
 8005df4:	20000004 	.word	0x20000004
 8005df8:	20000098 	.word	0x20000098

08005dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_IncTick+0x20>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <HAL_IncTick+0x24>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	4a04      	ldr	r2, [pc, #16]	; (8005e20 <HAL_IncTick+0x24>)
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	2000009c 	.word	0x2000009c
 8005e20:	20002898 	.word	0x20002898

08005e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  return uwTick;
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <HAL_GetTick+0x14>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20002898 	.word	0x20002898

08005e3c <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8005e40:	4b02      	ldr	r3, [pc, #8]	; (8005e4c <HAL_GetHalVersion+0x10>)
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	010d0000 	.word	0x010d0000

08005e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e82:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	60d3      	str	r3, [r2, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	e000ed00 	.word	0xe000ed00

08005e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 0307 	and.w	r3, r3, #7
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db0b      	blt.n	8005ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	f003 021f 	and.w	r2, r3, #31
 8005ecc:	4907      	ldr	r1, [pc, #28]	; (8005eec <__NVIC_EnableIRQ+0x38>)
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	e000e100 	.word	0xe000e100

08005ef0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	db12      	blt.n	8005f28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	f003 021f 	and.w	r2, r3, #31
 8005f08:	490a      	ldr	r1, [pc, #40]	; (8005f34 <__NVIC_DisableIRQ+0x44>)
 8005f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	2001      	movs	r0, #1
 8005f12:	fa00 f202 	lsl.w	r2, r0, r2
 8005f16:	3320      	adds	r3, #32
 8005f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f1c:	f3bf 8f4f 	dsb	sy
}
 8005f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f22:	f3bf 8f6f 	isb	sy
}
 8005f26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	e000e100 	.word	0xe000e100

08005f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6039      	str	r1, [r7, #0]
 8005f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	db0a      	blt.n	8005f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	490c      	ldr	r1, [pc, #48]	; (8005f84 <__NVIC_SetPriority+0x4c>)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	0112      	lsls	r2, r2, #4
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f60:	e00a      	b.n	8005f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4908      	ldr	r1, [pc, #32]	; (8005f88 <__NVIC_SetPriority+0x50>)
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	0112      	lsls	r2, r2, #4
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	440b      	add	r3, r1
 8005f76:	761a      	strb	r2, [r3, #24]
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	e000e100 	.word	0xe000e100
 8005f88:	e000ed00 	.word	0xe000ed00

08005f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f1c3 0307 	rsb	r3, r3, #7
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	bf28      	it	cs
 8005faa:	2304      	movcs	r3, #4
 8005fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d902      	bls.n	8005fbc <NVIC_EncodePriority+0x30>
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3b03      	subs	r3, #3
 8005fba:	e000      	b.n	8005fbe <NVIC_EncodePriority+0x32>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43da      	mvns	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	401a      	ands	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	fa01 f303 	lsl.w	r3, r1, r3
 8005fde:	43d9      	mvns	r1, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe4:	4313      	orrs	r3, r2
         );
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3724      	adds	r7, #36	; 0x24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006004:	d301      	bcc.n	800600a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006006:	2301      	movs	r3, #1
 8006008:	e00f      	b.n	800602a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <SysTick_Config+0x40>)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3b01      	subs	r3, #1
 8006010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006012:	210f      	movs	r1, #15
 8006014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006018:	f7ff ff8e 	bl	8005f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <SysTick_Config+0x40>)
 800601e:	2200      	movs	r2, #0
 8006020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <SysTick_Config+0x40>)
 8006024:	2207      	movs	r2, #7
 8006026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	e000e010 	.word	0xe000e010

08006038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ff05 	bl	8005e50 <__NVIC_SetPriorityGrouping>
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	4603      	mov	r3, r0
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006060:	f7ff ff1a 	bl	8005e98 <__NVIC_GetPriorityGrouping>
 8006064:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	f7ff ff8e 	bl	8005f8c <NVIC_EncodePriority>
 8006070:	4602      	mov	r2, r0
 8006072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006076:	4611      	mov	r1, r2
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff ff5d 	bl	8005f38 <__NVIC_SetPriority>
}
 800607e:	bf00      	nop
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	4603      	mov	r3, r0
 800608e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff ff0d 	bl	8005eb4 <__NVIC_EnableIRQ>
}
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	4603      	mov	r3, r0
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80060ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff ff1d 	bl	8005ef0 <__NVIC_DisableIRQ>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff ff94 	bl	8005ff4 <SysTick_Config>
 80060cc:	4603      	mov	r3, r0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80060da:	f000 f802 	bl	80060e2 <HAL_SYSTICK_Callback>
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80060e2:	b480      	push	{r7}
 80060e4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e098      	b.n	8006234 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	4b4d      	ldr	r3, [pc, #308]	; (8006240 <HAL_DMA_Init+0x150>)
 800610a:	429a      	cmp	r2, r3
 800610c:	d80f      	bhi.n	800612e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	4b4b      	ldr	r3, [pc, #300]	; (8006244 <HAL_DMA_Init+0x154>)
 8006116:	4413      	add	r3, r2
 8006118:	4a4b      	ldr	r2, [pc, #300]	; (8006248 <HAL_DMA_Init+0x158>)
 800611a:	fba2 2303 	umull	r2, r3, r2, r3
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	009a      	lsls	r2, r3, #2
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a48      	ldr	r2, [pc, #288]	; (800624c <HAL_DMA_Init+0x15c>)
 800612a:	641a      	str	r2, [r3, #64]	; 0x40
 800612c:	e00e      	b.n	800614c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	4b46      	ldr	r3, [pc, #280]	; (8006250 <HAL_DMA_Init+0x160>)
 8006136:	4413      	add	r3, r2
 8006138:	4a43      	ldr	r2, [pc, #268]	; (8006248 <HAL_DMA_Init+0x158>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	091b      	lsrs	r3, r3, #4
 8006140:	009a      	lsls	r2, r3, #2
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a42      	ldr	r2, [pc, #264]	; (8006254 <HAL_DMA_Init+0x164>)
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800617c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061a6:	d039      	beq.n	800621c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	4a27      	ldr	r2, [pc, #156]	; (800624c <HAL_DMA_Init+0x15c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d11a      	bne.n	80061e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061b2:	4b29      	ldr	r3, [pc, #164]	; (8006258 <HAL_DMA_Init+0x168>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	f003 031c 	and.w	r3, r3, #28
 80061be:	210f      	movs	r1, #15
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	4924      	ldr	r1, [pc, #144]	; (8006258 <HAL_DMA_Init+0x168>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061cc:	4b22      	ldr	r3, [pc, #136]	; (8006258 <HAL_DMA_Init+0x168>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6859      	ldr	r1, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d8:	f003 031c 	and.w	r3, r3, #28
 80061dc:	fa01 f303 	lsl.w	r3, r1, r3
 80061e0:	491d      	ldr	r1, [pc, #116]	; (8006258 <HAL_DMA_Init+0x168>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]
 80061e6:	e019      	b.n	800621c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061e8:	4b1c      	ldr	r3, [pc, #112]	; (800625c <HAL_DMA_Init+0x16c>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f0:	f003 031c 	and.w	r3, r3, #28
 80061f4:	210f      	movs	r1, #15
 80061f6:	fa01 f303 	lsl.w	r3, r1, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	4917      	ldr	r1, [pc, #92]	; (800625c <HAL_DMA_Init+0x16c>)
 80061fe:	4013      	ands	r3, r2
 8006200:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006202:	4b16      	ldr	r3, [pc, #88]	; (800625c <HAL_DMA_Init+0x16c>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f003 031c 	and.w	r3, r3, #28
 8006212:	fa01 f303 	lsl.w	r3, r1, r3
 8006216:	4911      	ldr	r1, [pc, #68]	; (800625c <HAL_DMA_Init+0x16c>)
 8006218:	4313      	orrs	r3, r2
 800621a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	40020407 	.word	0x40020407
 8006244:	bffdfff8 	.word	0xbffdfff8
 8006248:	cccccccd 	.word	0xcccccccd
 800624c:	40020000 	.word	0x40020000
 8006250:	bffdfbf8 	.word	0xbffdfbf8
 8006254:	40020400 	.word	0x40020400
 8006258:	400200a8 	.word	0x400200a8
 800625c:	400204a8 	.word	0x400204a8

08006260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_DMA_Start_IT+0x20>
 800627c:	2302      	movs	r3, #2
 800627e:	e04b      	b.n	8006318 <HAL_DMA_Start_IT+0xb8>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d13a      	bne.n	800630a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f92f 	bl	800651c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 020e 	orr.w	r2, r2, #14
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e00f      	b.n	80062f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0204 	bic.w	r2, r2, #4
 80062e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 020a 	orr.w	r2, r2, #10
 80062f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e005      	b.n	8006316 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006312:	2302      	movs	r3, #2
 8006314:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d005      	beq.n	8006344 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2204      	movs	r2, #4
 800633c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
 8006342:	e029      	b.n	8006398 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 020e 	bic.w	r2, r2, #14
 8006352:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0201 	bic.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006368:	f003 021c 	and.w	r2, r3, #28
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	2101      	movs	r1, #1
 8006372:	fa01 f202 	lsl.w	r2, r1, r2
 8006376:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
    }
  }
  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	f003 031c 	and.w	r3, r3, #28
 80063c2:	2204      	movs	r2, #4
 80063c4:	409a      	lsls	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d026      	beq.n	800641c <HAL_DMA_IRQHandler+0x7a>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d021      	beq.n	800641c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0204 	bic.w	r2, r2, #4
 80063f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	f003 021c 	and.w	r2, r3, #28
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	2104      	movs	r1, #4
 8006404:	fa01 f202 	lsl.w	r2, r1, r2
 8006408:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	2b00      	cmp	r3, #0
 8006410:	d071      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800641a:	e06c      	b.n	80064f6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	f003 031c 	and.w	r3, r3, #28
 8006424:	2202      	movs	r2, #2
 8006426:	409a      	lsls	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02e      	beq.n	800648e <HAL_DMA_IRQHandler+0xec>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d029      	beq.n	800648e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10b      	bne.n	8006460 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 020a 	bic.w	r2, r2, #10
 8006456:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	f003 021c 	and.w	r2, r3, #28
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	2102      	movs	r1, #2
 800646e:	fa01 f202 	lsl.w	r2, r1, r2
 8006472:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d038      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800648c:	e033      	b.n	80064f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	f003 031c 	and.w	r3, r3, #28
 8006496:	2208      	movs	r2, #8
 8006498:	409a      	lsls	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4013      	ands	r3, r2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d02a      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x156>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d025      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 020e 	bic.w	r2, r2, #14
 80064ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	f003 021c 	and.w	r2, r3, #28
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	2101      	movs	r1, #1
 80064ca:	fa01 f202 	lsl.w	r2, r1, r2
 80064ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
}
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800650e:	b2db      	uxtb	r3, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	f003 021c 	and.w	r2, r3, #28
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2101      	movs	r1, #1
 8006538:	fa01 f202 	lsl.w	r2, r1, r2
 800653c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b10      	cmp	r3, #16
 800654c:	d108      	bne.n	8006560 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800655e:	e007      	b.n	8006570 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	60da      	str	r2, [r3, #12]
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	460b      	mov	r3, r1
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	605a      	str	r2, [r3, #4]
      break;
 800659a:	e002      	b.n	80065a2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
      break;
 80065a0:	bf00      	nop
  }

  return status;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e003      	b.n	80065cc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80065ca:	2300      	movs	r3, #0
  }
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	0c1b      	lsrs	r3, r3, #16
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	2201      	movs	r2, #1
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <HAL_EXTI_IRQHandler+0x5c>)
 8006602:	4413      	add	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4798      	blx	r3
    }
  }
}
 800662a:	bf00      	nop
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40010414 	.word	0x40010414

08006638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006646:	e17f      	b.n	8006948 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	2101      	movs	r1, #1
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8171 	beq.w	8006942 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d00b      	beq.n	8006680 <HAL_GPIO_Init+0x48>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d007      	beq.n	8006680 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006674:	2b11      	cmp	r3, #17
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b12      	cmp	r3, #18
 800667e:	d130      	bne.n	80066e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	2203      	movs	r2, #3
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	43db      	mvns	r3, r3
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4013      	ands	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066b6:	2201      	movs	r2, #1
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4013      	ands	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 0201 	and.w	r2, r3, #1
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d118      	bne.n	8006720 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80066f4:	2201      	movs	r2, #1
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	43db      	mvns	r3, r3
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4013      	ands	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	08db      	lsrs	r3, r3, #3
 800670a:	f003 0201 	and.w	r2, r3, #1
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	2203      	movs	r2, #3
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	43db      	mvns	r3, r3
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4013      	ands	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d003      	beq.n	8006760 <HAL_GPIO_Init+0x128>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b12      	cmp	r3, #18
 800675e:	d123      	bne.n	80067a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	08da      	lsrs	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3208      	adds	r2, #8
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	220f      	movs	r2, #15
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4013      	ands	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	08da      	lsrs	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3208      	adds	r2, #8
 80067a2:	6939      	ldr	r1, [r7, #16]
 80067a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	2203      	movs	r2, #3
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4013      	ands	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 0203 	and.w	r2, r3, #3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80ac 	beq.w	8006942 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ea:	4b5f      	ldr	r3, [pc, #380]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ee:	4a5e      	ldr	r2, [pc, #376]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6613      	str	r3, [r2, #96]	; 0x60
 80067f6:	4b5c      	ldr	r3, [pc, #368]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006802:	4a5a      	ldr	r2, [pc, #360]	; (800696c <HAL_GPIO_Init+0x334>)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	3302      	adds	r3, #2
 800680a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	220f      	movs	r2, #15
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4013      	ands	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800682c:	d025      	beq.n	800687a <HAL_GPIO_Init+0x242>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a4f      	ldr	r2, [pc, #316]	; (8006970 <HAL_GPIO_Init+0x338>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01f      	beq.n	8006876 <HAL_GPIO_Init+0x23e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a4e      	ldr	r2, [pc, #312]	; (8006974 <HAL_GPIO_Init+0x33c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d019      	beq.n	8006872 <HAL_GPIO_Init+0x23a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a4d      	ldr	r2, [pc, #308]	; (8006978 <HAL_GPIO_Init+0x340>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_GPIO_Init+0x236>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a4c      	ldr	r2, [pc, #304]	; (800697c <HAL_GPIO_Init+0x344>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00d      	beq.n	800686a <HAL_GPIO_Init+0x232>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a4b      	ldr	r2, [pc, #300]	; (8006980 <HAL_GPIO_Init+0x348>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <HAL_GPIO_Init+0x22e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_GPIO_Init+0x34c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_GPIO_Init+0x22a>
 800685e:	2306      	movs	r3, #6
 8006860:	e00c      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006862:	2307      	movs	r3, #7
 8006864:	e00a      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006866:	2305      	movs	r3, #5
 8006868:	e008      	b.n	800687c <HAL_GPIO_Init+0x244>
 800686a:	2304      	movs	r3, #4
 800686c:	e006      	b.n	800687c <HAL_GPIO_Init+0x244>
 800686e:	2303      	movs	r3, #3
 8006870:	e004      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006872:	2302      	movs	r3, #2
 8006874:	e002      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <HAL_GPIO_Init+0x244>
 800687a:	2300      	movs	r3, #0
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	f002 0203 	and.w	r2, r2, #3
 8006882:	0092      	lsls	r2, r2, #2
 8006884:	4093      	lsls	r3, r2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800688c:	4937      	ldr	r1, [pc, #220]	; (800696c <HAL_GPIO_Init+0x334>)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	089b      	lsrs	r3, r3, #2
 8006892:	3302      	adds	r3, #2
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800689a:	4b3b      	ldr	r3, [pc, #236]	; (8006988 <HAL_GPIO_Init+0x350>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	43db      	mvns	r3, r3
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4013      	ands	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068be:	4a32      	ldr	r2, [pc, #200]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80068c4:	4b30      	ldr	r3, [pc, #192]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4013      	ands	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068e8:	4a27      	ldr	r2, [pc, #156]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4013      	ands	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006912:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_GPIO_Init+0x350>)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_GPIO_Init+0x350>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	43db      	mvns	r3, r3
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4013      	ands	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <HAL_GPIO_Init+0x350>)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	3301      	adds	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	f47f ae78 	bne.w	8006648 <HAL_GPIO_Init+0x10>
  }
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000
 800696c:	40010000 	.word	0x40010000
 8006970:	48000400 	.word	0x48000400
 8006974:	48000800 	.word	0x48000800
 8006978:	48000c00 	.word	0x48000c00
 800697c:	48001000 	.word	0x48001000
 8006980:	48001400 	.word	0x48001400
 8006984:	48001800 	.word	0x48001800
 8006988:	40010400 	.word	0x40010400

0800698c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800699a:	e0cd      	b.n	8006b38 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800699c:	2201      	movs	r2, #1
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	4013      	ands	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80c0 	beq.w	8006b32 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80069b2:	4a68      	ldr	r2, [pc, #416]	; (8006b54 <HAL_GPIO_DeInit+0x1c8>)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	3302      	adds	r3, #2
 80069ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	220f      	movs	r2, #15
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4013      	ands	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80069da:	d025      	beq.n	8006a28 <HAL_GPIO_DeInit+0x9c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a5e      	ldr	r2, [pc, #376]	; (8006b58 <HAL_GPIO_DeInit+0x1cc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d01f      	beq.n	8006a24 <HAL_GPIO_DeInit+0x98>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a5d      	ldr	r2, [pc, #372]	; (8006b5c <HAL_GPIO_DeInit+0x1d0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d019      	beq.n	8006a20 <HAL_GPIO_DeInit+0x94>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a5c      	ldr	r2, [pc, #368]	; (8006b60 <HAL_GPIO_DeInit+0x1d4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_GPIO_DeInit+0x90>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a5b      	ldr	r2, [pc, #364]	; (8006b64 <HAL_GPIO_DeInit+0x1d8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00d      	beq.n	8006a18 <HAL_GPIO_DeInit+0x8c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a5a      	ldr	r2, [pc, #360]	; (8006b68 <HAL_GPIO_DeInit+0x1dc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d007      	beq.n	8006a14 <HAL_GPIO_DeInit+0x88>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a59      	ldr	r2, [pc, #356]	; (8006b6c <HAL_GPIO_DeInit+0x1e0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_GPIO_DeInit+0x84>
 8006a0c:	2306      	movs	r3, #6
 8006a0e:	e00c      	b.n	8006a2a <HAL_GPIO_DeInit+0x9e>
 8006a10:	2307      	movs	r3, #7
 8006a12:	e00a      	b.n	8006a2a <HAL_GPIO_DeInit+0x9e>
 8006a14:	2305      	movs	r3, #5
 8006a16:	e008      	b.n	8006a2a <HAL_GPIO_DeInit+0x9e>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	e006      	b.n	8006a2a <HAL_GPIO_DeInit+0x9e>
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e004      	b.n	8006a2a <HAL_GPIO_DeInit+0x9e>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e002      	b.n	8006a2a <HAL_GPIO_DeInit+0x9e>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_GPIO_DeInit+0x9e>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	f002 0203 	and.w	r2, r2, #3
 8006a30:	0092      	lsls	r2, r2, #2
 8006a32:	4093      	lsls	r3, r2
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d132      	bne.n	8006aa0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006a3a:	4b4d      	ldr	r3, [pc, #308]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	494b      	ldr	r1, [pc, #300]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006a48:	4b49      	ldr	r3, [pc, #292]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	4947      	ldr	r1, [pc, #284]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006a56:	4b46      	ldr	r3, [pc, #280]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	43db      	mvns	r3, r3
 8006a5e:	4944      	ldr	r1, [pc, #272]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006a64:	4b42      	ldr	r3, [pc, #264]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	4940      	ldr	r1, [pc, #256]	; (8006b70 <HAL_GPIO_DeInit+0x1e4>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	220f      	movs	r2, #15
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006a82:	4a34      	ldr	r2, [pc, #208]	; (8006b54 <HAL_GPIO_DeInit+0x1c8>)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	089b      	lsrs	r3, r3, #2
 8006a88:	3302      	adds	r3, #2
 8006a8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	43da      	mvns	r2, r3
 8006a92:	4830      	ldr	r0, [pc, #192]	; (8006b54 <HAL_GPIO_DeInit+0x1c8>)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	400a      	ands	r2, r1
 8006a9a:	3302      	adds	r3, #2
 8006a9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	2103      	movs	r1, #3
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	08da      	lsrs	r2, r3, #3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3208      	adds	r2, #8
 8006abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	220f      	movs	r2, #15
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	08d2      	lsrs	r2, r2, #3
 8006ad4:	4019      	ands	r1, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3208      	adds	r2, #8
 8006ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	2103      	movs	r1, #3
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	401a      	ands	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	2101      	movs	r1, #1
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	43db      	mvns	r3, r3
 8006b02:	401a      	ands	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	2103      	movs	r1, #3
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	401a      	ands	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	2101      	movs	r1, #1
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	401a      	ands	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	3301      	adds	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f47f af2b 	bne.w	800699c <HAL_GPIO_DeInit+0x10>
  }
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40010000 	.word	0x40010000
 8006b58:	48000400 	.word	0x48000400
 8006b5c:	48000800 	.word	0x48000800
 8006b60:	48000c00 	.word	0x48000c00
 8006b64:	48001000 	.word	0x48001000
 8006b68:	48001400 	.word	0x48001400
 8006b6c:	48001800 	.word	0x48001800
 8006b70:	40010400 	.word	0x40010400

08006b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	887b      	ldrh	r3, [r7, #2]
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
 8006b90:	e001      	b.n	8006b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bb4:	787b      	ldrb	r3, [r7, #1]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bba:	887a      	ldrh	r2, [r7, #2]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bc0:	e002      	b.n	8006bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bc2:	887a      	ldrh	r2, [r7, #2]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e081      	b.n	8006cea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f8a8 	bl	8006d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2224      	movs	r2, #36	; 0x24
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0201 	bic.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d107      	bne.n	8006c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	e006      	b.n	8006c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d104      	bne.n	8006c6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	ea42 0103 	orr.w	r1, r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	021a      	lsls	r2, r3, #8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69d9      	ldr	r1, [r3, #28]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1a      	ldr	r2, [r3, #32]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e021      	b.n	8006d48 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2224      	movs	r2, #36	; 0x24
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f821 	bl	8006d64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	4608      	mov	r0, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	461a      	mov	r2, r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	817b      	strh	r3, [r7, #10]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	813b      	strh	r3, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	f040 80f9 	bne.w	8006f92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_I2C_Mem_Write+0x34>
 8006da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0ed      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_I2C_Mem_Write+0x4e>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e0e6      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dce:	f7ff f829 	bl	8005e24 <HAL_GetTick>
 8006dd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2319      	movs	r3, #25
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 ffe6 	bl	8007db2 <I2C_WaitOnFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0d1      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2221      	movs	r2, #33	; 0x21
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2240      	movs	r2, #64	; 0x40
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a3a      	ldr	r2, [r7, #32]
 8006e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e18:	88f8      	ldrh	r0, [r7, #6]
 8006e1a:	893a      	ldrh	r2, [r7, #8]
 8006e1c:	8979      	ldrh	r1, [r7, #10]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4603      	mov	r3, r0
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fb9f 	bl	800756c <I2C_RequestMemoryWrite>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0a9      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2bff      	cmp	r3, #255	; 0xff
 8006e48:	d90e      	bls.n	8006e68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	22ff      	movs	r2, #255	; 0xff
 8006e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	8979      	ldrh	r1, [r7, #10]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f001 f8c9 	bl	8007ff8 <I2C_TransferConfig>
 8006e66:	e00f      	b.n	8006e88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	8979      	ldrh	r1, [r7, #10]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f001 f8b8 	bl	8007ff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 ffd0 	bl	8007e32 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e07b      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d034      	beq.n	8006f40 <HAL_I2C_Mem_Write+0x1c8>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d130      	bne.n	8006f40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2180      	movs	r1, #128	; 0x80
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 ff62 	bl	8007db2 <I2C_WaitOnFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e04d      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2bff      	cmp	r3, #255	; 0xff
 8006f00:	d90e      	bls.n	8006f20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	8979      	ldrh	r1, [r7, #10]
 8006f10:	2300      	movs	r3, #0
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f001 f86d 	bl	8007ff8 <I2C_TransferConfig>
 8006f1e:	e00f      	b.n	8006f40 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	8979      	ldrh	r1, [r7, #10]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f001 f85c 	bl	8007ff8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d19e      	bne.n	8006e88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 ffaf 	bl	8007eb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e01a      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2220      	movs	r2, #32
 8006f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6859      	ldr	r1, [r3, #4]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <HAL_I2C_Mem_Write+0x224>)
 8006f72:	400b      	ands	r3, r1
 8006f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e000      	b.n	8006f94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006f92:	2302      	movs	r3, #2
  }
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	fe00e800 	.word	0xfe00e800

08006fa0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	817b      	strh	r3, [r7, #10]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	813b      	strh	r3, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	f040 80fd 	bne.w	80071c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_I2C_Mem_Read+0x34>
 8006fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0f1      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <HAL_I2C_Mem_Read+0x4e>
 8006fea:	2302      	movs	r3, #2
 8006fec:	e0ea      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ff6:	f7fe ff15 	bl	8005e24 <HAL_GetTick>
 8006ffa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2319      	movs	r3, #25
 8007002:	2201      	movs	r2, #1
 8007004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fed2 	bl	8007db2 <I2C_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0d5      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2222      	movs	r2, #34	; 0x22
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2240      	movs	r2, #64	; 0x40
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a3a      	ldr	r2, [r7, #32]
 8007032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007040:	88f8      	ldrh	r0, [r7, #6]
 8007042:	893a      	ldrh	r2, [r7, #8]
 8007044:	8979      	ldrh	r1, [r7, #10]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4603      	mov	r3, r0
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fadf 	bl	8007614 <I2C_RequestMemoryRead>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0ad      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706c:	b29b      	uxth	r3, r3
 800706e:	2bff      	cmp	r3, #255	; 0xff
 8007070:	d90e      	bls.n	8007090 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707c:	b2da      	uxtb	r2, r3
 800707e:	8979      	ldrh	r1, [r7, #10]
 8007080:	4b52      	ldr	r3, [pc, #328]	; (80071cc <HAL_I2C_Mem_Read+0x22c>)
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 ffb5 	bl	8007ff8 <I2C_TransferConfig>
 800708e:	e00f      	b.n	80070b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	8979      	ldrh	r1, [r7, #10]
 80070a2:	4b4a      	ldr	r3, [pc, #296]	; (80071cc <HAL_I2C_Mem_Read+0x22c>)
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 ffa4 	bl	8007ff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	2200      	movs	r2, #0
 80070b8:	2104      	movs	r1, #4
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fe79 	bl	8007db2 <I2C_WaitOnFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e07c      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d034      	beq.n	8007170 <HAL_I2C_Mem_Read+0x1d0>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d130      	bne.n	8007170 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	2200      	movs	r2, #0
 8007116:	2180      	movs	r1, #128	; 0x80
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 fe4a 	bl	8007db2 <I2C_WaitOnFlagUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e04d      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	2bff      	cmp	r3, #255	; 0xff
 8007130:	d90e      	bls.n	8007150 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	b2da      	uxtb	r2, r3
 800713e:	8979      	ldrh	r1, [r7, #10]
 8007140:	2300      	movs	r3, #0
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 ff55 	bl	8007ff8 <I2C_TransferConfig>
 800714e:	e00f      	b.n	8007170 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715e:	b2da      	uxtb	r2, r3
 8007160:	8979      	ldrh	r1, [r7, #10]
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 ff44 	bl	8007ff8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d19a      	bne.n	80070b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 fe97 	bl	8007eb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e01a      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2220      	movs	r2, #32
 8007194:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_I2C_Mem_Read+0x230>)
 80071a2:	400b      	ands	r3, r1
 80071a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	e000      	b.n	80071c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80071c2:	2302      	movs	r3, #2
  }
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	80002400 	.word	0x80002400
 80071d0:	fe00e800 	.word	0xfe00e800

080071d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
  }
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <HAL_I2C_ER_IRQHandler+0x46>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	09db      	lsrs	r3, r3, #7
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723c:	f043 0201 	orr.w	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800724c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	0a9b      	lsrs	r3, r3, #10
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d010      	beq.n	800727c <HAL_I2C_ER_IRQHandler+0x74>
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	09db      	lsrs	r3, r3, #7
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726a:	f043 0208 	orr.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800727a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	0a5b      	lsrs	r3, r3, #9
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d010      	beq.n	80072aa <HAL_I2C_ER_IRQHandler+0xa2>
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	09db      	lsrs	r3, r3, #7
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007298:	f043 0202 	orr.w	r2, r3, #2
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f003 030b 	and.w	r3, r3, #11
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fc3f 	bl	8007b40 <I2C_ITError>
  }
}
 80072c2:	bf00      	nop
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
 80072fe:	4613      	mov	r3, r2
 8007300:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007358:	b2db      	uxtb	r3, r3
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <I2C_Slave_ISR_IT+0x24>
 8007386:	2302      	movs	r3, #2
 8007388:	e0ec      	b.n	8007564 <I2C_Slave_ISR_IT+0x1fe>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <I2C_Slave_ISR_IT+0x4c>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80073aa:	6939      	ldr	r1, [r7, #16]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fa67 	bl	8007880 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d04d      	beq.n	800745a <I2C_Slave_ISR_IT+0xf4>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	091b      	lsrs	r3, r3, #4
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d047      	beq.n	800745a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d128      	bne.n	8007426 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b28      	cmp	r3, #40	; 0x28
 80073de:	d108      	bne.n	80073f2 <I2C_Slave_ISR_IT+0x8c>
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073e6:	d104      	bne.n	80073f2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80073e8:	6939      	ldr	r1, [r7, #16]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fb52 	bl	8007a94 <I2C_ITListenCplt>
 80073f0:	e032      	b.n	8007458 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b29      	cmp	r3, #41	; 0x29
 80073fc:	d10e      	bne.n	800741c <I2C_Slave_ISR_IT+0xb6>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007404:	d00a      	beq.n	800741c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2210      	movs	r2, #16
 800740c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 fc8d 	bl	8007d2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f9d5 	bl	80077c4 <I2C_ITSlaveSeqCplt>
 800741a:	e01d      	b.n	8007458 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2210      	movs	r2, #16
 8007422:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007424:	e096      	b.n	8007554 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2210      	movs	r2, #16
 800742c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007432:	f043 0204 	orr.w	r2, r3, #4
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <I2C_Slave_ISR_IT+0xe4>
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007446:	f040 8085 	bne.w	8007554 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744e:	4619      	mov	r1, r3
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 fb75 	bl	8007b40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007456:	e07d      	b.n	8007554 <I2C_Slave_ISR_IT+0x1ee>
 8007458:	e07c      	b.n	8007554 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	089b      	lsrs	r3, r3, #2
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d030      	beq.n	80074c8 <I2C_Slave_ISR_IT+0x162>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	089b      	lsrs	r3, r3, #2
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d02a      	beq.n	80074c8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d018      	beq.n	80074ae <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d14f      	bne.n	8007558 <I2C_Slave_ISR_IT+0x1f2>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074be:	d04b      	beq.n	8007558 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f97f 	bl	80077c4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80074c6:	e047      	b.n	8007558 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	08db      	lsrs	r3, r3, #3
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00a      	beq.n	80074ea <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	08db      	lsrs	r3, r3, #3
 80074d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80074e0:	6939      	ldr	r1, [r7, #16]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f8ea 	bl	80076bc <I2C_ITAddrCplt>
 80074e8:	e037      	b.n	800755a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d031      	beq.n	800755a <I2C_Slave_ISR_IT+0x1f4>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	085b      	lsrs	r3, r3, #1
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02b      	beq.n	800755a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d018      	beq.n	800753e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	851a      	strh	r2, [r3, #40]	; 0x28
 800753c:	e00d      	b.n	800755a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007544:	d002      	beq.n	800754c <I2C_Slave_ISR_IT+0x1e6>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f939 	bl	80077c4 <I2C_ITSlaveSeqCplt>
 8007552:	e002      	b.n	800755a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007554:	bf00      	nop
 8007556:	e000      	b.n	800755a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007558:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	4608      	mov	r0, r1
 8007576:	4611      	mov	r1, r2
 8007578:	461a      	mov	r2, r3
 800757a:	4603      	mov	r3, r0
 800757c:	817b      	strh	r3, [r7, #10]
 800757e:	460b      	mov	r3, r1
 8007580:	813b      	strh	r3, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	8979      	ldrh	r1, [r7, #10]
 800758c:	4b20      	ldr	r3, [pc, #128]	; (8007610 <I2C_RequestMemoryWrite+0xa4>)
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fd2f 	bl	8007ff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fc47 	bl	8007e32 <I2C_WaitOnTXISFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e02c      	b.n	8007608 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d105      	bne.n	80075c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075b4:	893b      	ldrh	r3, [r7, #8]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	629a      	str	r2, [r3, #40]	; 0x28
 80075be:	e015      	b.n	80075ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075c0:	893b      	ldrh	r3, [r7, #8]
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	69b9      	ldr	r1, [r7, #24]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fc2d 	bl	8007e32 <I2C_WaitOnTXISFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e012      	b.n	8007608 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075e2:	893b      	ldrh	r3, [r7, #8]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fbdb 	bl	8007db2 <I2C_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	80002000 	.word	0x80002000

08007614 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af02      	add	r7, sp, #8
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	461a      	mov	r2, r3
 8007622:	4603      	mov	r3, r0
 8007624:	817b      	strh	r3, [r7, #10]
 8007626:	460b      	mov	r3, r1
 8007628:	813b      	strh	r3, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	8979      	ldrh	r1, [r7, #10]
 8007634:	4b20      	ldr	r3, [pc, #128]	; (80076b8 <I2C_RequestMemoryRead+0xa4>)
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	2300      	movs	r3, #0
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fcdc 	bl	8007ff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	69b9      	ldr	r1, [r7, #24]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 fbf4 	bl	8007e32 <I2C_WaitOnTXISFlagUntilTimeout>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e02c      	b.n	80076ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d105      	bne.n	8007666 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800765a:	893b      	ldrh	r3, [r7, #8]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	629a      	str	r2, [r3, #40]	; 0x28
 8007664:	e015      	b.n	8007692 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007666:	893b      	ldrh	r3, [r7, #8]
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	b29b      	uxth	r3, r3
 800766c:	b2da      	uxtb	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	69b9      	ldr	r1, [r7, #24]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fbda 	bl	8007e32 <I2C_WaitOnTXISFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e012      	b.n	80076ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007688:	893b      	ldrh	r3, [r7, #8]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	2200      	movs	r2, #0
 800769a:	2140      	movs	r1, #64	; 0x40
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fb88 	bl	8007db2 <I2C_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	80002000 	.word	0x80002000

080076bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076d2:	2b28      	cmp	r3, #40	; 0x28
 80076d4:	d16a      	bne.n	80077ac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	0c1b      	lsrs	r3, r3, #16
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	0c1b      	lsrs	r3, r3, #16
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80076f4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007702:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007710:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d138      	bne.n	800778c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	09db      	lsrs	r3, r3, #7
 800771e:	b29a      	uxth	r2, r3
 8007720:	89bb      	ldrh	r3, [r7, #12]
 8007722:	4053      	eors	r3, r2
 8007724:	b29b      	uxth	r3, r3
 8007726:	f003 0306 	and.w	r3, r3, #6
 800772a:	2b00      	cmp	r3, #0
 800772c:	d11c      	bne.n	8007768 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800772e:	897b      	ldrh	r3, [r7, #10]
 8007730:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007740:	2b02      	cmp	r3, #2
 8007742:	d13b      	bne.n	80077bc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2208      	movs	r2, #8
 8007750:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800775a:	89ba      	ldrh	r2, [r7, #12]
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff fdc6 	bl	80072f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007766:	e029      	b.n	80077bc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007768:	893b      	ldrh	r3, [r7, #8]
 800776a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800776c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fc6f 	bl	8008054 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800777e:	89ba      	ldrh	r2, [r7, #12]
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff fdb4 	bl	80072f2 <HAL_I2C_AddrCallback>
}
 800778a:	e017      	b.n	80077bc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800778c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fc5f 	bl	8008054 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800779e:	89ba      	ldrh	r2, [r7, #12]
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff fda4 	bl	80072f2 <HAL_I2C_AddrCallback>
}
 80077aa:	e007      	b.n	80077bc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	0b9b      	lsrs	r3, r3, #14
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d008      	beq.n	80077fa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e00d      	b.n	8007816 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	0bdb      	lsrs	r3, r3, #15
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007814:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b29      	cmp	r3, #41	; 0x29
 8007820:	d112      	bne.n	8007848 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2228      	movs	r2, #40	; 0x28
 8007826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2221      	movs	r2, #33	; 0x21
 800782e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007830:	2101      	movs	r1, #1
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fc0e 	bl	8008054 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fd42 	bl	80072ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007846:	e017      	b.n	8007878 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b2a      	cmp	r3, #42	; 0x2a
 8007852:	d111      	bne.n	8007878 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2228      	movs	r2, #40	; 0x28
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2222      	movs	r2, #34	; 0x22
 8007860:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007862:	2102      	movs	r1, #2
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbf5 	bl	8008054 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fd33 	bl	80072de <HAL_I2C_SlaveRxCpltCallback>
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800789c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2220      	movs	r2, #32
 80078a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b21      	cmp	r3, #33	; 0x21
 80078aa:	d002      	beq.n	80078b2 <I2C_ITSlaveCplt+0x32>
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	2b29      	cmp	r3, #41	; 0x29
 80078b0:	d108      	bne.n	80078c4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80078b2:	f248 0101 	movw	r1, #32769	; 0x8001
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fbcc 	bl	8008054 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2221      	movs	r2, #33	; 0x21
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
 80078c2:	e00d      	b.n	80078e0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b22      	cmp	r3, #34	; 0x22
 80078c8:	d002      	beq.n	80078d0 <I2C_ITSlaveCplt+0x50>
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b2a      	cmp	r3, #42	; 0x2a
 80078ce:	d107      	bne.n	80078e0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80078d0:	f248 0102 	movw	r1, #32770	; 0x8002
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fbbd 	bl	8008054 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2222      	movs	r2, #34	; 0x22
 80078de:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078ee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6859      	ldr	r1, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b64      	ldr	r3, [pc, #400]	; (8007a8c <I2C_ITSlaveCplt+0x20c>)
 80078fc:	400b      	ands	r3, r1
 80078fe:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa14 	bl	8007d2e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	0b9b      	lsrs	r3, r3, #14
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d013      	beq.n	800793a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007920:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d020      	beq.n	800796c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007938:	e018      	b.n	800796c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	0bdb      	lsrs	r3, r3, #15
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d012      	beq.n	800796c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007954:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b29a      	uxth	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	089b      	lsrs	r3, r3, #2
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d020      	beq.n	80079ba <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f023 0304 	bic.w	r3, r3, #4
 800797e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00c      	beq.n	80079ba <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c8:	f043 0204 	orr.w	r2, r3, #4
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d010      	beq.n	8007a08 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f8a7 	bl	8007b40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b28      	cmp	r3, #40	; 0x28
 80079fc:	d141      	bne.n	8007a82 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f847 	bl	8007a94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a06:	e03c      	b.n	8007a82 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a10:	d014      	beq.n	8007a3c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fed6 	bl	80077c4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <I2C_ITSlaveCplt+0x210>)
 8007a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fc6a 	bl	800730e <HAL_I2C_ListenCpltCallback>
}
 8007a3a:	e022      	b.n	8007a82 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b22      	cmp	r3, #34	; 0x22
 8007a46:	d10e      	bne.n	8007a66 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fc3d 	bl	80072de <HAL_I2C_SlaveRxCpltCallback>
}
 8007a64:	e00d      	b.n	8007a82 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fc24 	bl	80072ca <HAL_I2C_SlaveTxCpltCallback>
}
 8007a82:	bf00      	nop
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	fe00e800 	.word	0xfe00e800
 8007a90:	ffff0000 	.word	0xffff0000

08007a94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a26      	ldr	r2, [pc, #152]	; (8007b3c <I2C_ITListenCplt+0xa8>)
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	089b      	lsrs	r3, r3, #2
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d022      	beq.n	8007b12 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	f043 0204 	orr.w	r2, r3, #4
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b12:	f248 0103 	movw	r1, #32771	; 0x8003
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa9c 	bl	8008054 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2210      	movs	r2, #16
 8007b22:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff fbee 	bl	800730e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	ffff0000 	.word	0xffff0000

08007b40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a5d      	ldr	r2, [pc, #372]	; (8007cd4 <I2C_ITError+0x194>)
 8007b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b28      	cmp	r3, #40	; 0x28
 8007b76:	d005      	beq.n	8007b84 <I2C_ITError+0x44>
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b29      	cmp	r3, #41	; 0x29
 8007b7c:	d002      	beq.n	8007b84 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b2a      	cmp	r3, #42	; 0x2a
 8007b82:	d10b      	bne.n	8007b9c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b84:	2103      	movs	r1, #3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa64 	bl	8008054 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2228      	movs	r2, #40	; 0x28
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a50      	ldr	r2, [pc, #320]	; (8007cd8 <I2C_ITError+0x198>)
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34
 8007b9a:	e011      	b.n	8007bc0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b9c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fa57 	bl	8008054 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b60      	cmp	r3, #96	; 0x60
 8007bb0:	d003      	beq.n	8007bba <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d039      	beq.n	8007c42 <I2C_ITError+0x102>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b11      	cmp	r3, #17
 8007bd2:	d002      	beq.n	8007bda <I2C_ITError+0x9a>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b21      	cmp	r3, #33	; 0x21
 8007bd8:	d133      	bne.n	8007c42 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007be8:	d107      	bne.n	8007bfa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bf8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fc7e 	bl	8006500 <HAL_DMA_GetState>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d017      	beq.n	8007c3a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	4a33      	ldr	r2, [pc, #204]	; (8007cdc <I2C_ITError+0x19c>)
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fb7e 	bl	8006320 <HAL_DMA_Abort_IT>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d04d      	beq.n	8007cc6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c38:	e045      	b.n	8007cc6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f850 	bl	8007ce0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c40:	e041      	b.n	8007cc6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d039      	beq.n	8007cbe <I2C_ITError+0x17e>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b12      	cmp	r3, #18
 8007c4e:	d002      	beq.n	8007c56 <I2C_ITError+0x116>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b22      	cmp	r3, #34	; 0x22
 8007c54:	d133      	bne.n	8007cbe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c64:	d107      	bne.n	8007c76 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c74:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fc40 	bl	8006500 <HAL_DMA_GetState>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d017      	beq.n	8007cb6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8a:	4a14      	ldr	r2, [pc, #80]	; (8007cdc <I2C_ITError+0x19c>)
 8007c8c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fb40 	bl	8006320 <HAL_DMA_Abort_IT>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d011      	beq.n	8007cca <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cb4:	e009      	b.n	8007cca <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f812 	bl	8007ce0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cbc:	e005      	b.n	8007cca <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f80e 	bl	8007ce0 <I2C_TreatErrorCallback>
  }
}
 8007cc4:	e002      	b.n	8007ccc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cc6:	bf00      	nop
 8007cc8:	e000      	b.n	8007ccc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cca:	bf00      	nop
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	ffff0000 	.word	0xffff0000
 8007cd8:	08007367 	.word	0x08007367
 8007cdc:	08007d77 	.word	0x08007d77

08007ce0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b60      	cmp	r3, #96	; 0x60
 8007cf2:	d10e      	bne.n	8007d12 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff fb13 	bl	8007336 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d10:	e009      	b.n	8007d26 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fafe 	bl	8007322 <HAL_I2C_ErrorCallback>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d103      	bne.n	8007d4c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d007      	beq.n	8007d6a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699a      	ldr	r2, [r3, #24]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0201 	orr.w	r2, r2, #1
 8007d68:	619a      	str	r2, [r3, #24]
  }
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	2200      	movs	r2, #0
 8007d92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da0:	2200      	movs	r2, #0
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff ff9b 	bl	8007ce0 <I2C_TreatErrorCallback>
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	603b      	str	r3, [r7, #0]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dc2:	e022      	b.n	8007e0a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dca:	d01e      	beq.n	8007e0a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dcc:	f7fe f82a 	bl	8005e24 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d302      	bcc.n	8007de2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d113      	bne.n	8007e0a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	f043 0220 	orr.w	r2, r3, #32
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e00f      	b.n	8007e2a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699a      	ldr	r2, [r3, #24]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	bf0c      	ite	eq
 8007e1a:	2301      	moveq	r3, #1
 8007e1c:	2300      	movne	r3, #0
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d0cd      	beq.n	8007dc4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e3e:	e02c      	b.n	8007e9a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f871 	bl	8007f2c <I2C_IsAcknowledgeFailed>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e02a      	b.n	8007eaa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5a:	d01e      	beq.n	8007e9a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5c:	f7fd ffe2 	bl	8005e24 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d302      	bcc.n	8007e72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d113      	bne.n	8007e9a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e76:	f043 0220 	orr.w	r2, r3, #32
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e007      	b.n	8007eaa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d1cb      	bne.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ebe:	e028      	b.n	8007f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f831 	bl	8007f2c <I2C_IsAcknowledgeFailed>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e026      	b.n	8007f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed4:	f7fd ffa6 	bl	8005e24 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d113      	bne.n	8007f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	f043 0220 	orr.w	r2, r3, #32
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e007      	b.n	8007f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d1cf      	bne.n	8007ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d151      	bne.n	8007fea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f46:	e022      	b.n	8007f8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f4e:	d01e      	beq.n	8007f8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f50:	f7fd ff68 	bl	8005e24 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <I2C_IsAcknowledgeFailed+0x3a>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d113      	bne.n	8007f8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6a:	f043 0220 	orr.w	r2, r3, #32
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e02e      	b.n	8007fec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d1d5      	bne.n	8007f48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2210      	movs	r2, #16
 8007fa2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7ff febe 	bl	8007d2e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6859      	ldr	r1, [r3, #4]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <I2C_IsAcknowledgeFailed+0xc8>)
 8007fbe:	400b      	ands	r3, r1
 8007fc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f043 0204 	orr.w	r2, r3, #4
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	fe00e800 	.word	0xfe00e800

08007ff8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	817b      	strh	r3, [r7, #10]
 8008006:	4613      	mov	r3, r2
 8008008:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	0d5b      	lsrs	r3, r3, #21
 8008014:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008018:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <I2C_TransferConfig+0x58>)
 800801a:	430b      	orrs	r3, r1
 800801c:	43db      	mvns	r3, r3
 800801e:	ea02 0103 	and.w	r1, r2, r3
 8008022:	897b      	ldrh	r3, [r7, #10]
 8008024:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008028:	7a7b      	ldrb	r3, [r7, #9]
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	431a      	orrs	r2, r3
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	431a      	orrs	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008042:	bf00      	nop
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	03ff63ff 	.word	0x03ff63ff

08008054 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008064:	887b      	ldrh	r3, [r7, #2]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00f      	beq.n	800808e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008074:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008082:	2b28      	cmp	r3, #40	; 0x28
 8008084:	d003      	beq.n	800808e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800808c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800808e:	887b      	ldrh	r3, [r7, #2]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00f      	beq.n	80080b8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800809e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080ac:	2b28      	cmp	r3, #40	; 0x28
 80080ae:	d003      	beq.n	80080b8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80080b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80080b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da03      	bge.n	80080c8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80080c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80080c8:	887b      	ldrh	r3, [r7, #2]
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d103      	bne.n	80080d6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80080d4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80080d6:	887b      	ldrh	r3, [r7, #2]
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d103      	bne.n	80080e4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f043 0320 	orr.w	r3, r3, #32
 80080e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80080e4:	887b      	ldrh	r3, [r7, #2]
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d103      	bne.n	80080f2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6819      	ldr	r1, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	43da      	mvns	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	400a      	ands	r2, r1
 8008102:	601a      	str	r2, [r3, #0]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008110:	b590      	push	{r4, r7, lr}
 8008112:	b08d      	sub	sp, #52	; 0x34
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f005 fc3b 	bl	800d9a2 <USB_GetMode>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 838f 	bne.w	8008852 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f005 fb9f 	bl	800d87c <USB_ReadInterrupts>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 8385 	beq.w	8008850 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f005 fb96 	bl	800d87c <USB_ReadInterrupts>
 8008150:	4603      	mov	r3, r0
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b02      	cmp	r3, #2
 8008158:	d107      	bne.n	800816a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695a      	ldr	r2, [r3, #20]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f002 0202 	and.w	r2, r2, #2
 8008168:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f005 fb84 	bl	800d87c <USB_ReadInterrupts>
 8008174:	4603      	mov	r3, r0
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	2b10      	cmp	r3, #16
 800817c:	d161      	bne.n	8008242 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0210 	bic.w	r2, r2, #16
 800818c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f003 020f 	and.w	r2, r3, #15
 800819a:	4613      	mov	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	1a9b      	subs	r3, r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4413      	add	r3, r2
 80081aa:	3304      	adds	r3, #4
 80081ac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	0c5b      	lsrs	r3, r3, #17
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d124      	bne.n	8008204 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80081c0:	4013      	ands	r3, r2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d035      	beq.n	8008232 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	091b      	lsrs	r3, r3, #4
 80081ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	6a38      	ldr	r0, [r7, #32]
 80081da:	f005 fa2c 	bl	800d636 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081ea:	441a      	add	r2, r3
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	699a      	ldr	r2, [r3, #24]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081fc:	441a      	add	r2, r3
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	619a      	str	r2, [r3, #24]
 8008202:	e016      	b.n	8008232 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	0c5b      	lsrs	r3, r3, #17
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	2b06      	cmp	r3, #6
 800820e:	d110      	bne.n	8008232 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008216:	2208      	movs	r2, #8
 8008218:	4619      	mov	r1, r3
 800821a:	6a38      	ldr	r0, [r7, #32]
 800821c:	f005 fa0b 	bl	800d636 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	091b      	lsrs	r3, r3, #4
 8008228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800822c:	441a      	add	r2, r3
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699a      	ldr	r2, [r3, #24]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0210 	orr.w	r2, r2, #16
 8008240:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f005 fb18 	bl	800d87c <USB_ReadInterrupts>
 800824c:	4603      	mov	r3, r0
 800824e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008252:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008256:	d16e      	bne.n	8008336 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4618      	mov	r0, r3
 8008262:	f005 fb1e 	bl	800d8a2 <USB_ReadDevAllOutEpInterrupt>
 8008266:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008268:	e062      	b.n	8008330 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d057      	beq.n	8008324 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f005 fb43 	bl	800d90a <USB_ReadDevOutEPInterrupt>
 8008284:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00c      	beq.n	80082aa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829c:	461a      	mov	r2, r3
 800829e:	2301      	movs	r3, #1
 80082a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80082a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fd1f 	bl	8008ce8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00c      	beq.n	80082ce <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c0:	461a      	mov	r2, r3
 80082c2:	2308      	movs	r3, #8
 80082c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80082c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fd5b 	bl	8008d84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f003 0310 	and.w	r3, r3, #16
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d008      	beq.n	80082ea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	461a      	mov	r2, r3
 80082e6:	2310      	movs	r3, #16
 80082e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f003 0320 	and.w	r3, r3, #32
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	461a      	mov	r2, r3
 8008302:	2320      	movs	r3, #32
 8008304:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831c:	461a      	mov	r2, r3
 800831e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008322:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	3301      	adds	r3, #1
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d199      	bne.n	800826a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f005 fa9e 	bl	800d87c <USB_ReadInterrupts>
 8008340:	4603      	mov	r3, r0
 8008342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800834a:	f040 8087 	bne.w	800845c <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f005 fabf 	bl	800d8d6 <USB_ReadDevAllInEpInterrupt>
 8008358:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800835e:	e07a      	b.n	8008456 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d06f      	beq.n	800844a <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	4611      	mov	r1, r2
 8008374:	4618      	mov	r0, r3
 8008376:	f005 fae6 	bl	800d946 <USB_ReadDevInEPInterrupt>
 800837a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d020      	beq.n	80083c8 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	2201      	movs	r2, #1
 800838e:	fa02 f303 	lsl.w	r3, r2, r3
 8008392:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	43db      	mvns	r3, r3
 80083a0:	69f9      	ldr	r1, [r7, #28]
 80083a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a6:	4013      	ands	r3, r2
 80083a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	461a      	mov	r2, r3
 80083b8:	2301      	movs	r3, #1
 80083ba:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7fa fda7 	bl	8002f16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d008      	beq.n	80083e4 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083de:	461a      	mov	r2, r3
 80083e0:	2308      	movs	r3, #8
 80083e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d008      	beq.n	8008400 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fa:	461a      	mov	r2, r3
 80083fc:	2310      	movs	r3, #16
 80083fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d008      	beq.n	800841c <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008416:	461a      	mov	r2, r3
 8008418:	2340      	movs	r3, #64	; 0x40
 800841a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008432:	461a      	mov	r2, r3
 8008434:	2302      	movs	r3, #2
 8008436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fbc7 	bl	8008bd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	3301      	adds	r3, #1
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	085b      	lsrs	r3, r3, #1
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	2b00      	cmp	r3, #0
 800845a:	d181      	bne.n	8008360 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f005 fa0b 	bl	800d87c <USB_ReadInterrupts>
 8008466:	4603      	mov	r3, r0
 8008468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008470:	d122      	bne.n	80084b8 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800848c:	2b01      	cmp	r3, #1
 800848e:	d108      	bne.n	80084a2 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008498:	2100      	movs	r1, #0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fca6 	bl	8008dec <HAL_PCDEx_LPM_Callback>
 80084a0:	e002      	b.n	80084a8 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fa fd82 	bl	8002fac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80084b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f005 f9dd 	bl	800d87c <USB_ReadInterrupts>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084cc:	d112      	bne.n	80084f4 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d102      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7fa fd56 	bl	8002f90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695a      	ldr	r2, [r3, #20]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80084f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f005 f9bf 	bl	800d87c <USB_ReadInterrupts>
 80084fe:	4603      	mov	r3, r0
 8008500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008508:	d121      	bne.n	800854e <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008518:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d111      	bne.n	8008548 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008532:	089b      	lsrs	r3, r3, #2
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800853e:	2101      	movs	r1, #1
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fc53 	bl	8008dec <HAL_PCDEx_LPM_Callback>
 8008546:	e002      	b.n	800854e <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7fa fd21 	bl	8002f90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f005 f992 	bl	800d87c <USB_ReadInterrupts>
 8008558:	4603      	mov	r3, r0
 800855a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008562:	f040 80c5 	bne.w	80086f0 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008574:	f023 0301 	bic.w	r3, r3, #1
 8008578:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2110      	movs	r1, #16
 8008580:	4618      	mov	r0, r3
 8008582:	f004 fc61 	bl	800ce48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008586:	2300      	movs	r3, #0
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800858a:	e056      	b.n	800863a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008598:	461a      	mov	r2, r3
 800859a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800859e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b0:	0151      	lsls	r1, r2, #5
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	440a      	add	r2, r1
 80085b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085be:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d0:	0151      	lsls	r1, r2, #5
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	440a      	add	r2, r1
 80085d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ec:	461a      	mov	r2, r3
 80085ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008612:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	440a      	add	r2, r1
 800862a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800862e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008632:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	3301      	adds	r3, #1
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d3a3      	bcc.n	800858c <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008652:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008656:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865c:	2b00      	cmp	r3, #0
 800865e:	d016      	beq.n	800868e <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866a:	69fa      	ldr	r2, [r7, #28]
 800866c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008670:	f043 030b 	orr.w	r3, r3, #11
 8008674:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008686:	f043 030b 	orr.w	r3, r3, #11
 800868a:	6453      	str	r3, [r2, #68]	; 0x44
 800868c:	e015      	b.n	80086ba <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800869c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80086a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80086a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086b4:	f043 030b 	orr.w	r3, r3, #11
 80086b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f005 f992 	bl	800da04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	695a      	ldr	r2, [r3, #20]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80086ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f005 f8c1 	bl	800d87c <USB_ReadInterrupts>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008704:	d124      	bne.n	8008750 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f005 f957 	bl	800d9be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f004 fbbd 	bl	800ce94 <USB_GetDevSpeed>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681c      	ldr	r4, [r3, #0]
 8008726:	f001 f8ef 	bl	8009908 <HAL_RCC_GetHCLKFreq>
 800872a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008730:	b2db      	uxtb	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	4620      	mov	r0, r4
 8008736:	f004 faeb 	bl	800cd10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fa fc13 	bl	8002f66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800874e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f005 f891 	bl	800d87c <USB_ReadInterrupts>
 800875a:	4603      	mov	r3, r0
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b08      	cmp	r3, #8
 8008762:	d10a      	bne.n	800877a <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fa fbf0 	bl	8002f4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f002 0208 	and.w	r2, r2, #8
 8008778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f005 f87c 	bl	800d87c <USB_ReadInterrupts>
 8008784:	4603      	mov	r3, r0
 8008786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800878a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800878e:	d10f      	bne.n	80087b0 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	b2db      	uxtb	r3, r3
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7fa fc26 	bl	8002fec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695a      	ldr	r2, [r3, #20]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80087ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f005 f861 	bl	800d87c <USB_ReadInterrupts>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087c4:	d10f      	bne.n	80087e6 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7fa fbf9 	bl	8002fc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	695a      	ldr	r2, [r3, #20]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80087e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f005 f846 	bl	800d87c <USB_ReadInterrupts>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087fa:	d10a      	bne.n	8008812 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7fa fc07 	bl	8003010 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f005 f830 	bl	800d87c <USB_ReadInterrupts>
 800881c:	4603      	mov	r3, r0
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b04      	cmp	r3, #4
 8008824:	d115      	bne.n	8008852 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fa fbf7 	bl	800302c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6859      	ldr	r1, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
 800884e:	e000      	b.n	8008852 <HAL_PCD_IRQHandler+0x742>
      return;
 8008850:	bf00      	nop
    }
  }
}
 8008852:	3734      	adds	r7, #52	; 0x34
 8008854:	46bd      	mov	sp, r7
 8008856:	bd90      	pop	{r4, r7, pc}

08008858 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_PCD_SetAddress+0x1a>
 800886e:	2302      	movs	r3, #2
 8008870:	e013      	b.n	800889a <HAL_PCD_SetAddress+0x42>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	4611      	mov	r1, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f004 ffd0 	bl	800d830 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	4608      	mov	r0, r1
 80088ac:	4611      	mov	r1, r2
 80088ae:	461a      	mov	r2, r3
 80088b0:	4603      	mov	r3, r0
 80088b2:	70fb      	strb	r3, [r7, #3]
 80088b4:	460b      	mov	r3, r1
 80088b6:	803b      	strh	r3, [r7, #0]
 80088b8:	4613      	mov	r3, r2
 80088ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80088c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da0f      	bge.n	80088e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	f003 020f 	and.w	r2, r3, #15
 80088ce:	4613      	mov	r3, r2
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	1a9b      	subs	r3, r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	3338      	adds	r3, #56	; 0x38
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	3304      	adds	r3, #4
 80088de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	705a      	strb	r2, [r3, #1]
 80088e6:	e00f      	b.n	8008908 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	f003 020f 	and.w	r2, r3, #15
 80088ee:	4613      	mov	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	1a9b      	subs	r3, r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	3304      	adds	r3, #4
 8008900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	b2da      	uxtb	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008914:	883a      	ldrh	r2, [r7, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	78ba      	ldrb	r2, [r7, #2]
 800891e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d004      	beq.n	8008932 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008932:	78bb      	ldrb	r3, [r7, #2]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d102      	bne.n	800893e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_PCD_EP_Open+0xaa>
 8008948:	2302      	movs	r3, #2
 800894a:	e00e      	b.n	800896a <HAL_PCD_EP_Open+0xc8>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68f9      	ldr	r1, [r7, #12]
 800895a:	4618      	mov	r0, r3
 800895c:	f004 fab9 	bl	800ced2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008968:	7afb      	ldrb	r3, [r7, #11]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	460b      	mov	r3, r1
 8008980:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008982:	7afb      	ldrb	r3, [r7, #11]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	4613      	mov	r3, r2
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	3304      	adds	r3, #4
 800899a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2200      	movs	r2, #0
 80089ac:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2200      	movs	r2, #0
 80089b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6979      	ldr	r1, [r7, #20]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f004 fce1 	bl	800d398 <USB_EP0StartXfer>
 80089d6:	e005      	b.n	80089e4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6979      	ldr	r1, [r7, #20]
 80089de:	4618      	mov	r0, r3
 80089e0:	f004 fafe 	bl	800cfe0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
 80089fa:	460b      	mov	r3, r1
 80089fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	f003 020f 	and.w	r2, r3, #15
 8008a04:	4613      	mov	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	1a9b      	subs	r3, r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	3338      	adds	r3, #56	; 0x38
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	3304      	adds	r3, #4
 8008a14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2200      	movs	r2, #0
 8008a26:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a3a:	7afb      	ldrb	r3, [r7, #11]
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6979      	ldr	r1, [r7, #20]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f004 fca4 	bl	800d398 <USB_EP0StartXfer>
 8008a50:	e005      	b.n	8008a5e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6979      	ldr	r1, [r7, #20]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f004 fac1 	bl	800cfe0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	f003 020f 	and.w	r2, r3, #15
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d901      	bls.n	8008a86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e04e      	b.n	8008b24 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	da0f      	bge.n	8008aae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	f003 020f 	and.w	r2, r3, #15
 8008a94:	4613      	mov	r3, r2
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	3338      	adds	r3, #56	; 0x38
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	705a      	strb	r2, [r3, #1]
 8008aac:	e00d      	b.n	8008aca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	4413      	add	r3, r2
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2201      	movs	r2, #1
 8008ace:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_PCD_EP_SetStall+0x82>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e01c      	b.n	8008b24 <HAL_PCD_EP_SetStall+0xbc>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f004 fdc5 	bl	800d688 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d108      	bne.n	8008b1a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f004 ff75 	bl	800da04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	f003 020f 	and.w	r2, r3, #15
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d901      	bls.n	8008b4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e042      	b.n	8008bd0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da0f      	bge.n	8008b72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b52:	78fb      	ldrb	r3, [r7, #3]
 8008b54:	f003 020f 	and.w	r2, r3, #15
 8008b58:	4613      	mov	r3, r2
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	1a9b      	subs	r3, r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	3338      	adds	r3, #56	; 0x38
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	3304      	adds	r3, #4
 8008b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	705a      	strb	r2, [r3, #1]
 8008b70:	e00f      	b.n	8008b92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	4613      	mov	r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	3304      	adds	r3, #4
 8008b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_PCD_EP_ClrStall+0x86>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e00e      	b.n	8008bd0 <HAL_PCD_EP_ClrStall+0xa4>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f004 fdcf 	bl	800d764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	3338      	adds	r3, #56	; 0x38
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	699a      	ldr	r2, [r3, #24]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d901      	bls.n	8008c10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e067      	b.n	8008ce0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	695a      	ldr	r2, [r3, #20]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d902      	bls.n	8008c2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	3303      	adds	r3, #3
 8008c30:	089b      	lsrs	r3, r3, #2
 8008c32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c34:	e026      	b.n	8008c84 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	695a      	ldr	r2, [r3, #20]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d902      	bls.n	8008c52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	3303      	adds	r3, #3
 8008c56:	089b      	lsrs	r3, r3, #2
 8008c58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68d9      	ldr	r1, [r3, #12]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	6978      	ldr	r0, [r7, #20]
 8008c68:	f004 fcb4 	bl	800d5d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	441a      	add	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	441a      	add	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d809      	bhi.n	8008cae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d203      	bcs.n	8008cae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1c3      	bne.n	8008c36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	695a      	ldr	r2, [r3, #20]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d811      	bhi.n	8008cde <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	6939      	ldr	r1, [r7, #16]
 8008cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cda:	4013      	ands	r3, r2
 8008cdc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	333c      	adds	r3, #60	; 0x3c
 8008d00:	3304      	adds	r3, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a19      	ldr	r2, [pc, #100]	; (8008d80 <PCD_EP_OutXfrComplete_int+0x98>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d124      	bne.n	8008d68 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d34:	461a      	mov	r2, r3
 8008d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3a:	6093      	str	r3, [r2, #8]
 8008d3c:	e01a      	b.n	8008d74 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d008      	beq.n	8008d5a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d54:	461a      	mov	r2, r3
 8008d56:	2320      	movs	r3, #32
 8008d58:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7fa f8bd 	bl	8002ee0 <HAL_PCD_DataOutStageCallback>
 8008d66:	e005      	b.n	8008d74 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fa f8b6 	bl	8002ee0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	4f54310a 	.word	0x4f54310a

08008d84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	333c      	adds	r3, #60	; 0x3c
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a0c      	ldr	r2, [pc, #48]	; (8008de8 <PCD_EP_OutSetupPacket_int+0x64>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d90e      	bls.n	8008dd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d009      	beq.n	8008dd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7fa f86f 	bl	8002ebc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	4f54300a 	.word	0x4f54300a

08008dec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008e04:	b480      	push	{r7}
 8008e06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a04      	ldr	r2, [pc, #16]	; (8008e20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e12:	6013      	str	r3, [r2, #0]
}
 8008e14:	bf00      	nop
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	40007000 	.word	0x40007000

08008e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008e28:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	40007000 	.word	0x40007000

08008e40 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008e44:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	4a04      	ldr	r2, [pc, #16]	; (8008e5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8008e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e4e:	6053      	str	r3, [r2, #4]
}
 8008e50:	bf00      	nop
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	40007000 	.word	0x40007000

08008e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e3d4      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e72:	4ba1      	ldr	r3, [pc, #644]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 030c 	and.w	r3, r3, #12
 8008e7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e7c:	4b9e      	ldr	r3, [pc, #632]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 80e4 	beq.w	800905c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <HAL_RCC_OscConfig+0x4a>
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b0c      	cmp	r3, #12
 8008e9e:	f040 808b 	bne.w	8008fb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	f040 8087 	bne.w	8008fb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008eaa:	4b93      	ldr	r3, [pc, #588]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x62>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e3ac      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1a      	ldr	r2, [r3, #32]
 8008ec6:	4b8c      	ldr	r3, [pc, #560]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d004      	beq.n	8008edc <HAL_RCC_OscConfig+0x7c>
 8008ed2:	4b89      	ldr	r3, [pc, #548]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eda:	e005      	b.n	8008ee8 <HAL_RCC_OscConfig+0x88>
 8008edc:	4b86      	ldr	r3, [pc, #536]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ee2:	091b      	lsrs	r3, r3, #4
 8008ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d223      	bcs.n	8008f34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fd41 	bl	8009978 <RCC_SetFlashLatencyFromMSIRange>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e38d      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f00:	4b7d      	ldr	r3, [pc, #500]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a7c      	ldr	r2, [pc, #496]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f06:	f043 0308 	orr.w	r3, r3, #8
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	4b7a      	ldr	r3, [pc, #488]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	4977      	ldr	r1, [pc, #476]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f1e:	4b76      	ldr	r3, [pc, #472]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	4972      	ldr	r1, [pc, #456]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	604b      	str	r3, [r1, #4]
 8008f32:	e025      	b.n	8008f80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f34:	4b70      	ldr	r3, [pc, #448]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a6f      	ldr	r2, [pc, #444]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f3a:	f043 0308 	orr.w	r3, r3, #8
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4b6d      	ldr	r3, [pc, #436]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	496a      	ldr	r1, [pc, #424]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f52:	4b69      	ldr	r3, [pc, #420]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	4965      	ldr	r1, [pc, #404]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fd01 	bl	8009978 <RCC_SetFlashLatencyFromMSIRange>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e34d      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f80:	f000 fc36 	bl	80097f0 <HAL_RCC_GetSysClockFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b5c      	ldr	r3, [pc, #368]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	091b      	lsrs	r3, r3, #4
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	495a      	ldr	r1, [pc, #360]	; (80090fc <HAL_RCC_OscConfig+0x29c>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9c:	4a58      	ldr	r2, [pc, #352]	; (8009100 <HAL_RCC_OscConfig+0x2a0>)
 8008f9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008fa0:	4b58      	ldr	r3, [pc, #352]	; (8009104 <HAL_RCC_OscConfig+0x2a4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fc feed 	bl	8005d84 <HAL_InitTick>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d052      	beq.n	800905a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	e331      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d032      	beq.n	8009026 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a4c      	ldr	r2, [pc, #304]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008fc6:	f043 0301 	orr.w	r3, r3, #1
 8008fca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008fcc:	f7fc ff2a 	bl	8005e24 <HAL_GetTick>
 8008fd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fd4:	f7fc ff26 	bl	8005e24 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e31a      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fe6:	4b44      	ldr	r3, [pc, #272]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f0      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ff2:	4b41      	ldr	r3, [pc, #260]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a40      	ldr	r2, [pc, #256]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8008ff8:	f043 0308 	orr.w	r3, r3, #8
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	4b3e      	ldr	r3, [pc, #248]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	493b      	ldr	r1, [pc, #236]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 800900c:	4313      	orrs	r3, r2
 800900e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009010:	4b39      	ldr	r3, [pc, #228]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	4936      	ldr	r1, [pc, #216]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8009020:	4313      	orrs	r3, r2
 8009022:	604b      	str	r3, [r1, #4]
 8009024:	e01a      	b.n	800905c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009026:	4b34      	ldr	r3, [pc, #208]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a33      	ldr	r2, [pc, #204]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 800902c:	f023 0301 	bic.w	r3, r3, #1
 8009030:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009032:	f7fc fef7 	bl	8005e24 <HAL_GetTick>
 8009036:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009038:	e008      	b.n	800904c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800903a:	f7fc fef3 	bl	8005e24 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d901      	bls.n	800904c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e2e7      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800904c:	4b2a      	ldr	r3, [pc, #168]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f0      	bne.n	800903a <HAL_RCC_OscConfig+0x1da>
 8009058:	e000      	b.n	800905c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800905a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d074      	beq.n	8009152 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	2b08      	cmp	r3, #8
 800906c:	d005      	beq.n	800907a <HAL_RCC_OscConfig+0x21a>
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b0c      	cmp	r3, #12
 8009072:	d10e      	bne.n	8009092 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d10b      	bne.n	8009092 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800907a:	4b1f      	ldr	r3, [pc, #124]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d064      	beq.n	8009150 <HAL_RCC_OscConfig+0x2f0>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d160      	bne.n	8009150 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e2c4      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800909a:	d106      	bne.n	80090aa <HAL_RCC_OscConfig+0x24a>
 800909c:	4b16      	ldr	r3, [pc, #88]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a15      	ldr	r2, [pc, #84]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	e01d      	b.n	80090e6 <HAL_RCC_OscConfig+0x286>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090b2:	d10c      	bne.n	80090ce <HAL_RCC_OscConfig+0x26e>
 80090b4:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a0f      	ldr	r2, [pc, #60]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a0c      	ldr	r2, [pc, #48]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	e00b      	b.n	80090e6 <HAL_RCC_OscConfig+0x286>
 80090ce:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a09      	ldr	r2, [pc, #36]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a06      	ldr	r2, [pc, #24]	; (80090f8 <HAL_RCC_OscConfig+0x298>)
 80090e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01c      	beq.n	8009128 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ee:	f7fc fe99 	bl	8005e24 <HAL_GetTick>
 80090f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090f4:	e011      	b.n	800911a <HAL_RCC_OscConfig+0x2ba>
 80090f6:	bf00      	nop
 80090f8:	40021000 	.word	0x40021000
 80090fc:	08010d6c 	.word	0x08010d6c
 8009100:	20000004 	.word	0x20000004
 8009104:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009108:	f7fc fe8c 	bl	8005e24 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b64      	cmp	r3, #100	; 0x64
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e280      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800911a:	4baf      	ldr	r3, [pc, #700]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0f0      	beq.n	8009108 <HAL_RCC_OscConfig+0x2a8>
 8009126:	e014      	b.n	8009152 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009128:	f7fc fe7c 	bl	8005e24 <HAL_GetTick>
 800912c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800912e:	e008      	b.n	8009142 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009130:	f7fc fe78 	bl	8005e24 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b64      	cmp	r3, #100	; 0x64
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e26c      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009142:	4ba5      	ldr	r3, [pc, #660]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1f0      	bne.n	8009130 <HAL_RCC_OscConfig+0x2d0>
 800914e:	e000      	b.n	8009152 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d060      	beq.n	8009220 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	2b04      	cmp	r3, #4
 8009162:	d005      	beq.n	8009170 <HAL_RCC_OscConfig+0x310>
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	2b0c      	cmp	r3, #12
 8009168:	d119      	bne.n	800919e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d116      	bne.n	800919e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009170:	4b99      	ldr	r3, [pc, #612]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <HAL_RCC_OscConfig+0x328>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e249      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009188:	4b93      	ldr	r3, [pc, #588]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	061b      	lsls	r3, r3, #24
 8009196:	4990      	ldr	r1, [pc, #576]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009198:	4313      	orrs	r3, r2
 800919a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800919c:	e040      	b.n	8009220 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d023      	beq.n	80091ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091a6:	4b8c      	ldr	r3, [pc, #560]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a8b      	ldr	r2, [pc, #556]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80091ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b2:	f7fc fe37 	bl	8005e24 <HAL_GetTick>
 80091b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091b8:	e008      	b.n	80091cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091ba:	f7fc fe33 	bl	8005e24 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d901      	bls.n	80091cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e227      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091cc:	4b82      	ldr	r3, [pc, #520]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0f0      	beq.n	80091ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091d8:	4b7f      	ldr	r3, [pc, #508]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	061b      	lsls	r3, r3, #24
 80091e6:	497c      	ldr	r1, [pc, #496]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80091e8:	4313      	orrs	r3, r2
 80091ea:	604b      	str	r3, [r1, #4]
 80091ec:	e018      	b.n	8009220 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ee:	4b7a      	ldr	r3, [pc, #488]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a79      	ldr	r2, [pc, #484]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80091f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091fa:	f7fc fe13 	bl	8005e24 <HAL_GetTick>
 80091fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009200:	e008      	b.n	8009214 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009202:	f7fc fe0f 	bl	8005e24 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e203      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009214:	4b70      	ldr	r3, [pc, #448]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1f0      	bne.n	8009202 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d03c      	beq.n	80092a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01c      	beq.n	800926e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009234:	4b68      	ldr	r3, [pc, #416]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800923a:	4a67      	ldr	r2, [pc, #412]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 800923c:	f043 0301 	orr.w	r3, r3, #1
 8009240:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009244:	f7fc fdee 	bl	8005e24 <HAL_GetTick>
 8009248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800924a:	e008      	b.n	800925e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800924c:	f7fc fdea 	bl	8005e24 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e1de      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800925e:	4b5e      	ldr	r3, [pc, #376]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0ef      	beq.n	800924c <HAL_RCC_OscConfig+0x3ec>
 800926c:	e01b      	b.n	80092a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800926e:	4b5a      	ldr	r3, [pc, #360]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009274:	4a58      	ldr	r2, [pc, #352]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009276:	f023 0301 	bic.w	r3, r3, #1
 800927a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800927e:	f7fc fdd1 	bl	8005e24 <HAL_GetTick>
 8009282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009286:	f7fc fdcd 	bl	8005e24 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e1c1      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009298:	4b4f      	ldr	r3, [pc, #316]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 800929a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1ef      	bne.n	8009286 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 80a6 	beq.w	8009400 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092b4:	2300      	movs	r3, #0
 80092b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80092b8:	4b47      	ldr	r3, [pc, #284]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80092ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10d      	bne.n	80092e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092c4:	4b44      	ldr	r3, [pc, #272]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80092c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c8:	4a43      	ldr	r2, [pc, #268]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80092ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ce:	6593      	str	r3, [r2, #88]	; 0x58
 80092d0:	4b41      	ldr	r3, [pc, #260]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d8:	60bb      	str	r3, [r7, #8]
 80092da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092dc:	2301      	movs	r3, #1
 80092de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092e0:	4b3e      	ldr	r3, [pc, #248]	; (80093dc <HAL_RCC_OscConfig+0x57c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d118      	bne.n	800931e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092ec:	4b3b      	ldr	r3, [pc, #236]	; (80093dc <HAL_RCC_OscConfig+0x57c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a3a      	ldr	r2, [pc, #232]	; (80093dc <HAL_RCC_OscConfig+0x57c>)
 80092f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092f8:	f7fc fd94 	bl	8005e24 <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009300:	f7fc fd90 	bl	8005e24 <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e184      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009312:	4b32      	ldr	r3, [pc, #200]	; (80093dc <HAL_RCC_OscConfig+0x57c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0f0      	beq.n	8009300 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d108      	bne.n	8009338 <HAL_RCC_OscConfig+0x4d8>
 8009326:	4b2c      	ldr	r3, [pc, #176]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800932c:	4a2a      	ldr	r2, [pc, #168]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009336:	e024      	b.n	8009382 <HAL_RCC_OscConfig+0x522>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2b05      	cmp	r3, #5
 800933e:	d110      	bne.n	8009362 <HAL_RCC_OscConfig+0x502>
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009346:	4a24      	ldr	r2, [pc, #144]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009348:	f043 0304 	orr.w	r3, r3, #4
 800934c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009350:	4b21      	ldr	r3, [pc, #132]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009356:	4a20      	ldr	r2, [pc, #128]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009360:	e00f      	b.n	8009382 <HAL_RCC_OscConfig+0x522>
 8009362:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009368:	4a1b      	ldr	r2, [pc, #108]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 800936a:	f023 0301 	bic.w	r3, r3, #1
 800936e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009372:	4b19      	ldr	r3, [pc, #100]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009378:	4a17      	ldr	r2, [pc, #92]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 800937a:	f023 0304 	bic.w	r3, r3, #4
 800937e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d016      	beq.n	80093b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800938a:	f7fc fd4b 	bl	8005e24 <HAL_GetTick>
 800938e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009390:	e00a      	b.n	80093a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009392:	f7fc fd47 	bl	8005e24 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d901      	bls.n	80093a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e139      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093a8:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <HAL_RCC_OscConfig+0x578>)
 80093aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0ed      	beq.n	8009392 <HAL_RCC_OscConfig+0x532>
 80093b6:	e01a      	b.n	80093ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b8:	f7fc fd34 	bl	8005e24 <HAL_GetTick>
 80093bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093be:	e00f      	b.n	80093e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093c0:	f7fc fd30 	bl	8005e24 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d906      	bls.n	80093e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e122      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
 80093d6:	bf00      	nop
 80093d8:	40021000 	.word	0x40021000
 80093dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093e0:	4b90      	ldr	r3, [pc, #576]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80093e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e8      	bne.n	80093c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093ee:	7ffb      	ldrb	r3, [r7, #31]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d105      	bne.n	8009400 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093f4:	4b8b      	ldr	r3, [pc, #556]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80093f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f8:	4a8a      	ldr	r2, [pc, #552]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80093fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8108 	beq.w	800961a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	2b02      	cmp	r3, #2
 8009410:	f040 80d0 	bne.w	80095b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009414:	4b83      	ldr	r3, [pc, #524]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f003 0203 	and.w	r2, r3, #3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	429a      	cmp	r2, r3
 8009426:	d130      	bne.n	800948a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	3b01      	subs	r3, #1
 8009434:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009436:	429a      	cmp	r2, r3
 8009438:	d127      	bne.n	800948a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009444:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009446:	429a      	cmp	r2, r3
 8009448:	d11f      	bne.n	800948a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009454:	2a07      	cmp	r2, #7
 8009456:	bf14      	ite	ne
 8009458:	2201      	movne	r2, #1
 800945a:	2200      	moveq	r2, #0
 800945c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800945e:	4293      	cmp	r3, r2
 8009460:	d113      	bne.n	800948a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	3b01      	subs	r3, #1
 8009470:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009472:	429a      	cmp	r2, r3
 8009474:	d109      	bne.n	800948a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	3b01      	subs	r3, #1
 8009484:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009486:	429a      	cmp	r2, r3
 8009488:	d06e      	beq.n	8009568 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b0c      	cmp	r3, #12
 800948e:	d069      	beq.n	8009564 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009490:	4b64      	ldr	r3, [pc, #400]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d105      	bne.n	80094a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800949c:	4b61      	ldr	r3, [pc, #388]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e0b7      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80094ac:	4b5d      	ldr	r3, [pc, #372]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a5c      	ldr	r2, [pc, #368]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80094b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80094b8:	f7fc fcb4 	bl	8005e24 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094c0:	f7fc fcb0 	bl	8005e24 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e0a4      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094d2:	4b54      	ldr	r3, [pc, #336]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f0      	bne.n	80094c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094de:	4b51      	ldr	r3, [pc, #324]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80094e0:	68da      	ldr	r2, [r3, #12]
 80094e2:	4b51      	ldr	r3, [pc, #324]	; (8009628 <HAL_RCC_OscConfig+0x7c8>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80094ee:	3a01      	subs	r2, #1
 80094f0:	0112      	lsls	r2, r2, #4
 80094f2:	4311      	orrs	r1, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094f8:	0212      	lsls	r2, r2, #8
 80094fa:	4311      	orrs	r1, r2
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009500:	0852      	lsrs	r2, r2, #1
 8009502:	3a01      	subs	r2, #1
 8009504:	0552      	lsls	r2, r2, #21
 8009506:	4311      	orrs	r1, r2
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800950c:	0852      	lsrs	r2, r2, #1
 800950e:	3a01      	subs	r2, #1
 8009510:	0652      	lsls	r2, r2, #25
 8009512:	4311      	orrs	r1, r2
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009518:	0912      	lsrs	r2, r2, #4
 800951a:	0452      	lsls	r2, r2, #17
 800951c:	430a      	orrs	r2, r1
 800951e:	4941      	ldr	r1, [pc, #260]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009520:	4313      	orrs	r3, r2
 8009522:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009524:	4b3f      	ldr	r3, [pc, #252]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3e      	ldr	r2, [pc, #248]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 800952a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800952e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009530:	4b3c      	ldr	r3, [pc, #240]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	4a3b      	ldr	r2, [pc, #236]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800953a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800953c:	f7fc fc72 	bl	8005e24 <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009542:	e008      	b.n	8009556 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009544:	f7fc fc6e 	bl	8005e24 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b02      	cmp	r3, #2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e062      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009556:	4b33      	ldr	r3, [pc, #204]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0f0      	beq.n	8009544 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009562:	e05a      	b.n	800961a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e059      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009568:	4b2e      	ldr	r3, [pc, #184]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d152      	bne.n	800961a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009574:	4b2b      	ldr	r3, [pc, #172]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a2a      	ldr	r2, [pc, #168]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 800957a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800957e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009580:	4b28      	ldr	r3, [pc, #160]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	4a27      	ldr	r2, [pc, #156]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 8009586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800958a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800958c:	f7fc fc4a 	bl	8005e24 <HAL_GetTick>
 8009590:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009594:	f7fc fc46 	bl	8005e24 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e03a      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095a6:	4b1f      	ldr	r3, [pc, #124]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f0      	beq.n	8009594 <HAL_RCC_OscConfig+0x734>
 80095b2:	e032      	b.n	800961a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b0c      	cmp	r3, #12
 80095b8:	d02d      	beq.n	8009616 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ba:	4b1a      	ldr	r3, [pc, #104]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a19      	ldr	r2, [pc, #100]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80095c6:	4b17      	ldr	r3, [pc, #92]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d105      	bne.n	80095de <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80095d2:	4b14      	ldr	r3, [pc, #80]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	4a13      	ldr	r2, [pc, #76]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095d8:	f023 0303 	bic.w	r3, r3, #3
 80095dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	4a10      	ldr	r2, [pc, #64]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 80095e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80095e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ee:	f7fc fc19 	bl	8005e24 <HAL_GetTick>
 80095f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095f4:	e008      	b.n	8009608 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095f6:	f7fc fc15 	bl	8005e24 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e009      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <HAL_RCC_OscConfig+0x7c4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f0      	bne.n	80095f6 <HAL_RCC_OscConfig+0x796>
 8009614:	e001      	b.n	800961a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e000      	b.n	800961c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40021000 	.word	0x40021000
 8009628:	f99d808c 	.word	0xf99d808c

0800962c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e0c8      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009640:	4b66      	ldr	r3, [pc, #408]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d910      	bls.n	8009670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800964e:	4b63      	ldr	r3, [pc, #396]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f023 0207 	bic.w	r2, r3, #7
 8009656:	4961      	ldr	r1, [pc, #388]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	4313      	orrs	r3, r2
 800965c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800965e:	4b5f      	ldr	r3, [pc, #380]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	d001      	beq.n	8009670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e0b0      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d04c      	beq.n	8009716 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2b03      	cmp	r3, #3
 8009682:	d107      	bne.n	8009694 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009684:	4b56      	ldr	r3, [pc, #344]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d121      	bne.n	80096d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e09e      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d107      	bne.n	80096ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800969c:	4b50      	ldr	r3, [pc, #320]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d115      	bne.n	80096d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e092      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d107      	bne.n	80096c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80096b4:	4b4a      	ldr	r3, [pc, #296]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d109      	bne.n	80096d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e086      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096c4:	4b46      	ldr	r3, [pc, #280]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e07e      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096d4:	4b42      	ldr	r3, [pc, #264]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f023 0203 	bic.w	r2, r3, #3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	493f      	ldr	r1, [pc, #252]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e6:	f7fc fb9d 	bl	8005e24 <HAL_GetTick>
 80096ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ec:	e00a      	b.n	8009704 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ee:	f7fc fb99 	bl	8005e24 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d901      	bls.n	8009704 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e066      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009704:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f003 020c 	and.w	r2, r3, #12
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	429a      	cmp	r2, r3
 8009714:	d1eb      	bne.n	80096ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d008      	beq.n	8009734 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009722:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	492c      	ldr	r1, [pc, #176]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 8009730:	4313      	orrs	r3, r2
 8009732:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009734:	4b29      	ldr	r3, [pc, #164]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d210      	bcs.n	8009764 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009742:	4b26      	ldr	r3, [pc, #152]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f023 0207 	bic.w	r2, r3, #7
 800974a:	4924      	ldr	r1, [pc, #144]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	4313      	orrs	r3, r2
 8009750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009752:	4b22      	ldr	r3, [pc, #136]	; (80097dc <HAL_RCC_ClockConfig+0x1b0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d001      	beq.n	8009764 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e036      	b.n	80097d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009770:	4b1b      	ldr	r3, [pc, #108]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	4918      	ldr	r1, [pc, #96]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 800977e:	4313      	orrs	r3, r2
 8009780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800978e:	4b14      	ldr	r3, [pc, #80]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	4910      	ldr	r1, [pc, #64]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80097a2:	f000 f825 	bl	80097f0 <HAL_RCC_GetSysClockFreq>
 80097a6:	4602      	mov	r2, r0
 80097a8:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <HAL_RCC_ClockConfig+0x1b4>)
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	091b      	lsrs	r3, r3, #4
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	490c      	ldr	r1, [pc, #48]	; (80097e4 <HAL_RCC_ClockConfig+0x1b8>)
 80097b4:	5ccb      	ldrb	r3, [r1, r3]
 80097b6:	f003 031f 	and.w	r3, r3, #31
 80097ba:	fa22 f303 	lsr.w	r3, r2, r3
 80097be:	4a0a      	ldr	r2, [pc, #40]	; (80097e8 <HAL_RCC_ClockConfig+0x1bc>)
 80097c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80097c2:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <HAL_RCC_ClockConfig+0x1c0>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fc fadc 	bl	8005d84 <HAL_InitTick>
 80097cc:	4603      	mov	r3, r0
 80097ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80097d0:	7afb      	ldrb	r3, [r7, #11]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40022000 	.word	0x40022000
 80097e0:	40021000 	.word	0x40021000
 80097e4:	08010d6c 	.word	0x08010d6c
 80097e8:	20000004 	.word	0x20000004
 80097ec:	20000098 	.word	0x20000098

080097f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b089      	sub	sp, #36	; 0x24
 80097f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61fb      	str	r3, [r7, #28]
 80097fa:	2300      	movs	r3, #0
 80097fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097fe:	4b3e      	ldr	r3, [pc, #248]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f003 030c 	and.w	r3, r3, #12
 8009806:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009808:	4b3b      	ldr	r3, [pc, #236]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d005      	beq.n	8009824 <HAL_RCC_GetSysClockFreq+0x34>
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	2b0c      	cmp	r3, #12
 800981c:	d121      	bne.n	8009862 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d11e      	bne.n	8009862 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009824:	4b34      	ldr	r3, [pc, #208]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0308 	and.w	r3, r3, #8
 800982c:	2b00      	cmp	r3, #0
 800982e:	d107      	bne.n	8009840 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009830:	4b31      	ldr	r3, [pc, #196]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	61fb      	str	r3, [r7, #28]
 800983e:	e005      	b.n	800984c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009840:	4b2d      	ldr	r3, [pc, #180]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	091b      	lsrs	r3, r3, #4
 8009846:	f003 030f 	and.w	r3, r3, #15
 800984a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800984c:	4a2b      	ldr	r2, [pc, #172]	; (80098fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009854:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10d      	bne.n	8009878 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009860:	e00a      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b04      	cmp	r3, #4
 8009866:	d102      	bne.n	800986e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009868:	4b25      	ldr	r3, [pc, #148]	; (8009900 <HAL_RCC_GetSysClockFreq+0x110>)
 800986a:	61bb      	str	r3, [r7, #24]
 800986c:	e004      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b08      	cmp	r3, #8
 8009872:	d101      	bne.n	8009878 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009874:	4b23      	ldr	r3, [pc, #140]	; (8009904 <HAL_RCC_GetSysClockFreq+0x114>)
 8009876:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2b0c      	cmp	r3, #12
 800987c:	d134      	bne.n	80098e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800987e:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d003      	beq.n	8009896 <HAL_RCC_GetSysClockFreq+0xa6>
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b03      	cmp	r3, #3
 8009892:	d003      	beq.n	800989c <HAL_RCC_GetSysClockFreq+0xac>
 8009894:	e005      	b.n	80098a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009896:	4b1a      	ldr	r3, [pc, #104]	; (8009900 <HAL_RCC_GetSysClockFreq+0x110>)
 8009898:	617b      	str	r3, [r7, #20]
      break;
 800989a:	e005      	b.n	80098a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800989c:	4b19      	ldr	r3, [pc, #100]	; (8009904 <HAL_RCC_GetSysClockFreq+0x114>)
 800989e:	617b      	str	r3, [r7, #20]
      break;
 80098a0:	e002      	b.n	80098a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	617b      	str	r3, [r7, #20]
      break;
 80098a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098a8:	4b13      	ldr	r3, [pc, #76]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	091b      	lsrs	r3, r3, #4
 80098ae:	f003 0307 	and.w	r3, r3, #7
 80098b2:	3301      	adds	r3, #1
 80098b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80098b6:	4b10      	ldr	r3, [pc, #64]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	0a1b      	lsrs	r3, r3, #8
 80098bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	fb02 f203 	mul.w	r2, r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	0e5b      	lsrs	r3, r3, #25
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	3301      	adds	r3, #1
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80098e8:	69bb      	ldr	r3, [r7, #24]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3724      	adds	r7, #36	; 0x24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40021000 	.word	0x40021000
 80098fc:	08010d84 	.word	0x08010d84
 8009900:	00f42400 	.word	0x00f42400
 8009904:	007a1200 	.word	0x007a1200

08009908 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009908:	b480      	push	{r7}
 800990a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <HAL_RCC_GetHCLKFreq+0x14>)
 800990e:	681b      	ldr	r3, [r3, #0]
}
 8009910:	4618      	mov	r0, r3
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	20000004 	.word	0x20000004

08009920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009924:	f7ff fff0 	bl	8009908 <HAL_RCC_GetHCLKFreq>
 8009928:	4602      	mov	r2, r0
 800992a:	4b06      	ldr	r3, [pc, #24]	; (8009944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	f003 0307 	and.w	r3, r3, #7
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009936:	5ccb      	ldrb	r3, [r1, r3]
 8009938:	f003 031f 	and.w	r3, r3, #31
 800993c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009940:	4618      	mov	r0, r3
 8009942:	bd80      	pop	{r7, pc}
 8009944:	40021000 	.word	0x40021000
 8009948:	08010d7c 	.word	0x08010d7c

0800994c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009950:	f7ff ffda 	bl	8009908 <HAL_RCC_GetHCLKFreq>
 8009954:	4602      	mov	r2, r0
 8009956:	4b06      	ldr	r3, [pc, #24]	; (8009970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	0adb      	lsrs	r3, r3, #11
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	4904      	ldr	r1, [pc, #16]	; (8009974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009962:	5ccb      	ldrb	r3, [r1, r3]
 8009964:	f003 031f 	and.w	r3, r3, #31
 8009968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800996c:	4618      	mov	r0, r3
 800996e:	bd80      	pop	{r7, pc}
 8009970:	40021000 	.word	0x40021000
 8009974:	08010d7c 	.word	0x08010d7c

08009978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009980:	2300      	movs	r3, #0
 8009982:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009984:	4b2a      	ldr	r3, [pc, #168]	; (8009a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009990:	f7ff fa48 	bl	8008e24 <HAL_PWREx_GetVoltageRange>
 8009994:	6178      	str	r0, [r7, #20]
 8009996:	e014      	b.n	80099c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009998:	4b25      	ldr	r3, [pc, #148]	; (8009a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800999a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800999c:	4a24      	ldr	r2, [pc, #144]	; (8009a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800999e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099a2:	6593      	str	r3, [r2, #88]	; 0x58
 80099a4:	4b22      	ldr	r3, [pc, #136]	; (8009a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80099b0:	f7ff fa38 	bl	8008e24 <HAL_PWREx_GetVoltageRange>
 80099b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80099b6:	4b1e      	ldr	r3, [pc, #120]	; (8009a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ba:	4a1d      	ldr	r2, [pc, #116]	; (8009a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c8:	d10b      	bne.n	80099e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b80      	cmp	r3, #128	; 0x80
 80099ce:	d919      	bls.n	8009a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2ba0      	cmp	r3, #160	; 0xa0
 80099d4:	d902      	bls.n	80099dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80099d6:	2302      	movs	r3, #2
 80099d8:	613b      	str	r3, [r7, #16]
 80099da:	e013      	b.n	8009a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80099dc:	2301      	movs	r3, #1
 80099de:	613b      	str	r3, [r7, #16]
 80099e0:	e010      	b.n	8009a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b80      	cmp	r3, #128	; 0x80
 80099e6:	d902      	bls.n	80099ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80099e8:	2303      	movs	r3, #3
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	e00a      	b.n	8009a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b80      	cmp	r3, #128	; 0x80
 80099f2:	d102      	bne.n	80099fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80099f4:	2302      	movs	r3, #2
 80099f6:	613b      	str	r3, [r7, #16]
 80099f8:	e004      	b.n	8009a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b70      	cmp	r3, #112	; 0x70
 80099fe:	d101      	bne.n	8009a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009a00:	2301      	movs	r3, #1
 8009a02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f023 0207 	bic.w	r2, r3, #7
 8009a0c:	4909      	ldr	r1, [pc, #36]	; (8009a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009a14:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d001      	beq.n	8009a26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	40021000 	.word	0x40021000
 8009a34:	40022000 	.word	0x40022000

08009a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a40:	2300      	movs	r3, #0
 8009a42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a44:	2300      	movs	r3, #0
 8009a46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d041      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a5c:	d02a      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009a5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a62:	d824      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a68:	d008      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a6e:	d81e      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00a      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a78:	d010      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a7a:	e018      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009a7c:	4b86      	ldr	r3, [pc, #536]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	4a85      	ldr	r2, [pc, #532]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009a88:	e015      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fae3 	bl	800a05c <RCCEx_PLLSAI1_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009a9a:	e00c      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3320      	adds	r3, #32
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 fbce 	bl	800a244 <RCCEx_PLLSAI2_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009aac:	e003      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	74fb      	strb	r3, [r7, #19]
      break;
 8009ab2:	e000      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ab6:	7cfb      	ldrb	r3, [r7, #19]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10b      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009abc:	4b76      	ldr	r3, [pc, #472]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aca:	4973      	ldr	r1, [pc, #460]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009ad2:	e001      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad4:	7cfb      	ldrb	r3, [r7, #19]
 8009ad6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d041      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ae8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009aec:	d02a      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009aee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009af2:	d824      	bhi.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009af8:	d008      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009afe:	d81e      	bhi.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b08:	d010      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009b0a:	e018      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009b0c:	4b62      	ldr	r3, [pc, #392]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	4a61      	ldr	r2, [pc, #388]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b18:	e015      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fa9b 	bl	800a05c <RCCEx_PLLSAI1_Config>
 8009b26:	4603      	mov	r3, r0
 8009b28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b2a:	e00c      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3320      	adds	r3, #32
 8009b30:	2100      	movs	r1, #0
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fb86 	bl	800a244 <RCCEx_PLLSAI2_Config>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b3c:	e003      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	74fb      	strb	r3, [r7, #19]
      break;
 8009b42:	e000      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b46:	7cfb      	ldrb	r3, [r7, #19]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10b      	bne.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009b4c:	4b52      	ldr	r3, [pc, #328]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5a:	494f      	ldr	r1, [pc, #316]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009b62:	e001      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b64:	7cfb      	ldrb	r3, [r7, #19]
 8009b66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 80a0 	beq.w	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b76:	2300      	movs	r3, #0
 8009b78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b7a:	4b47      	ldr	r3, [pc, #284]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e000      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00d      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b90:	4b41      	ldr	r3, [pc, #260]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b94:	4a40      	ldr	r2, [pc, #256]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b9c:	4b3e      	ldr	r3, [pc, #248]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba4:	60bb      	str	r3, [r7, #8]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bac:	4b3b      	ldr	r3, [pc, #236]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a3a      	ldr	r2, [pc, #232]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bb8:	f7fc f934 	bl	8005e24 <HAL_GetTick>
 8009bbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009bbe:	e009      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bc0:	f7fc f930 	bl	8005e24 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d902      	bls.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	74fb      	strb	r3, [r7, #19]
        break;
 8009bd2:	e005      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009bd4:	4b31      	ldr	r3, [pc, #196]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0ef      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009be0:	7cfb      	ldrb	r3, [r7, #19]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d15c      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009be6:	4b2c      	ldr	r3, [pc, #176]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d01f      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d019      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009c04:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c10:	4b21      	ldr	r3, [pc, #132]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c16:	4a20      	ldr	r2, [pc, #128]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c20:	4b1d      	ldr	r3, [pc, #116]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c26:	4a1c      	ldr	r2, [pc, #112]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c30:	4a19      	ldr	r2, [pc, #100]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d016      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c42:	f7fc f8ef 	bl	8005e24 <HAL_GetTick>
 8009c46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c48:	e00b      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c4a:	f7fc f8eb 	bl	8005e24 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d902      	bls.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	74fb      	strb	r3, [r7, #19]
            break;
 8009c60:	e006      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0ec      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009c70:	7cfb      	ldrb	r3, [r7, #19]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10c      	bne.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c76:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c86:	4904      	ldr	r1, [pc, #16]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009c8e:	e009      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c90:	7cfb      	ldrb	r3, [r7, #19]
 8009c92:	74bb      	strb	r3, [r7, #18]
 8009c94:	e006      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009c96:	bf00      	nop
 8009c98:	40021000 	.word	0x40021000
 8009c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca0:	7cfb      	ldrb	r3, [r7, #19]
 8009ca2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ca4:	7c7b      	ldrb	r3, [r7, #17]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d105      	bne.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009caa:	4b9e      	ldr	r3, [pc, #632]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cae:	4a9d      	ldr	r2, [pc, #628]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cc2:	4b98      	ldr	r3, [pc, #608]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc8:	f023 0203 	bic.w	r2, r3, #3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd0:	4994      	ldr	r1, [pc, #592]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00a      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ce4:	4b8f      	ldr	r3, [pc, #572]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cea:	f023 020c 	bic.w	r2, r3, #12
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf2:	498c      	ldr	r1, [pc, #560]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d06:	4b87      	ldr	r3, [pc, #540]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	4983      	ldr	r1, [pc, #524]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0308 	and.w	r3, r3, #8
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d28:	4b7e      	ldr	r3, [pc, #504]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d36:	497b      	ldr	r1, [pc, #492]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d4a:	4b76      	ldr	r3, [pc, #472]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d58:	4972      	ldr	r1, [pc, #456]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d6c:	4b6d      	ldr	r3, [pc, #436]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d7a:	496a      	ldr	r1, [pc, #424]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d8e:	4b65      	ldr	r3, [pc, #404]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9c:	4961      	ldr	r1, [pc, #388]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009db0:	4b5c      	ldr	r3, [pc, #368]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dbe:	4959      	ldr	r1, [pc, #356]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009dd2:	4b54      	ldr	r3, [pc, #336]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de0:	4950      	ldr	r1, [pc, #320]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009df4:	4b4b      	ldr	r3, [pc, #300]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e02:	4948      	ldr	r1, [pc, #288]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e16:	4b43      	ldr	r3, [pc, #268]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e24:	493f      	ldr	r1, [pc, #252]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d028      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e38:	4b3a      	ldr	r3, [pc, #232]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e46:	4937      	ldr	r1, [pc, #220]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e56:	d106      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e58:	4b32      	ldr	r3, [pc, #200]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	4a31      	ldr	r2, [pc, #196]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e62:	60d3      	str	r3, [r2, #12]
 8009e64:	e011      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e6e:	d10c      	bne.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3304      	adds	r3, #4
 8009e74:	2101      	movs	r1, #1
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 f8f0 	bl	800a05c <RCCEx_PLLSAI1_Config>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009e80:	7cfb      	ldrb	r3, [r7, #19]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009e86:	7cfb      	ldrb	r3, [r7, #19]
 8009e88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d028      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e96:	4b23      	ldr	r3, [pc, #140]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea4:	491f      	ldr	r1, [pc, #124]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009eb4:	d106      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009eb6:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	4a1a      	ldr	r2, [pc, #104]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ec0:	60d3      	str	r3, [r2, #12]
 8009ec2:	e011      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ecc:	d10c      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f8c1 	bl	800a05c <RCCEx_PLLSAI1_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ede:	7cfb      	ldrb	r3, [r7, #19]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009ee4:	7cfb      	ldrb	r3, [r7, #19]
 8009ee6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d02b      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ef4:	4b0b      	ldr	r3, [pc, #44]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f02:	4908      	ldr	r1, [pc, #32]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f12:	d109      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f14:	4b03      	ldr	r3, [pc, #12]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	4a02      	ldr	r2, [pc, #8]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f1e:	60d3      	str	r3, [r2, #12]
 8009f20:	e014      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009f22:	bf00      	nop
 8009f24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f30:	d10c      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3304      	adds	r3, #4
 8009f36:	2101      	movs	r1, #1
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 f88f 	bl	800a05c <RCCEx_PLLSAI1_Config>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f42:	7cfb      	ldrb	r3, [r7, #19]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009f48:	7cfb      	ldrb	r3, [r7, #19]
 8009f4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d02f      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f58:	4b2b      	ldr	r3, [pc, #172]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f66:	4928      	ldr	r1, [pc, #160]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f76:	d10d      	bne.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 f86c 	bl	800a05c <RCCEx_PLLSAI1_Config>
 8009f84:	4603      	mov	r3, r0
 8009f86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f88:	7cfb      	ldrb	r3, [r7, #19]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d014      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009f8e:	7cfb      	ldrb	r3, [r7, #19]
 8009f90:	74bb      	strb	r3, [r7, #18]
 8009f92:	e011      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f9c:	d10c      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3320      	adds	r3, #32
 8009fa2:	2102      	movs	r1, #2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f94d 	bl	800a244 <RCCEx_PLLSAI2_Config>
 8009faa:	4603      	mov	r3, r0
 8009fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009fae:	7cfb      	ldrb	r3, [r7, #19]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009fb4:	7cfb      	ldrb	r3, [r7, #19]
 8009fb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00a      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fc4:	4b10      	ldr	r3, [pc, #64]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fd2:	490d      	ldr	r1, [pc, #52]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fe6:	4b08      	ldr	r3, [pc, #32]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ff6:	4904      	ldr	r1, [pc, #16]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009ffe:	7cbb      	ldrb	r3, [r7, #18]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	40021000 	.word	0x40021000

0800a00c <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800a010:	4b09      	ldr	r3, [pc, #36]	; (800a038 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a016:	4a08      	ldr	r2, [pc, #32]	; (800a038 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a018:	f023 0320 	bic.w	r3, r3, #32
 800a01c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800a020:	4b05      	ldr	r3, [pc, #20]	; (800a038 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	4a04      	ldr	r2, [pc, #16]	; (800a038 <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a026:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a02a:	6193      	str	r3, [r2, #24]
}
 800a02c:	bf00      	nop
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40021000 	.word	0x40021000

0800a03c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a040:	4b05      	ldr	r3, [pc, #20]	; (800a058 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a04      	ldr	r2, [pc, #16]	; (800a058 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a046:	f043 0304 	orr.w	r3, r3, #4
 800a04a:	6013      	str	r3, [r2, #0]
}
 800a04c:	bf00      	nop
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	40021000 	.word	0x40021000

0800a05c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a06a:	4b75      	ldr	r3, [pc, #468]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d018      	beq.n	800a0a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a076:	4b72      	ldr	r3, [pc, #456]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	f003 0203 	and.w	r2, r3, #3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d10d      	bne.n	800a0a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
       ||
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d009      	beq.n	800a0a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a08e:	4b6c      	ldr	r3, [pc, #432]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	091b      	lsrs	r3, r3, #4
 800a094:	f003 0307 	and.w	r3, r3, #7
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
       ||
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d047      	beq.n	800a132 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	73fb      	strb	r3, [r7, #15]
 800a0a6:	e044      	b.n	800a132 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d018      	beq.n	800a0e2 <RCCEx_PLLSAI1_Config+0x86>
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d825      	bhi.n	800a100 <RCCEx_PLLSAI1_Config+0xa4>
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d002      	beq.n	800a0be <RCCEx_PLLSAI1_Config+0x62>
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d009      	beq.n	800a0d0 <RCCEx_PLLSAI1_Config+0x74>
 800a0bc:	e020      	b.n	800a100 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0be:	4b60      	ldr	r3, [pc, #384]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d11d      	bne.n	800a106 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0ce:	e01a      	b.n	800a106 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0d0:	4b5b      	ldr	r3, [pc, #364]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d116      	bne.n	800a10a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0e0:	e013      	b.n	800a10a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0e2:	4b57      	ldr	r3, [pc, #348]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10f      	bne.n	800a10e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0ee:	4b54      	ldr	r3, [pc, #336]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0fe:	e006      	b.n	800a10e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	73fb      	strb	r3, [r7, #15]
      break;
 800a104:	e004      	b.n	800a110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a106:	bf00      	nop
 800a108:	e002      	b.n	800a110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a10a:	bf00      	nop
 800a10c:	e000      	b.n	800a110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a10e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10d      	bne.n	800a132 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a116:	4b4a      	ldr	r3, [pc, #296]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6819      	ldr	r1, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	3b01      	subs	r3, #1
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	430b      	orrs	r3, r1
 800a12c:	4944      	ldr	r1, [pc, #272]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d17d      	bne.n	800a234 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a138:	4b41      	ldr	r3, [pc, #260]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a40      	ldr	r2, [pc, #256]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a13e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a144:	f7fb fe6e 	bl	8005e24 <HAL_GetTick>
 800a148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a14a:	e009      	b.n	800a160 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a14c:	f7fb fe6a 	bl	8005e24 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b02      	cmp	r3, #2
 800a158:	d902      	bls.n	800a160 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	73fb      	strb	r3, [r7, #15]
        break;
 800a15e:	e005      	b.n	800a16c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a160:	4b37      	ldr	r3, [pc, #220]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1ef      	bne.n	800a14c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d160      	bne.n	800a234 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d111      	bne.n	800a19c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a178:	4b31      	ldr	r3, [pc, #196]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	6892      	ldr	r2, [r2, #8]
 800a188:	0211      	lsls	r1, r2, #8
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	68d2      	ldr	r2, [r2, #12]
 800a18e:	0912      	lsrs	r2, r2, #4
 800a190:	0452      	lsls	r2, r2, #17
 800a192:	430a      	orrs	r2, r1
 800a194:	492a      	ldr	r1, [pc, #168]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a196:	4313      	orrs	r3, r2
 800a198:	610b      	str	r3, [r1, #16]
 800a19a:	e027      	b.n	800a1ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d112      	bne.n	800a1c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a1a2:	4b27      	ldr	r3, [pc, #156]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a1aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	6892      	ldr	r2, [r2, #8]
 800a1b2:	0211      	lsls	r1, r2, #8
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6912      	ldr	r2, [r2, #16]
 800a1b8:	0852      	lsrs	r2, r2, #1
 800a1ba:	3a01      	subs	r2, #1
 800a1bc:	0552      	lsls	r2, r2, #21
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	491f      	ldr	r1, [pc, #124]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	610b      	str	r3, [r1, #16]
 800a1c6:	e011      	b.n	800a1ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a1c8:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a1d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	6892      	ldr	r2, [r2, #8]
 800a1d8:	0211      	lsls	r1, r2, #8
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6952      	ldr	r2, [r2, #20]
 800a1de:	0852      	lsrs	r2, r2, #1
 800a1e0:	3a01      	subs	r2, #1
 800a1e2:	0652      	lsls	r2, r2, #25
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	4916      	ldr	r1, [pc, #88]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a1ec:	4b14      	ldr	r3, [pc, #80]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a13      	ldr	r2, [pc, #76]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1f8:	f7fb fe14 	bl	8005e24 <HAL_GetTick>
 800a1fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a1fe:	e009      	b.n	800a214 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a200:	f7fb fe10 	bl	8005e24 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d902      	bls.n	800a214 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	73fb      	strb	r3, [r7, #15]
          break;
 800a212:	e005      	b.n	800a220 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a214:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d0ef      	beq.n	800a200 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d106      	bne.n	800a234 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a226:	4b06      	ldr	r3, [pc, #24]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a228:	691a      	ldr	r2, [r3, #16]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	4904      	ldr	r1, [pc, #16]	; (800a240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a230:	4313      	orrs	r3, r2
 800a232:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a234:	7bfb      	ldrb	r3, [r7, #15]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	40021000 	.word	0x40021000

0800a244 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a252:	4b6a      	ldr	r3, [pc, #424]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f003 0303 	and.w	r3, r3, #3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d018      	beq.n	800a290 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a25e:	4b67      	ldr	r3, [pc, #412]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f003 0203 	and.w	r2, r3, #3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d10d      	bne.n	800a28a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
       ||
 800a272:	2b00      	cmp	r3, #0
 800a274:	d009      	beq.n	800a28a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a276:	4b61      	ldr	r3, [pc, #388]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	091b      	lsrs	r3, r3, #4
 800a27c:	f003 0307 	and.w	r3, r3, #7
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
       ||
 800a286:	429a      	cmp	r2, r3
 800a288:	d047      	beq.n	800a31a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	73fb      	strb	r3, [r7, #15]
 800a28e:	e044      	b.n	800a31a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b03      	cmp	r3, #3
 800a296:	d018      	beq.n	800a2ca <RCCEx_PLLSAI2_Config+0x86>
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d825      	bhi.n	800a2e8 <RCCEx_PLLSAI2_Config+0xa4>
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d002      	beq.n	800a2a6 <RCCEx_PLLSAI2_Config+0x62>
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d009      	beq.n	800a2b8 <RCCEx_PLLSAI2_Config+0x74>
 800a2a4:	e020      	b.n	800a2e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a2a6:	4b55      	ldr	r3, [pc, #340]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d11d      	bne.n	800a2ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2b6:	e01a      	b.n	800a2ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a2b8:	4b50      	ldr	r3, [pc, #320]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d116      	bne.n	800a2f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2c8:	e013      	b.n	800a2f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a2ca:	4b4c      	ldr	r3, [pc, #304]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10f      	bne.n	800a2f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a2d6:	4b49      	ldr	r3, [pc, #292]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d109      	bne.n	800a2f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2e6:	e006      	b.n	800a2f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ec:	e004      	b.n	800a2f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2ee:	bf00      	nop
 800a2f0:	e002      	b.n	800a2f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2f2:	bf00      	nop
 800a2f4:	e000      	b.n	800a2f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2f6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10d      	bne.n	800a31a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a2fe:	4b3f      	ldr	r3, [pc, #252]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6819      	ldr	r1, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	3b01      	subs	r3, #1
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	430b      	orrs	r3, r1
 800a314:	4939      	ldr	r1, [pc, #228]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a316:	4313      	orrs	r3, r2
 800a318:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d167      	bne.n	800a3f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a320:	4b36      	ldr	r3, [pc, #216]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a35      	ldr	r2, [pc, #212]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a32a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a32c:	f7fb fd7a 	bl	8005e24 <HAL_GetTick>
 800a330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a332:	e009      	b.n	800a348 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a334:	f7fb fd76 	bl	8005e24 <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d902      	bls.n	800a348 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	73fb      	strb	r3, [r7, #15]
        break;
 800a346:	e005      	b.n	800a354 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a348:	4b2c      	ldr	r3, [pc, #176]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1ef      	bne.n	800a334 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d14a      	bne.n	800a3f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d111      	bne.n	800a384 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a360:	4b26      	ldr	r3, [pc, #152]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6892      	ldr	r2, [r2, #8]
 800a370:	0211      	lsls	r1, r2, #8
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	68d2      	ldr	r2, [r2, #12]
 800a376:	0912      	lsrs	r2, r2, #4
 800a378:	0452      	lsls	r2, r2, #17
 800a37a:	430a      	orrs	r2, r1
 800a37c:	491f      	ldr	r1, [pc, #124]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	614b      	str	r3, [r1, #20]
 800a382:	e011      	b.n	800a3a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a384:	4b1d      	ldr	r3, [pc, #116]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a38c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	6892      	ldr	r2, [r2, #8]
 800a394:	0211      	lsls	r1, r2, #8
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	6912      	ldr	r2, [r2, #16]
 800a39a:	0852      	lsrs	r2, r2, #1
 800a39c:	3a01      	subs	r2, #1
 800a39e:	0652      	lsls	r2, r2, #25
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	4916      	ldr	r1, [pc, #88]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a3a8:	4b14      	ldr	r3, [pc, #80]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a13      	ldr	r2, [pc, #76]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b4:	f7fb fd36 	bl	8005e24 <HAL_GetTick>
 800a3b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a3ba:	e009      	b.n	800a3d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a3bc:	f7fb fd32 	bl	8005e24 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d902      	bls.n	800a3d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	73fb      	strb	r3, [r7, #15]
          break;
 800a3ce:	e005      	b.n	800a3dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a3d0:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0ef      	beq.n	800a3bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a3e2:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3e4:	695a      	ldr	r2, [r3, #20]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	4904      	ldr	r1, [pc, #16]	; (800a3fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	40021000 	.word	0x40021000

0800a400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e095      	b.n	800a53e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a422:	d009      	beq.n	800a438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	61da      	str	r2, [r3, #28]
 800a42a:	e005      	b.n	800a438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f89f 	bl	800a596 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a46e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a478:	d902      	bls.n	800a480 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a47a:	2300      	movs	r3, #0
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	e002      	b.n	800a486 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a484:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a48e:	d007      	beq.n	800a4a0 <HAL_SPI_Init+0xa0>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a498:	d002      	beq.n	800a4a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	69db      	ldr	r3, [r3, #28]
 800a4d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	ea42 0103 	orr.w	r1, r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	0c1b      	lsrs	r3, r3, #16
 800a4fc:	f003 0204 	and.w	r2, r3, #4
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	f003 0310 	and.w	r3, r3, #16
 800a508:	431a      	orrs	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50e:	f003 0308 	and.w	r3, r3, #8
 800a512:	431a      	orrs	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a51c:	ea42 0103 	orr.w	r1, r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e01a      	b.n	800a58e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a56e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f81a 	bl	800a5aa <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b088      	sub	sp, #32
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	603b      	str	r3, [r7, #0]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_SPI_Transmit+0x22>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e158      	b.n	800a892 <HAL_SPI_Transmit+0x2d4>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5e8:	f7fb fc1c 	bl	8005e24 <HAL_GetTick>
 800a5ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d002      	beq.n	800a604 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
 800a600:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a602:	e13d      	b.n	800a880 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <HAL_SPI_Transmit+0x52>
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d102      	bne.n	800a616 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a614:	e134      	b.n	800a880 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2203      	movs	r2, #3
 800a61a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	88fa      	ldrh	r2, [r7, #6]
 800a62e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	88fa      	ldrh	r2, [r7, #6]
 800a634:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a660:	d10f      	bne.n	800a682 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a670:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a680:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68c:	2b40      	cmp	r3, #64	; 0x40
 800a68e:	d007      	beq.n	800a6a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a69e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6a8:	d94b      	bls.n	800a742 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <HAL_SPI_Transmit+0xfa>
 800a6b2:	8afb      	ldrh	r3, [r7, #22]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d13e      	bne.n	800a736 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6bc:	881a      	ldrh	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c8:	1c9a      	adds	r2, r3, #2
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a6dc:	e02b      	b.n	800a736 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d112      	bne.n	800a712 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	881a      	ldrh	r2, [r3, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fc:	1c9a      	adds	r2, r3, #2
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a706:	b29b      	uxth	r3, r3
 800a708:	3b01      	subs	r3, #1
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a710:	e011      	b.n	800a736 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a712:	f7fb fb87 	bl	8005e24 <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d803      	bhi.n	800a72a <HAL_SPI_Transmit+0x16c>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a728:	d102      	bne.n	800a730 <HAL_SPI_Transmit+0x172>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a734:	e0a4      	b.n	800a880 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1ce      	bne.n	800a6de <HAL_SPI_Transmit+0x120>
 800a740:	e07c      	b.n	800a83c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <HAL_SPI_Transmit+0x192>
 800a74a:	8afb      	ldrh	r3, [r7, #22]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d170      	bne.n	800a832 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a754:	b29b      	uxth	r3, r3
 800a756:	2b01      	cmp	r3, #1
 800a758:	d912      	bls.n	800a780 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	881a      	ldrh	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76a:	1c9a      	adds	r2, r3, #2
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a774:	b29b      	uxth	r3, r3
 800a776:	3b02      	subs	r3, #2
 800a778:	b29a      	uxth	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a77e:	e058      	b.n	800a832 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	330c      	adds	r3, #12
 800a78a:	7812      	ldrb	r2, [r2, #0]
 800a78c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	1c5a      	adds	r2, r3, #1
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a7a6:	e044      	b.n	800a832 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d12b      	bne.n	800a80e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d912      	bls.n	800a7e6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	881a      	ldrh	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d0:	1c9a      	adds	r2, r3, #2
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b02      	subs	r3, #2
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a7e4:	e025      	b.n	800a832 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	330c      	adds	r3, #12
 800a7f0:	7812      	ldrb	r2, [r2, #0]
 800a7f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a802:	b29b      	uxth	r3, r3
 800a804:	3b01      	subs	r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a80c:	e011      	b.n	800a832 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a80e:	f7fb fb09 	bl	8005e24 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d803      	bhi.n	800a826 <HAL_SPI_Transmit+0x268>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a824:	d102      	bne.n	800a82c <HAL_SPI_Transmit+0x26e>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a830:	e026      	b.n	800a880 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1b5      	bne.n	800a7a8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 fb65 	bl	800af10 <SPI_EndRxTxTransaction>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2220      	movs	r2, #32
 800a850:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a85a:	2300      	movs	r3, #0
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	613b      	str	r3, [r7, #16]
 800a86e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	77fb      	strb	r3, [r7, #31]
 800a87c:	e000      	b.n	800a880 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a87e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a890:	7ffb      	ldrb	r3, [r7, #31]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3720      	adds	r7, #32
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b08a      	sub	sp, #40	; 0x28
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	607a      	str	r2, [r7, #4]
 800a8a6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_SPI_TransmitReceive+0x26>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e1fb      	b.n	800acb8 <HAL_SPI_TransmitReceive+0x41e>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8c8:	f7fb faac 	bl	8005e24 <HAL_GetTick>
 800a8cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a8d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a8dc:	887b      	ldrh	r3, [r7, #2]
 800a8de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a8e0:	887b      	ldrh	r3, [r7, #2]
 800a8e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a8e4:	7efb      	ldrb	r3, [r7, #27]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d00e      	beq.n	800a908 <HAL_SPI_TransmitReceive+0x6e>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8f0:	d106      	bne.n	800a900 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d102      	bne.n	800a900 <HAL_SPI_TransmitReceive+0x66>
 800a8fa:	7efb      	ldrb	r3, [r7, #27]
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d003      	beq.n	800a908 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a900:	2302      	movs	r3, #2
 800a902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a906:	e1cd      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d005      	beq.n	800a91a <HAL_SPI_TransmitReceive+0x80>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <HAL_SPI_TransmitReceive+0x80>
 800a914:	887b      	ldrh	r3, [r7, #2]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d103      	bne.n	800a922 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a920:	e1c0      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d003      	beq.n	800a936 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2205      	movs	r2, #5
 800a932:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	887a      	ldrh	r2, [r7, #2]
 800a946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	887a      	ldrh	r2, [r7, #2]
 800a94e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	887a      	ldrh	r2, [r7, #2]
 800a95c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	887a      	ldrh	r2, [r7, #2]
 800a962:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a978:	d802      	bhi.n	800a980 <HAL_SPI_TransmitReceive+0xe6>
 800a97a:	8a3b      	ldrh	r3, [r7, #16]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d908      	bls.n	800a992 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a98e:	605a      	str	r2, [r3, #4]
 800a990:	e007      	b.n	800a9a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ac:	2b40      	cmp	r3, #64	; 0x40
 800a9ae:	d007      	beq.n	800a9c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9c8:	d97c      	bls.n	800aac4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <HAL_SPI_TransmitReceive+0x13e>
 800a9d2:	8a7b      	ldrh	r3, [r7, #18]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d169      	bne.n	800aaac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	881a      	ldrh	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	1c9a      	adds	r2, r3, #2
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9fc:	e056      	b.n	800aaac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f003 0302 	and.w	r3, r3, #2
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d11b      	bne.n	800aa44 <HAL_SPI_TransmitReceive+0x1aa>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d016      	beq.n	800aa44 <HAL_SPI_TransmitReceive+0x1aa>
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d113      	bne.n	800aa44 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa20:	881a      	ldrh	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2c:	1c9a      	adds	r2, r3, #2
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d11c      	bne.n	800aa8c <HAL_SPI_TransmitReceive+0x1f2>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d016      	beq.n	800aa8c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68da      	ldr	r2, [r3, #12]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa68:	b292      	uxth	r2, r2
 800aa6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa70:	1c9a      	adds	r2, r3, #2
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa8c:	f7fb f9ca 	bl	8005e24 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d807      	bhi.n	800aaac <HAL_SPI_TransmitReceive+0x212>
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaa2:	d003      	beq.n	800aaac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800aaaa:	e0fb      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1a3      	bne.n	800a9fe <HAL_SPI_TransmitReceive+0x164>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d19d      	bne.n	800a9fe <HAL_SPI_TransmitReceive+0x164>
 800aac2:	e0df      	b.n	800ac84 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <HAL_SPI_TransmitReceive+0x23a>
 800aacc:	8a7b      	ldrh	r3, [r7, #18]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	f040 80cb 	bne.w	800ac6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d912      	bls.n	800ab04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	881a      	ldrh	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaee:	1c9a      	adds	r2, r3, #2
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3b02      	subs	r3, #2
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab02:	e0b2      	b.n	800ac6a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	330c      	adds	r3, #12
 800ab0e:	7812      	ldrb	r2, [r2, #0]
 800ab10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	1c5a      	adds	r2, r3, #1
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	3b01      	subs	r3, #1
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab2a:	e09e      	b.n	800ac6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d134      	bne.n	800aba4 <HAL_SPI_TransmitReceive+0x30a>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d02f      	beq.n	800aba4 <HAL_SPI_TransmitReceive+0x30a>
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d12c      	bne.n	800aba4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d912      	bls.n	800ab7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	881a      	ldrh	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab64:	1c9a      	adds	r2, r3, #2
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	3b02      	subs	r3, #2
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab78:	e012      	b.n	800aba0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	330c      	adds	r3, #12
 800ab84:	7812      	ldrb	r2, [r2, #0]
 800ab86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d148      	bne.n	800ac44 <HAL_SPI_TransmitReceive+0x3aa>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abb8:	b29b      	uxth	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d042      	beq.n	800ac44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d923      	bls.n	800ac12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68da      	ldr	r2, [r3, #12]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd4:	b292      	uxth	r2, r2
 800abd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	1c9a      	adds	r2, r3, #2
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b02      	subs	r3, #2
 800abec:	b29a      	uxth	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d81f      	bhi.n	800ac40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac0e:	605a      	str	r2, [r3, #4]
 800ac10:	e016      	b.n	800ac40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f103 020c 	add.w	r2, r3, #12
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1e:	7812      	ldrb	r2, [r2, #0]
 800ac20:	b2d2      	uxtb	r2, r2
 800ac22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	3b01      	subs	r3, #1
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac40:	2301      	movs	r3, #1
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac44:	f7fb f8ee 	bl	8005e24 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d803      	bhi.n	800ac5c <HAL_SPI_TransmitReceive+0x3c2>
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac5a:	d102      	bne.n	800ac62 <HAL_SPI_TransmitReceive+0x3c8>
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d103      	bne.n	800ac6a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ac68:	e01c      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f47f af5b 	bne.w	800ab2c <HAL_SPI_TransmitReceive+0x292>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f47f af54 	bne.w	800ab2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f941 	bl	800af10 <SPI_EndRxTxTransaction>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d006      	beq.n	800aca2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	661a      	str	r2, [r3, #96]	; 0x60
 800aca0:	e000      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800aca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800acb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3728      	adds	r7, #40	; 0x28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acce:	b2db      	uxtb	r3, r3
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b088      	sub	sp, #32
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	603b      	str	r3, [r7, #0]
 800ace8:	4613      	mov	r3, r2
 800acea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800acec:	f7fb f89a 	bl	8005e24 <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	4413      	add	r3, r2
 800acfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800acfc:	f7fb f892 	bl	8005e24 <HAL_GetTick>
 800ad00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad02:	4b39      	ldr	r3, [pc, #228]	; (800ade8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	015b      	lsls	r3, r3, #5
 800ad08:	0d1b      	lsrs	r3, r3, #20
 800ad0a:	69fa      	ldr	r2, [r7, #28]
 800ad0c:	fb02 f303 	mul.w	r3, r2, r3
 800ad10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad12:	e054      	b.n	800adbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad1a:	d050      	beq.n	800adbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad1c:	f7fb f882 	bl	8005e24 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d902      	bls.n	800ad32 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d13d      	bne.n	800adae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad4a:	d111      	bne.n	800ad70 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad54:	d004      	beq.n	800ad60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5e:	d107      	bne.n	800ad70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad78:	d10f      	bne.n	800ad9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e017      	b.n	800adde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	3b01      	subs	r3, #1
 800adbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	4013      	ands	r3, r2
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	429a      	cmp	r2, r3
 800adcc:	bf0c      	ite	eq
 800adce:	2301      	moveq	r3, #1
 800add0:	2300      	movne	r3, #0
 800add2:	b2db      	uxtb	r3, r3
 800add4:	461a      	mov	r2, r3
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	429a      	cmp	r2, r3
 800adda:	d19b      	bne.n	800ad14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3720      	adds	r7, #32
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20000004 	.word	0x20000004

0800adec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800adfa:	f7fb f813 	bl	8005e24 <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	1a9b      	subs	r3, r3, r2
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	4413      	add	r3, r2
 800ae08:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae0a:	f7fb f80b 	bl	8005e24 <HAL_GetTick>
 800ae0e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae10:	4b3e      	ldr	r3, [pc, #248]	; (800af0c <SPI_WaitFifoStateUntilTimeout+0x120>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	4613      	mov	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	00da      	lsls	r2, r3, #3
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	0d1b      	lsrs	r3, r3, #20
 800ae20:	69fa      	ldr	r2, [r7, #28]
 800ae22:	fb02 f303 	mul.w	r3, r2, r3
 800ae26:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae28:	e062      	b.n	800aef0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae30:	d109      	bne.n	800ae46 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800ae44:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae4c:	d050      	beq.n	800aef0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae4e:	f7fa ffe9 	bl	8005e24 <HAL_GetTick>
 800ae52:	4602      	mov	r2, r0
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	69fa      	ldr	r2, [r7, #28]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d902      	bls.n	800ae64 <SPI_WaitFifoStateUntilTimeout+0x78>
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d13d      	bne.n	800aee0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae7c:	d111      	bne.n	800aea2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae86:	d004      	beq.n	800ae92 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae90:	d107      	bne.n	800aea2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aea0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeaa:	d10f      	bne.n	800aecc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aeca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e010      	b.n	800af02 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	689a      	ldr	r2, [r3, #8]
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4013      	ands	r3, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d194      	bne.n	800ae2a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3720      	adds	r7, #32
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20000004 	.word	0x20000004

0800af10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af02      	add	r7, sp, #8
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2200      	movs	r2, #0
 800af24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7ff ff5f 	bl	800adec <SPI_WaitFifoStateUntilTimeout>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af38:	f043 0220 	orr.w	r2, r3, #32
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e027      	b.n	800af94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2200      	movs	r2, #0
 800af4c:	2180      	movs	r1, #128	; 0x80
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7ff fec4 	bl	800acdc <SPI_WaitFlagStateUntilTimeout>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d007      	beq.n	800af6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af5e:	f043 0220 	orr.w	r2, r3, #32
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e014      	b.n	800af94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2200      	movs	r2, #0
 800af72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7ff ff38 	bl	800adec <SPI_WaitFifoStateUntilTimeout>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af86:	f043 0220 	orr.w	r2, r3, #32
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e000      	b.n	800af94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e049      	b.n	800b042 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d106      	bne.n	800afc8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7f7 fe0c 	bl	8002be0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3304      	adds	r3, #4
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f000 fc56 	bl	800b88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d109      	bne.n	800b070 <HAL_TIM_OC_Start_IT+0x24>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b01      	cmp	r3, #1
 800b066:	bf14      	ite	ne
 800b068:	2301      	movne	r3, #1
 800b06a:	2300      	moveq	r3, #0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	e03c      	b.n	800b0ea <HAL_TIM_OC_Start_IT+0x9e>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b04      	cmp	r3, #4
 800b074:	d109      	bne.n	800b08a <HAL_TIM_OC_Start_IT+0x3e>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b01      	cmp	r3, #1
 800b080:	bf14      	ite	ne
 800b082:	2301      	movne	r3, #1
 800b084:	2300      	moveq	r3, #0
 800b086:	b2db      	uxtb	r3, r3
 800b088:	e02f      	b.n	800b0ea <HAL_TIM_OC_Start_IT+0x9e>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	2b08      	cmp	r3, #8
 800b08e:	d109      	bne.n	800b0a4 <HAL_TIM_OC_Start_IT+0x58>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b01      	cmp	r3, #1
 800b09a:	bf14      	ite	ne
 800b09c:	2301      	movne	r3, #1
 800b09e:	2300      	moveq	r3, #0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	e022      	b.n	800b0ea <HAL_TIM_OC_Start_IT+0x9e>
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b0c      	cmp	r3, #12
 800b0a8:	d109      	bne.n	800b0be <HAL_TIM_OC_Start_IT+0x72>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	bf14      	ite	ne
 800b0b6:	2301      	movne	r3, #1
 800b0b8:	2300      	moveq	r3, #0
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	e015      	b.n	800b0ea <HAL_TIM_OC_Start_IT+0x9e>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b10      	cmp	r3, #16
 800b0c2:	d109      	bne.n	800b0d8 <HAL_TIM_OC_Start_IT+0x8c>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	bf14      	ite	ne
 800b0d0:	2301      	movne	r3, #1
 800b0d2:	2300      	moveq	r3, #0
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	e008      	b.n	800b0ea <HAL_TIM_OC_Start_IT+0x9e>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	bf14      	ite	ne
 800b0e4:	2301      	movne	r3, #1
 800b0e6:	2300      	moveq	r3, #0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e0e2      	b.n	800b2b8 <HAL_TIM_OC_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <HAL_TIM_OC_Start_IT+0xb6>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b100:	e023      	b.n	800b14a <HAL_TIM_OC_Start_IT+0xfe>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b04      	cmp	r3, #4
 800b106:	d104      	bne.n	800b112 <HAL_TIM_OC_Start_IT+0xc6>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b110:	e01b      	b.n	800b14a <HAL_TIM_OC_Start_IT+0xfe>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b08      	cmp	r3, #8
 800b116:	d104      	bne.n	800b122 <HAL_TIM_OC_Start_IT+0xd6>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b120:	e013      	b.n	800b14a <HAL_TIM_OC_Start_IT+0xfe>
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b0c      	cmp	r3, #12
 800b126:	d104      	bne.n	800b132 <HAL_TIM_OC_Start_IT+0xe6>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b130:	e00b      	b.n	800b14a <HAL_TIM_OC_Start_IT+0xfe>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b10      	cmp	r3, #16
 800b136:	d104      	bne.n	800b142 <HAL_TIM_OC_Start_IT+0xf6>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b140:	e003      	b.n	800b14a <HAL_TIM_OC_Start_IT+0xfe>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2202      	movs	r2, #2
 800b146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b0c      	cmp	r3, #12
 800b14e:	d841      	bhi.n	800b1d4 <HAL_TIM_OC_Start_IT+0x188>
 800b150:	a201      	add	r2, pc, #4	; (adr r2, 800b158 <HAL_TIM_OC_Start_IT+0x10c>)
 800b152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b156:	bf00      	nop
 800b158:	0800b18d 	.word	0x0800b18d
 800b15c:	0800b1d5 	.word	0x0800b1d5
 800b160:	0800b1d5 	.word	0x0800b1d5
 800b164:	0800b1d5 	.word	0x0800b1d5
 800b168:	0800b19f 	.word	0x0800b19f
 800b16c:	0800b1d5 	.word	0x0800b1d5
 800b170:	0800b1d5 	.word	0x0800b1d5
 800b174:	0800b1d5 	.word	0x0800b1d5
 800b178:	0800b1b1 	.word	0x0800b1b1
 800b17c:	0800b1d5 	.word	0x0800b1d5
 800b180:	0800b1d5 	.word	0x0800b1d5
 800b184:	0800b1d5 	.word	0x0800b1d5
 800b188:	0800b1c3 	.word	0x0800b1c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0202 	orr.w	r2, r2, #2
 800b19a:	60da      	str	r2, [r3, #12]
      break;
 800b19c:	e01b      	b.n	800b1d6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68da      	ldr	r2, [r3, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f042 0204 	orr.w	r2, r2, #4
 800b1ac:	60da      	str	r2, [r3, #12]
      break;
 800b1ae:	e012      	b.n	800b1d6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0208 	orr.w	r2, r2, #8
 800b1be:	60da      	str	r2, [r3, #12]
      break;
 800b1c0:	e009      	b.n	800b1d6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f042 0210 	orr.w	r2, r2, #16
 800b1d0:	60da      	str	r2, [r3, #12]
      break;
 800b1d2:	e000      	b.n	800b1d6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 800b1d4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fec4 	bl	800bf6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a35      	ldr	r2, [pc, #212]	; (800b2c0 <HAL_TIM_OC_Start_IT+0x274>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d013      	beq.n	800b216 <HAL_TIM_OC_Start_IT+0x1ca>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a34      	ldr	r2, [pc, #208]	; (800b2c4 <HAL_TIM_OC_Start_IT+0x278>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d00e      	beq.n	800b216 <HAL_TIM_OC_Start_IT+0x1ca>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a32      	ldr	r2, [pc, #200]	; (800b2c8 <HAL_TIM_OC_Start_IT+0x27c>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d009      	beq.n	800b216 <HAL_TIM_OC_Start_IT+0x1ca>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a31      	ldr	r2, [pc, #196]	; (800b2cc <HAL_TIM_OC_Start_IT+0x280>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d004      	beq.n	800b216 <HAL_TIM_OC_Start_IT+0x1ca>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a2f      	ldr	r2, [pc, #188]	; (800b2d0 <HAL_TIM_OC_Start_IT+0x284>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d101      	bne.n	800b21a <HAL_TIM_OC_Start_IT+0x1ce>
 800b216:	2301      	movs	r3, #1
 800b218:	e000      	b.n	800b21c <HAL_TIM_OC_Start_IT+0x1d0>
 800b21a:	2300      	movs	r3, #0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <HAL_TIM_OC_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b22e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a22      	ldr	r2, [pc, #136]	; (800b2c0 <HAL_TIM_OC_Start_IT+0x274>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d01d      	beq.n	800b276 <HAL_TIM_OC_Start_IT+0x22a>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b242:	d018      	beq.n	800b276 <HAL_TIM_OC_Start_IT+0x22a>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a22      	ldr	r2, [pc, #136]	; (800b2d4 <HAL_TIM_OC_Start_IT+0x288>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d013      	beq.n	800b276 <HAL_TIM_OC_Start_IT+0x22a>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a21      	ldr	r2, [pc, #132]	; (800b2d8 <HAL_TIM_OC_Start_IT+0x28c>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d00e      	beq.n	800b276 <HAL_TIM_OC_Start_IT+0x22a>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1f      	ldr	r2, [pc, #124]	; (800b2dc <HAL_TIM_OC_Start_IT+0x290>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d009      	beq.n	800b276 <HAL_TIM_OC_Start_IT+0x22a>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a17      	ldr	r2, [pc, #92]	; (800b2c4 <HAL_TIM_OC_Start_IT+0x278>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d004      	beq.n	800b276 <HAL_TIM_OC_Start_IT+0x22a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a15      	ldr	r2, [pc, #84]	; (800b2c8 <HAL_TIM_OC_Start_IT+0x27c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d115      	bne.n	800b2a2 <HAL_TIM_OC_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	689a      	ldr	r2, [r3, #8]
 800b27c:	4b18      	ldr	r3, [pc, #96]	; (800b2e0 <HAL_TIM_OC_Start_IT+0x294>)
 800b27e:	4013      	ands	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b06      	cmp	r3, #6
 800b286:	d015      	beq.n	800b2b4 <HAL_TIM_OC_Start_IT+0x268>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b28e:	d011      	beq.n	800b2b4 <HAL_TIM_OC_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f042 0201 	orr.w	r2, r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a0:	e008      	b.n	800b2b4 <HAL_TIM_OC_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f042 0201 	orr.w	r2, r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	e000      	b.n	800b2b6 <HAL_TIM_OC_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	40012c00 	.word	0x40012c00
 800b2c4:	40013400 	.word	0x40013400
 800b2c8:	40014000 	.word	0x40014000
 800b2cc:	40014400 	.word	0x40014400
 800b2d0:	40014800 	.word	0x40014800
 800b2d4:	40000400 	.word	0x40000400
 800b2d8:	40000800 	.word	0x40000800
 800b2dc:	40000c00 	.word	0x40000c00
 800b2e0:	00010007 	.word	0x00010007

0800b2e4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b0c      	cmp	r3, #12
 800b2f2:	d841      	bhi.n	800b378 <HAL_TIM_OC_Stop_IT+0x94>
 800b2f4:	a201      	add	r2, pc, #4	; (adr r2, 800b2fc <HAL_TIM_OC_Stop_IT+0x18>)
 800b2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fa:	bf00      	nop
 800b2fc:	0800b331 	.word	0x0800b331
 800b300:	0800b379 	.word	0x0800b379
 800b304:	0800b379 	.word	0x0800b379
 800b308:	0800b379 	.word	0x0800b379
 800b30c:	0800b343 	.word	0x0800b343
 800b310:	0800b379 	.word	0x0800b379
 800b314:	0800b379 	.word	0x0800b379
 800b318:	0800b379 	.word	0x0800b379
 800b31c:	0800b355 	.word	0x0800b355
 800b320:	0800b379 	.word	0x0800b379
 800b324:	0800b379 	.word	0x0800b379
 800b328:	0800b379 	.word	0x0800b379
 800b32c:	0800b367 	.word	0x0800b367
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68da      	ldr	r2, [r3, #12]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f022 0202 	bic.w	r2, r2, #2
 800b33e:	60da      	str	r2, [r3, #12]
      break;
 800b340:	e01b      	b.n	800b37a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68da      	ldr	r2, [r3, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0204 	bic.w	r2, r2, #4
 800b350:	60da      	str	r2, [r3, #12]
      break;
 800b352:	e012      	b.n	800b37a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68da      	ldr	r2, [r3, #12]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f022 0208 	bic.w	r2, r2, #8
 800b362:	60da      	str	r2, [r3, #12]
      break;
 800b364:	e009      	b.n	800b37a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f022 0210 	bic.w	r2, r2, #16
 800b374:	60da      	str	r2, [r3, #12]
      break;
 800b376:	e000      	b.n	800b37a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800b378:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2200      	movs	r2, #0
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	4618      	mov	r0, r3
 800b384:	f000 fdf2 	bl	800bf6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a3e      	ldr	r2, [pc, #248]	; (800b488 <HAL_TIM_OC_Stop_IT+0x1a4>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d013      	beq.n	800b3ba <HAL_TIM_OC_Stop_IT+0xd6>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a3d      	ldr	r2, [pc, #244]	; (800b48c <HAL_TIM_OC_Stop_IT+0x1a8>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00e      	beq.n	800b3ba <HAL_TIM_OC_Stop_IT+0xd6>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a3b      	ldr	r2, [pc, #236]	; (800b490 <HAL_TIM_OC_Stop_IT+0x1ac>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d009      	beq.n	800b3ba <HAL_TIM_OC_Stop_IT+0xd6>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a3a      	ldr	r2, [pc, #232]	; (800b494 <HAL_TIM_OC_Stop_IT+0x1b0>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d004      	beq.n	800b3ba <HAL_TIM_OC_Stop_IT+0xd6>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a38      	ldr	r2, [pc, #224]	; (800b498 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d101      	bne.n	800b3be <HAL_TIM_OC_Stop_IT+0xda>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e000      	b.n	800b3c0 <HAL_TIM_OC_Stop_IT+0xdc>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d017      	beq.n	800b3f4 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6a1a      	ldr	r2, [r3, #32]
 800b3ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10f      	bne.n	800b3f4 <HAL_TIM_OC_Stop_IT+0x110>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6a1a      	ldr	r2, [r3, #32]
 800b3da:	f240 4344 	movw	r3, #1092	; 0x444
 800b3de:	4013      	ands	r3, r2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d107      	bne.n	800b3f4 <HAL_TIM_OC_Stop_IT+0x110>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6a1a      	ldr	r2, [r3, #32]
 800b3fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3fe:	4013      	ands	r3, r2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10f      	bne.n	800b424 <HAL_TIM_OC_Stop_IT+0x140>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6a1a      	ldr	r2, [r3, #32]
 800b40a:	f240 4344 	movw	r3, #1092	; 0x444
 800b40e:	4013      	ands	r3, r2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d107      	bne.n	800b424 <HAL_TIM_OC_Stop_IT+0x140>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f022 0201 	bic.w	r2, r2, #1
 800b422:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d104      	bne.n	800b434 <HAL_TIM_OC_Stop_IT+0x150>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b432:	e023      	b.n	800b47c <HAL_TIM_OC_Stop_IT+0x198>
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	2b04      	cmp	r3, #4
 800b438:	d104      	bne.n	800b444 <HAL_TIM_OC_Stop_IT+0x160>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b442:	e01b      	b.n	800b47c <HAL_TIM_OC_Stop_IT+0x198>
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b08      	cmp	r3, #8
 800b448:	d104      	bne.n	800b454 <HAL_TIM_OC_Stop_IT+0x170>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b452:	e013      	b.n	800b47c <HAL_TIM_OC_Stop_IT+0x198>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2b0c      	cmp	r3, #12
 800b458:	d104      	bne.n	800b464 <HAL_TIM_OC_Stop_IT+0x180>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b462:	e00b      	b.n	800b47c <HAL_TIM_OC_Stop_IT+0x198>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b10      	cmp	r3, #16
 800b468:	d104      	bne.n	800b474 <HAL_TIM_OC_Stop_IT+0x190>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b472:	e003      	b.n	800b47c <HAL_TIM_OC_Stop_IT+0x198>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	40012c00 	.word	0x40012c00
 800b48c:	40013400 	.word	0x40013400
 800b490:	40014000 	.word	0x40014000
 800b494:	40014400 	.word	0x40014400
 800b498:	40014800 	.word	0x40014800

0800b49c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	f003 0302 	and.w	r3, r3, #2
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d122      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d11b      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f06f 0202 	mvn.w	r2, #2
 800b4c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	f003 0303 	and.w	r3, r3, #3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f9b6 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b4e4:	e005      	b.n	800b4f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7f5 fc4c 	bl	8000d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9b9 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	f003 0304 	and.w	r3, r3, #4
 800b502:	2b04      	cmp	r3, #4
 800b504:	d122      	bne.n	800b54c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b04      	cmp	r3, #4
 800b512:	d11b      	bne.n	800b54c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f06f 0204 	mvn.w	r2, #4
 800b51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2202      	movs	r2, #2
 800b522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f98c 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b538:	e005      	b.n	800b546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7f5 fc22 	bl	8000d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f98f 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 0308 	and.w	r3, r3, #8
 800b556:	2b08      	cmp	r3, #8
 800b558:	d122      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f003 0308 	and.w	r3, r3, #8
 800b564:	2b08      	cmp	r3, #8
 800b566:	d11b      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f06f 0208 	mvn.w	r2, #8
 800b570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2204      	movs	r2, #4
 800b576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	f003 0303 	and.w	r3, r3, #3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f962 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b58c:	e005      	b.n	800b59a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7f5 fbf8 	bl	8000d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f965 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	f003 0310 	and.w	r3, r3, #16
 800b5aa:	2b10      	cmp	r3, #16
 800b5ac:	d122      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f003 0310 	and.w	r3, r3, #16
 800b5b8:	2b10      	cmp	r3, #16
 800b5ba:	d11b      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f06f 0210 	mvn.w	r2, #16
 800b5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2208      	movs	r2, #8
 800b5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f938 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b5e0:	e005      	b.n	800b5ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7f5 fbce 	bl	8000d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f93b 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d10e      	bne.n	800b620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d107      	bne.n	800b620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f06f 0201 	mvn.w	r2, #1
 800b618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7f5 fbd4 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b62a:	2b80      	cmp	r3, #128	; 0x80
 800b62c:	d10e      	bne.n	800b64c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b638:	2b80      	cmp	r3, #128	; 0x80
 800b63a:	d107      	bne.n	800b64c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fcbf 	bl	800bfca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b65a:	d10e      	bne.n	800b67a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b666:	2b80      	cmp	r3, #128	; 0x80
 800b668:	d107      	bne.n	800b67a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fcb2 	bl	800bfde <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b684:	2b40      	cmp	r3, #64	; 0x40
 800b686:	d10e      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b692:	2b40      	cmp	r3, #64	; 0x40
 800b694:	d107      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f8e9 	bl	800b878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f003 0320 	and.w	r3, r3, #32
 800b6b0:	2b20      	cmp	r3, #32
 800b6b2:	d10e      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	d107      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f06f 0220 	mvn.w	r2, #32
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fc72 	bl	800bfb6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
	...

0800b6dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d101      	bne.n	800b6f6 <HAL_TIM_OC_ConfigChannel+0x1a>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	e064      	b.n	800b7c0 <HAL_TIM_OC_ConfigChannel+0xe4>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b14      	cmp	r3, #20
 800b702:	d857      	bhi.n	800b7b4 <HAL_TIM_OC_ConfigChannel+0xd8>
 800b704:	a201      	add	r2, pc, #4	; (adr r2, 800b70c <HAL_TIM_OC_ConfigChannel+0x30>)
 800b706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70a:	bf00      	nop
 800b70c:	0800b761 	.word	0x0800b761
 800b710:	0800b7b5 	.word	0x0800b7b5
 800b714:	0800b7b5 	.word	0x0800b7b5
 800b718:	0800b7b5 	.word	0x0800b7b5
 800b71c:	0800b76f 	.word	0x0800b76f
 800b720:	0800b7b5 	.word	0x0800b7b5
 800b724:	0800b7b5 	.word	0x0800b7b5
 800b728:	0800b7b5 	.word	0x0800b7b5
 800b72c:	0800b77d 	.word	0x0800b77d
 800b730:	0800b7b5 	.word	0x0800b7b5
 800b734:	0800b7b5 	.word	0x0800b7b5
 800b738:	0800b7b5 	.word	0x0800b7b5
 800b73c:	0800b78b 	.word	0x0800b78b
 800b740:	0800b7b5 	.word	0x0800b7b5
 800b744:	0800b7b5 	.word	0x0800b7b5
 800b748:	0800b7b5 	.word	0x0800b7b5
 800b74c:	0800b799 	.word	0x0800b799
 800b750:	0800b7b5 	.word	0x0800b7b5
 800b754:	0800b7b5 	.word	0x0800b7b5
 800b758:	0800b7b5 	.word	0x0800b7b5
 800b75c:	0800b7a7 	.word	0x0800b7a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68b9      	ldr	r1, [r7, #8]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f92a 	bl	800b9c0 <TIM_OC1_SetConfig>
      break;
 800b76c:	e023      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68b9      	ldr	r1, [r7, #8]
 800b774:	4618      	mov	r0, r3
 800b776:	f000 f9b3 	bl	800bae0 <TIM_OC2_SetConfig>
      break;
 800b77a:	e01c      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68b9      	ldr	r1, [r7, #8]
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fa36 	bl	800bbf4 <TIM_OC3_SetConfig>
      break;
 800b788:	e015      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68b9      	ldr	r1, [r7, #8]
 800b790:	4618      	mov	r0, r3
 800b792:	f000 fab7 	bl	800bd04 <TIM_OC4_SetConfig>
      break;
 800b796:	e00e      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68b9      	ldr	r1, [r7, #8]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 fb1a 	bl	800bdd8 <TIM_OC5_SetConfig>
      break;
 800b7a4:	e007      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68b9      	ldr	r1, [r7, #8]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fb77 	bl	800bea0 <TIM_OC6_SetConfig>
      break;
 800b7b2:	e000      	b.n	800b7b6 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800b7b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b0c      	cmp	r3, #12
 800b7da:	d831      	bhi.n	800b840 <HAL_TIM_ReadCapturedValue+0x78>
 800b7dc:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e2:	bf00      	nop
 800b7e4:	0800b819 	.word	0x0800b819
 800b7e8:	0800b841 	.word	0x0800b841
 800b7ec:	0800b841 	.word	0x0800b841
 800b7f0:	0800b841 	.word	0x0800b841
 800b7f4:	0800b823 	.word	0x0800b823
 800b7f8:	0800b841 	.word	0x0800b841
 800b7fc:	0800b841 	.word	0x0800b841
 800b800:	0800b841 	.word	0x0800b841
 800b804:	0800b82d 	.word	0x0800b82d
 800b808:	0800b841 	.word	0x0800b841
 800b80c:	0800b841 	.word	0x0800b841
 800b810:	0800b841 	.word	0x0800b841
 800b814:	0800b837 	.word	0x0800b837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81e:	60fb      	str	r3, [r7, #12]

      break;
 800b820:	e00f      	b.n	800b842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	60fb      	str	r3, [r7, #12]

      break;
 800b82a:	e00a      	b.n	800b842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b832:	60fb      	str	r3, [r7, #12]

      break;
 800b834:	e005      	b.n	800b842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83c:	60fb      	str	r3, [r7, #12]

      break;
 800b83e:	e000      	b.n	800b842 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b840:	bf00      	nop
  }

  return tmpreg;
 800b842:	68fb      	ldr	r3, [r7, #12]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a40      	ldr	r2, [pc, #256]	; (800b9a0 <TIM_Base_SetConfig+0x114>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d013      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8aa:	d00f      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a3d      	ldr	r2, [pc, #244]	; (800b9a4 <TIM_Base_SetConfig+0x118>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d00b      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a3c      	ldr	r2, [pc, #240]	; (800b9a8 <TIM_Base_SetConfig+0x11c>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d007      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a3b      	ldr	r2, [pc, #236]	; (800b9ac <TIM_Base_SetConfig+0x120>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d003      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a3a      	ldr	r2, [pc, #232]	; (800b9b0 <TIM_Base_SetConfig+0x124>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d108      	bne.n	800b8de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a2f      	ldr	r2, [pc, #188]	; (800b9a0 <TIM_Base_SetConfig+0x114>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d01f      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ec:	d01b      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a2c      	ldr	r2, [pc, #176]	; (800b9a4 <TIM_Base_SetConfig+0x118>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d017      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a2b      	ldr	r2, [pc, #172]	; (800b9a8 <TIM_Base_SetConfig+0x11c>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d013      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a2a      	ldr	r2, [pc, #168]	; (800b9ac <TIM_Base_SetConfig+0x120>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d00f      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a29      	ldr	r2, [pc, #164]	; (800b9b0 <TIM_Base_SetConfig+0x124>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d00b      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a28      	ldr	r2, [pc, #160]	; (800b9b4 <TIM_Base_SetConfig+0x128>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d007      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a27      	ldr	r2, [pc, #156]	; (800b9b8 <TIM_Base_SetConfig+0x12c>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d003      	beq.n	800b926 <TIM_Base_SetConfig+0x9a>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a26      	ldr	r2, [pc, #152]	; (800b9bc <TIM_Base_SetConfig+0x130>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d108      	bne.n	800b938 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b92c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	4313      	orrs	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a10      	ldr	r2, [pc, #64]	; (800b9a0 <TIM_Base_SetConfig+0x114>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d00f      	beq.n	800b984 <TIM_Base_SetConfig+0xf8>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a12      	ldr	r2, [pc, #72]	; (800b9b0 <TIM_Base_SetConfig+0x124>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d00b      	beq.n	800b984 <TIM_Base_SetConfig+0xf8>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a11      	ldr	r2, [pc, #68]	; (800b9b4 <TIM_Base_SetConfig+0x128>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d007      	beq.n	800b984 <TIM_Base_SetConfig+0xf8>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a10      	ldr	r2, [pc, #64]	; (800b9b8 <TIM_Base_SetConfig+0x12c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d003      	beq.n	800b984 <TIM_Base_SetConfig+0xf8>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a0f      	ldr	r2, [pc, #60]	; (800b9bc <TIM_Base_SetConfig+0x130>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d103      	bne.n	800b98c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	691a      	ldr	r2, [r3, #16]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	615a      	str	r2, [r3, #20]
}
 800b992:	bf00      	nop
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40012c00 	.word	0x40012c00
 800b9a4:	40000400 	.word	0x40000400
 800b9a8:	40000800 	.word	0x40000800
 800b9ac:	40000c00 	.word	0x40000c00
 800b9b0:	40013400 	.word	0x40013400
 800b9b4:	40014000 	.word	0x40014000
 800b9b8:	40014400 	.word	0x40014400
 800b9bc:	40014800 	.word	0x40014800

0800b9c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b087      	sub	sp, #28
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	f023 0201 	bic.w	r2, r3, #1
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f023 0303 	bic.w	r3, r3, #3
 800b9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f023 0302 	bic.w	r3, r3, #2
 800ba0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a2c      	ldr	r2, [pc, #176]	; (800bacc <TIM_OC1_SetConfig+0x10c>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d00f      	beq.n	800ba40 <TIM_OC1_SetConfig+0x80>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a2b      	ldr	r2, [pc, #172]	; (800bad0 <TIM_OC1_SetConfig+0x110>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d00b      	beq.n	800ba40 <TIM_OC1_SetConfig+0x80>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a2a      	ldr	r2, [pc, #168]	; (800bad4 <TIM_OC1_SetConfig+0x114>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d007      	beq.n	800ba40 <TIM_OC1_SetConfig+0x80>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a29      	ldr	r2, [pc, #164]	; (800bad8 <TIM_OC1_SetConfig+0x118>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d003      	beq.n	800ba40 <TIM_OC1_SetConfig+0x80>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a28      	ldr	r2, [pc, #160]	; (800badc <TIM_OC1_SetConfig+0x11c>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d10c      	bne.n	800ba5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f023 0308 	bic.w	r3, r3, #8
 800ba46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f023 0304 	bic.w	r3, r3, #4
 800ba58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a1b      	ldr	r2, [pc, #108]	; (800bacc <TIM_OC1_SetConfig+0x10c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d00f      	beq.n	800ba82 <TIM_OC1_SetConfig+0xc2>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a1a      	ldr	r2, [pc, #104]	; (800bad0 <TIM_OC1_SetConfig+0x110>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d00b      	beq.n	800ba82 <TIM_OC1_SetConfig+0xc2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a19      	ldr	r2, [pc, #100]	; (800bad4 <TIM_OC1_SetConfig+0x114>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d007      	beq.n	800ba82 <TIM_OC1_SetConfig+0xc2>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a18      	ldr	r2, [pc, #96]	; (800bad8 <TIM_OC1_SetConfig+0x118>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d003      	beq.n	800ba82 <TIM_OC1_SetConfig+0xc2>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a17      	ldr	r2, [pc, #92]	; (800badc <TIM_OC1_SetConfig+0x11c>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d111      	bne.n	800baa6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	621a      	str	r2, [r3, #32]
}
 800bac0:	bf00      	nop
 800bac2:	371c      	adds	r7, #28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	40012c00 	.word	0x40012c00
 800bad0:	40013400 	.word	0x40013400
 800bad4:	40014000 	.word	0x40014000
 800bad8:	40014400 	.word	0x40014400
 800badc:	40014800 	.word	0x40014800

0800bae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	f023 0210 	bic.w	r2, r3, #16
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	021b      	lsls	r3, r3, #8
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f023 0320 	bic.w	r3, r3, #32
 800bb2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a28      	ldr	r2, [pc, #160]	; (800bbe0 <TIM_OC2_SetConfig+0x100>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d003      	beq.n	800bb4c <TIM_OC2_SetConfig+0x6c>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a27      	ldr	r2, [pc, #156]	; (800bbe4 <TIM_OC2_SetConfig+0x104>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d10d      	bne.n	800bb68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	011b      	lsls	r3, r3, #4
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	; (800bbe0 <TIM_OC2_SetConfig+0x100>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00f      	beq.n	800bb90 <TIM_OC2_SetConfig+0xb0>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a1c      	ldr	r2, [pc, #112]	; (800bbe4 <TIM_OC2_SetConfig+0x104>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d00b      	beq.n	800bb90 <TIM_OC2_SetConfig+0xb0>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a1b      	ldr	r2, [pc, #108]	; (800bbe8 <TIM_OC2_SetConfig+0x108>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d007      	beq.n	800bb90 <TIM_OC2_SetConfig+0xb0>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a1a      	ldr	r2, [pc, #104]	; (800bbec <TIM_OC2_SetConfig+0x10c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d003      	beq.n	800bb90 <TIM_OC2_SetConfig+0xb0>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a19      	ldr	r2, [pc, #100]	; (800bbf0 <TIM_OC2_SetConfig+0x110>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d113      	bne.n	800bbb8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	621a      	str	r2, [r3, #32]
}
 800bbd2:	bf00      	nop
 800bbd4:	371c      	adds	r7, #28
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	40012c00 	.word	0x40012c00
 800bbe4:	40013400 	.word	0x40013400
 800bbe8:	40014000 	.word	0x40014000
 800bbec:	40014400 	.word	0x40014400
 800bbf0:	40014800 	.word	0x40014800

0800bbf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f023 0303 	bic.w	r3, r3, #3
 800bc2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	021b      	lsls	r3, r3, #8
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a27      	ldr	r2, [pc, #156]	; (800bcf0 <TIM_OC3_SetConfig+0xfc>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d003      	beq.n	800bc5e <TIM_OC3_SetConfig+0x6a>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a26      	ldr	r2, [pc, #152]	; (800bcf4 <TIM_OC3_SetConfig+0x100>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d10d      	bne.n	800bc7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	021b      	lsls	r3, r3, #8
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a1c      	ldr	r2, [pc, #112]	; (800bcf0 <TIM_OC3_SetConfig+0xfc>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d00f      	beq.n	800bca2 <TIM_OC3_SetConfig+0xae>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a1b      	ldr	r2, [pc, #108]	; (800bcf4 <TIM_OC3_SetConfig+0x100>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d00b      	beq.n	800bca2 <TIM_OC3_SetConfig+0xae>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a1a      	ldr	r2, [pc, #104]	; (800bcf8 <TIM_OC3_SetConfig+0x104>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d007      	beq.n	800bca2 <TIM_OC3_SetConfig+0xae>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a19      	ldr	r2, [pc, #100]	; (800bcfc <TIM_OC3_SetConfig+0x108>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d003      	beq.n	800bca2 <TIM_OC3_SetConfig+0xae>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a18      	ldr	r2, [pc, #96]	; (800bd00 <TIM_OC3_SetConfig+0x10c>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d113      	bne.n	800bcca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	011b      	lsls	r3, r3, #4
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	011b      	lsls	r3, r3, #4
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	693a      	ldr	r2, [r7, #16]
 800bcce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	685a      	ldr	r2, [r3, #4]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	621a      	str	r2, [r3, #32]
}
 800bce4:	bf00      	nop
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	40012c00 	.word	0x40012c00
 800bcf4:	40013400 	.word	0x40013400
 800bcf8:	40014000 	.word	0x40014000
 800bcfc:	40014400 	.word	0x40014400
 800bd00:	40014800 	.word	0x40014800

0800bd04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	021b      	lsls	r3, r3, #8
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	031b      	lsls	r3, r3, #12
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a18      	ldr	r2, [pc, #96]	; (800bdc4 <TIM_OC4_SetConfig+0xc0>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d00f      	beq.n	800bd88 <TIM_OC4_SetConfig+0x84>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a17      	ldr	r2, [pc, #92]	; (800bdc8 <TIM_OC4_SetConfig+0xc4>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d00b      	beq.n	800bd88 <TIM_OC4_SetConfig+0x84>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a16      	ldr	r2, [pc, #88]	; (800bdcc <TIM_OC4_SetConfig+0xc8>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d007      	beq.n	800bd88 <TIM_OC4_SetConfig+0x84>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a15      	ldr	r2, [pc, #84]	; (800bdd0 <TIM_OC4_SetConfig+0xcc>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d003      	beq.n	800bd88 <TIM_OC4_SetConfig+0x84>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a14      	ldr	r2, [pc, #80]	; (800bdd4 <TIM_OC4_SetConfig+0xd0>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d109      	bne.n	800bd9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	019b      	lsls	r3, r3, #6
 800bd96:	697a      	ldr	r2, [r7, #20]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	697a      	ldr	r2, [r7, #20]
 800bda0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	621a      	str	r2, [r3, #32]
}
 800bdb6:	bf00      	nop
 800bdb8:	371c      	adds	r7, #28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	40012c00 	.word	0x40012c00
 800bdc8:	40013400 	.word	0x40013400
 800bdcc:	40014000 	.word	0x40014000
 800bdd0:	40014400 	.word	0x40014400
 800bdd4:	40014800 	.word	0x40014800

0800bdd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	4313      	orrs	r3, r2
 800be14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	041b      	lsls	r3, r3, #16
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4313      	orrs	r3, r2
 800be28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a17      	ldr	r2, [pc, #92]	; (800be8c <TIM_OC5_SetConfig+0xb4>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d00f      	beq.n	800be52 <TIM_OC5_SetConfig+0x7a>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a16      	ldr	r2, [pc, #88]	; (800be90 <TIM_OC5_SetConfig+0xb8>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d00b      	beq.n	800be52 <TIM_OC5_SetConfig+0x7a>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a15      	ldr	r2, [pc, #84]	; (800be94 <TIM_OC5_SetConfig+0xbc>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d007      	beq.n	800be52 <TIM_OC5_SetConfig+0x7a>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a14      	ldr	r2, [pc, #80]	; (800be98 <TIM_OC5_SetConfig+0xc0>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d003      	beq.n	800be52 <TIM_OC5_SetConfig+0x7a>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a13      	ldr	r2, [pc, #76]	; (800be9c <TIM_OC5_SetConfig+0xc4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d109      	bne.n	800be66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	021b      	lsls	r3, r3, #8
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	4313      	orrs	r3, r2
 800be64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	685a      	ldr	r2, [r3, #4]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	621a      	str	r2, [r3, #32]
}
 800be80:	bf00      	nop
 800be82:	371c      	adds	r7, #28
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	40012c00 	.word	0x40012c00
 800be90:	40013400 	.word	0x40013400
 800be94:	40014000 	.word	0x40014000
 800be98:	40014400 	.word	0x40014400
 800be9c:	40014800 	.word	0x40014800

0800bea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	4313      	orrs	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	051b      	lsls	r3, r3, #20
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a18      	ldr	r2, [pc, #96]	; (800bf58 <TIM_OC6_SetConfig+0xb8>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d00f      	beq.n	800bf1c <TIM_OC6_SetConfig+0x7c>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a17      	ldr	r2, [pc, #92]	; (800bf5c <TIM_OC6_SetConfig+0xbc>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d00b      	beq.n	800bf1c <TIM_OC6_SetConfig+0x7c>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a16      	ldr	r2, [pc, #88]	; (800bf60 <TIM_OC6_SetConfig+0xc0>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d007      	beq.n	800bf1c <TIM_OC6_SetConfig+0x7c>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a15      	ldr	r2, [pc, #84]	; (800bf64 <TIM_OC6_SetConfig+0xc4>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d003      	beq.n	800bf1c <TIM_OC6_SetConfig+0x7c>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a14      	ldr	r2, [pc, #80]	; (800bf68 <TIM_OC6_SetConfig+0xc8>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d109      	bne.n	800bf30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	695b      	ldr	r3, [r3, #20]
 800bf28:	029b      	lsls	r3, r3, #10
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	621a      	str	r2, [r3, #32]
}
 800bf4a:	bf00      	nop
 800bf4c:	371c      	adds	r7, #28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	40012c00 	.word	0x40012c00
 800bf5c:	40013400 	.word	0x40013400
 800bf60:	40014000 	.word	0x40014000
 800bf64:	40014400 	.word	0x40014400
 800bf68:	40014800 	.word	0x40014800

0800bf6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 031f 	and.w	r3, r3, #31
 800bf7e:	2201      	movs	r2, #1
 800bf80:	fa02 f303 	lsl.w	r3, r2, r3
 800bf84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6a1a      	ldr	r2, [r3, #32]
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	43db      	mvns	r3, r3
 800bf8e:	401a      	ands	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6a1a      	ldr	r2, [r3, #32]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	f003 031f 	and.w	r3, r3, #31
 800bf9e:	6879      	ldr	r1, [r7, #4]
 800bfa0:	fa01 f303 	lsl.w	r3, r1, r3
 800bfa4:	431a      	orrs	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	621a      	str	r2, [r3, #32]
}
 800bfaa:	bf00      	nop
 800bfac:	371c      	adds	r7, #28
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b083      	sub	sp, #12
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfbe:	bf00      	nop
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfca:	b480      	push	{r7}
 800bfcc:	b083      	sub	sp, #12
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfe6:	bf00      	nop
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d101      	bne.n	800c004 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e040      	b.n	800c086 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d106      	bne.n	800c01a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7f6 fd33 	bl	8002a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2224      	movs	r2, #36	; 0x24
 800c01e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f022 0201 	bic.w	r2, r2, #1
 800c02e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f925 	bl	800c280 <UART_SetConfig>
 800c036:	4603      	mov	r3, r0
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d101      	bne.n	800c040 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e022      	b.n	800c086 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fba3 	bl	800c794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c05c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c06c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f042 0201 	orr.w	r2, r2, #1
 800c07c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fc2a 	bl	800c8d8 <UART_CheckIdleState>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b08a      	sub	sp, #40	; 0x28
 800c092:	af02      	add	r7, sp, #8
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	603b      	str	r3, [r7, #0]
 800c09a:	4613      	mov	r3, r2
 800c09c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0a2:	2b20      	cmp	r3, #32
 800c0a4:	f040 8082 	bne.w	800c1ac <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <HAL_UART_Transmit+0x26>
 800c0ae:	88fb      	ldrh	r3, [r7, #6]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e07a      	b.n	800c1ae <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_UART_Transmit+0x38>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	e073      	b.n	800c1ae <HAL_UART_Transmit+0x120>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2221      	movs	r2, #33	; 0x21
 800c0da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0dc:	f7f9 fea2 	bl	8005e24 <HAL_GetTick>
 800c0e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	88fa      	ldrh	r2, [r7, #6]
 800c0e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	88fa      	ldrh	r2, [r7, #6]
 800c0ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fa:	d108      	bne.n	800c10e <HAL_UART_Transmit+0x80>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d104      	bne.n	800c10e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	61bb      	str	r3, [r7, #24]
 800c10c:	e003      	b.n	800c116 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c112:	2300      	movs	r3, #0
 800c114:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c11e:	e02d      	b.n	800c17c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2200      	movs	r2, #0
 800c128:	2180      	movs	r1, #128	; 0x80
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 fc1d 	bl	800c96a <UART_WaitOnFlagUntilTimeout>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c136:	2303      	movs	r3, #3
 800c138:	e039      	b.n	800c1ae <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10b      	bne.n	800c158 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	881a      	ldrh	r2, [r3, #0]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c14c:	b292      	uxth	r2, r2
 800c14e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	3302      	adds	r3, #2
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	e008      	b.n	800c16a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	781a      	ldrb	r2, [r3, #0]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	b292      	uxth	r2, r2
 800c162:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	3301      	adds	r3, #1
 800c168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c170:	b29b      	uxth	r3, r3
 800c172:	3b01      	subs	r3, #1
 800c174:	b29a      	uxth	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c182:	b29b      	uxth	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1cb      	bne.n	800c120 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2200      	movs	r2, #0
 800c190:	2140      	movs	r1, #64	; 0x40
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f000 fbe9 	bl	800c96a <UART_WaitOnFlagUntilTimeout>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e005      	b.n	800c1ae <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2220      	movs	r2, #32
 800c1a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e000      	b.n	800c1ae <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800c1ac:	2302      	movs	r3, #2
  }
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3720      	adds	r7, #32
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ca:	2b20      	cmp	r3, #32
 800c1cc:	d131      	bne.n	800c232 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <HAL_UART_Receive_DMA+0x22>
 800c1d4:	88fb      	ldrh	r3, [r7, #6]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e02a      	b.n	800c234 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d101      	bne.n	800c1ec <HAL_UART_Receive_DMA+0x34>
 800c1e8:	2302      	movs	r3, #2
 800c1ea:	e023      	b.n	800c234 <HAL_UART_Receive_DMA+0x7c>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a0f      	ldr	r2, [pc, #60]	; (800c23c <HAL_UART_Receive_DMA+0x84>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d00e      	beq.n	800c222 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d007      	beq.n	800c222 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c220:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800c222:	88fb      	ldrh	r3, [r7, #6]
 800c224:	461a      	mov	r2, r3
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 fc1b 	bl	800ca64 <UART_Start_Receive_DMA>
 800c22e:	4603      	mov	r3, r0
 800c230:	e000      	b.n	800c234 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800c232:	2302      	movs	r3, #2
  }
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	40008000 	.word	0x40008000

0800c240 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	460b      	mov	r3, r1
 800c272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c280:	b5b0      	push	{r4, r5, r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689a      	ldr	r2, [r3, #8]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	431a      	orrs	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	431a      	orrs	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	4bad      	ldr	r3, [pc, #692]	; (800c560 <UART_SetConfig+0x2e0>)
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	6812      	ldr	r2, [r2, #0]
 800c2b2:	69f9      	ldr	r1, [r7, #28]
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4aa2      	ldr	r2, [pc, #648]	; (800c564 <UART_SetConfig+0x2e4>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d004      	beq.n	800c2e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a1b      	ldr	r3, [r3, #32]
 800c2e2:	69fa      	ldr	r2, [r7, #28]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	69fa      	ldr	r2, [r7, #28]
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a99      	ldr	r2, [pc, #612]	; (800c568 <UART_SetConfig+0x2e8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d121      	bne.n	800c34a <UART_SetConfig+0xca>
 800c306:	4b99      	ldr	r3, [pc, #612]	; (800c56c <UART_SetConfig+0x2ec>)
 800c308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c30c:	f003 0303 	and.w	r3, r3, #3
 800c310:	2b03      	cmp	r3, #3
 800c312:	d817      	bhi.n	800c344 <UART_SetConfig+0xc4>
 800c314:	a201      	add	r2, pc, #4	; (adr r2, 800c31c <UART_SetConfig+0x9c>)
 800c316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31a:	bf00      	nop
 800c31c:	0800c32d 	.word	0x0800c32d
 800c320:	0800c339 	.word	0x0800c339
 800c324:	0800c333 	.word	0x0800c333
 800c328:	0800c33f 	.word	0x0800c33f
 800c32c:	2301      	movs	r3, #1
 800c32e:	76fb      	strb	r3, [r7, #27]
 800c330:	e0e7      	b.n	800c502 <UART_SetConfig+0x282>
 800c332:	2302      	movs	r3, #2
 800c334:	76fb      	strb	r3, [r7, #27]
 800c336:	e0e4      	b.n	800c502 <UART_SetConfig+0x282>
 800c338:	2304      	movs	r3, #4
 800c33a:	76fb      	strb	r3, [r7, #27]
 800c33c:	e0e1      	b.n	800c502 <UART_SetConfig+0x282>
 800c33e:	2308      	movs	r3, #8
 800c340:	76fb      	strb	r3, [r7, #27]
 800c342:	e0de      	b.n	800c502 <UART_SetConfig+0x282>
 800c344:	2310      	movs	r3, #16
 800c346:	76fb      	strb	r3, [r7, #27]
 800c348:	e0db      	b.n	800c502 <UART_SetConfig+0x282>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a88      	ldr	r2, [pc, #544]	; (800c570 <UART_SetConfig+0x2f0>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d132      	bne.n	800c3ba <UART_SetConfig+0x13a>
 800c354:	4b85      	ldr	r3, [pc, #532]	; (800c56c <UART_SetConfig+0x2ec>)
 800c356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c35a:	f003 030c 	and.w	r3, r3, #12
 800c35e:	2b0c      	cmp	r3, #12
 800c360:	d828      	bhi.n	800c3b4 <UART_SetConfig+0x134>
 800c362:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <UART_SetConfig+0xe8>)
 800c364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c368:	0800c39d 	.word	0x0800c39d
 800c36c:	0800c3b5 	.word	0x0800c3b5
 800c370:	0800c3b5 	.word	0x0800c3b5
 800c374:	0800c3b5 	.word	0x0800c3b5
 800c378:	0800c3a9 	.word	0x0800c3a9
 800c37c:	0800c3b5 	.word	0x0800c3b5
 800c380:	0800c3b5 	.word	0x0800c3b5
 800c384:	0800c3b5 	.word	0x0800c3b5
 800c388:	0800c3a3 	.word	0x0800c3a3
 800c38c:	0800c3b5 	.word	0x0800c3b5
 800c390:	0800c3b5 	.word	0x0800c3b5
 800c394:	0800c3b5 	.word	0x0800c3b5
 800c398:	0800c3af 	.word	0x0800c3af
 800c39c:	2300      	movs	r3, #0
 800c39e:	76fb      	strb	r3, [r7, #27]
 800c3a0:	e0af      	b.n	800c502 <UART_SetConfig+0x282>
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	76fb      	strb	r3, [r7, #27]
 800c3a6:	e0ac      	b.n	800c502 <UART_SetConfig+0x282>
 800c3a8:	2304      	movs	r3, #4
 800c3aa:	76fb      	strb	r3, [r7, #27]
 800c3ac:	e0a9      	b.n	800c502 <UART_SetConfig+0x282>
 800c3ae:	2308      	movs	r3, #8
 800c3b0:	76fb      	strb	r3, [r7, #27]
 800c3b2:	e0a6      	b.n	800c502 <UART_SetConfig+0x282>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	76fb      	strb	r3, [r7, #27]
 800c3b8:	e0a3      	b.n	800c502 <UART_SetConfig+0x282>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a6d      	ldr	r2, [pc, #436]	; (800c574 <UART_SetConfig+0x2f4>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d120      	bne.n	800c406 <UART_SetConfig+0x186>
 800c3c4:	4b69      	ldr	r3, [pc, #420]	; (800c56c <UART_SetConfig+0x2ec>)
 800c3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c3ce:	2b30      	cmp	r3, #48	; 0x30
 800c3d0:	d013      	beq.n	800c3fa <UART_SetConfig+0x17a>
 800c3d2:	2b30      	cmp	r3, #48	; 0x30
 800c3d4:	d814      	bhi.n	800c400 <UART_SetConfig+0x180>
 800c3d6:	2b20      	cmp	r3, #32
 800c3d8:	d009      	beq.n	800c3ee <UART_SetConfig+0x16e>
 800c3da:	2b20      	cmp	r3, #32
 800c3dc:	d810      	bhi.n	800c400 <UART_SetConfig+0x180>
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <UART_SetConfig+0x168>
 800c3e2:	2b10      	cmp	r3, #16
 800c3e4:	d006      	beq.n	800c3f4 <UART_SetConfig+0x174>
 800c3e6:	e00b      	b.n	800c400 <UART_SetConfig+0x180>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	76fb      	strb	r3, [r7, #27]
 800c3ec:	e089      	b.n	800c502 <UART_SetConfig+0x282>
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	76fb      	strb	r3, [r7, #27]
 800c3f2:	e086      	b.n	800c502 <UART_SetConfig+0x282>
 800c3f4:	2304      	movs	r3, #4
 800c3f6:	76fb      	strb	r3, [r7, #27]
 800c3f8:	e083      	b.n	800c502 <UART_SetConfig+0x282>
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	76fb      	strb	r3, [r7, #27]
 800c3fe:	e080      	b.n	800c502 <UART_SetConfig+0x282>
 800c400:	2310      	movs	r3, #16
 800c402:	76fb      	strb	r3, [r7, #27]
 800c404:	e07d      	b.n	800c502 <UART_SetConfig+0x282>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a5b      	ldr	r2, [pc, #364]	; (800c578 <UART_SetConfig+0x2f8>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d120      	bne.n	800c452 <UART_SetConfig+0x1d2>
 800c410:	4b56      	ldr	r3, [pc, #344]	; (800c56c <UART_SetConfig+0x2ec>)
 800c412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c416:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c41a:	2bc0      	cmp	r3, #192	; 0xc0
 800c41c:	d013      	beq.n	800c446 <UART_SetConfig+0x1c6>
 800c41e:	2bc0      	cmp	r3, #192	; 0xc0
 800c420:	d814      	bhi.n	800c44c <UART_SetConfig+0x1cc>
 800c422:	2b80      	cmp	r3, #128	; 0x80
 800c424:	d009      	beq.n	800c43a <UART_SetConfig+0x1ba>
 800c426:	2b80      	cmp	r3, #128	; 0x80
 800c428:	d810      	bhi.n	800c44c <UART_SetConfig+0x1cc>
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d002      	beq.n	800c434 <UART_SetConfig+0x1b4>
 800c42e:	2b40      	cmp	r3, #64	; 0x40
 800c430:	d006      	beq.n	800c440 <UART_SetConfig+0x1c0>
 800c432:	e00b      	b.n	800c44c <UART_SetConfig+0x1cc>
 800c434:	2300      	movs	r3, #0
 800c436:	76fb      	strb	r3, [r7, #27]
 800c438:	e063      	b.n	800c502 <UART_SetConfig+0x282>
 800c43a:	2302      	movs	r3, #2
 800c43c:	76fb      	strb	r3, [r7, #27]
 800c43e:	e060      	b.n	800c502 <UART_SetConfig+0x282>
 800c440:	2304      	movs	r3, #4
 800c442:	76fb      	strb	r3, [r7, #27]
 800c444:	e05d      	b.n	800c502 <UART_SetConfig+0x282>
 800c446:	2308      	movs	r3, #8
 800c448:	76fb      	strb	r3, [r7, #27]
 800c44a:	e05a      	b.n	800c502 <UART_SetConfig+0x282>
 800c44c:	2310      	movs	r3, #16
 800c44e:	76fb      	strb	r3, [r7, #27]
 800c450:	e057      	b.n	800c502 <UART_SetConfig+0x282>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a49      	ldr	r2, [pc, #292]	; (800c57c <UART_SetConfig+0x2fc>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d125      	bne.n	800c4a8 <UART_SetConfig+0x228>
 800c45c:	4b43      	ldr	r3, [pc, #268]	; (800c56c <UART_SetConfig+0x2ec>)
 800c45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c46a:	d017      	beq.n	800c49c <UART_SetConfig+0x21c>
 800c46c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c470:	d817      	bhi.n	800c4a2 <UART_SetConfig+0x222>
 800c472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c476:	d00b      	beq.n	800c490 <UART_SetConfig+0x210>
 800c478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c47c:	d811      	bhi.n	800c4a2 <UART_SetConfig+0x222>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <UART_SetConfig+0x20a>
 800c482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c486:	d006      	beq.n	800c496 <UART_SetConfig+0x216>
 800c488:	e00b      	b.n	800c4a2 <UART_SetConfig+0x222>
 800c48a:	2300      	movs	r3, #0
 800c48c:	76fb      	strb	r3, [r7, #27]
 800c48e:	e038      	b.n	800c502 <UART_SetConfig+0x282>
 800c490:	2302      	movs	r3, #2
 800c492:	76fb      	strb	r3, [r7, #27]
 800c494:	e035      	b.n	800c502 <UART_SetConfig+0x282>
 800c496:	2304      	movs	r3, #4
 800c498:	76fb      	strb	r3, [r7, #27]
 800c49a:	e032      	b.n	800c502 <UART_SetConfig+0x282>
 800c49c:	2308      	movs	r3, #8
 800c49e:	76fb      	strb	r3, [r7, #27]
 800c4a0:	e02f      	b.n	800c502 <UART_SetConfig+0x282>
 800c4a2:	2310      	movs	r3, #16
 800c4a4:	76fb      	strb	r3, [r7, #27]
 800c4a6:	e02c      	b.n	800c502 <UART_SetConfig+0x282>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a2d      	ldr	r2, [pc, #180]	; (800c564 <UART_SetConfig+0x2e4>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d125      	bne.n	800c4fe <UART_SetConfig+0x27e>
 800c4b2:	4b2e      	ldr	r3, [pc, #184]	; (800c56c <UART_SetConfig+0x2ec>)
 800c4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c4bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4c0:	d017      	beq.n	800c4f2 <UART_SetConfig+0x272>
 800c4c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4c6:	d817      	bhi.n	800c4f8 <UART_SetConfig+0x278>
 800c4c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4cc:	d00b      	beq.n	800c4e6 <UART_SetConfig+0x266>
 800c4ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4d2:	d811      	bhi.n	800c4f8 <UART_SetConfig+0x278>
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d003      	beq.n	800c4e0 <UART_SetConfig+0x260>
 800c4d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4dc:	d006      	beq.n	800c4ec <UART_SetConfig+0x26c>
 800c4de:	e00b      	b.n	800c4f8 <UART_SetConfig+0x278>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	76fb      	strb	r3, [r7, #27]
 800c4e4:	e00d      	b.n	800c502 <UART_SetConfig+0x282>
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	76fb      	strb	r3, [r7, #27]
 800c4ea:	e00a      	b.n	800c502 <UART_SetConfig+0x282>
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	76fb      	strb	r3, [r7, #27]
 800c4f0:	e007      	b.n	800c502 <UART_SetConfig+0x282>
 800c4f2:	2308      	movs	r3, #8
 800c4f4:	76fb      	strb	r3, [r7, #27]
 800c4f6:	e004      	b.n	800c502 <UART_SetConfig+0x282>
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	76fb      	strb	r3, [r7, #27]
 800c4fc:	e001      	b.n	800c502 <UART_SetConfig+0x282>
 800c4fe:	2310      	movs	r3, #16
 800c500:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a17      	ldr	r2, [pc, #92]	; (800c564 <UART_SetConfig+0x2e4>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	f040 8087 	bne.w	800c61c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c50e:	7efb      	ldrb	r3, [r7, #27]
 800c510:	2b08      	cmp	r3, #8
 800c512:	d837      	bhi.n	800c584 <UART_SetConfig+0x304>
 800c514:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <UART_SetConfig+0x29c>)
 800c516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51a:	bf00      	nop
 800c51c:	0800c541 	.word	0x0800c541
 800c520:	0800c585 	.word	0x0800c585
 800c524:	0800c549 	.word	0x0800c549
 800c528:	0800c585 	.word	0x0800c585
 800c52c:	0800c54f 	.word	0x0800c54f
 800c530:	0800c585 	.word	0x0800c585
 800c534:	0800c585 	.word	0x0800c585
 800c538:	0800c585 	.word	0x0800c585
 800c53c:	0800c557 	.word	0x0800c557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c540:	f7fd f9ee 	bl	8009920 <HAL_RCC_GetPCLK1Freq>
 800c544:	6178      	str	r0, [r7, #20]
        break;
 800c546:	e022      	b.n	800c58e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c548:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <UART_SetConfig+0x300>)
 800c54a:	617b      	str	r3, [r7, #20]
        break;
 800c54c:	e01f      	b.n	800c58e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c54e:	f7fd f94f 	bl	80097f0 <HAL_RCC_GetSysClockFreq>
 800c552:	6178      	str	r0, [r7, #20]
        break;
 800c554:	e01b      	b.n	800c58e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c55a:	617b      	str	r3, [r7, #20]
        break;
 800c55c:	e017      	b.n	800c58e <UART_SetConfig+0x30e>
 800c55e:	bf00      	nop
 800c560:	efff69f3 	.word	0xefff69f3
 800c564:	40008000 	.word	0x40008000
 800c568:	40013800 	.word	0x40013800
 800c56c:	40021000 	.word	0x40021000
 800c570:	40004400 	.word	0x40004400
 800c574:	40004800 	.word	0x40004800
 800c578:	40004c00 	.word	0x40004c00
 800c57c:	40005000 	.word	0x40005000
 800c580:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	76bb      	strb	r3, [r7, #26]
        break;
 800c58c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 80f1 	beq.w	800c778 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	4613      	mov	r3, r2
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d305      	bcc.n	800c5b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d902      	bls.n	800c5b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	76bb      	strb	r3, [r7, #26]
 800c5b6:	e0df      	b.n	800c778 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f04f 0100 	mov.w	r1, #0
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	020b      	lsls	r3, r1, #8
 800c5ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5ce:	0202      	lsls	r2, r0, #8
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	6849      	ldr	r1, [r1, #4]
 800c5d4:	0849      	lsrs	r1, r1, #1
 800c5d6:	4608      	mov	r0, r1
 800c5d8:	f04f 0100 	mov.w	r1, #0
 800c5dc:	1814      	adds	r4, r2, r0
 800c5de:	eb43 0501 	adc.w	r5, r3, r1
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f04f 0300 	mov.w	r3, #0
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	f7f3 fe3e 	bl	8000270 <__aeabi_uldivmod>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c602:	d308      	bcc.n	800c616 <UART_SetConfig+0x396>
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c60a:	d204      	bcs.n	800c616 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	60da      	str	r2, [r3, #12]
 800c614:	e0b0      	b.n	800c778 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	76bb      	strb	r3, [r7, #26]
 800c61a:	e0ad      	b.n	800c778 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	69db      	ldr	r3, [r3, #28]
 800c620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c624:	d15c      	bne.n	800c6e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800c626:	7efb      	ldrb	r3, [r7, #27]
 800c628:	2b08      	cmp	r3, #8
 800c62a:	d828      	bhi.n	800c67e <UART_SetConfig+0x3fe>
 800c62c:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <UART_SetConfig+0x3b4>)
 800c62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c632:	bf00      	nop
 800c634:	0800c659 	.word	0x0800c659
 800c638:	0800c661 	.word	0x0800c661
 800c63c:	0800c669 	.word	0x0800c669
 800c640:	0800c67f 	.word	0x0800c67f
 800c644:	0800c66f 	.word	0x0800c66f
 800c648:	0800c67f 	.word	0x0800c67f
 800c64c:	0800c67f 	.word	0x0800c67f
 800c650:	0800c67f 	.word	0x0800c67f
 800c654:	0800c677 	.word	0x0800c677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c658:	f7fd f962 	bl	8009920 <HAL_RCC_GetPCLK1Freq>
 800c65c:	6178      	str	r0, [r7, #20]
        break;
 800c65e:	e013      	b.n	800c688 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c660:	f7fd f974 	bl	800994c <HAL_RCC_GetPCLK2Freq>
 800c664:	6178      	str	r0, [r7, #20]
        break;
 800c666:	e00f      	b.n	800c688 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c668:	4b49      	ldr	r3, [pc, #292]	; (800c790 <UART_SetConfig+0x510>)
 800c66a:	617b      	str	r3, [r7, #20]
        break;
 800c66c:	e00c      	b.n	800c688 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c66e:	f7fd f8bf 	bl	80097f0 <HAL_RCC_GetSysClockFreq>
 800c672:	6178      	str	r0, [r7, #20]
        break;
 800c674:	e008      	b.n	800c688 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c67a:	617b      	str	r3, [r7, #20]
        break;
 800c67c:	e004      	b.n	800c688 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	76bb      	strb	r3, [r7, #26]
        break;
 800c686:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d074      	beq.n	800c778 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	005a      	lsls	r2, r3, #1
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	085b      	lsrs	r3, r3, #1
 800c698:	441a      	add	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2b0f      	cmp	r3, #15
 800c6aa:	d916      	bls.n	800c6da <UART_SetConfig+0x45a>
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6b2:	d212      	bcs.n	800c6da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	f023 030f 	bic.w	r3, r3, #15
 800c6bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	085b      	lsrs	r3, r3, #1
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	89fb      	ldrh	r3, [r7, #14]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	89fa      	ldrh	r2, [r7, #14]
 800c6d6:	60da      	str	r2, [r3, #12]
 800c6d8:	e04e      	b.n	800c778 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	76bb      	strb	r3, [r7, #26]
 800c6de:	e04b      	b.n	800c778 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6e0:	7efb      	ldrb	r3, [r7, #27]
 800c6e2:	2b08      	cmp	r3, #8
 800c6e4:	d827      	bhi.n	800c736 <UART_SetConfig+0x4b6>
 800c6e6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <UART_SetConfig+0x46c>)
 800c6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ec:	0800c711 	.word	0x0800c711
 800c6f0:	0800c719 	.word	0x0800c719
 800c6f4:	0800c721 	.word	0x0800c721
 800c6f8:	0800c737 	.word	0x0800c737
 800c6fc:	0800c727 	.word	0x0800c727
 800c700:	0800c737 	.word	0x0800c737
 800c704:	0800c737 	.word	0x0800c737
 800c708:	0800c737 	.word	0x0800c737
 800c70c:	0800c72f 	.word	0x0800c72f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c710:	f7fd f906 	bl	8009920 <HAL_RCC_GetPCLK1Freq>
 800c714:	6178      	str	r0, [r7, #20]
        break;
 800c716:	e013      	b.n	800c740 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c718:	f7fd f918 	bl	800994c <HAL_RCC_GetPCLK2Freq>
 800c71c:	6178      	str	r0, [r7, #20]
        break;
 800c71e:	e00f      	b.n	800c740 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c720:	4b1b      	ldr	r3, [pc, #108]	; (800c790 <UART_SetConfig+0x510>)
 800c722:	617b      	str	r3, [r7, #20]
        break;
 800c724:	e00c      	b.n	800c740 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c726:	f7fd f863 	bl	80097f0 <HAL_RCC_GetSysClockFreq>
 800c72a:	6178      	str	r0, [r7, #20]
        break;
 800c72c:	e008      	b.n	800c740 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c72e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c732:	617b      	str	r3, [r7, #20]
        break;
 800c734:	e004      	b.n	800c740 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800c736:	2300      	movs	r3, #0
 800c738:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	76bb      	strb	r3, [r7, #26]
        break;
 800c73e:	bf00      	nop
    }

    if (pclk != 0U)
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d018      	beq.n	800c778 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	085a      	lsrs	r2, r3, #1
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	441a      	add	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	fbb2 f3f3 	udiv	r3, r2, r3
 800c758:	b29b      	uxth	r3, r3
 800c75a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	2b0f      	cmp	r3, #15
 800c760:	d908      	bls.n	800c774 <UART_SetConfig+0x4f4>
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c768:	d204      	bcs.n	800c774 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	60da      	str	r2, [r3, #12]
 800c772:	e001      	b.n	800c778 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c784:	7ebb      	ldrb	r3, [r7, #26]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3720      	adds	r7, #32
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bdb0      	pop	{r4, r5, r7, pc}
 800c78e:	bf00      	nop
 800c790:	00f42400 	.word	0x00f42400

0800c794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	f003 0301 	and.w	r3, r3, #1
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00a      	beq.n	800c7be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00a      	beq.n	800c7e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e4:	f003 0304 	and.w	r3, r3, #4
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00a      	beq.n	800c802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	430a      	orrs	r2, r1
 800c800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c806:	f003 0308 	and.w	r3, r3, #8
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00a      	beq.n	800c824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	430a      	orrs	r2, r1
 800c822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c828:	f003 0310 	and.w	r3, r3, #16
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00a      	beq.n	800c846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	430a      	orrs	r2, r1
 800c844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84a:	f003 0320 	and.w	r3, r3, #32
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00a      	beq.n	800c868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	430a      	orrs	r2, r1
 800c866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01a      	beq.n	800c8aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c892:	d10a      	bne.n	800c8aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00a      	beq.n	800c8cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	430a      	orrs	r2, r1
 800c8ca:	605a      	str	r2, [r3, #4]
  }
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af02      	add	r7, sp, #8
 800c8de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8e8:	f7f9 fa9c 	bl	8005e24 <HAL_GetTick>
 800c8ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	2b08      	cmp	r3, #8
 800c8fa:	d10e      	bne.n	800c91a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f82d 	bl	800c96a <UART_WaitOnFlagUntilTimeout>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c916:	2303      	movs	r3, #3
 800c918:	e023      	b.n	800c962 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0304 	and.w	r3, r3, #4
 800c924:	2b04      	cmp	r3, #4
 800c926:	d10e      	bne.n	800c946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f817 	bl	800c96a <UART_WaitOnFlagUntilTimeout>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c942:	2303      	movs	r3, #3
 800c944:	e00d      	b.n	800c962 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2220      	movs	r2, #32
 800c94a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2220      	movs	r2, #32
 800c950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	603b      	str	r3, [r7, #0]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c97a:	e05e      	b.n	800ca3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c982:	d05a      	beq.n	800ca3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c984:	f7f9 fa4e 	bl	8005e24 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	429a      	cmp	r2, r3
 800c992:	d302      	bcc.n	800c99a <UART_WaitOnFlagUntilTimeout+0x30>
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d11b      	bne.n	800c9d2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c9a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f022 0201 	bic.w	r2, r2, #1
 800c9b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e043      	b.n	800ca5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d02c      	beq.n	800ca3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	69db      	ldr	r3, [r3, #28]
 800c9e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9ee:	d124      	bne.n	800ca3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9f8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ca08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	689a      	ldr	r2, [r3, #8]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f022 0201 	bic.w	r2, r2, #1
 800ca18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2220      	movs	r2, #32
 800ca1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2220      	movs	r2, #32
 800ca24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ca36:	2303      	movs	r3, #3
 800ca38:	e00f      	b.n	800ca5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69da      	ldr	r2, [r3, #28]
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	4013      	ands	r3, r2
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	bf0c      	ite	eq
 800ca4a:	2301      	moveq	r3, #1
 800ca4c:	2300      	movne	r3, #0
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	461a      	mov	r2, r3
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d091      	beq.n	800c97c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	88fa      	ldrh	r2, [r7, #6]
 800ca7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2222      	movs	r2, #34	; 0x22
 800ca8c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d02b      	beq.n	800caee <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	4a25      	ldr	r2, [pc, #148]	; (800cb30 <UART_Start_Receive_DMA+0xcc>)
 800ca9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa2:	4a24      	ldr	r2, [pc, #144]	; (800cb34 <UART_Start_Receive_DMA+0xd0>)
 800caa4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caaa:	4a23      	ldr	r2, [pc, #140]	; (800cb38 <UART_Start_Receive_DMA+0xd4>)
 800caac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab2:	2200      	movs	r2, #0
 800cab4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3324      	adds	r3, #36	; 0x24
 800cac0:	4619      	mov	r1, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac6:	461a      	mov	r2, r3
 800cac8:	88fb      	ldrh	r3, [r7, #6]
 800caca:	f7f9 fbc9 	bl	8006260 <HAL_DMA_Start_IT>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00c      	beq.n	800caee <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2210      	movs	r2, #16
 800cad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2220      	movs	r2, #32
 800cae8:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e01c      	b.n	800cb28 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb04:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	689a      	ldr	r2, [r3, #8]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f042 0201 	orr.w	r2, r2, #1
 800cb14:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	689a      	ldr	r2, [r3, #8]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb24:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	0800cbc5 	.word	0x0800cbc5
 800cb34:	0800cc5d 	.word	0x0800cc5d
 800cb38:	0800cc95 	.word	0x0800cc95

0800cb3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cb52:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2220      	movs	r2, #32
 800cb58:	679a      	str	r2, [r3, #120]	; 0x78
}
 800cb5a:	bf00      	nop
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b083      	sub	sp, #12
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cb7c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	689a      	ldr	r2, [r3, #8]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f022 0201 	bic.w	r2, r2, #1
 800cb8c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d107      	bne.n	800cba6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f022 0210 	bic.w	r2, r2, #16
 800cba4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2220      	movs	r2, #32
 800cbaa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 0320 	and.w	r3, r3, #32
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d12a      	bne.n	800cc36 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbf6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f022 0201 	bic.w	r2, r2, #1
 800cc06:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	689a      	ldr	r2, [r3, #8]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc16:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d107      	bne.n	800cc36 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f022 0210 	bic.w	r2, r2, #16
 800cc34:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d107      	bne.n	800cc4e <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc44:	4619      	mov	r1, r3
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff fb0e 	bl	800c268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc4c:	e002      	b.n	800cc54 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f7f9 f864 	bl	8005d1c <HAL_UART_RxCpltCallback>
}
 800cc54:	bf00      	nop
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc68:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d109      	bne.n	800cc86 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc78:	085b      	lsrs	r3, r3, #1
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f7ff faf2 	bl	800c268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc84:	e002      	b.n	800cc8c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7ff fada 	bl	800c240 <HAL_UART_RxHalfCpltCallback>
}
 800cc8c:	bf00      	nop
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cca6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccb8:	2b80      	cmp	r3, #128	; 0x80
 800ccba:	d109      	bne.n	800ccd0 <UART_DMAError+0x3c>
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	2b21      	cmp	r3, #33	; 0x21
 800ccc0:	d106      	bne.n	800ccd0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ccca:	6978      	ldr	r0, [r7, #20]
 800cccc:	f7ff ff36 	bl	800cb3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccda:	2b40      	cmp	r3, #64	; 0x40
 800ccdc:	d109      	bne.n	800ccf2 <UART_DMAError+0x5e>
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2b22      	cmp	r3, #34	; 0x22
 800cce2:	d106      	bne.n	800ccf2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ccec:	6978      	ldr	r0, [r7, #20]
 800ccee:	f7ff ff3a 	bl	800cb66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccf8:	f043 0210 	orr.w	r2, r3, #16
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd02:	6978      	ldr	r0, [r7, #20]
 800cd04:	f7ff faa6 	bl	800c254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd08:	bf00      	nop
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b087      	sub	sp, #28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cd1e:	79fb      	ldrb	r3, [r7, #7]
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d165      	bne.n	800cdf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	4a3e      	ldr	r2, [pc, #248]	; (800ce20 <USB_SetTurnaroundTime+0x110>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d906      	bls.n	800cd3a <USB_SetTurnaroundTime+0x2a>
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	4a3d      	ldr	r2, [pc, #244]	; (800ce24 <USB_SetTurnaroundTime+0x114>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d202      	bcs.n	800cd3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cd34:	230f      	movs	r3, #15
 800cd36:	617b      	str	r3, [r7, #20]
 800cd38:	e05c      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	4a39      	ldr	r2, [pc, #228]	; (800ce24 <USB_SetTurnaroundTime+0x114>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d306      	bcc.n	800cd50 <USB_SetTurnaroundTime+0x40>
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	4a38      	ldr	r2, [pc, #224]	; (800ce28 <USB_SetTurnaroundTime+0x118>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d202      	bcs.n	800cd50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cd4a:	230e      	movs	r3, #14
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	e051      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	4a35      	ldr	r2, [pc, #212]	; (800ce28 <USB_SetTurnaroundTime+0x118>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d306      	bcc.n	800cd66 <USB_SetTurnaroundTime+0x56>
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	4a34      	ldr	r2, [pc, #208]	; (800ce2c <USB_SetTurnaroundTime+0x11c>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d202      	bcs.n	800cd66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cd60:	230d      	movs	r3, #13
 800cd62:	617b      	str	r3, [r7, #20]
 800cd64:	e046      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	4a30      	ldr	r2, [pc, #192]	; (800ce2c <USB_SetTurnaroundTime+0x11c>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d306      	bcc.n	800cd7c <USB_SetTurnaroundTime+0x6c>
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	4a2f      	ldr	r2, [pc, #188]	; (800ce30 <USB_SetTurnaroundTime+0x120>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d802      	bhi.n	800cd7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cd76:	230c      	movs	r3, #12
 800cd78:	617b      	str	r3, [r7, #20]
 800cd7a:	e03b      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	4a2c      	ldr	r2, [pc, #176]	; (800ce30 <USB_SetTurnaroundTime+0x120>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d906      	bls.n	800cd92 <USB_SetTurnaroundTime+0x82>
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	4a2b      	ldr	r2, [pc, #172]	; (800ce34 <USB_SetTurnaroundTime+0x124>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d802      	bhi.n	800cd92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cd8c:	230b      	movs	r3, #11
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	e030      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	4a27      	ldr	r2, [pc, #156]	; (800ce34 <USB_SetTurnaroundTime+0x124>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d906      	bls.n	800cda8 <USB_SetTurnaroundTime+0x98>
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	4a26      	ldr	r2, [pc, #152]	; (800ce38 <USB_SetTurnaroundTime+0x128>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d802      	bhi.n	800cda8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cda2:	230a      	movs	r3, #10
 800cda4:	617b      	str	r3, [r7, #20]
 800cda6:	e025      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	4a23      	ldr	r2, [pc, #140]	; (800ce38 <USB_SetTurnaroundTime+0x128>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d906      	bls.n	800cdbe <USB_SetTurnaroundTime+0xae>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	4a22      	ldr	r2, [pc, #136]	; (800ce3c <USB_SetTurnaroundTime+0x12c>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d202      	bcs.n	800cdbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cdb8:	2309      	movs	r3, #9
 800cdba:	617b      	str	r3, [r7, #20]
 800cdbc:	e01a      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	4a1e      	ldr	r2, [pc, #120]	; (800ce3c <USB_SetTurnaroundTime+0x12c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d306      	bcc.n	800cdd4 <USB_SetTurnaroundTime+0xc4>
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	4a1d      	ldr	r2, [pc, #116]	; (800ce40 <USB_SetTurnaroundTime+0x130>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d802      	bhi.n	800cdd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cdce:	2308      	movs	r3, #8
 800cdd0:	617b      	str	r3, [r7, #20]
 800cdd2:	e00f      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	4a1a      	ldr	r2, [pc, #104]	; (800ce40 <USB_SetTurnaroundTime+0x130>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d906      	bls.n	800cdea <USB_SetTurnaroundTime+0xda>
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <USB_SetTurnaroundTime+0x134>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d202      	bcs.n	800cdea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cde4:	2307      	movs	r3, #7
 800cde6:	617b      	str	r3, [r7, #20]
 800cde8:	e004      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cdea:	2306      	movs	r3, #6
 800cdec:	617b      	str	r3, [r7, #20]
 800cdee:	e001      	b.n	800cdf4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cdf0:	2309      	movs	r3, #9
 800cdf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	68da      	ldr	r2, [r3, #12]
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	029b      	lsls	r3, r3, #10
 800ce08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ce0c:	431a      	orrs	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	371c      	adds	r7, #28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	00d8acbf 	.word	0x00d8acbf
 800ce24:	00e4e1c0 	.word	0x00e4e1c0
 800ce28:	00f42400 	.word	0x00f42400
 800ce2c:	01067380 	.word	0x01067380
 800ce30:	011a499f 	.word	0x011a499f
 800ce34:	01312cff 	.word	0x01312cff
 800ce38:	014ca43f 	.word	0x014ca43f
 800ce3c:	016e3600 	.word	0x016e3600
 800ce40:	01a6ab1f 	.word	0x01a6ab1f
 800ce44:	01e84800 	.word	0x01e84800

0800ce48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	019b      	lsls	r3, r3, #6
 800ce5a:	f043 0220 	orr.w	r2, r3, #32
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4a09      	ldr	r2, [pc, #36]	; (800ce90 <USB_FlushTxFifo+0x48>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d901      	bls.n	800ce74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e006      	b.n	800ce82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b20      	cmp	r3, #32
 800ce7e:	d0f0      	beq.n	800ce62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	00030d40 	.word	0x00030d40

0800ce94 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	f003 0306 	and.w	r3, r3, #6
 800ceac:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d002      	beq.n	800ceba <USB_GetDevSpeed+0x26>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b06      	cmp	r3, #6
 800ceb8:	d102      	bne.n	800cec0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ceba:	2302      	movs	r3, #2
 800cebc:	75fb      	strb	r3, [r7, #23]
 800cebe:	e001      	b.n	800cec4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800cec0:	230f      	movs	r3, #15
 800cec2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	371c      	adds	r7, #28
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b085      	sub	sp, #20
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	785b      	ldrb	r3, [r3, #1]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d13a      	bne.n	800cf64 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cef4:	69da      	ldr	r2, [r3, #28]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	f003 030f 	and.w	r3, r3, #15
 800cefe:	2101      	movs	r1, #1
 800cf00:	fa01 f303 	lsl.w	r3, r1, r3
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	015a      	lsls	r2, r3, #5
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	4413      	add	r3, r2
 800cf18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d155      	bne.n	800cfd2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	015a      	lsls	r2, r3, #5
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	78db      	ldrb	r3, [r3, #3]
 800cf40:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf42:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	059b      	lsls	r3, r3, #22
 800cf48:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	0151      	lsls	r1, r2, #5
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	440a      	add	r2, r1
 800cf54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf60:	6013      	str	r3, [r2, #0]
 800cf62:	e036      	b.n	800cfd2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6a:	69da      	ldr	r2, [r3, #28]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	f003 030f 	and.w	r3, r3, #15
 800cf74:	2101      	movs	r1, #1
 800cf76:	fa01 f303 	lsl.w	r3, r1, r3
 800cf7a:	041b      	lsls	r3, r3, #16
 800cf7c:	68f9      	ldr	r1, [r7, #12]
 800cf7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf82:	4313      	orrs	r3, r2
 800cf84:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d11a      	bne.n	800cfd2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	78db      	ldrb	r3, [r3, #3]
 800cfb6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfb8:	430b      	orrs	r3, r1
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	0151      	lsls	r1, r2, #5
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	440a      	add	r2, r1
 800cfc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfd0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	785b      	ldrb	r3, [r3, #1]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	f040 810a 	bne.w	800d212 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d132      	bne.n	800d06c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	015a      	lsls	r2, r3, #5
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	4413      	add	r3, r2
 800d00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	0151      	lsls	r1, r2, #5
 800d018:	697a      	ldr	r2, [r7, #20]
 800d01a:	440a      	add	r2, r1
 800d01c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d020:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d024:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	4413      	add	r3, r2
 800d032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	0151      	lsls	r1, r2, #5
 800d03c:	697a      	ldr	r2, [r7, #20]
 800d03e:	440a      	add	r2, r1
 800d040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	015a      	lsls	r2, r3, #5
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	4413      	add	r3, r2
 800d052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	0151      	lsls	r1, r2, #5
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	440a      	add	r2, r1
 800d060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d064:	0cdb      	lsrs	r3, r3, #19
 800d066:	04db      	lsls	r3, r3, #19
 800d068:	6113      	str	r3, [r2, #16]
 800d06a:	e074      	b.n	800d156 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	4413      	add	r3, r2
 800d074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d078:	691b      	ldr	r3, [r3, #16]
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	440a      	add	r2, r1
 800d082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d086:	0cdb      	lsrs	r3, r3, #19
 800d088:	04db      	lsls	r3, r3, #19
 800d08a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	4413      	add	r3, r2
 800d094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	0151      	lsls	r1, r2, #5
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	440a      	add	r2, r1
 800d0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d0aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d0ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	015a      	lsls	r2, r3, #5
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0bc:	691a      	ldr	r2, [r3, #16]
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	6959      	ldr	r1, [r3, #20]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	440b      	add	r3, r1
 800d0c8:	1e59      	subs	r1, r3, #1
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800d0d2:	04d9      	lsls	r1, r3, #19
 800d0d4:	4baf      	ldr	r3, [pc, #700]	; (800d394 <USB_EPStartXfer+0x3b4>)
 800d0d6:	400b      	ands	r3, r1
 800d0d8:	6939      	ldr	r1, [r7, #16]
 800d0da:	0148      	lsls	r0, r1, #5
 800d0dc:	6979      	ldr	r1, [r7, #20]
 800d0de:	4401      	add	r1, r0
 800d0e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	015a      	lsls	r2, r3, #5
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0f4:	691a      	ldr	r2, [r3, #16]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0fe:	6939      	ldr	r1, [r7, #16]
 800d100:	0148      	lsls	r0, r1, #5
 800d102:	6979      	ldr	r1, [r7, #20]
 800d104:	4401      	add	r1, r0
 800d106:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d10a:	4313      	orrs	r3, r2
 800d10c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	78db      	ldrb	r3, [r3, #3]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d11f      	bne.n	800d156 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	015a      	lsls	r2, r3, #5
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	4413      	add	r3, r2
 800d11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	0151      	lsls	r1, r2, #5
 800d128:	697a      	ldr	r2, [r7, #20]
 800d12a:	440a      	add	r2, r1
 800d12c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d130:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d134:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	015a      	lsls	r2, r3, #5
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	4413      	add	r3, r2
 800d13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	693a      	ldr	r2, [r7, #16]
 800d146:	0151      	lsls	r1, r2, #5
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	440a      	add	r2, r1
 800d14c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d154:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	693a      	ldr	r2, [r7, #16]
 800d166:	0151      	lsls	r1, r2, #5
 800d168:	697a      	ldr	r2, [r7, #20]
 800d16a:	440a      	add	r2, r1
 800d16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d170:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d174:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	78db      	ldrb	r3, [r3, #3]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d015      	beq.n	800d1aa <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	2b00      	cmp	r3, #0
 800d184:	f000 8100 	beq.w	800d388 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d18e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	f003 030f 	and.w	r3, r3, #15
 800d198:	2101      	movs	r1, #1
 800d19a:	fa01 f303 	lsl.w	r3, r1, r3
 800d19e:	6979      	ldr	r1, [r7, #20]
 800d1a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	634b      	str	r3, [r1, #52]	; 0x34
 800d1a8:	e0ee      	b.n	800d388 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d110      	bne.n	800d1dc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	0151      	lsls	r1, r2, #5
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	440a      	add	r2, r1
 800d1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	e00f      	b.n	800d1fc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	015a      	lsls	r2, r3, #5
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	693a      	ldr	r2, [r7, #16]
 800d1ec:	0151      	lsls	r1, r2, #5
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	440a      	add	r2, r1
 800d1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1fa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	68d9      	ldr	r1, [r3, #12]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	695b      	ldr	r3, [r3, #20]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f9e2 	bl	800d5d4 <USB_WritePacket>
 800d210:	e0ba      	b.n	800d388 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	015a      	lsls	r2, r3, #5
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	4413      	add	r3, r2
 800d21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	0151      	lsls	r1, r2, #5
 800d224:	697a      	ldr	r2, [r7, #20]
 800d226:	440a      	add	r2, r1
 800d228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d22c:	0cdb      	lsrs	r3, r3, #19
 800d22e:	04db      	lsls	r3, r3, #19
 800d230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	015a      	lsls	r2, r3, #5
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	4413      	add	r3, r2
 800d23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	0151      	lsls	r1, r2, #5
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	440a      	add	r2, r1
 800d248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d24c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d250:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d254:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d123      	bne.n	800d2a6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	015a      	lsls	r2, r3, #5
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	4413      	add	r3, r2
 800d266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d26a:	691a      	ldr	r2, [r3, #16]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d274:	6939      	ldr	r1, [r7, #16]
 800d276:	0148      	lsls	r0, r1, #5
 800d278:	6979      	ldr	r1, [r7, #20]
 800d27a:	4401      	add	r1, r0
 800d27c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d280:	4313      	orrs	r3, r2
 800d282:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	015a      	lsls	r2, r3, #5
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	0151      	lsls	r1, r2, #5
 800d296:	697a      	ldr	r2, [r7, #20]
 800d298:	440a      	add	r2, r1
 800d29a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d29e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2a2:	6113      	str	r3, [r2, #16]
 800d2a4:	e033      	b.n	800d30e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	695a      	ldr	r2, [r3, #20]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	1e5a      	subs	r2, r3, #1
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ba:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	015a      	lsls	r2, r3, #5
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c8:	691a      	ldr	r2, [r3, #16]
 800d2ca:	89fb      	ldrh	r3, [r7, #14]
 800d2cc:	04d9      	lsls	r1, r3, #19
 800d2ce:	4b31      	ldr	r3, [pc, #196]	; (800d394 <USB_EPStartXfer+0x3b4>)
 800d2d0:	400b      	ands	r3, r1
 800d2d2:	6939      	ldr	r1, [r7, #16]
 800d2d4:	0148      	lsls	r0, r1, #5
 800d2d6:	6979      	ldr	r1, [r7, #20]
 800d2d8:	4401      	add	r1, r0
 800d2da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ee:	691a      	ldr	r2, [r3, #16]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	89f9      	ldrh	r1, [r7, #14]
 800d2f6:	fb01 f303 	mul.w	r3, r1, r3
 800d2fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2fe:	6939      	ldr	r1, [r7, #16]
 800d300:	0148      	lsls	r0, r1, #5
 800d302:	6979      	ldr	r1, [r7, #20]
 800d304:	4401      	add	r1, r0
 800d306:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d30a:	4313      	orrs	r3, r2
 800d30c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	78db      	ldrb	r3, [r3, #3]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d128      	bne.n	800d368 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d322:	2b00      	cmp	r3, #0
 800d324:	d110      	bne.n	800d348 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	0151      	lsls	r1, r2, #5
 800d338:	697a      	ldr	r2, [r7, #20]
 800d33a:	440a      	add	r2, r1
 800d33c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d344:	6013      	str	r3, [r2, #0]
 800d346:	e00f      	b.n	800d368 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	693a      	ldr	r2, [r7, #16]
 800d358:	0151      	lsls	r1, r2, #5
 800d35a:	697a      	ldr	r2, [r7, #20]
 800d35c:	440a      	add	r2, r1
 800d35e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d366:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	015a      	lsls	r2, r3, #5
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	4413      	add	r3, r2
 800d370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	0151      	lsls	r1, r2, #5
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	440a      	add	r2, r1
 800d37e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d382:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3718      	adds	r7, #24
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	1ff80000 	.word	0x1ff80000

0800d398 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	785b      	ldrb	r3, [r3, #1]
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	f040 80ab 	bne.w	800d50c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d132      	bne.n	800d424 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	015a      	lsls	r2, r3, #5
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	0151      	lsls	r1, r2, #5
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	440a      	add	r2, r1
 800d3d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	015a      	lsls	r2, r3, #5
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	0151      	lsls	r1, r2, #5
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	440a      	add	r2, r1
 800d3f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d400:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	015a      	lsls	r2, r3, #5
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	4413      	add	r3, r2
 800d40a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	0151      	lsls	r1, r2, #5
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	440a      	add	r2, r1
 800d418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d41c:	0cdb      	lsrs	r3, r3, #19
 800d41e:	04db      	lsls	r3, r3, #19
 800d420:	6113      	str	r3, [r2, #16]
 800d422:	e04e      	b.n	800d4c2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	015a      	lsls	r2, r3, #5
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4413      	add	r3, r2
 800d42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	68ba      	ldr	r2, [r7, #8]
 800d434:	0151      	lsls	r1, r2, #5
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	440a      	add	r2, r1
 800d43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d43e:	0cdb      	lsrs	r3, r3, #19
 800d440:	04db      	lsls	r3, r3, #19
 800d442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	0151      	lsls	r1, r2, #5
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	440a      	add	r2, r1
 800d45a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d45e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d462:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d466:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	695a      	ldr	r2, [r3, #20]
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	429a      	cmp	r2, r3
 800d472:	d903      	bls.n	800d47c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	689a      	ldr	r2, [r3, #8]
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	015a      	lsls	r2, r3, #5
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4413      	add	r3, r2
 800d484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	0151      	lsls	r1, r2, #5
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	440a      	add	r2, r1
 800d492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d49a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	015a      	lsls	r2, r3, #5
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a8:	691a      	ldr	r2, [r3, #16]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4b2:	68b9      	ldr	r1, [r7, #8]
 800d4b4:	0148      	lsls	r0, r1, #5
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	4401      	add	r1, r0
 800d4ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	015a      	lsls	r2, r3, #5
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	0151      	lsls	r1, r2, #5
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	440a      	add	r2, r1
 800d4d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4e0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d06d      	beq.n	800d5c6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f003 030f 	and.w	r3, r3, #15
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d500:	68f9      	ldr	r1, [r7, #12]
 800d502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d506:	4313      	orrs	r3, r2
 800d508:	634b      	str	r3, [r1, #52]	; 0x34
 800d50a:	e05c      	b.n	800d5c6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	015a      	lsls	r2, r3, #5
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	4413      	add	r3, r2
 800d514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	0151      	lsls	r1, r2, #5
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	440a      	add	r2, r1
 800d522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d526:	0cdb      	lsrs	r3, r3, #19
 800d528:	04db      	lsls	r3, r3, #19
 800d52a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	015a      	lsls	r2, r3, #5
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	4413      	add	r3, r2
 800d534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	0151      	lsls	r1, r2, #5
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	440a      	add	r2, r1
 800d542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d54a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d54e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	689a      	ldr	r2, [r3, #8]
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	015a      	lsls	r2, r3, #5
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	4413      	add	r3, r2
 800d568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	0151      	lsls	r1, r2, #5
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	440a      	add	r2, r1
 800d576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d57a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d57e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	015a      	lsls	r2, r3, #5
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	4413      	add	r3, r2
 800d588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d58c:	691a      	ldr	r2, [r3, #16]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d596:	68b9      	ldr	r1, [r7, #8]
 800d598:	0148      	lsls	r0, r1, #5
 800d59a:	68f9      	ldr	r1, [r7, #12]
 800d59c:	4401      	add	r1, r0
 800d59e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	015a      	lsls	r2, r3, #5
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	0151      	lsls	r1, r2, #5
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	440a      	add	r2, r1
 800d5bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d5c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b089      	sub	sp, #36	; 0x24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	4611      	mov	r1, r2
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	71fb      	strb	r3, [r7, #7]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d5f2:	88bb      	ldrh	r3, [r7, #4]
 800d5f4:	3303      	adds	r3, #3
 800d5f6:	089b      	lsrs	r3, r3, #2
 800d5f8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61bb      	str	r3, [r7, #24]
 800d5fe:	e00f      	b.n	800d620 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	031a      	lsls	r2, r3, #12
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	4413      	add	r3, r2
 800d608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d60c:	461a      	mov	r2, r3
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	3304      	adds	r3, #4
 800d618:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	3301      	adds	r3, #1
 800d61e:	61bb      	str	r3, [r7, #24]
 800d620:	69ba      	ldr	r2, [r7, #24]
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	429a      	cmp	r2, r3
 800d626:	d3eb      	bcc.n	800d600 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d628:	2300      	movs	r3, #0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3724      	adds	r7, #36	; 0x24
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d636:	b480      	push	{r7}
 800d638:	b089      	sub	sp, #36	; 0x24
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	60b9      	str	r1, [r7, #8]
 800d640:	4613      	mov	r3, r2
 800d642:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d64c:	88fb      	ldrh	r3, [r7, #6]
 800d64e:	3303      	adds	r3, #3
 800d650:	089b      	lsrs	r3, r3, #2
 800d652:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d654:	2300      	movs	r3, #0
 800d656:	61bb      	str	r3, [r7, #24]
 800d658:	e00b      	b.n	800d672 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	601a      	str	r2, [r3, #0]
    pDest++;
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	3304      	adds	r3, #4
 800d66a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	3301      	adds	r3, #1
 800d670:	61bb      	str	r3, [r7, #24]
 800d672:	69ba      	ldr	r2, [r7, #24]
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	429a      	cmp	r2, r3
 800d678:	d3ef      	bcc.n	800d65a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d67a:	69fb      	ldr	r3, [r7, #28]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3724      	adds	r7, #36	; 0x24
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	785b      	ldrb	r3, [r3, #1]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d12c      	bne.n	800d6fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	015a      	lsls	r2, r3, #5
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	db12      	blt.n	800d6dc <USB_EPSetStall+0x54>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00f      	beq.n	800d6dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	0151      	lsls	r1, r2, #5
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	440a      	add	r2, r1
 800d6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	015a      	lsls	r2, r3, #5
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	0151      	lsls	r1, r2, #5
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	440a      	add	r2, r1
 800d6f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	e02b      	b.n	800d756 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	015a      	lsls	r2, r3, #5
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4413      	add	r3, r2
 800d706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	db12      	blt.n	800d736 <USB_EPSetStall+0xae>
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00f      	beq.n	800d736 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	015a      	lsls	r2, r3, #5
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	4413      	add	r3, r2
 800d71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	0151      	lsls	r1, r2, #5
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	440a      	add	r2, r1
 800d72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d734:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	015a      	lsls	r2, r3, #5
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	4413      	add	r3, r2
 800d73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	0151      	lsls	r1, r2, #5
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	440a      	add	r2, r1
 800d74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	785b      	ldrb	r3, [r3, #1]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d128      	bne.n	800d7d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	015a      	lsls	r2, r3, #5
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	4413      	add	r3, r2
 800d788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68ba      	ldr	r2, [r7, #8]
 800d790:	0151      	lsls	r1, r2, #5
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	440a      	add	r2, r1
 800d796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d79a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d79e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	78db      	ldrb	r3, [r3, #3]
 800d7a4:	2b03      	cmp	r3, #3
 800d7a6:	d003      	beq.n	800d7b0 <USB_EPClearStall+0x4c>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	78db      	ldrb	r3, [r3, #3]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d138      	bne.n	800d822 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	0151      	lsls	r1, r2, #5
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	440a      	add	r2, r1
 800d7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	e027      	b.n	800d822 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	015a      	lsls	r2, r3, #5
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	4413      	add	r3, r2
 800d7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	0151      	lsls	r1, r2, #5
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	440a      	add	r2, r1
 800d7e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	78db      	ldrb	r3, [r3, #3]
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d003      	beq.n	800d802 <USB_EPClearStall+0x9e>
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	78db      	ldrb	r3, [r3, #3]
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d10f      	bne.n	800d822 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	015a      	lsls	r2, r3, #5
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	4413      	add	r3, r2
 800d80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68ba      	ldr	r2, [r7, #8]
 800d812:	0151      	lsls	r1, r2, #5
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	440a      	add	r2, r1
 800d818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d820:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d84e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d852:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	78fb      	ldrb	r3, [r7, #3]
 800d85e:	011b      	lsls	r3, r3, #4
 800d860:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d864:	68f9      	ldr	r1, [r7, #12]
 800d866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d86a:	4313      	orrs	r3, r2
 800d86c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	699b      	ldr	r3, [r3, #24]
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	4013      	ands	r3, r2
 800d892:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d894:	68fb      	ldr	r3, [r7, #12]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3714      	adds	r7, #20
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b085      	sub	sp, #20
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8b4:	699b      	ldr	r3, [r3, #24]
 800d8b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	0c1b      	lsrs	r3, r3, #16
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b085      	sub	sp, #20
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f2:	69db      	ldr	r3, [r3, #28]
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	b29b      	uxth	r3, r3
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3714      	adds	r7, #20
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b085      	sub	sp, #20
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	460b      	mov	r3, r1
 800d914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	015a      	lsls	r2, r3, #5
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	4413      	add	r3, r2
 800d922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d930:	695b      	ldr	r3, [r3, #20]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	4013      	ands	r3, r2
 800d936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d938:	68bb      	ldr	r3, [r7, #8]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d946:	b480      	push	{r7}
 800d948:	b087      	sub	sp, #28
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	460b      	mov	r3, r1
 800d950:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d968:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d96a:	78fb      	ldrb	r3, [r7, #3]
 800d96c:	f003 030f 	and.w	r3, r3, #15
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	fa22 f303 	lsr.w	r3, r2, r3
 800d976:	01db      	lsls	r3, r3, #7
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	015a      	lsls	r2, r3, #5
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	4413      	add	r3, r2
 800d988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	4013      	ands	r3, r2
 800d992:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d994:	68bb      	ldr	r3, [r7, #8]
}
 800d996:	4618      	mov	r0, r3
 800d998:	371c      	adds	r7, #28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	f003 0301 	and.w	r3, r3, #1
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b085      	sub	sp, #20
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d9dc:	f023 0307 	bic.w	r3, r3, #7
 800d9e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800da04:	b480      	push	{r7}
 800da06:	b085      	sub	sp, #20
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	333c      	adds	r3, #60	; 0x3c
 800da16:	3304      	adds	r3, #4
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	4a1c      	ldr	r2, [pc, #112]	; (800da90 <USB_EP0_OutStart+0x8c>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d90a      	bls.n	800da3a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da34:	d101      	bne.n	800da3a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	e024      	b.n	800da84 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da40:	461a      	mov	r2, r3
 800da42:	2300      	movs	r3, #0
 800da44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da68:	f043 0318 	orr.w	r3, r3, #24
 800da6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da80:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	4f54300a 	.word	0x4f54300a

0800da94 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800da94:	b480      	push	{r7}
 800da96:	b087      	sub	sp, #28
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daa6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d101      	bne.n	800dab2 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800daae:	2303      	movs	r3, #3
 800dab0:	e008      	b.n	800dac4 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	371c      	adds	r7, #28
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dade:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dae0:	2301      	movs	r3, #1
 800dae2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800daee:	2303      	movs	r3, #3
 800daf0:	e01a      	b.n	800db28 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d114      	bne.n	800db26 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2201      	movs	r2, #1
 800db00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800db1a:	2181      	movs	r1, #129	; 0x81
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7f5 fb12 	bl	8003146 <USBD_LL_Transmit>

    ret = USBD_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800db26:	7bfb      	ldrb	r3, [r7, #15]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
 800db4e:	460b      	mov	r3, r1
 800db50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800db52:	2303      	movs	r3, #3
 800db54:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d009      	beq.n	800db74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	78fa      	ldrb	r2, [r7, #3]
 800db6a:	4611      	mov	r1, r2
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	4798      	blx	r3
 800db70:	4603      	mov	r3, r0
 800db72:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800db74:	7bfb      	ldrb	r3, [r7, #15]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b082      	sub	sp, #8
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	460b      	mov	r3, r1
 800db88:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db90:	2b00      	cmp	r3, #0
 800db92:	d007      	beq.n	800dba4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	78fa      	ldrb	r2, [r7, #3]
 800db9e:	4611      	mov	r1, r2
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	4798      	blx	r3
  }

  return USBD_OK;
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3708      	adds	r7, #8
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
 800dbb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 ff8f 	bl	800eae4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbe2:	f003 031f 	and.w	r3, r3, #31
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d01a      	beq.n	800dc20 <USBD_LL_SetupStage+0x72>
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d822      	bhi.n	800dc34 <USBD_LL_SetupStage+0x86>
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d002      	beq.n	800dbf8 <USBD_LL_SetupStage+0x4a>
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d00a      	beq.n	800dc0c <USBD_LL_SetupStage+0x5e>
 800dbf6:	e01d      	b.n	800dc34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 fa61 	bl	800e0c8 <USBD_StdDevReq>
 800dc06:	4603      	mov	r3, r0
 800dc08:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0a:	e020      	b.n	800dc4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fac5 	bl	800e1a4 <USBD_StdItfReq>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc1e:	e016      	b.n	800dc4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fb04 	bl	800e236 <USBD_StdEPReq>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	73fb      	strb	r3, [r7, #15]
      break;
 800dc32:	e00c      	b.n	800dc4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	4619      	mov	r1, r3
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7f5 fa1a 	bl	800307c <USBD_LL_StallEP>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc4c:	bf00      	nop
  }

  return ret;
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	460b      	mov	r3, r1
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc66:	7afb      	ldrb	r3, [r7, #11]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d138      	bne.n	800dcde <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d14a      	bne.n	800dd14 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	689a      	ldr	r2, [r3, #8]
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d913      	bls.n	800dcb2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	689a      	ldr	r2, [r3, #8]
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	1ad2      	subs	r2, r2, r3
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	68da      	ldr	r2, [r3, #12]
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	4293      	cmp	r3, r2
 800dca2:	bf28      	it	cs
 800dca4:	4613      	movcs	r3, r2
 800dca6:	461a      	mov	r2, r3
 800dca8:	6879      	ldr	r1, [r7, #4]
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f000 ff91 	bl	800ebd2 <USBD_CtlContinueRx>
 800dcb0:	e030      	b.n	800dd14 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d10b      	bne.n	800dcd6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d005      	beq.n	800dcd6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f000 ff8c 	bl	800ebf4 <USBD_CtlSendStatus>
 800dcdc:	e01a      	b.n	800dd14 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d114      	bne.n	800dd14 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00e      	beq.n	800dd14 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcfc:	699b      	ldr	r3, [r3, #24]
 800dcfe:	7afa      	ldrb	r2, [r7, #11]
 800dd00:	4611      	mov	r1, r2
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	4798      	blx	r3
 800dd06:	4603      	mov	r3, r0
 800dd08:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d001      	beq.n	800dd14 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
 800dd12:	e000      	b.n	800dd16 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b086      	sub	sp, #24
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	460b      	mov	r3, r1
 800dd28:	607a      	str	r2, [r7, #4]
 800dd2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dd2c:	7afb      	ldrb	r3, [r7, #11]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d16b      	bne.n	800de0a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3314      	adds	r3, #20
 800dd36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d156      	bne.n	800ddf0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	689a      	ldr	r2, [r3, #8]
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d914      	bls.n	800dd78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	689a      	ldr	r2, [r3, #8]
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	1ad2      	subs	r2, r2, r3
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	461a      	mov	r2, r3
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f000 ff23 	bl	800ebb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2100      	movs	r1, #0
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f7f5 f9fd 	bl	8003170 <USBD_LL_PrepareReceive>
 800dd76:	e03b      	b.n	800ddf0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d11c      	bne.n	800ddbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d316      	bcc.n	800ddbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d20f      	bcs.n	800ddbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd9e:	2200      	movs	r2, #0
 800dda0:	2100      	movs	r1, #0
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f000 ff04 	bl	800ebb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7f5 f9da 	bl	8003170 <USBD_LL_PrepareReceive>
 800ddbc:	e018      	b.n	800ddf0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b03      	cmp	r3, #3
 800ddc8:	d10b      	bne.n	800dde2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d005      	beq.n	800dde2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dde2:	2180      	movs	r1, #128	; 0x80
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f7f5 f949 	bl	800307c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f000 ff15 	bl	800ec1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d122      	bne.n	800de40 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f7ff fe98 	bl	800db30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800de08:	e01a      	b.n	800de40 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b03      	cmp	r3, #3
 800de14:	d114      	bne.n	800de40 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00e      	beq.n	800de40 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	7afa      	ldrb	r2, [r7, #11]
 800de2c:	4611      	mov	r1, r2
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	4798      	blx	r3
 800de32:	4603      	mov	r3, r0
 800de34:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800de36:	7dfb      	ldrb	r3, [r7, #23]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	e000      	b.n	800de42 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b082      	sub	sp, #8
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2201      	movs	r2, #1
 800de56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de76:	2b00      	cmp	r3, #0
 800de78:	d101      	bne.n	800de7e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800de7a:	2303      	movs	r3, #3
 800de7c:	e02f      	b.n	800dede <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00f      	beq.n	800dea8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d009      	beq.n	800dea8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	6852      	ldr	r2, [r2, #4]
 800dea0:	b2d2      	uxtb	r2, r2
 800dea2:	4611      	mov	r1, r2
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dea8:	2340      	movs	r3, #64	; 0x40
 800deaa:	2200      	movs	r2, #0
 800deac:	2100      	movs	r1, #0
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7f5 f8ca 	bl	8003048 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2240      	movs	r2, #64	; 0x40
 800dec0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dec4:	2340      	movs	r3, #64	; 0x40
 800dec6:	2200      	movs	r2, #0
 800dec8:	2180      	movs	r1, #128	; 0x80
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7f5 f8bc 	bl	8003048 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2240      	movs	r2, #64	; 0x40
 800deda:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b083      	sub	sp, #12
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	460b      	mov	r3, r1
 800def0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	78fa      	ldrb	r2, [r7, #3]
 800def6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df06:	b480      	push	{r7}
 800df08:	b083      	sub	sp, #12
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2204      	movs	r2, #4
 800df20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr

0800df32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df32:	b480      	push	{r7}
 800df34:	b083      	sub	sp, #12
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df40:	b2db      	uxtb	r3, r3
 800df42:	2b04      	cmp	r3, #4
 800df44:	d106      	bne.n	800df54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	370c      	adds	r7, #12
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df62:	b580      	push	{r7, lr}
 800df64:	b082      	sub	sp, #8
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800df74:	2303      	movs	r3, #3
 800df76:	e012      	b.n	800df9e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b03      	cmp	r3, #3
 800df82:	d10b      	bne.n	800df9c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df8a:	69db      	ldr	r3, [r3, #28]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d005      	beq.n	800df9c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df96:	69db      	ldr	r3, [r3, #28]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b082      	sub	sp, #8
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	460b      	mov	r3, r1
 800dfb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d101      	bne.n	800dfc0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dfbc:	2303      	movs	r3, #3
 800dfbe:	e014      	b.n	800dfea <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b03      	cmp	r3, #3
 800dfca:	d10d      	bne.n	800dfe8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d007      	beq.n	800dfe8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfde:	6a1b      	ldr	r3, [r3, #32]
 800dfe0:	78fa      	ldrb	r2, [r7, #3]
 800dfe2:	4611      	mov	r1, r2
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	460b      	mov	r3, r1
 800dffc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e008:	2303      	movs	r3, #3
 800e00a:	e014      	b.n	800e036 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e012:	b2db      	uxtb	r3, r3
 800e014:	2b03      	cmp	r3, #3
 800e016:	d10d      	bne.n	800e034 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e020:	2b00      	cmp	r3, #0
 800e022:	d007      	beq.n	800e034 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02c:	78fa      	ldrb	r2, [r7, #3]
 800e02e:	4611      	mov	r1, r2
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e03e:	b480      	push	{r7}
 800e040:	b083      	sub	sp, #12
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d009      	beq.n	800e082 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	6852      	ldr	r2, [r2, #4]
 800e07a:	b2d2      	uxtb	r2, r2
 800e07c:	4611      	mov	r1, r2
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	4798      	blx	r3
  }

  return USBD_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b087      	sub	sp, #28
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e0aa:	8a3b      	ldrh	r3, [r7, #16]
 800e0ac:	021b      	lsls	r3, r3, #8
 800e0ae:	b21a      	sxth	r2, r3
 800e0b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	b21b      	sxth	r3, r3
 800e0b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e0ba:	89fb      	ldrh	r3, [r7, #14]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	371c      	adds	r7, #28
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0de:	2b40      	cmp	r3, #64	; 0x40
 800e0e0:	d005      	beq.n	800e0ee <USBD_StdDevReq+0x26>
 800e0e2:	2b40      	cmp	r3, #64	; 0x40
 800e0e4:	d853      	bhi.n	800e18e <USBD_StdDevReq+0xc6>
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00b      	beq.n	800e102 <USBD_StdDevReq+0x3a>
 800e0ea:	2b20      	cmp	r3, #32
 800e0ec:	d14f      	bne.n	800e18e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f4:	689b      	ldr	r3, [r3, #8]
 800e0f6:	6839      	ldr	r1, [r7, #0]
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	4798      	blx	r3
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e100:	e04a      	b.n	800e198 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	785b      	ldrb	r3, [r3, #1]
 800e106:	2b09      	cmp	r3, #9
 800e108:	d83b      	bhi.n	800e182 <USBD_StdDevReq+0xba>
 800e10a:	a201      	add	r2, pc, #4	; (adr r2, 800e110 <USBD_StdDevReq+0x48>)
 800e10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e110:	0800e165 	.word	0x0800e165
 800e114:	0800e179 	.word	0x0800e179
 800e118:	0800e183 	.word	0x0800e183
 800e11c:	0800e16f 	.word	0x0800e16f
 800e120:	0800e183 	.word	0x0800e183
 800e124:	0800e143 	.word	0x0800e143
 800e128:	0800e139 	.word	0x0800e139
 800e12c:	0800e183 	.word	0x0800e183
 800e130:	0800e15b 	.word	0x0800e15b
 800e134:	0800e14d 	.word	0x0800e14d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f9de 	bl	800e4fc <USBD_GetDescriptor>
          break;
 800e140:	e024      	b.n	800e18c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e142:	6839      	ldr	r1, [r7, #0]
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fb43 	bl	800e7d0 <USBD_SetAddress>
          break;
 800e14a:	e01f      	b.n	800e18c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e14c:	6839      	ldr	r1, [r7, #0]
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 fb82 	bl	800e858 <USBD_SetConfig>
 800e154:	4603      	mov	r3, r0
 800e156:	73fb      	strb	r3, [r7, #15]
          break;
 800e158:	e018      	b.n	800e18c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e15a:	6839      	ldr	r1, [r7, #0]
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 fc21 	bl	800e9a4 <USBD_GetConfig>
          break;
 800e162:	e013      	b.n	800e18c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e164:	6839      	ldr	r1, [r7, #0]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fc52 	bl	800ea10 <USBD_GetStatus>
          break;
 800e16c:	e00e      	b.n	800e18c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 fc81 	bl	800ea78 <USBD_SetFeature>
          break;
 800e176:	e009      	b.n	800e18c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fc90 	bl	800eaa0 <USBD_ClrFeature>
          break;
 800e180:	e004      	b.n	800e18c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e182:	6839      	ldr	r1, [r7, #0]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 fce7 	bl	800eb58 <USBD_CtlError>
          break;
 800e18a:	bf00      	nop
      }
      break;
 800e18c:	e004      	b.n	800e198 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fce1 	bl	800eb58 <USBD_CtlError>
      break;
 800e196:	bf00      	nop
  }

  return ret;
 800e198:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop

0800e1a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1ba:	2b40      	cmp	r3, #64	; 0x40
 800e1bc:	d005      	beq.n	800e1ca <USBD_StdItfReq+0x26>
 800e1be:	2b40      	cmp	r3, #64	; 0x40
 800e1c0:	d82f      	bhi.n	800e222 <USBD_StdItfReq+0x7e>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d001      	beq.n	800e1ca <USBD_StdItfReq+0x26>
 800e1c6:	2b20      	cmp	r3, #32
 800e1c8:	d12b      	bne.n	800e222 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	3b01      	subs	r3, #1
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d81d      	bhi.n	800e214 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	889b      	ldrh	r3, [r3, #4]
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d813      	bhi.n	800e20a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	6839      	ldr	r1, [r7, #0]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	4798      	blx	r3
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	88db      	ldrh	r3, [r3, #6]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d110      	bne.n	800e21e <USBD_StdItfReq+0x7a>
 800e1fc:	7bfb      	ldrb	r3, [r7, #15]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10d      	bne.n	800e21e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fcf6 	bl	800ebf4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e208:	e009      	b.n	800e21e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fca3 	bl	800eb58 <USBD_CtlError>
          break;
 800e212:	e004      	b.n	800e21e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fc9e 	bl	800eb58 <USBD_CtlError>
          break;
 800e21c:	e000      	b.n	800e220 <USBD_StdItfReq+0x7c>
          break;
 800e21e:	bf00      	nop
      }
      break;
 800e220:	e004      	b.n	800e22c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e222:	6839      	ldr	r1, [r7, #0]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fc97 	bl	800eb58 <USBD_CtlError>
      break;
 800e22a:	bf00      	nop
  }

  return ret;
 800e22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b084      	sub	sp, #16
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	889b      	ldrh	r3, [r3, #4]
 800e248:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e252:	2b40      	cmp	r3, #64	; 0x40
 800e254:	d007      	beq.n	800e266 <USBD_StdEPReq+0x30>
 800e256:	2b40      	cmp	r3, #64	; 0x40
 800e258:	f200 8145 	bhi.w	800e4e6 <USBD_StdEPReq+0x2b0>
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00c      	beq.n	800e27a <USBD_StdEPReq+0x44>
 800e260:	2b20      	cmp	r3, #32
 800e262:	f040 8140 	bne.w	800e4e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	6839      	ldr	r1, [r7, #0]
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	4798      	blx	r3
 800e274:	4603      	mov	r3, r0
 800e276:	73fb      	strb	r3, [r7, #15]
      break;
 800e278:	e13a      	b.n	800e4f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	785b      	ldrb	r3, [r3, #1]
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d007      	beq.n	800e292 <USBD_StdEPReq+0x5c>
 800e282:	2b03      	cmp	r3, #3
 800e284:	f300 8129 	bgt.w	800e4da <USBD_StdEPReq+0x2a4>
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d07f      	beq.n	800e38c <USBD_StdEPReq+0x156>
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d03c      	beq.n	800e30a <USBD_StdEPReq+0xd4>
 800e290:	e123      	b.n	800e4da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d002      	beq.n	800e2a4 <USBD_StdEPReq+0x6e>
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	d016      	beq.n	800e2d0 <USBD_StdEPReq+0x9a>
 800e2a2:	e02c      	b.n	800e2fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2a4:	7bbb      	ldrb	r3, [r7, #14]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00d      	beq.n	800e2c6 <USBD_StdEPReq+0x90>
 800e2aa:	7bbb      	ldrb	r3, [r7, #14]
 800e2ac:	2b80      	cmp	r3, #128	; 0x80
 800e2ae:	d00a      	beq.n	800e2c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7f4 fee1 	bl	800307c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2ba:	2180      	movs	r1, #128	; 0x80
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7f4 fedd 	bl	800307c <USBD_LL_StallEP>
 800e2c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2c4:	e020      	b.n	800e308 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fc45 	bl	800eb58 <USBD_CtlError>
              break;
 800e2ce:	e01b      	b.n	800e308 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	885b      	ldrh	r3, [r3, #2]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d10e      	bne.n	800e2f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00b      	beq.n	800e2f6 <USBD_StdEPReq+0xc0>
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	2b80      	cmp	r3, #128	; 0x80
 800e2e2:	d008      	beq.n	800e2f6 <USBD_StdEPReq+0xc0>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	88db      	ldrh	r3, [r3, #6]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d104      	bne.n	800e2f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7f4 fec3 	bl	800307c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 fc7c 	bl	800ebf4 <USBD_CtlSendStatus>

              break;
 800e2fc:	e004      	b.n	800e308 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fc29 	bl	800eb58 <USBD_CtlError>
              break;
 800e306:	bf00      	nop
          }
          break;
 800e308:	e0ec      	b.n	800e4e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b02      	cmp	r3, #2
 800e314:	d002      	beq.n	800e31c <USBD_StdEPReq+0xe6>
 800e316:	2b03      	cmp	r3, #3
 800e318:	d016      	beq.n	800e348 <USBD_StdEPReq+0x112>
 800e31a:	e030      	b.n	800e37e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e31c:	7bbb      	ldrb	r3, [r7, #14]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00d      	beq.n	800e33e <USBD_StdEPReq+0x108>
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	2b80      	cmp	r3, #128	; 0x80
 800e326:	d00a      	beq.n	800e33e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e328:	7bbb      	ldrb	r3, [r7, #14]
 800e32a:	4619      	mov	r1, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7f4 fea5 	bl	800307c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e332:	2180      	movs	r1, #128	; 0x80
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7f4 fea1 	bl	800307c <USBD_LL_StallEP>
 800e33a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e33c:	e025      	b.n	800e38a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fc09 	bl	800eb58 <USBD_CtlError>
              break;
 800e346:	e020      	b.n	800e38a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	885b      	ldrh	r3, [r3, #2]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d11b      	bne.n	800e388 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e350:	7bbb      	ldrb	r3, [r7, #14]
 800e352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e356:	2b00      	cmp	r3, #0
 800e358:	d004      	beq.n	800e364 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7f4 fe9f 	bl	80030a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 fc45 	bl	800ebf4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	4798      	blx	r3
 800e378:	4603      	mov	r3, r0
 800e37a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e37c:	e004      	b.n	800e388 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fbe9 	bl	800eb58 <USBD_CtlError>
              break;
 800e386:	e000      	b.n	800e38a <USBD_StdEPReq+0x154>
              break;
 800e388:	bf00      	nop
          }
          break;
 800e38a:	e0ab      	b.n	800e4e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b02      	cmp	r3, #2
 800e396:	d002      	beq.n	800e39e <USBD_StdEPReq+0x168>
 800e398:	2b03      	cmp	r3, #3
 800e39a:	d032      	beq.n	800e402 <USBD_StdEPReq+0x1cc>
 800e39c:	e097      	b.n	800e4ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e39e:	7bbb      	ldrb	r3, [r7, #14]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d007      	beq.n	800e3b4 <USBD_StdEPReq+0x17e>
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	2b80      	cmp	r3, #128	; 0x80
 800e3a8:	d004      	beq.n	800e3b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e3aa:	6839      	ldr	r1, [r7, #0]
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 fbd3 	bl	800eb58 <USBD_CtlError>
                break;
 800e3b2:	e091      	b.n	800e4d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	da0b      	bge.n	800e3d4 <USBD_StdEPReq+0x19e>
 800e3bc:	7bbb      	ldrb	r3, [r7, #14]
 800e3be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	3310      	adds	r3, #16
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	e00b      	b.n	800e3ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3d4:	7bbb      	ldrb	r3, [r7, #14]
 800e3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3da:	4613      	mov	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2202      	movs	r2, #2
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 fbbd 	bl	800eb7a <USBD_CtlSendData>
              break;
 800e400:	e06a      	b.n	800e4d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e406:	2b00      	cmp	r3, #0
 800e408:	da11      	bge.n	800e42e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	f003 020f 	and.w	r2, r3, #15
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4613      	mov	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	440b      	add	r3, r1
 800e41c:	3324      	adds	r3, #36	; 0x24
 800e41e:	881b      	ldrh	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d117      	bne.n	800e454 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fb96 	bl	800eb58 <USBD_CtlError>
                  break;
 800e42c:	e054      	b.n	800e4d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e42e:	7bbb      	ldrb	r3, [r7, #14]
 800e430:	f003 020f 	and.w	r2, r3, #15
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	4613      	mov	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	440b      	add	r3, r1
 800e440:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e444:	881b      	ldrh	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d104      	bne.n	800e454 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e44a:	6839      	ldr	r1, [r7, #0]
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 fb83 	bl	800eb58 <USBD_CtlError>
                  break;
 800e452:	e041      	b.n	800e4d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	da0b      	bge.n	800e474 <USBD_StdEPReq+0x23e>
 800e45c:	7bbb      	ldrb	r3, [r7, #14]
 800e45e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e462:	4613      	mov	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4413      	add	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	3310      	adds	r3, #16
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	4413      	add	r3, r2
 800e470:	3304      	adds	r3, #4
 800e472:	e00b      	b.n	800e48c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e47a:	4613      	mov	r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4413      	add	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	4413      	add	r3, r2
 800e48a:	3304      	adds	r3, #4
 800e48c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e48e:	7bbb      	ldrb	r3, [r7, #14]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <USBD_StdEPReq+0x264>
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	2b80      	cmp	r3, #128	; 0x80
 800e498:	d103      	bne.n	800e4a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2200      	movs	r2, #0
 800e49e:	601a      	str	r2, [r3, #0]
 800e4a0:	e00e      	b.n	800e4c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e4a2:	7bbb      	ldrb	r3, [r7, #14]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7f4 fe0e 	bl	80030c8 <USBD_LL_IsStallEP>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]
 800e4b8:	e002      	b.n	800e4c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fb57 	bl	800eb7a <USBD_CtlSendData>
              break;
 800e4cc:	e004      	b.n	800e4d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fb41 	bl	800eb58 <USBD_CtlError>
              break;
 800e4d6:	bf00      	nop
          }
          break;
 800e4d8:	e004      	b.n	800e4e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fb3b 	bl	800eb58 <USBD_CtlError>
          break;
 800e4e2:	bf00      	nop
      }
      break;
 800e4e4:	e004      	b.n	800e4f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e4e6:	6839      	ldr	r1, [r7, #0]
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 fb35 	bl	800eb58 <USBD_CtlError>
      break;
 800e4ee:	bf00      	nop
  }

  return ret;
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
	...

0800e4fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e50e:	2300      	movs	r3, #0
 800e510:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	885b      	ldrh	r3, [r3, #2]
 800e516:	0a1b      	lsrs	r3, r3, #8
 800e518:	b29b      	uxth	r3, r3
 800e51a:	3b01      	subs	r3, #1
 800e51c:	2b06      	cmp	r3, #6
 800e51e:	f200 8128 	bhi.w	800e772 <USBD_GetDescriptor+0x276>
 800e522:	a201      	add	r2, pc, #4	; (adr r2, 800e528 <USBD_GetDescriptor+0x2c>)
 800e524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e528:	0800e545 	.word	0x0800e545
 800e52c:	0800e55d 	.word	0x0800e55d
 800e530:	0800e59d 	.word	0x0800e59d
 800e534:	0800e773 	.word	0x0800e773
 800e538:	0800e773 	.word	0x0800e773
 800e53c:	0800e713 	.word	0x0800e713
 800e540:	0800e73f 	.word	0x0800e73f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	7c12      	ldrb	r2, [r2, #16]
 800e550:	f107 0108 	add.w	r1, r7, #8
 800e554:	4610      	mov	r0, r2
 800e556:	4798      	blx	r3
 800e558:	60f8      	str	r0, [r7, #12]
      break;
 800e55a:	e112      	b.n	800e782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7c1b      	ldrb	r3, [r3, #16]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d10d      	bne.n	800e580 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e56c:	f107 0208 	add.w	r2, r7, #8
 800e570:	4610      	mov	r0, r2
 800e572:	4798      	blx	r3
 800e574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	3301      	adds	r3, #1
 800e57a:	2202      	movs	r2, #2
 800e57c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e57e:	e100      	b.n	800e782 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e588:	f107 0208 	add.w	r2, r7, #8
 800e58c:	4610      	mov	r0, r2
 800e58e:	4798      	blx	r3
 800e590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3301      	adds	r3, #1
 800e596:	2202      	movs	r2, #2
 800e598:	701a      	strb	r2, [r3, #0]
      break;
 800e59a:	e0f2      	b.n	800e782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	885b      	ldrh	r3, [r3, #2]
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	2b05      	cmp	r3, #5
 800e5a4:	f200 80ac 	bhi.w	800e700 <USBD_GetDescriptor+0x204>
 800e5a8:	a201      	add	r2, pc, #4	; (adr r2, 800e5b0 <USBD_GetDescriptor+0xb4>)
 800e5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ae:	bf00      	nop
 800e5b0:	0800e5c9 	.word	0x0800e5c9
 800e5b4:	0800e5fd 	.word	0x0800e5fd
 800e5b8:	0800e631 	.word	0x0800e631
 800e5bc:	0800e665 	.word	0x0800e665
 800e5c0:	0800e699 	.word	0x0800e699
 800e5c4:	0800e6cd 	.word	0x0800e6cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00b      	beq.n	800e5ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	7c12      	ldrb	r2, [r2, #16]
 800e5e0:	f107 0108 	add.w	r1, r7, #8
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	4798      	blx	r3
 800e5e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5ea:	e091      	b.n	800e710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 fab2 	bl	800eb58 <USBD_CtlError>
            err++;
 800e5f4:	7afb      	ldrb	r3, [r7, #11]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5fa:	e089      	b.n	800e710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00b      	beq.n	800e620 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	7c12      	ldrb	r2, [r2, #16]
 800e614:	f107 0108 	add.w	r1, r7, #8
 800e618:	4610      	mov	r0, r2
 800e61a:	4798      	blx	r3
 800e61c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e61e:	e077      	b.n	800e710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fa98 	bl	800eb58 <USBD_CtlError>
            err++;
 800e628:	7afb      	ldrb	r3, [r7, #11]
 800e62a:	3301      	adds	r3, #1
 800e62c:	72fb      	strb	r3, [r7, #11]
          break;
 800e62e:	e06f      	b.n	800e710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00b      	beq.n	800e654 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	7c12      	ldrb	r2, [r2, #16]
 800e648:	f107 0108 	add.w	r1, r7, #8
 800e64c:	4610      	mov	r0, r2
 800e64e:	4798      	blx	r3
 800e650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e652:	e05d      	b.n	800e710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e654:	6839      	ldr	r1, [r7, #0]
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 fa7e 	bl	800eb58 <USBD_CtlError>
            err++;
 800e65c:	7afb      	ldrb	r3, [r7, #11]
 800e65e:	3301      	adds	r3, #1
 800e660:	72fb      	strb	r3, [r7, #11]
          break;
 800e662:	e055      	b.n	800e710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	7c12      	ldrb	r2, [r2, #16]
 800e67c:	f107 0108 	add.w	r1, r7, #8
 800e680:	4610      	mov	r0, r2
 800e682:	4798      	blx	r3
 800e684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e686:	e043      	b.n	800e710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fa64 	bl	800eb58 <USBD_CtlError>
            err++;
 800e690:	7afb      	ldrb	r3, [r7, #11]
 800e692:	3301      	adds	r3, #1
 800e694:	72fb      	strb	r3, [r7, #11]
          break;
 800e696:	e03b      	b.n	800e710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6aa:	695b      	ldr	r3, [r3, #20]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	7c12      	ldrb	r2, [r2, #16]
 800e6b0:	f107 0108 	add.w	r1, r7, #8
 800e6b4:	4610      	mov	r0, r2
 800e6b6:	4798      	blx	r3
 800e6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ba:	e029      	b.n	800e710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fa4a 	bl	800eb58 <USBD_CtlError>
            err++;
 800e6c4:	7afb      	ldrb	r3, [r7, #11]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ca:	e021      	b.n	800e710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6d2:	699b      	ldr	r3, [r3, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00b      	beq.n	800e6f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	7c12      	ldrb	r2, [r2, #16]
 800e6e4:	f107 0108 	add.w	r1, r7, #8
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4798      	blx	r3
 800e6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ee:	e00f      	b.n	800e710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa30 	bl	800eb58 <USBD_CtlError>
            err++;
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6fe:	e007      	b.n	800e710 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e700:	6839      	ldr	r1, [r7, #0]
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 fa28 	bl	800eb58 <USBD_CtlError>
          err++;
 800e708:	7afb      	ldrb	r3, [r7, #11]
 800e70a:	3301      	adds	r3, #1
 800e70c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e70e:	bf00      	nop
      }
      break;
 800e710:	e037      	b.n	800e782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	7c1b      	ldrb	r3, [r3, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d109      	bne.n	800e72e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e722:	f107 0208 	add.w	r2, r7, #8
 800e726:	4610      	mov	r0, r2
 800e728:	4798      	blx	r3
 800e72a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e72c:	e029      	b.n	800e782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e72e:	6839      	ldr	r1, [r7, #0]
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 fa11 	bl	800eb58 <USBD_CtlError>
        err++;
 800e736:	7afb      	ldrb	r3, [r7, #11]
 800e738:	3301      	adds	r3, #1
 800e73a:	72fb      	strb	r3, [r7, #11]
      break;
 800e73c:	e021      	b.n	800e782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	7c1b      	ldrb	r3, [r3, #16]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d10d      	bne.n	800e762 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74e:	f107 0208 	add.w	r2, r7, #8
 800e752:	4610      	mov	r0, r2
 800e754:	4798      	blx	r3
 800e756:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	3301      	adds	r3, #1
 800e75c:	2207      	movs	r2, #7
 800e75e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e760:	e00f      	b.n	800e782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f9f7 	bl	800eb58 <USBD_CtlError>
        err++;
 800e76a:	7afb      	ldrb	r3, [r7, #11]
 800e76c:	3301      	adds	r3, #1
 800e76e:	72fb      	strb	r3, [r7, #11]
      break;
 800e770:	e007      	b.n	800e782 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e772:	6839      	ldr	r1, [r7, #0]
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 f9ef 	bl	800eb58 <USBD_CtlError>
      err++;
 800e77a:	7afb      	ldrb	r3, [r7, #11]
 800e77c:	3301      	adds	r3, #1
 800e77e:	72fb      	strb	r3, [r7, #11]
      break;
 800e780:	bf00      	nop
  }

  if (err != 0U)
 800e782:	7afb      	ldrb	r3, [r7, #11]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d11e      	bne.n	800e7c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	88db      	ldrh	r3, [r3, #6]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d016      	beq.n	800e7be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e790:	893b      	ldrh	r3, [r7, #8]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00e      	beq.n	800e7b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	88da      	ldrh	r2, [r3, #6]
 800e79a:	893b      	ldrh	r3, [r7, #8]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	bf28      	it	cs
 800e7a0:	4613      	movcs	r3, r2
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e7a6:	893b      	ldrh	r3, [r7, #8]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	68f9      	ldr	r1, [r7, #12]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f9e4 	bl	800eb7a <USBD_CtlSendData>
 800e7b2:	e009      	b.n	800e7c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e7b4:	6839      	ldr	r1, [r7, #0]
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 f9ce 	bl	800eb58 <USBD_CtlError>
 800e7bc:	e004      	b.n	800e7c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fa18 	bl	800ebf4 <USBD_CtlSendStatus>
 800e7c4:	e000      	b.n	800e7c8 <USBD_GetDescriptor+0x2cc>
    return;
 800e7c6:	bf00      	nop
  }
}
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop

0800e7d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	889b      	ldrh	r3, [r3, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d131      	bne.n	800e846 <USBD_SetAddress+0x76>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	88db      	ldrh	r3, [r3, #6]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d12d      	bne.n	800e846 <USBD_SetAddress+0x76>
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	885b      	ldrh	r3, [r3, #2]
 800e7ee:	2b7f      	cmp	r3, #127	; 0x7f
 800e7f0:	d829      	bhi.n	800e846 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	885b      	ldrh	r3, [r3, #2]
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b03      	cmp	r3, #3
 800e808:	d104      	bne.n	800e814 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f9a3 	bl	800eb58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e812:	e01d      	b.n	800e850 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7bfa      	ldrb	r2, [r7, #15]
 800e818:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7f4 fc7d 	bl	8003120 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 f9e4 	bl	800ebf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d004      	beq.n	800e83c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2202      	movs	r2, #2
 800e836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e83a:	e009      	b.n	800e850 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2201      	movs	r2, #1
 800e840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e844:	e004      	b.n	800e850 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e846:	6839      	ldr	r1, [r7, #0]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f985 	bl	800eb58 <USBD_CtlError>
  }
}
 800e84e:	bf00      	nop
 800e850:	bf00      	nop
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	885b      	ldrh	r3, [r3, #2]
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	4b4c      	ldr	r3, [pc, #304]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e86e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e870:	4b4b      	ldr	r3, [pc, #300]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	2b01      	cmp	r3, #1
 800e876:	d905      	bls.n	800e884 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e878:	6839      	ldr	r1, [r7, #0]
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f96c 	bl	800eb58 <USBD_CtlError>
    return USBD_FAIL;
 800e880:	2303      	movs	r3, #3
 800e882:	e088      	b.n	800e996 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d002      	beq.n	800e896 <USBD_SetConfig+0x3e>
 800e890:	2b03      	cmp	r3, #3
 800e892:	d025      	beq.n	800e8e0 <USBD_SetConfig+0x88>
 800e894:	e071      	b.n	800e97a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e896:	4b42      	ldr	r3, [pc, #264]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d01c      	beq.n	800e8d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e89e:	4b40      	ldr	r3, [pc, #256]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8a8:	4b3d      	ldr	r3, [pc, #244]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f7ff f949 	bl	800db46 <USBD_SetClassConfig>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d004      	beq.n	800e8c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 f949 	bl	800eb58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8c6:	e065      	b.n	800e994 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f993 	bl	800ebf4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2203      	movs	r2, #3
 800e8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e8d6:	e05d      	b.n	800e994 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f98b 	bl	800ebf4 <USBD_CtlSendStatus>
      break;
 800e8de:	e059      	b.n	800e994 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e8e0:	4b2f      	ldr	r3, [pc, #188]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d112      	bne.n	800e90e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e8f0:	4b2b      	ldr	r3, [pc, #172]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8fa:	4b29      	ldr	r3, [pc, #164]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	4619      	mov	r1, r3
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7ff f93c 	bl	800db7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 f974 	bl	800ebf4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e90c:	e042      	b.n	800e994 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e90e:	4b24      	ldr	r3, [pc, #144]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	461a      	mov	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d02a      	beq.n	800e972 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	b2db      	uxtb	r3, r3
 800e922:	4619      	mov	r1, r3
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff f92a 	bl	800db7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e92a:	4b1d      	ldr	r3, [pc, #116]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	461a      	mov	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e934:	4b1a      	ldr	r3, [pc, #104]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	4619      	mov	r1, r3
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7ff f903 	bl	800db46 <USBD_SetClassConfig>
 800e940:	4603      	mov	r3, r0
 800e942:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00f      	beq.n	800e96a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f903 	bl	800eb58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	b2db      	uxtb	r3, r3
 800e958:	4619      	mov	r1, r3
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f7ff f90f 	bl	800db7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2202      	movs	r2, #2
 800e964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e968:	e014      	b.n	800e994 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 f942 	bl	800ebf4 <USBD_CtlSendStatus>
      break;
 800e970:	e010      	b.n	800e994 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f93e 	bl	800ebf4 <USBD_CtlSendStatus>
      break;
 800e978:	e00c      	b.n	800e994 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 f8eb 	bl	800eb58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e982:	4b07      	ldr	r3, [pc, #28]	; (800e9a0 <USBD_SetConfig+0x148>)
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7ff f8f8 	bl	800db7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e98e:	2303      	movs	r3, #3
 800e990:	73fb      	strb	r3, [r7, #15]
      break;
 800e992:	bf00      	nop
  }

  return ret;
 800e994:	7bfb      	ldrb	r3, [r7, #15]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	2000030a 	.word	0x2000030a

0800e9a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	88db      	ldrh	r3, [r3, #6]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d004      	beq.n	800e9c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e9b6:	6839      	ldr	r1, [r7, #0]
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 f8cd 	bl	800eb58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e9be:	e023      	b.n	800ea08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	dc02      	bgt.n	800e9d2 <USBD_GetConfig+0x2e>
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	dc03      	bgt.n	800e9d8 <USBD_GetConfig+0x34>
 800e9d0:	e015      	b.n	800e9fe <USBD_GetConfig+0x5a>
 800e9d2:	2b03      	cmp	r3, #3
 800e9d4:	d00b      	beq.n	800e9ee <USBD_GetConfig+0x4a>
 800e9d6:	e012      	b.n	800e9fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	3308      	adds	r3, #8
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 f8c7 	bl	800eb7a <USBD_CtlSendData>
        break;
 800e9ec:	e00c      	b.n	800ea08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	3304      	adds	r3, #4
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f8bf 	bl	800eb7a <USBD_CtlSendData>
        break;
 800e9fc:	e004      	b.n	800ea08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 f8a9 	bl	800eb58 <USBD_CtlError>
        break;
 800ea06:	bf00      	nop
}
 800ea08:	bf00      	nop
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	3b01      	subs	r3, #1
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d81e      	bhi.n	800ea66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	88db      	ldrh	r3, [r3, #6]
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d004      	beq.n	800ea3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f890 	bl	800eb58 <USBD_CtlError>
        break;
 800ea38:	e01a      	b.n	800ea70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d005      	beq.n	800ea56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	f043 0202 	orr.w	r2, r3, #2
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	330c      	adds	r3, #12
 800ea5a:	2202      	movs	r2, #2
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 f88b 	bl	800eb7a <USBD_CtlSendData>
      break;
 800ea64:	e004      	b.n	800ea70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f875 	bl	800eb58 <USBD_CtlError>
      break;
 800ea6e:	bf00      	nop
  }
}
 800ea70:	bf00      	nop
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	885b      	ldrh	r3, [r3, #2]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d106      	bne.n	800ea98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 f8ae 	bl	800ebf4 <USBD_CtlSendStatus>
  }
}
 800ea98:	bf00      	nop
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	3b01      	subs	r3, #1
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d80b      	bhi.n	800ead0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	885b      	ldrh	r3, [r3, #2]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d10c      	bne.n	800eada <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 f893 	bl	800ebf4 <USBD_CtlSendStatus>
      }
      break;
 800eace:	e004      	b.n	800eada <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ead0:	6839      	ldr	r1, [r7, #0]
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 f840 	bl	800eb58 <USBD_CtlError>
      break;
 800ead8:	e000      	b.n	800eadc <USBD_ClrFeature+0x3c>
      break;
 800eada:	bf00      	nop
  }
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	781a      	ldrb	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3301      	adds	r3, #1
 800eafe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	781a      	ldrb	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f7ff fabc 	bl	800e08c <SWAPBYTE>
 800eb14:	4603      	mov	r3, r0
 800eb16:	461a      	mov	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3301      	adds	r3, #1
 800eb26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f7ff faaf 	bl	800e08c <SWAPBYTE>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	461a      	mov	r2, r3
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7ff faa2 	bl	800e08c <SWAPBYTE>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	80da      	strh	r2, [r3, #6]
}
 800eb50:	bf00      	nop
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb62:	2180      	movs	r1, #128	; 0x80
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7f4 fa89 	bl	800307c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7f4 fa85 	bl	800307c <USBD_LL_StallEP>
}
 800eb72:	bf00      	nop
 800eb74:	3708      	adds	r7, #8
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	60f8      	str	r0, [r7, #12]
 800eb82:	60b9      	str	r1, [r7, #8]
 800eb84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2202      	movs	r2, #2
 800eb8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	2100      	movs	r1, #0
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f7f4 fad0 	bl	8003146 <USBD_LL_Transmit>

  return USBD_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3710      	adds	r7, #16
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f7f4 fabf 	bl	8003146 <USBD_LL_Transmit>

  return USBD_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b084      	sub	sp, #16
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	60f8      	str	r0, [r7, #12]
 800ebda:	60b9      	str	r1, [r7, #8]
 800ebdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f7f4 fac3 	bl	8003170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2204      	movs	r2, #4
 800ec00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec04:	2300      	movs	r3, #0
 800ec06:	2200      	movs	r2, #0
 800ec08:	2100      	movs	r1, #0
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7f4 fa9b 	bl	8003146 <USBD_LL_Transmit>

  return USBD_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b082      	sub	sp, #8
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2205      	movs	r2, #5
 800ec26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2100      	movs	r1, #0
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7f4 fa9d 	bl	8003170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08c      	sub	sp, #48	; 0x30
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	4603      	mov	r3, r0
 800ec4a:	71fb      	strb	r3, [r7, #7]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	71bb      	strb	r3, [r7, #6]
 800ec50:	4613      	mov	r3, r2
 800ec52:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800ec58:	79bb      	ldrb	r3, [r7, #6]
 800ec5a:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800ec5c:	797b      	ldrb	r3, [r7, #5]
 800ec5e:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ec60:	f107 030c 	add.w	r3, r7, #12
 800ec64:	2207      	movs	r2, #7
 800ec66:	2100      	movs	r1, #0
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f001 f979 	bl	800ff60 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec6e:	f107 0318 	add.w	r3, r7, #24
 800ec72:	2218      	movs	r2, #24
 800ec74:	2100      	movs	r1, #0
 800ec76:	4618      	mov	r0, r3
 800ec78:	f001 f972 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ec7c:	233f      	movs	r3, #63	; 0x3f
 800ec7e:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800ec80:	238a      	movs	r3, #138	; 0x8a
 800ec82:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800ec84:	f107 0314 	add.w	r3, r7, #20
 800ec88:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800ec8e:	f107 030c 	add.w	r3, r7, #12
 800ec92:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800ec94:	2307      	movs	r3, #7
 800ec96:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ec98:	f107 0318 	add.w	r3, r7, #24
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f000 fe7c 	bl	800f99c <hci_send_req>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	da01      	bge.n	800ecae <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800ecaa:	23ff      	movs	r3, #255	; 0xff
 800ecac:	e014      	b.n	800ecd8 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800ecae:	7b3b      	ldrb	r3, [r7, #12]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d001      	beq.n	800ecb8 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800ecb4:	7b3b      	ldrb	r3, [r7, #12]
 800ecb6:	e00f      	b.n	800ecd8 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800ecb8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800ecc2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecca:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800eccc:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3730      	adds	r7, #48	; 0x30
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800ece0:	b590      	push	{r4, r7, lr}
 800ece2:	b095      	sub	sp, #84	; 0x54
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	4611      	mov	r1, r2
 800ecec:	461a      	mov	r2, r3
 800ecee:	4623      	mov	r3, r4
 800ecf0:	71fb      	strb	r3, [r7, #7]
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	80bb      	strh	r3, [r7, #4]
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	807b      	strh	r3, [r7, #2]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800ed04:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800ed08:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ed0c:	4413      	add	r3, r2
 800ed0e:	330e      	adds	r3, #14
 800ed10:	2b28      	cmp	r3, #40	; 0x28
 800ed12:	d901      	bls.n	800ed18 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800ed14:	2342      	movs	r3, #66	; 0x42
 800ed16:	e0ce      	b.n	800eeb6 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800ed18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed1c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ed20:	4413      	add	r3, r2
 800ed22:	79fa      	ldrb	r2, [r7, #7]
 800ed24:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ed28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800ed32:	88bb      	ldrh	r3, [r7, #4]
 800ed34:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800ed36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed3a:	f107 0208 	add.w	r2, r7, #8
 800ed3e:	4413      	add	r3, r2
 800ed40:	88ba      	ldrh	r2, [r7, #4]
 800ed42:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ed44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed48:	3302      	adds	r3, #2
 800ed4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800ed4e:	887b      	ldrh	r3, [r7, #2]
 800ed50:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800ed52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed56:	f107 0208 	add.w	r2, r7, #8
 800ed5a:	4413      	add	r3, r2
 800ed5c:	887a      	ldrh	r2, [r7, #2]
 800ed5e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ed60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed64:	3302      	adds	r3, #2
 800ed66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800ed6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ed72:	4413      	add	r3, r2
 800ed74:	79ba      	ldrb	r2, [r7, #6]
 800ed76:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ed7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed7e:	3301      	adds	r3, #1
 800ed80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800ed84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ed8c:	4413      	add	r3, r2
 800ed8e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ed92:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ed96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800eda0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eda4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800eda8:	4413      	add	r3, r2
 800edaa:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800edae:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800edb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edb6:	3301      	adds	r3, #1
 800edb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800edbc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edc0:	f107 0208 	add.w	r2, r7, #8
 800edc4:	4413      	add	r3, r2
 800edc6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800edca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800edcc:	4618      	mov	r0, r3
 800edce:	f001 f8b9 	bl	800ff44 <memcpy>
  indx +=  LocalNameLen;
 800edd2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800edd6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800edda:	4413      	add	r3, r2
 800eddc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800ede0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ede4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ede8:	4413      	add	r3, r2
 800edea:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800edee:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800edf2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edf6:	3301      	adds	r3, #1
 800edf8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800edfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee00:	f107 0208 	add.w	r2, r7, #8
 800ee04:	4413      	add	r3, r2
 800ee06:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800ee0a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f001 f899 	bl	800ff44 <memcpy>
  indx +=  ServiceUUIDLen;  
 800ee12:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ee16:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800ee20:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ee24:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800ee28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee2c:	f107 0208 	add.w	r2, r7, #8
 800ee30:	4413      	add	r3, r2
 800ee32:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800ee36:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ee38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee3c:	3302      	adds	r3, #2
 800ee3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800ee42:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ee46:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800ee4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee4e:	f107 0208 	add.w	r2, r7, #8
 800ee52:	4413      	add	r3, r2
 800ee54:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800ee58:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800ee5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee5e:	3302      	adds	r3, #2
 800ee60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ee64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ee68:	2218      	movs	r2, #24
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f001 f877 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ee72:	233f      	movs	r3, #63	; 0x3f
 800ee74:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800ee76:	2383      	movs	r3, #131	; 0x83
 800ee78:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800ee7a:	f107 0308 	add.w	r3, r7, #8
 800ee7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800ee80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee84:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800ee86:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800ee8a:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800ee90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ee94:	2100      	movs	r1, #0
 800ee96:	4618      	mov	r0, r3
 800ee98:	f000 fd80 	bl	800f99c <hci_send_req>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	da01      	bge.n	800eea6 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800eea2:	23ff      	movs	r3, #255	; 0xff
 800eea4:	e007      	b.n	800eeb6 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800eea6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <aci_gap_set_discoverable+0x1d4>
    return status;
 800eeae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eeb2:	e000      	b.n	800eeb6 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3754      	adds	r7, #84	; 0x54
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd90      	pop	{r4, r7, pc}

0800eebe <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800eebe:	b590      	push	{r4, r7, lr}
 800eec0:	b091      	sub	sp, #68	; 0x44
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	603a      	str	r2, [r7, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	4603      	mov	r3, r0
 800eeca:	71fb      	strb	r3, [r7, #7]
 800eecc:	460b      	mov	r3, r1
 800eece:	71bb      	strb	r3, [r7, #6]
 800eed0:	4613      	mov	r3, r2
 800eed2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800eed4:	79fb      	ldrb	r3, [r7, #7]
 800eed6:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800eed8:	79bb      	ldrb	r3, [r7, #6]
 800eeda:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800eedc:	79bb      	ldrb	r3, [r7, #6]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00a      	beq.n	800eef8 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	f107 030e 	add.w	r3, r7, #14
 800eee8:	6814      	ldr	r4, [r2, #0]
 800eeea:	6850      	ldr	r0, [r2, #4]
 800eeec:	6891      	ldr	r1, [r2, #8]
 800eeee:	68d2      	ldr	r2, [r2, #12]
 800eef0:	601c      	str	r4, [r3, #0]
 800eef2:	6058      	str	r0, [r3, #4]
 800eef4:	6099      	str	r1, [r3, #8]
 800eef6:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800eef8:	797b      	ldrb	r3, [r7, #5]
 800eefa:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800eefc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ef00:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800ef02:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ef06:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800ef0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef0c:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800ef10:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800ef14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ef18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef1c:	2218      	movs	r2, #24
 800ef1e:	2100      	movs	r1, #0
 800ef20:	4618      	mov	r0, r3
 800ef22:	f001 f81d 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ef26:	233f      	movs	r3, #63	; 0x3f
 800ef28:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800ef2a:	2386      	movs	r3, #134	; 0x86
 800ef2c:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800ef2e:	f107 030c 	add.w	r3, r7, #12
 800ef32:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800ef34:	231a      	movs	r3, #26
 800ef36:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800ef38:	f107 030b 	add.w	r3, r7, #11
 800ef3c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800ef42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef46:	2100      	movs	r1, #0
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f000 fd27 	bl	800f99c <hci_send_req>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	da01      	bge.n	800ef58 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800ef54:	23ff      	movs	r3, #255	; 0xff
 800ef56:	e005      	b.n	800ef64 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800ef58:	7afb      	ldrb	r3, [r7, #11]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d001      	beq.n	800ef62 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800ef5e:	7afb      	ldrb	r3, [r7, #11]
 800ef60:	e000      	b.n	800ef64 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800ef62:	2300      	movs	r3, #0
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3744      	adds	r7, #68	; 0x44
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd90      	pop	{r4, r7, pc}

0800ef6c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b092      	sub	sp, #72	; 0x48
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	4603      	mov	r3, r0
 800ef74:	6039      	str	r1, [r7, #0]
 800ef76:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800ef7e:	79fb      	ldrb	r3, [r7, #7]
 800ef80:	2b1f      	cmp	r3, #31
 800ef82:	d901      	bls.n	800ef88 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800ef84:	2342      	movs	r3, #66	; 0x42
 800ef86:	e03f      	b.n	800f008 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800ef88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ef90:	4413      	add	r3, r2
 800ef92:	79fa      	ldrb	r2, [r7, #7]
 800ef94:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800ef98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800efa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800efa6:	f107 0208 	add.w	r2, r7, #8
 800efaa:	4413      	add	r3, r2
 800efac:	79fa      	ldrb	r2, [r7, #7]
 800efae:	6839      	ldr	r1, [r7, #0]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f000 ffc7 	bl	800ff44 <memcpy>
  indx +=  AdvLen;
 800efb6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800efba:	79fb      	ldrb	r3, [r7, #7]
 800efbc:	4413      	add	r3, r2
 800efbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800efc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800efc6:	2218      	movs	r2, #24
 800efc8:	2100      	movs	r1, #0
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 ffc8 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800efd0:	233f      	movs	r3, #63	; 0x3f
 800efd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800efd4:	238e      	movs	r3, #142	; 0x8e
 800efd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800efd8:	f107 0308 	add.w	r3, r7, #8
 800efdc:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800efde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800efe2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800efe4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800efe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800efea:	2301      	movs	r3, #1
 800efec:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800efee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eff2:	2100      	movs	r1, #0
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fcd1 	bl	800f99c <hci_send_req>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	da01      	bge.n	800f004 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800f000:	23ff      	movs	r3, #255	; 0xff
 800f002:	e001      	b.n	800f008 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800f004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3748      	adds	r7, #72	; 0x48
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b088      	sub	sp, #32
 800f014:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f016:	f107 0308 	add.w	r3, r7, #8
 800f01a:	2218      	movs	r2, #24
 800f01c:	2100      	movs	r1, #0
 800f01e:	4618      	mov	r0, r3
 800f020:	f000 ff9e 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f024:	233f      	movs	r3, #63	; 0x3f
 800f026:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800f028:	f240 1301 	movw	r3, #257	; 0x101
 800f02c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f02e:	1dfb      	adds	r3, r7, #7
 800f030:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f032:	2301      	movs	r3, #1
 800f034:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800f036:	f107 0308 	add.w	r3, r7, #8
 800f03a:	2100      	movs	r1, #0
 800f03c:	4618      	mov	r0, r3
 800f03e:	f000 fcad 	bl	800f99c <hci_send_req>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	da01      	bge.n	800f04c <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800f048:	23ff      	movs	r3, #255	; 0xff
 800f04a:	e000      	b.n	800f04e <aci_gatt_init+0x3e>

  return status;
 800f04c:	79fb      	ldrb	r3, [r7, #7]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3720      	adds	r7, #32
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b090      	sub	sp, #64	; 0x40
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6039      	str	r1, [r7, #0]
 800f05e:	4611      	mov	r1, r2
 800f060:	461a      	mov	r2, r3
 800f062:	4603      	mov	r3, r0
 800f064:	71fb      	strb	r3, [r7, #7]
 800f066:	460b      	mov	r3, r1
 800f068:	71bb      	strb	r3, [r7, #6]
 800f06a:	4613      	mov	r3, r2
 800f06c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800f074:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f078:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f07c:	4413      	add	r3, r2
 800f07e:	79fa      	ldrb	r2, [r7, #7]
 800f080:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f084:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f088:	3301      	adds	r3, #1
 800f08a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800f08e:	79fb      	ldrb	r3, [r7, #7]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d103      	bne.n	800f09c <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800f094:	2302      	movs	r3, #2
 800f096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f09a:	e002      	b.n	800f0a2 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800f09c:	2310      	movs	r3, #16
 800f09e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800f0a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0a6:	f107 020c 	add.w	r2, r7, #12
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f000 ff46 	bl	800ff44 <memcpy>
  indx +=  uuid_len;
 800f0b8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f0bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f0c0:	4413      	add	r3, r2
 800f0c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800f0c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f0ce:	4413      	add	r3, r2
 800f0d0:	79ba      	ldrb	r2, [r7, #6]
 800f0d2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f0d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0da:	3301      	adds	r3, #1
 800f0dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800f0e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f0e8:	4413      	add	r3, r2
 800f0ea:	797a      	ldrb	r2, [r7, #5]
 800f0ec:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f0f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f0fa:	f107 0320 	add.w	r3, r7, #32
 800f0fe:	2203      	movs	r2, #3
 800f100:	2100      	movs	r1, #0
 800f102:	4618      	mov	r0, r3
 800f104:	f000 ff2c 	bl	800ff60 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f10c:	2218      	movs	r2, #24
 800f10e:	2100      	movs	r1, #0
 800f110:	4618      	mov	r0, r3
 800f112:	f000 ff25 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f116:	233f      	movs	r3, #63	; 0x3f
 800f118:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800f11a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800f11e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800f120:	f107 030c 	add.w	r3, r7, #12
 800f124:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800f126:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f12a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800f12c:	f107 0320 	add.w	r3, r7, #32
 800f130:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800f132:	2303      	movs	r3, #3
 800f134:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800f136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f13a:	2100      	movs	r1, #0
 800f13c:	4618      	mov	r0, r3
 800f13e:	f000 fc2d 	bl	800f99c <hci_send_req>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	da01      	bge.n	800f14c <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f148:	23ff      	movs	r3, #255	; 0xff
 800f14a:	e00c      	b.n	800f166 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800f14c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <aci_gatt_add_serv+0x104>
    return resp.status;
 800f154:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f158:	e005      	b.n	800f166 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800f15a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800f15e:	b29a      	uxth	r2, r3
 800f160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f162:	801a      	strh	r2, [r3, #0]

  return 0;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3740      	adds	r7, #64	; 0x40
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b092      	sub	sp, #72	; 0x48
 800f172:	af00      	add	r7, sp, #0
 800f174:	603a      	str	r2, [r7, #0]
 800f176:	461a      	mov	r2, r3
 800f178:	4603      	mov	r3, r0
 800f17a:	80fb      	strh	r3, [r7, #6]
 800f17c:	460b      	mov	r3, r1
 800f17e:	717b      	strb	r3, [r7, #5]
 800f180:	4613      	mov	r3, r2
 800f182:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800f18a:	88fb      	ldrh	r3, [r7, #6]
 800f18c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800f18e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f192:	f107 020c 	add.w	r2, r7, #12
 800f196:	4413      	add	r3, r2
 800f198:	88fa      	ldrh	r2, [r7, #6]
 800f19a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f19c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1a0:	3302      	adds	r3, #2
 800f1a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800f1a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f1ae:	4413      	add	r3, r2
 800f1b0:	797a      	ldrb	r2, [r7, #5]
 800f1b2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f1b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800f1c0:	797b      	ldrb	r3, [r7, #5]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d103      	bne.n	800f1ce <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f1cc:	e002      	b.n	800f1d4 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800f1ce:	2310      	movs	r3, #16
 800f1d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800f1d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1d8:	f107 020c 	add.w	r2, r7, #12
 800f1dc:	4413      	add	r3, r2
 800f1de:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 fead 	bl	800ff44 <memcpy>
  indx +=  uuid_len;
 800f1ea:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800f1ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f1f2:	4413      	add	r3, r2
 800f1f4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800f1f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f1fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f200:	4413      	add	r3, r2
 800f202:	793a      	ldrb	r2, [r7, #4]
 800f204:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f208:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f20c:	3301      	adds	r3, #1
 800f20e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800f212:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f216:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f21a:	4413      	add	r3, r2
 800f21c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f220:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f224:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f228:	3301      	adds	r3, #1
 800f22a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800f22e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f232:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f236:	4413      	add	r3, r2
 800f238:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f23c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f240:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f244:	3301      	adds	r3, #1
 800f246:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800f24a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f24e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f252:	4413      	add	r3, r2
 800f254:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f258:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f25c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f260:	3301      	adds	r3, #1
 800f262:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800f266:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f26a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f26e:	4413      	add	r3, r2
 800f270:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f274:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f278:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f27c:	3301      	adds	r3, #1
 800f27e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800f282:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f286:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f28a:	4413      	add	r3, r2
 800f28c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f290:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f294:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f298:	3301      	adds	r3, #1
 800f29a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f29e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2a2:	2203      	movs	r2, #3
 800f2a4:	2100      	movs	r1, #0
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 fe5a 	bl	800ff60 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f2ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2b0:	2218      	movs	r2, #24
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 fe53 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f2ba:	233f      	movs	r3, #63	; 0x3f
 800f2bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800f2be:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f2c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800f2c4:	f107 030c 	add.w	r3, r7, #12
 800f2c8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800f2ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f2ce:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800f2d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800f2da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2de:	2100      	movs	r1, #0
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f000 fb5b 	bl	800f99c <hci_send_req>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	da01      	bge.n	800f2f0 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800f2ec:	23ff      	movs	r3, #255	; 0xff
 800f2ee:	e00c      	b.n	800f30a <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800f2f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d002      	beq.n	800f2fe <aci_gatt_add_char+0x190>
    return resp.status;
 800f2f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2fc:	e005      	b.n	800f30a <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800f2fe:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800f302:	b29a      	uxth	r2, r3
 800f304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f306:	801a      	strh	r2, [r3, #0]

  return 0;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3748      	adds	r7, #72	; 0x48
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800f312:	b590      	push	{r4, r7, lr}
 800f314:	b0ab      	sub	sp, #172	; 0xac
 800f316:	af00      	add	r7, sp, #0
 800f318:	4604      	mov	r4, r0
 800f31a:	4608      	mov	r0, r1
 800f31c:	4611      	mov	r1, r2
 800f31e:	461a      	mov	r2, r3
 800f320:	4623      	mov	r3, r4
 800f322:	80fb      	strh	r3, [r7, #6]
 800f324:	4603      	mov	r3, r0
 800f326:	80bb      	strh	r3, [r7, #4]
 800f328:	460b      	mov	r3, r1
 800f32a:	70fb      	strb	r3, [r7, #3]
 800f32c:	4613      	mov	r3, r2
 800f32e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800f330:	2300      	movs	r3, #0
 800f332:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800f336:	78bb      	ldrb	r3, [r7, #2]
 800f338:	2b7a      	cmp	r3, #122	; 0x7a
 800f33a:	d901      	bls.n	800f340 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800f33c:	2342      	movs	r3, #66	; 0x42
 800f33e:	e076      	b.n	800f42e <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 800f340:	88fb      	ldrh	r3, [r7, #6]
 800f342:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800f344:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f348:	f107 0208 	add.w	r2, r7, #8
 800f34c:	4413      	add	r3, r2
 800f34e:	88fa      	ldrh	r2, [r7, #6]
 800f350:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f352:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f356:	3302      	adds	r3, #2
 800f358:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800f35c:	88bb      	ldrh	r3, [r7, #4]
 800f35e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800f360:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f364:	f107 0208 	add.w	r2, r7, #8
 800f368:	4413      	add	r3, r2
 800f36a:	88ba      	ldrh	r2, [r7, #4]
 800f36c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f36e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f372:	3302      	adds	r3, #2
 800f374:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800f378:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f37c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f380:	4413      	add	r3, r2
 800f382:	78fa      	ldrb	r2, [r7, #3]
 800f384:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f388:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f38c:	3301      	adds	r3, #1
 800f38e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800f392:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f396:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f39a:	4413      	add	r3, r2
 800f39c:	78ba      	ldrb	r2, [r7, #2]
 800f39e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f3a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800f3ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f3b0:	f107 0208 	add.w	r2, r7, #8
 800f3b4:	4413      	add	r3, r2
 800f3b6:	78ba      	ldrb	r2, [r7, #2]
 800f3b8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f000 fdc1 	bl	800ff44 <memcpy>
  indx +=  charValueLen;
 800f3c2:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800f3c6:	78bb      	ldrb	r3, [r7, #2]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f3ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f3d2:	2218      	movs	r2, #24
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fdc2 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f3dc:	233f      	movs	r3, #63	; 0x3f
 800f3de:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800f3e2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800f3e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800f3ea:	f107 0308 	add.w	r3, r7, #8
 800f3ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800f3f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f3f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800f3fa:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800f3fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800f402:	2301      	movs	r3, #1
 800f404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800f408:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f40c:	2100      	movs	r1, #0
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 fac4 	bl	800f99c <hci_send_req>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	da01      	bge.n	800f41e <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 800f41a:	23ff      	movs	r3, #255	; 0xff
 800f41c:	e007      	b.n	800f42e <aci_gatt_update_char_value+0x11c>

  if (status) {
 800f41e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f422:	2b00      	cmp	r3, #0
 800f424:	d002      	beq.n	800f42c <aci_gatt_update_char_value+0x11a>
    return status;
 800f426:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f42a:	e000      	b.n	800f42e <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	37ac      	adds	r7, #172	; 0xac
 800f432:	46bd      	mov	sp, r7
 800f434:	bd90      	pop	{r4, r7, pc}

0800f436 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b08a      	sub	sp, #40	; 0x28
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	4603      	mov	r3, r0
 800f43e:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800f440:	88fb      	ldrh	r3, [r7, #6]
 800f442:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800f444:	f107 0310 	add.w	r3, r7, #16
 800f448:	2218      	movs	r2, #24
 800f44a:	2100      	movs	r1, #0
 800f44c:	4618      	mov	r0, r3
 800f44e:	f000 fd87 	bl	800ff60 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800f452:	233f      	movs	r3, #63	; 0x3f
 800f454:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800f456:	f240 1327 	movw	r3, #295	; 0x127
 800f45a:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800f45c:	f107 030c 	add.w	r3, r7, #12
 800f460:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800f462:	2302      	movs	r3, #2
 800f464:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800f466:	f107 030b 	add.w	r3, r7, #11
 800f46a:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800f46c:	2301      	movs	r3, #1
 800f46e:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800f470:	f107 0310 	add.w	r3, r7, #16
 800f474:	2100      	movs	r1, #0
 800f476:	4618      	mov	r0, r3
 800f478:	f000 fa90 	bl	800f99c <hci_send_req>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	da01      	bge.n	800f486 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800f482:	23ff      	movs	r3, #255	; 0xff
 800f484:	e000      	b.n	800f488 <aci_gatt_allow_read+0x52>

    return status;
 800f486:	7afb      	ldrb	r3, [r7, #11]
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3728      	adds	r7, #40	; 0x28
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b0aa      	sub	sp, #168	; 0xa8
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	603a      	str	r2, [r7, #0]
 800f49a:	71fb      	strb	r3, [r7, #7]
 800f49c:	460b      	mov	r3, r1
 800f49e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800f4a6:	79bb      	ldrb	r3, [r7, #6]
 800f4a8:	2b7e      	cmp	r3, #126	; 0x7e
 800f4aa:	d901      	bls.n	800f4b0 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 800f4ac:	2342      	movs	r3, #66	; 0x42
 800f4ae:	e052      	b.n	800f556 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 800f4b0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f4b8:	4413      	add	r3, r2
 800f4ba:	79fa      	ldrb	r2, [r7, #7]
 800f4bc:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f4c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800f4ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f4d2:	4413      	add	r3, r2
 800f4d4:	79ba      	ldrb	r2, [r7, #6]
 800f4d6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f4da:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4de:	3301      	adds	r3, #1
 800f4e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800f4e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4e8:	f107 0208 	add.w	r2, r7, #8
 800f4ec:	4413      	add	r3, r2
 800f4ee:	79ba      	ldrb	r2, [r7, #6]
 800f4f0:	6839      	ldr	r1, [r7, #0]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f000 fd26 	bl	800ff44 <memcpy>
  indx +=  len;
 800f4f8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800f4fc:	79bb      	ldrb	r3, [r7, #6]
 800f4fe:	4413      	add	r3, r2
 800f500:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f504:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f508:	2218      	movs	r2, #24
 800f50a:	2100      	movs	r1, #0
 800f50c:	4618      	mov	r0, r3
 800f50e:	f000 fd27 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f512:	233f      	movs	r3, #63	; 0x3f
 800f514:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800f518:	230c      	movs	r3, #12
 800f51a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800f51e:	f107 0308 	add.w	r3, r7, #8
 800f522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800f526:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f52a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800f52e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800f532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800f536:	2301      	movs	r3, #1
 800f538:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800f53c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f540:	2100      	movs	r1, #0
 800f542:	4618      	mov	r0, r3
 800f544:	f000 fa2a 	bl	800f99c <hci_send_req>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	da01      	bge.n	800f552 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800f54e:	23ff      	movs	r3, #255	; 0xff
 800f550:	e001      	b.n	800f556 <aci_hal_write_config_data+0xc6>

  return status;
 800f552:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 800f556:	4618      	mov	r0, r3
 800f558:	37a8      	adds	r7, #168	; 0xa8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b08a      	sub	sp, #40	; 0x28
 800f562:	af00      	add	r7, sp, #0
 800f564:	4603      	mov	r3, r0
 800f566:	460a      	mov	r2, r1
 800f568:	71fb      	strb	r3, [r7, #7]
 800f56a:	4613      	mov	r3, r2
 800f56c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800f56e:	79fb      	ldrb	r3, [r7, #7]
 800f570:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800f572:	79bb      	ldrb	r3, [r7, #6]
 800f574:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f576:	f107 0310 	add.w	r3, r7, #16
 800f57a:	2218      	movs	r2, #24
 800f57c:	2100      	movs	r1, #0
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 fcee 	bl	800ff60 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f584:	233f      	movs	r3, #63	; 0x3f
 800f586:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800f588:	230f      	movs	r3, #15
 800f58a:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800f58c:	f107 030c 	add.w	r3, r7, #12
 800f590:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800f592:	2302      	movs	r3, #2
 800f594:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800f596:	f107 030b 	add.w	r3, r7, #11
 800f59a:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800f59c:	2301      	movs	r3, #1
 800f59e:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800f5a0:	f107 0310 	add.w	r3, r7, #16
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f000 f9f8 	bl	800f99c <hci_send_req>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	da01      	bge.n	800f5b6 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800f5b2:	23ff      	movs	r3, #255	; 0xff
 800f5b4:	e000      	b.n	800f5b8 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800f5b6:	7afb      	ldrb	r3, [r7, #11]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3728      	adds	r7, #40	; 0x28
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800f5c0:	b590      	push	{r4, r7, lr}
 800f5c2:	b089      	sub	sp, #36	; 0x24
 800f5c4:	af02      	add	r7, sp, #8
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800f5ca:	f107 0410 	add.w	r4, r7, #16
 800f5ce:	f107 0215 	add.w	r2, r7, #21
 800f5d2:	f107 0112 	add.w	r1, r7, #18
 800f5d6:	f107 0016 	add.w	r0, r7, #22
 800f5da:	f107 030e 	add.w	r3, r7, #14
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	4623      	mov	r3, r4
 800f5e2:	f000 f853 	bl	800f68c <hci_le_read_local_version>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800f5ea:	7dfb      	ldrb	r3, [r7, #23]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d126      	bne.n	800f63e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800f5f0:	8a7b      	ldrh	r3, [r7, #18]
 800f5f2:	0a1b      	lsrs	r3, r3, #8
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800f5fc:	8a7b      	ldrh	r3, [r7, #18]
 800f5fe:	021b      	lsls	r3, r3, #8
 800f600:	b29a      	uxth	r2, r3
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	b21a      	sxth	r2, r3
 800f60c:	89fb      	ldrh	r3, [r7, #14]
 800f60e:	091b      	lsrs	r3, r3, #4
 800f610:	b29b      	uxth	r3, r3
 800f612:	011b      	lsls	r3, r3, #4
 800f614:	b21b      	sxth	r3, r3
 800f616:	b2db      	uxtb	r3, r3
 800f618:	b21b      	sxth	r3, r3
 800f61a:	4313      	orrs	r3, r2
 800f61c:	b21b      	sxth	r3, r3
 800f61e:	b29a      	uxth	r2, r3
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	b21a      	sxth	r2, r3
 800f62a:	89fb      	ldrh	r3, [r7, #14]
 800f62c:	b21b      	sxth	r3, r3
 800f62e:	f003 030f 	and.w	r3, r3, #15
 800f632:	b21b      	sxth	r3, r3
 800f634:	4313      	orrs	r3, r2
 800f636:	b21b      	sxth	r3, r3
 800f638:	b29a      	uxth	r2, r3
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800f63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f640:	4618      	mov	r0, r3
 800f642:	371c      	adds	r7, #28
 800f644:	46bd      	mov	sp, r7
 800f646:	bd90      	pop	{r4, r7, pc}

0800f648 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b088      	sub	sp, #32
 800f64c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f64e:	f107 0308 	add.w	r3, r7, #8
 800f652:	2218      	movs	r2, #24
 800f654:	2100      	movs	r1, #0
 800f656:	4618      	mov	r0, r3
 800f658:	f000 fc82 	bl	800ff60 <memset>
  rq.ogf = OGF_HOST_CTL;
 800f65c:	2303      	movs	r3, #3
 800f65e:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800f660:	2303      	movs	r3, #3
 800f662:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f664:	1dfb      	adds	r3, r7, #7
 800f666:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f668:	2301      	movs	r3, #1
 800f66a:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f66c:	f107 0308 	add.w	r3, r7, #8
 800f670:	2100      	movs	r1, #0
 800f672:	4618      	mov	r0, r3
 800f674:	f000 f992 	bl	800f99c <hci_send_req>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	da01      	bge.n	800f682 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800f67e:	23ff      	movs	r3, #255	; 0xff
 800f680:	e000      	b.n	800f684 <hci_reset+0x3c>
  
  return status;  
 800f682:	79fb      	ldrb	r3, [r7, #7]
}
 800f684:	4618      	mov	r0, r3
 800f686:	3720      	adds	r7, #32
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b08e      	sub	sp, #56	; 0x38
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
 800f698:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f69a:	f107 0314 	add.w	r3, r7, #20
 800f69e:	2209      	movs	r2, #9
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 fc5c 	bl	800ff60 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f6a8:	f107 0320 	add.w	r3, r7, #32
 800f6ac:	2218      	movs	r2, #24
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 fc55 	bl	800ff60 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800f6b6:	2304      	movs	r3, #4
 800f6b8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800f6c6:	f107 0314 	add.w	r3, r7, #20
 800f6ca:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800f6cc:	2309      	movs	r3, #9
 800f6ce:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f6d0:	f107 0320 	add.w	r3, r7, #32
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f000 f960 	bl	800f99c <hci_send_req>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	da01      	bge.n	800f6e6 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800f6e2:	23ff      	movs	r3, #255	; 0xff
 800f6e4:	e018      	b.n	800f718 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800f6e6:	7d3b      	ldrb	r3, [r7, #20]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d001      	beq.n	800f6f0 <hci_le_read_local_version+0x64>
    return resp.status;
 800f6ec:	7d3b      	ldrb	r3, [r7, #20]
 800f6ee:	e013      	b.n	800f718 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800f6f0:	7d7a      	ldrb	r2, [r7, #21]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800f6f6:	8afa      	ldrh	r2, [r7, #22]
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800f6fc:	7e3a      	ldrb	r2, [r7, #24]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800f702:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800f706:	b29a      	uxth	r2, r3
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800f70c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800f710:	b29a      	uxth	r2, r3
 800f712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f714:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3738      	adds	r7, #56	; 0x38
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b092      	sub	sp, #72	; 0x48
 800f724:	af00      	add	r7, sp, #0
 800f726:	4603      	mov	r3, r0
 800f728:	6039      	str	r1, [r7, #0]
 800f72a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800f72c:	f107 0310 	add.w	r3, r7, #16
 800f730:	2220      	movs	r2, #32
 800f732:	2100      	movs	r1, #0
 800f734:	4618      	mov	r0, r3
 800f736:	f000 fc13 	bl	800ff60 <memset>
  scan_resp_cp.length = length;
 800f73a:	79fb      	ldrb	r3, [r7, #7]
 800f73c:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800f73e:	79fb      	ldrb	r3, [r7, #7]
 800f740:	2b1f      	cmp	r3, #31
 800f742:	bf28      	it	cs
 800f744:	231f      	movcs	r3, #31
 800f746:	b2db      	uxtb	r3, r3
 800f748:	461a      	mov	r2, r3
 800f74a:	f107 0310 	add.w	r3, r7, #16
 800f74e:	3301      	adds	r3, #1
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	4618      	mov	r0, r3
 800f754:	f000 fbf6 	bl	800ff44 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f75c:	2218      	movs	r2, #24
 800f75e:	2100      	movs	r1, #0
 800f760:	4618      	mov	r0, r3
 800f762:	f000 fbfd 	bl	800ff60 <memset>
  rq.ogf = OGF_LE_CTL;
 800f766:	2308      	movs	r3, #8
 800f768:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800f76a:	2309      	movs	r3, #9
 800f76c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800f76e:	f107 0310 	add.w	r3, r7, #16
 800f772:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800f774:	2320      	movs	r3, #32
 800f776:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800f778:	f107 030f 	add.w	r3, r7, #15
 800f77c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800f77e:	2301      	movs	r3, #1
 800f780:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f786:	2100      	movs	r1, #0
 800f788:	4618      	mov	r0, r3
 800f78a:	f000 f907 	bl	800f99c <hci_send_req>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	da01      	bge.n	800f798 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800f794:	23ff      	movs	r3, #255	; 0xff
 800f796:	e000      	b.n	800f79a <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800f798:	7bfb      	ldrb	r3, [r7, #15]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3748      	adds	r7, #72	; 0x48
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800f7a2:	b480      	push	{r7}
 800f7a4:	b085      	sub	sp, #20
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	3308      	adds	r3, #8
 800f7ae:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	2b04      	cmp	r3, #4
 800f7b6:	d001      	beq.n	800f7bc <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	e00c      	b.n	800f7d6 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	3302      	adds	r3, #2
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f7ca:	3b03      	subs	r3, #3
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d001      	beq.n	800f7d4 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800f7d0:	2302      	movs	r3, #2
 800f7d2:	e000      	b.n	800f7d6 <verify_packet+0x34>
  
  return 0;      
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
	...

0800f7e4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b0a6      	sub	sp, #152	; 0x98
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	607b      	str	r3, [r7, #4]
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	81fb      	strh	r3, [r7, #14]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	81bb      	strh	r3, [r7, #12]
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f7f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f800:	b21a      	sxth	r2, r3
 800f802:	89fb      	ldrh	r3, [r7, #14]
 800f804:	029b      	lsls	r3, r3, #10
 800f806:	b21b      	sxth	r3, r3
 800f808:	4313      	orrs	r3, r2
 800f80a:	b21b      	sxth	r3, r3
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800f810:	7afb      	ldrb	r3, [r7, #11]
 800f812:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800f814:	2301      	movs	r3, #1
 800f816:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f818:	f107 0318 	add.w	r3, r7, #24
 800f81c:	3301      	adds	r3, #1
 800f81e:	461a      	mov	r2, r3
 800f820:	f107 0314 	add.w	r3, r7, #20
 800f824:	8819      	ldrh	r1, [r3, #0]
 800f826:	789b      	ldrb	r3, [r3, #2]
 800f828:	8011      	strh	r1, [r2, #0]
 800f82a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f82c:	f107 0318 	add.w	r3, r7, #24
 800f830:	3304      	adds	r3, #4
 800f832:	7afa      	ldrb	r2, [r7, #11]
 800f834:	6879      	ldr	r1, [r7, #4]
 800f836:	4618      	mov	r0, r3
 800f838:	f000 fb84 	bl	800ff44 <memcpy>
  
  if (hciContext.io.Send)
 800f83c:	4b08      	ldr	r3, [pc, #32]	; (800f860 <send_cmd+0x7c>)
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d009      	beq.n	800f858 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800f844:	4b06      	ldr	r3, [pc, #24]	; (800f860 <send_cmd+0x7c>)
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	7afa      	ldrb	r2, [r7, #11]
 800f84a:	b292      	uxth	r2, r2
 800f84c:	3204      	adds	r2, #4
 800f84e:	b291      	uxth	r1, r2
 800f850:	f107 0218 	add.w	r2, r7, #24
 800f854:	4610      	mov	r0, r2
 800f856:	4798      	blx	r3
  }
}
 800f858:	bf00      	nop
 800f85a:	3798      	adds	r7, #152	; 0x98
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	200005c8 	.word	0x200005c8

0800f864 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800f86e:	e00a      	b.n	800f886 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800f870:	f107 030c 	add.w	r3, r7, #12
 800f874:	4619      	mov	r1, r3
 800f876:	6838      	ldr	r0, [r7, #0]
 800f878:	f000 faea 	bl	800fe50 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 fa51 	bl	800fd28 <list_insert_head>
  while (!list_is_empty(src_list))
 800f886:	6838      	ldr	r0, [r7, #0]
 800f888:	f000 fa2c 	bl	800fce4 <list_is_empty>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d0ee      	beq.n	800f870 <move_list+0xc>
  }
}
 800f892:	bf00      	nop
 800f894:	bf00      	nop
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f8a2:	e009      	b.n	800f8b8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800f8a4:	1d3b      	adds	r3, r7, #4
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	4809      	ldr	r0, [pc, #36]	; (800f8d0 <free_event_list+0x34>)
 800f8aa:	f000 faaa 	bl	800fe02 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4808      	ldr	r0, [pc, #32]	; (800f8d4 <free_event_list+0x38>)
 800f8b4:	f000 fa5e 	bl	800fd74 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f8b8:	4806      	ldr	r0, [pc, #24]	; (800f8d4 <free_event_list+0x38>)
 800f8ba:	f000 faf0 	bl	800fe9e <list_get_size>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	ddef      	ble.n	800f8a4 <free_event_list+0x8>
  }
}
 800f8c4:	bf00      	nop
 800f8c6:	bf00      	nop
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	200028a4 	.word	0x200028a4
 800f8d4:	2000289c 	.word	0x2000289c

0800f8d8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800f8e8:	4a18      	ldr	r2, [pc, #96]	; (800f94c <hci_init+0x74>)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800f8ee:	4818      	ldr	r0, [pc, #96]	; (800f950 <hci_init+0x78>)
 800f8f0:	f000 f9e8 	bl	800fcc4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800f8f4:	4817      	ldr	r0, [pc, #92]	; (800f954 <hci_init+0x7c>)
 800f8f6:	f000 f9e5 	bl	800fcc4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800f8fa:	f7f1 f8b3 	bl	8000a64 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f8fe:	2300      	movs	r3, #0
 800f900:	73fb      	strb	r3, [r7, #15]
 800f902:	e00c      	b.n	800f91e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f904:	7bfb      	ldrb	r3, [r7, #15]
 800f906:	228c      	movs	r2, #140	; 0x8c
 800f908:	fb02 f303 	mul.w	r3, r2, r3
 800f90c:	4a12      	ldr	r2, [pc, #72]	; (800f958 <hci_init+0x80>)
 800f90e:	4413      	add	r3, r2
 800f910:	4619      	mov	r1, r3
 800f912:	480f      	ldr	r0, [pc, #60]	; (800f950 <hci_init+0x78>)
 800f914:	f000 fa2e 	bl	800fd74 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f918:	7bfb      	ldrb	r3, [r7, #15]
 800f91a:	3301      	adds	r3, #1
 800f91c:	73fb      	strb	r3, [r7, #15]
 800f91e:	7bfb      	ldrb	r3, [r7, #15]
 800f920:	2b04      	cmp	r3, #4
 800f922:	d9ef      	bls.n	800f904 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800f924:	4b09      	ldr	r3, [pc, #36]	; (800f94c <hci_init+0x74>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d003      	beq.n	800f934 <hci_init+0x5c>
 800f92c:	4b07      	ldr	r3, [pc, #28]	; (800f94c <hci_init+0x74>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2000      	movs	r0, #0
 800f932:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f934:	4b05      	ldr	r3, [pc, #20]	; (800f94c <hci_init+0x74>)
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d002      	beq.n	800f942 <hci_init+0x6a>
 800f93c:	4b03      	ldr	r3, [pc, #12]	; (800f94c <hci_init+0x74>)
 800f93e:	689b      	ldr	r3, [r3, #8]
 800f940:	4798      	blx	r3
}
 800f942:	bf00      	nop
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	200005c8 	.word	0x200005c8
 800f950:	2000289c 	.word	0x2000289c
 800f954:	200028a4 	.word	0x200028a4
 800f958:	2000030c 	.word	0x2000030c

0800f95c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4a0b      	ldr	r2, [pc, #44]	; (800f998 <hci_register_io_bus+0x3c>)
 800f96a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	68db      	ldr	r3, [r3, #12]
 800f970:	4a09      	ldr	r2, [pc, #36]	; (800f998 <hci_register_io_bus+0x3c>)
 800f972:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	691b      	ldr	r3, [r3, #16]
 800f978:	4a07      	ldr	r2, [pc, #28]	; (800f998 <hci_register_io_bus+0x3c>)
 800f97a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	4a05      	ldr	r2, [pc, #20]	; (800f998 <hci_register_io_bus+0x3c>)
 800f982:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	4a03      	ldr	r2, [pc, #12]	; (800f998 <hci_register_io_bus+0x3c>)
 800f98a:	6093      	str	r3, [r2, #8]
}
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr
 800f998:	200005c8 	.word	0x200005c8

0800f99c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b08e      	sub	sp, #56	; 0x38
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	885b      	ldrh	r3, [r3, #2]
 800f9ac:	b21b      	sxth	r3, r3
 800f9ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9b2:	b21a      	sxth	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	881b      	ldrh	r3, [r3, #0]
 800f9b8:	029b      	lsls	r3, r3, #10
 800f9ba:	b21b      	sxth	r3, r3
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	b21b      	sxth	r3, r3
 800f9c0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800f9c6:	f107 0308 	add.w	r3, r7, #8
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f000 f97a 	bl	800fcc4 <list_init_head>

  free_event_list();
 800f9d0:	f7ff ff64 	bl	800f89c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	8818      	ldrh	r0, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	8859      	ldrh	r1, [r3, #2]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	b2da      	uxtb	r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	f7ff fefd 	bl	800f7e4 <send_cmd>
  
  if (async)
 800f9ea:	78fb      	ldrb	r3, [r7, #3]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <hci_send_req+0x58>
  {
    return 0;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	e0e5      	b.n	800fbc0 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800f9f4:	f7f6 fa16 	bl	8005e24 <HAL_GetTick>
 800f9f8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f9fa:	f7f6 fa13 	bl	8005e24 <HAL_GetTick>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa08:	f200 80b6 	bhi.w	800fb78 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800fa0c:	486e      	ldr	r0, [pc, #440]	; (800fbc8 <hci_send_req+0x22c>)
 800fa0e:	f000 f969 	bl	800fce4 <list_is_empty>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d000      	beq.n	800fa1a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800fa18:	e7ef      	b.n	800f9fa <hci_send_req+0x5e>
      {
        break;
 800fa1a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800fa1c:	f107 0310 	add.w	r3, r7, #16
 800fa20:	4619      	mov	r1, r3
 800fa22:	4869      	ldr	r0, [pc, #420]	; (800fbc8 <hci_send_req+0x22c>)
 800fa24:	f000 f9ed 	bl	800fe02 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	3308      	adds	r3, #8
 800fa2c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	2b04      	cmp	r3, #4
 800fa34:	d17b      	bne.n	800fb2e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800fa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa38:	3301      	adds	r3, #1
 800fa3a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	3308      	adds	r3, #8
 800fa40:	3303      	adds	r3, #3
 800fa42:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fa4a:	3b03      	subs	r3, #3
 800fa4c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800fa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	2b3e      	cmp	r3, #62	; 0x3e
 800fa54:	d04d      	beq.n	800faf2 <hci_send_req+0x156>
 800fa56:	2b3e      	cmp	r3, #62	; 0x3e
 800fa58:	dc6b      	bgt.n	800fb32 <hci_send_req+0x196>
 800fa5a:	2b10      	cmp	r3, #16
 800fa5c:	f000 808e 	beq.w	800fb7c <hci_send_req+0x1e0>
 800fa60:	2b10      	cmp	r3, #16
 800fa62:	dc66      	bgt.n	800fb32 <hci_send_req+0x196>
 800fa64:	2b0e      	cmp	r3, #14
 800fa66:	d024      	beq.n	800fab2 <hci_send_req+0x116>
 800fa68:	2b0f      	cmp	r3, #15
 800fa6a:	d162      	bne.n	800fb32 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	885b      	ldrh	r3, [r3, #2]
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	f040 8081 	bne.w	800fb80 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	2b0f      	cmp	r3, #15
 800fa84:	d004      	beq.n	800fa90 <hci_send_req+0xf4>
          if (cs->status) {
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d053      	beq.n	800fb36 <hci_send_req+0x19a>
            goto failed;
 800fa8e:	e07a      	b.n	800fb86 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	695a      	ldr	r2, [r3, #20]
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	bf28      	it	cs
 800fa9a:	461a      	movcs	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6918      	ldr	r0, [r3, #16]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	695b      	ldr	r3, [r3, #20]
 800faa8:	461a      	mov	r2, r3
 800faaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faac:	f000 fa4a 	bl	800ff44 <memcpy>
        goto done;
 800fab0:	e07a      	b.n	800fba8 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800fab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab4:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d15f      	bne.n	800fb84 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	3303      	adds	r3, #3
 800fac8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	3b03      	subs	r3, #3
 800face:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	695a      	ldr	r2, [r3, #20]
 800fad4:	6a3b      	ldr	r3, [r7, #32]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	bf28      	it	cs
 800fada:	461a      	movcs	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6918      	ldr	r0, [r3, #16]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	695b      	ldr	r3, [r3, #20]
 800fae8:	461a      	mov	r2, r3
 800faea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faec:	f000 fa2a 	bl	800ff44 <memcpy>
        goto done;
 800faf0:	e05a      	b.n	800fba8 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800faf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d11a      	bne.n	800fb3a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800fb04:	6a3b      	ldr	r3, [r7, #32]
 800fb06:	3b01      	subs	r3, #1
 800fb08:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	695a      	ldr	r2, [r3, #20]
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	bf28      	it	cs
 800fb14:	461a      	movcs	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6918      	ldr	r0, [r3, #16]
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	1c59      	adds	r1, r3, #1
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	695b      	ldr	r3, [r3, #20]
 800fb26:	461a      	mov	r2, r3
 800fb28:	f000 fa0c 	bl	800ff44 <memcpy>
        goto done;
 800fb2c:	e03c      	b.n	800fba8 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800fb2e:	bf00      	nop
 800fb30:	e004      	b.n	800fb3c <hci_send_req+0x1a0>
        break;
 800fb32:	bf00      	nop
 800fb34:	e002      	b.n	800fb3c <hci_send_req+0x1a0>
          break;
 800fb36:	bf00      	nop
 800fb38:	e000      	b.n	800fb3c <hci_send_req+0x1a0>
          break;
 800fb3a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800fb3c:	4823      	ldr	r0, [pc, #140]	; (800fbcc <hci_send_req+0x230>)
 800fb3e:	f000 f8d1 	bl	800fce4 <list_is_empty>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00d      	beq.n	800fb64 <hci_send_req+0x1c8>
 800fb48:	481f      	ldr	r0, [pc, #124]	; (800fbc8 <hci_send_req+0x22c>)
 800fb4a:	f000 f8cb 	bl	800fce4 <list_is_empty>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d007      	beq.n	800fb64 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	4619      	mov	r1, r3
 800fb58:	481c      	ldr	r0, [pc, #112]	; (800fbcc <hci_send_req+0x230>)
 800fb5a:	f000 f90b 	bl	800fd74 <list_insert_tail>
      hciReadPacket=NULL;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	613b      	str	r3, [r7, #16]
 800fb62:	e008      	b.n	800fb76 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	f107 0308 	add.w	r3, r7, #8
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 f901 	bl	800fd74 <list_insert_tail>
      hciReadPacket=NULL;
 800fb72:	2300      	movs	r3, #0
 800fb74:	613b      	str	r3, [r7, #16]
  {
 800fb76:	e73d      	b.n	800f9f4 <hci_send_req+0x58>
        goto failed;
 800fb78:	bf00      	nop
 800fb7a:	e004      	b.n	800fb86 <hci_send_req+0x1ea>
        goto failed;
 800fb7c:	bf00      	nop
 800fb7e:	e002      	b.n	800fb86 <hci_send_req+0x1ea>
          goto failed;
 800fb80:	bf00      	nop
 800fb82:	e000      	b.n	800fb86 <hci_send_req+0x1ea>
          goto failed;
 800fb84:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d004      	beq.n	800fb96 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	4619      	mov	r1, r3
 800fb90:	480e      	ldr	r0, [pc, #56]	; (800fbcc <hci_send_req+0x230>)
 800fb92:	f000 f8c9 	bl	800fd28 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fb96:	f107 0308 	add.w	r3, r7, #8
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	480a      	ldr	r0, [pc, #40]	; (800fbc8 <hci_send_req+0x22c>)
 800fb9e:	f7ff fe61 	bl	800f864 <move_list>

  return -1;
 800fba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fba6:	e00b      	b.n	800fbc0 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4807      	ldr	r0, [pc, #28]	; (800fbcc <hci_send_req+0x230>)
 800fbae:	f000 f8bb 	bl	800fd28 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fbb2:	f107 0308 	add.w	r3, r7, #8
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	4803      	ldr	r0, [pc, #12]	; (800fbc8 <hci_send_req+0x22c>)
 800fbba:	f7ff fe53 	bl	800f864 <move_list>

  return 0;
 800fbbe:	2300      	movs	r3, #0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3738      	adds	r7, #56	; 0x38
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	200028a4 	.word	0x200028a4
 800fbcc:	2000289c 	.word	0x2000289c

0800fbd0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800fbda:	e013      	b.n	800fc04 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800fbdc:	1d3b      	adds	r3, r7, #4
 800fbde:	4619      	mov	r1, r3
 800fbe0:	480e      	ldr	r0, [pc, #56]	; (800fc1c <hci_user_evt_proc+0x4c>)
 800fbe2:	f000 f90e 	bl	800fe02 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800fbe6:	4b0e      	ldr	r3, [pc, #56]	; (800fc20 <hci_user_evt_proc+0x50>)
 800fbe8:	69db      	ldr	r3, [r3, #28]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d005      	beq.n	800fbfa <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800fbee:	4b0c      	ldr	r3, [pc, #48]	; (800fc20 <hci_user_evt_proc+0x50>)
 800fbf0:	69db      	ldr	r3, [r3, #28]
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	3208      	adds	r2, #8
 800fbf6:	4610      	mov	r0, r2
 800fbf8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4809      	ldr	r0, [pc, #36]	; (800fc24 <hci_user_evt_proc+0x54>)
 800fc00:	f000 f8b8 	bl	800fd74 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800fc04:	4805      	ldr	r0, [pc, #20]	; (800fc1c <hci_user_evt_proc+0x4c>)
 800fc06:	f000 f86d 	bl	800fce4 <list_is_empty>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d0e5      	beq.n	800fbdc <hci_user_evt_proc+0xc>
  }
}
 800fc10:	bf00      	nop
 800fc12:	bf00      	nop
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	200028a4 	.word	0x200028a4
 800fc20:	200005c8 	.word	0x200005c8
 800fc24:	2000289c 	.word	0x2000289c

0800fc28 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b086      	sub	sp, #24
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800fc30:	2300      	movs	r3, #0
 800fc32:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800fc34:	2300      	movs	r3, #0
 800fc36:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800fc38:	481f      	ldr	r0, [pc, #124]	; (800fcb8 <hci_notify_asynch_evt+0x90>)
 800fc3a:	f000 f853 	bl	800fce4 <list_is_empty>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d132      	bne.n	800fcaa <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800fc44:	f107 030c 	add.w	r3, r7, #12
 800fc48:	4619      	mov	r1, r3
 800fc4a:	481b      	ldr	r0, [pc, #108]	; (800fcb8 <hci_notify_asynch_evt+0x90>)
 800fc4c:	f000 f8d9 	bl	800fe02 <list_remove_head>
    
    if (hciContext.io.Receive)
 800fc50:	4b1a      	ldr	r3, [pc, #104]	; (800fcbc <hci_notify_asynch_evt+0x94>)
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d02a      	beq.n	800fcae <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800fc58:	4b18      	ldr	r3, [pc, #96]	; (800fcbc <hci_notify_asynch_evt+0x94>)
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	3208      	adds	r2, #8
 800fc60:	2180      	movs	r1, #128	; 0x80
 800fc62:	4610      	mov	r0, r2
 800fc64:	4798      	blx	r3
 800fc66:	4603      	mov	r3, r0
 800fc68:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800fc6a:	7cfb      	ldrb	r3, [r7, #19]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d016      	beq.n	800fc9e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	7cfa      	ldrb	r2, [r7, #19]
 800fc74:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7ff fd91 	bl	800f7a2 <verify_packet>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d105      	bne.n	800fc92 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	4619      	mov	r1, r3
 800fc8a:	480d      	ldr	r0, [pc, #52]	; (800fcc0 <hci_notify_asynch_evt+0x98>)
 800fc8c:	f000 f872 	bl	800fd74 <list_insert_tail>
 800fc90:	e00d      	b.n	800fcae <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	4619      	mov	r1, r3
 800fc96:	4808      	ldr	r0, [pc, #32]	; (800fcb8 <hci_notify_asynch_evt+0x90>)
 800fc98:	f000 f846 	bl	800fd28 <list_insert_head>
 800fc9c:	e007      	b.n	800fcae <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	4619      	mov	r1, r3
 800fca2:	4805      	ldr	r0, [pc, #20]	; (800fcb8 <hci_notify_asynch_evt+0x90>)
 800fca4:	f000 f840 	bl	800fd28 <list_insert_head>
 800fca8:	e001      	b.n	800fcae <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800fcae:	697b      	ldr	r3, [r7, #20]

}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3718      	adds	r7, #24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	2000289c 	.word	0x2000289c
 800fcbc:	200005c8 	.word	0x200005c8
 800fcc0:	200028a4 	.word	0x200028a4

0800fcc4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	605a      	str	r2, [r3, #4]
}
 800fcd8:	bf00      	nop
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b087      	sub	sp, #28
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcec:	f3ef 8310 	mrs	r3, PRIMASK
 800fcf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fcf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fcf6:	b672      	cpsid	i
}
 800fcf8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d102      	bne.n	800fd0a <list_is_empty+0x26>
  {
    return_value = 1;
 800fd04:	2301      	movs	r3, #1
 800fd06:	75fb      	strb	r3, [r7, #23]
 800fd08:	e001      	b.n	800fd0e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	75fb      	strb	r3, [r7, #23]
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	f383 8810 	msr	PRIMASK, r3
}
 800fd18:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	371c      	adds	r7, #28
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b087      	sub	sp, #28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd32:	f3ef 8310 	mrs	r3, PRIMASK
 800fd36:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd38:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd3c:	b672      	cpsid	i
}
 800fd3e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	605a      	str	r2, [r3, #4]
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	f383 8810 	msr	PRIMASK, r3
}
 800fd66:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fd68:	bf00      	nop
 800fd6a:	371c      	adds	r7, #28
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b087      	sub	sp, #28
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd7e:	f3ef 8310 	mrs	r3, PRIMASK
 800fd82:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd84:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd88:	b672      	cpsid	i
}
 800fd8a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	685a      	ldr	r2, [r3, #4]
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	601a      	str	r2, [r3, #0]
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	f383 8810 	msr	PRIMASK, r3
}
 800fdb2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fdb4:	bf00      	nop
 800fdb6:	371c      	adds	r7, #28
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdc8:	f3ef 8310 	mrs	r3, PRIMASK
 800fdcc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdce:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdd2:	b672      	cpsid	i
}
 800fdd4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	6812      	ldr	r2, [r2, #0]
 800fdde:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	6852      	ldr	r2, [r2, #4]
 800fde8:	605a      	str	r2, [r3, #4]
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	f383 8810 	msr	PRIMASK, r3
}
 800fdf4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fdf6:	bf00      	nop
 800fdf8:	371c      	adds	r7, #28
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr

0800fe02 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b086      	sub	sp, #24
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
 800fe0a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe0c:	f3ef 8310 	mrs	r3, PRIMASK
 800fe10:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe12:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe16:	b672      	cpsid	i
}
 800fe18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff ffca 	bl	800fdc0 <list_remove_node>
  (*node)->next = NULL;
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2200      	movs	r2, #0
 800fe32:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	605a      	str	r2, [r3, #4]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	f383 8810 	msr	PRIMASK, r3
}
 800fe46:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fe48:	bf00      	nop
 800fe4a:	3718      	adds	r7, #24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe5a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe60:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe64:	b672      	cpsid	i
}
 800fe66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	685a      	ldr	r2, [r3, #4]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff ffa3 	bl	800fdc0 <list_remove_node>
  (*node)->next = NULL;
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2200      	movs	r2, #0
 800fe88:	605a      	str	r2, [r3, #4]
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	f383 8810 	msr	PRIMASK, r3
}
 800fe94:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fe96:	bf00      	nop
 800fe98:	3718      	adds	r7, #24
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800fe9e:	b480      	push	{r7}
 800fea0:	b089      	sub	sp, #36	; 0x24
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
  int size = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800feaa:	f3ef 8310 	mrs	r3, PRIMASK
 800feae:	613b      	str	r3, [r7, #16]
  return(result);
 800feb0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800feb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800feb4:	b672      	cpsid	i
}
 800feb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800febe:	e005      	b.n	800fecc <list_get_size+0x2e>
  {
    size++;
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	3301      	adds	r3, #1
 800fec4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800fec6:	69bb      	ldr	r3, [r7, #24]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800fecc:	69ba      	ldr	r2, [r7, #24]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d1f5      	bne.n	800fec0 <list_get_size+0x22>
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f383 8810 	msr	PRIMASK, r3
}
 800fede:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800fee0:	69fb      	ldr	r3, [r7, #28]
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3724      	adds	r7, #36	; 0x24
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
	...

0800fef0 <__errno>:
 800fef0:	4b01      	ldr	r3, [pc, #4]	; (800fef8 <__errno+0x8>)
 800fef2:	6818      	ldr	r0, [r3, #0]
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	200000a0 	.word	0x200000a0

0800fefc <__libc_init_array>:
 800fefc:	b570      	push	{r4, r5, r6, lr}
 800fefe:	4d0d      	ldr	r5, [pc, #52]	; (800ff34 <__libc_init_array+0x38>)
 800ff00:	4c0d      	ldr	r4, [pc, #52]	; (800ff38 <__libc_init_array+0x3c>)
 800ff02:	1b64      	subs	r4, r4, r5
 800ff04:	10a4      	asrs	r4, r4, #2
 800ff06:	2600      	movs	r6, #0
 800ff08:	42a6      	cmp	r6, r4
 800ff0a:	d109      	bne.n	800ff20 <__libc_init_array+0x24>
 800ff0c:	4d0b      	ldr	r5, [pc, #44]	; (800ff3c <__libc_init_array+0x40>)
 800ff0e:	4c0c      	ldr	r4, [pc, #48]	; (800ff40 <__libc_init_array+0x44>)
 800ff10:	f000 fc4e 	bl	80107b0 <_init>
 800ff14:	1b64      	subs	r4, r4, r5
 800ff16:	10a4      	asrs	r4, r4, #2
 800ff18:	2600      	movs	r6, #0
 800ff1a:	42a6      	cmp	r6, r4
 800ff1c:	d105      	bne.n	800ff2a <__libc_init_array+0x2e>
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}
 800ff20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff24:	4798      	blx	r3
 800ff26:	3601      	adds	r6, #1
 800ff28:	e7ee      	b.n	800ff08 <__libc_init_array+0xc>
 800ff2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff2e:	4798      	blx	r3
 800ff30:	3601      	adds	r6, #1
 800ff32:	e7f2      	b.n	800ff1a <__libc_init_array+0x1e>
 800ff34:	08010df8 	.word	0x08010df8
 800ff38:	08010df8 	.word	0x08010df8
 800ff3c:	08010df8 	.word	0x08010df8
 800ff40:	08010dfc 	.word	0x08010dfc

0800ff44 <memcpy>:
 800ff44:	440a      	add	r2, r1
 800ff46:	4291      	cmp	r1, r2
 800ff48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff4c:	d100      	bne.n	800ff50 <memcpy+0xc>
 800ff4e:	4770      	bx	lr
 800ff50:	b510      	push	{r4, lr}
 800ff52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff5a:	4291      	cmp	r1, r2
 800ff5c:	d1f9      	bne.n	800ff52 <memcpy+0xe>
 800ff5e:	bd10      	pop	{r4, pc}

0800ff60 <memset>:
 800ff60:	4402      	add	r2, r0
 800ff62:	4603      	mov	r3, r0
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d100      	bne.n	800ff6a <memset+0xa>
 800ff68:	4770      	bx	lr
 800ff6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff6e:	e7f9      	b.n	800ff64 <memset+0x4>

0800ff70 <_free_r>:
 800ff70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff72:	2900      	cmp	r1, #0
 800ff74:	d048      	beq.n	8010008 <_free_r+0x98>
 800ff76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff7a:	9001      	str	r0, [sp, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ff82:	bfb8      	it	lt
 800ff84:	18e4      	addlt	r4, r4, r3
 800ff86:	f000 f8cd 	bl	8010124 <__malloc_lock>
 800ff8a:	4a20      	ldr	r2, [pc, #128]	; (801000c <_free_r+0x9c>)
 800ff8c:	9801      	ldr	r0, [sp, #4]
 800ff8e:	6813      	ldr	r3, [r2, #0]
 800ff90:	4615      	mov	r5, r2
 800ff92:	b933      	cbnz	r3, 800ffa2 <_free_r+0x32>
 800ff94:	6063      	str	r3, [r4, #4]
 800ff96:	6014      	str	r4, [r2, #0]
 800ff98:	b003      	add	sp, #12
 800ff9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff9e:	f000 b8c7 	b.w	8010130 <__malloc_unlock>
 800ffa2:	42a3      	cmp	r3, r4
 800ffa4:	d90b      	bls.n	800ffbe <_free_r+0x4e>
 800ffa6:	6821      	ldr	r1, [r4, #0]
 800ffa8:	1862      	adds	r2, r4, r1
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	bf04      	itt	eq
 800ffae:	681a      	ldreq	r2, [r3, #0]
 800ffb0:	685b      	ldreq	r3, [r3, #4]
 800ffb2:	6063      	str	r3, [r4, #4]
 800ffb4:	bf04      	itt	eq
 800ffb6:	1852      	addeq	r2, r2, r1
 800ffb8:	6022      	streq	r2, [r4, #0]
 800ffba:	602c      	str	r4, [r5, #0]
 800ffbc:	e7ec      	b.n	800ff98 <_free_r+0x28>
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	b10b      	cbz	r3, 800ffc8 <_free_r+0x58>
 800ffc4:	42a3      	cmp	r3, r4
 800ffc6:	d9fa      	bls.n	800ffbe <_free_r+0x4e>
 800ffc8:	6811      	ldr	r1, [r2, #0]
 800ffca:	1855      	adds	r5, r2, r1
 800ffcc:	42a5      	cmp	r5, r4
 800ffce:	d10b      	bne.n	800ffe8 <_free_r+0x78>
 800ffd0:	6824      	ldr	r4, [r4, #0]
 800ffd2:	4421      	add	r1, r4
 800ffd4:	1854      	adds	r4, r2, r1
 800ffd6:	42a3      	cmp	r3, r4
 800ffd8:	6011      	str	r1, [r2, #0]
 800ffda:	d1dd      	bne.n	800ff98 <_free_r+0x28>
 800ffdc:	681c      	ldr	r4, [r3, #0]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	6053      	str	r3, [r2, #4]
 800ffe2:	4421      	add	r1, r4
 800ffe4:	6011      	str	r1, [r2, #0]
 800ffe6:	e7d7      	b.n	800ff98 <_free_r+0x28>
 800ffe8:	d902      	bls.n	800fff0 <_free_r+0x80>
 800ffea:	230c      	movs	r3, #12
 800ffec:	6003      	str	r3, [r0, #0]
 800ffee:	e7d3      	b.n	800ff98 <_free_r+0x28>
 800fff0:	6825      	ldr	r5, [r4, #0]
 800fff2:	1961      	adds	r1, r4, r5
 800fff4:	428b      	cmp	r3, r1
 800fff6:	bf04      	itt	eq
 800fff8:	6819      	ldreq	r1, [r3, #0]
 800fffa:	685b      	ldreq	r3, [r3, #4]
 800fffc:	6063      	str	r3, [r4, #4]
 800fffe:	bf04      	itt	eq
 8010000:	1949      	addeq	r1, r1, r5
 8010002:	6021      	streq	r1, [r4, #0]
 8010004:	6054      	str	r4, [r2, #4]
 8010006:	e7c7      	b.n	800ff98 <_free_r+0x28>
 8010008:	b003      	add	sp, #12
 801000a:	bd30      	pop	{r4, r5, pc}
 801000c:	200005e8 	.word	0x200005e8

08010010 <_malloc_r>:
 8010010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010012:	1ccd      	adds	r5, r1, #3
 8010014:	f025 0503 	bic.w	r5, r5, #3
 8010018:	3508      	adds	r5, #8
 801001a:	2d0c      	cmp	r5, #12
 801001c:	bf38      	it	cc
 801001e:	250c      	movcc	r5, #12
 8010020:	2d00      	cmp	r5, #0
 8010022:	4606      	mov	r6, r0
 8010024:	db01      	blt.n	801002a <_malloc_r+0x1a>
 8010026:	42a9      	cmp	r1, r5
 8010028:	d903      	bls.n	8010032 <_malloc_r+0x22>
 801002a:	230c      	movs	r3, #12
 801002c:	6033      	str	r3, [r6, #0]
 801002e:	2000      	movs	r0, #0
 8010030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010032:	f000 f877 	bl	8010124 <__malloc_lock>
 8010036:	4921      	ldr	r1, [pc, #132]	; (80100bc <_malloc_r+0xac>)
 8010038:	680a      	ldr	r2, [r1, #0]
 801003a:	4614      	mov	r4, r2
 801003c:	b99c      	cbnz	r4, 8010066 <_malloc_r+0x56>
 801003e:	4f20      	ldr	r7, [pc, #128]	; (80100c0 <_malloc_r+0xb0>)
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	b923      	cbnz	r3, 801004e <_malloc_r+0x3e>
 8010044:	4621      	mov	r1, r4
 8010046:	4630      	mov	r0, r6
 8010048:	f000 f83c 	bl	80100c4 <_sbrk_r>
 801004c:	6038      	str	r0, [r7, #0]
 801004e:	4629      	mov	r1, r5
 8010050:	4630      	mov	r0, r6
 8010052:	f000 f837 	bl	80100c4 <_sbrk_r>
 8010056:	1c43      	adds	r3, r0, #1
 8010058:	d123      	bne.n	80100a2 <_malloc_r+0x92>
 801005a:	230c      	movs	r3, #12
 801005c:	6033      	str	r3, [r6, #0]
 801005e:	4630      	mov	r0, r6
 8010060:	f000 f866 	bl	8010130 <__malloc_unlock>
 8010064:	e7e3      	b.n	801002e <_malloc_r+0x1e>
 8010066:	6823      	ldr	r3, [r4, #0]
 8010068:	1b5b      	subs	r3, r3, r5
 801006a:	d417      	bmi.n	801009c <_malloc_r+0x8c>
 801006c:	2b0b      	cmp	r3, #11
 801006e:	d903      	bls.n	8010078 <_malloc_r+0x68>
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	441c      	add	r4, r3
 8010074:	6025      	str	r5, [r4, #0]
 8010076:	e004      	b.n	8010082 <_malloc_r+0x72>
 8010078:	6863      	ldr	r3, [r4, #4]
 801007a:	42a2      	cmp	r2, r4
 801007c:	bf0c      	ite	eq
 801007e:	600b      	streq	r3, [r1, #0]
 8010080:	6053      	strne	r3, [r2, #4]
 8010082:	4630      	mov	r0, r6
 8010084:	f000 f854 	bl	8010130 <__malloc_unlock>
 8010088:	f104 000b 	add.w	r0, r4, #11
 801008c:	1d23      	adds	r3, r4, #4
 801008e:	f020 0007 	bic.w	r0, r0, #7
 8010092:	1ac2      	subs	r2, r0, r3
 8010094:	d0cc      	beq.n	8010030 <_malloc_r+0x20>
 8010096:	1a1b      	subs	r3, r3, r0
 8010098:	50a3      	str	r3, [r4, r2]
 801009a:	e7c9      	b.n	8010030 <_malloc_r+0x20>
 801009c:	4622      	mov	r2, r4
 801009e:	6864      	ldr	r4, [r4, #4]
 80100a0:	e7cc      	b.n	801003c <_malloc_r+0x2c>
 80100a2:	1cc4      	adds	r4, r0, #3
 80100a4:	f024 0403 	bic.w	r4, r4, #3
 80100a8:	42a0      	cmp	r0, r4
 80100aa:	d0e3      	beq.n	8010074 <_malloc_r+0x64>
 80100ac:	1a21      	subs	r1, r4, r0
 80100ae:	4630      	mov	r0, r6
 80100b0:	f000 f808 	bl	80100c4 <_sbrk_r>
 80100b4:	3001      	adds	r0, #1
 80100b6:	d1dd      	bne.n	8010074 <_malloc_r+0x64>
 80100b8:	e7cf      	b.n	801005a <_malloc_r+0x4a>
 80100ba:	bf00      	nop
 80100bc:	200005e8 	.word	0x200005e8
 80100c0:	200005ec 	.word	0x200005ec

080100c4 <_sbrk_r>:
 80100c4:	b538      	push	{r3, r4, r5, lr}
 80100c6:	4d06      	ldr	r5, [pc, #24]	; (80100e0 <_sbrk_r+0x1c>)
 80100c8:	2300      	movs	r3, #0
 80100ca:	4604      	mov	r4, r0
 80100cc:	4608      	mov	r0, r1
 80100ce:	602b      	str	r3, [r5, #0]
 80100d0:	f7f2 fe1a 	bl	8002d08 <_sbrk>
 80100d4:	1c43      	adds	r3, r0, #1
 80100d6:	d102      	bne.n	80100de <_sbrk_r+0x1a>
 80100d8:	682b      	ldr	r3, [r5, #0]
 80100da:	b103      	cbz	r3, 80100de <_sbrk_r+0x1a>
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	bd38      	pop	{r3, r4, r5, pc}
 80100e0:	200028ac 	.word	0x200028ac

080100e4 <siprintf>:
 80100e4:	b40e      	push	{r1, r2, r3}
 80100e6:	b500      	push	{lr}
 80100e8:	b09c      	sub	sp, #112	; 0x70
 80100ea:	ab1d      	add	r3, sp, #116	; 0x74
 80100ec:	9002      	str	r0, [sp, #8]
 80100ee:	9006      	str	r0, [sp, #24]
 80100f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80100f4:	4809      	ldr	r0, [pc, #36]	; (801011c <siprintf+0x38>)
 80100f6:	9107      	str	r1, [sp, #28]
 80100f8:	9104      	str	r1, [sp, #16]
 80100fa:	4909      	ldr	r1, [pc, #36]	; (8010120 <siprintf+0x3c>)
 80100fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010100:	9105      	str	r1, [sp, #20]
 8010102:	6800      	ldr	r0, [r0, #0]
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	a902      	add	r1, sp, #8
 8010108:	f000 f874 	bl	80101f4 <_svfiprintf_r>
 801010c:	9b02      	ldr	r3, [sp, #8]
 801010e:	2200      	movs	r2, #0
 8010110:	701a      	strb	r2, [r3, #0]
 8010112:	b01c      	add	sp, #112	; 0x70
 8010114:	f85d eb04 	ldr.w	lr, [sp], #4
 8010118:	b003      	add	sp, #12
 801011a:	4770      	bx	lr
 801011c:	200000a0 	.word	0x200000a0
 8010120:	ffff0208 	.word	0xffff0208

08010124 <__malloc_lock>:
 8010124:	4801      	ldr	r0, [pc, #4]	; (801012c <__malloc_lock+0x8>)
 8010126:	f000 baf9 	b.w	801071c <__retarget_lock_acquire_recursive>
 801012a:	bf00      	nop
 801012c:	200028b4 	.word	0x200028b4

08010130 <__malloc_unlock>:
 8010130:	4801      	ldr	r0, [pc, #4]	; (8010138 <__malloc_unlock+0x8>)
 8010132:	f000 baf4 	b.w	801071e <__retarget_lock_release_recursive>
 8010136:	bf00      	nop
 8010138:	200028b4 	.word	0x200028b4

0801013c <__ssputs_r>:
 801013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	688e      	ldr	r6, [r1, #8]
 8010142:	429e      	cmp	r6, r3
 8010144:	4682      	mov	sl, r0
 8010146:	460c      	mov	r4, r1
 8010148:	4690      	mov	r8, r2
 801014a:	461f      	mov	r7, r3
 801014c:	d838      	bhi.n	80101c0 <__ssputs_r+0x84>
 801014e:	898a      	ldrh	r2, [r1, #12]
 8010150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010154:	d032      	beq.n	80101bc <__ssputs_r+0x80>
 8010156:	6825      	ldr	r5, [r4, #0]
 8010158:	6909      	ldr	r1, [r1, #16]
 801015a:	eba5 0901 	sub.w	r9, r5, r1
 801015e:	6965      	ldr	r5, [r4, #20]
 8010160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010168:	3301      	adds	r3, #1
 801016a:	444b      	add	r3, r9
 801016c:	106d      	asrs	r5, r5, #1
 801016e:	429d      	cmp	r5, r3
 8010170:	bf38      	it	cc
 8010172:	461d      	movcc	r5, r3
 8010174:	0553      	lsls	r3, r2, #21
 8010176:	d531      	bpl.n	80101dc <__ssputs_r+0xa0>
 8010178:	4629      	mov	r1, r5
 801017a:	f7ff ff49 	bl	8010010 <_malloc_r>
 801017e:	4606      	mov	r6, r0
 8010180:	b950      	cbnz	r0, 8010198 <__ssputs_r+0x5c>
 8010182:	230c      	movs	r3, #12
 8010184:	f8ca 3000 	str.w	r3, [sl]
 8010188:	89a3      	ldrh	r3, [r4, #12]
 801018a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801018e:	81a3      	strh	r3, [r4, #12]
 8010190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010198:	6921      	ldr	r1, [r4, #16]
 801019a:	464a      	mov	r2, r9
 801019c:	f7ff fed2 	bl	800ff44 <memcpy>
 80101a0:	89a3      	ldrh	r3, [r4, #12]
 80101a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80101a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101aa:	81a3      	strh	r3, [r4, #12]
 80101ac:	6126      	str	r6, [r4, #16]
 80101ae:	6165      	str	r5, [r4, #20]
 80101b0:	444e      	add	r6, r9
 80101b2:	eba5 0509 	sub.w	r5, r5, r9
 80101b6:	6026      	str	r6, [r4, #0]
 80101b8:	60a5      	str	r5, [r4, #8]
 80101ba:	463e      	mov	r6, r7
 80101bc:	42be      	cmp	r6, r7
 80101be:	d900      	bls.n	80101c2 <__ssputs_r+0x86>
 80101c0:	463e      	mov	r6, r7
 80101c2:	4632      	mov	r2, r6
 80101c4:	6820      	ldr	r0, [r4, #0]
 80101c6:	4641      	mov	r1, r8
 80101c8:	f000 faaa 	bl	8010720 <memmove>
 80101cc:	68a3      	ldr	r3, [r4, #8]
 80101ce:	6822      	ldr	r2, [r4, #0]
 80101d0:	1b9b      	subs	r3, r3, r6
 80101d2:	4432      	add	r2, r6
 80101d4:	60a3      	str	r3, [r4, #8]
 80101d6:	6022      	str	r2, [r4, #0]
 80101d8:	2000      	movs	r0, #0
 80101da:	e7db      	b.n	8010194 <__ssputs_r+0x58>
 80101dc:	462a      	mov	r2, r5
 80101de:	f000 fab9 	bl	8010754 <_realloc_r>
 80101e2:	4606      	mov	r6, r0
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d1e1      	bne.n	80101ac <__ssputs_r+0x70>
 80101e8:	6921      	ldr	r1, [r4, #16]
 80101ea:	4650      	mov	r0, sl
 80101ec:	f7ff fec0 	bl	800ff70 <_free_r>
 80101f0:	e7c7      	b.n	8010182 <__ssputs_r+0x46>
	...

080101f4 <_svfiprintf_r>:
 80101f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f8:	4698      	mov	r8, r3
 80101fa:	898b      	ldrh	r3, [r1, #12]
 80101fc:	061b      	lsls	r3, r3, #24
 80101fe:	b09d      	sub	sp, #116	; 0x74
 8010200:	4607      	mov	r7, r0
 8010202:	460d      	mov	r5, r1
 8010204:	4614      	mov	r4, r2
 8010206:	d50e      	bpl.n	8010226 <_svfiprintf_r+0x32>
 8010208:	690b      	ldr	r3, [r1, #16]
 801020a:	b963      	cbnz	r3, 8010226 <_svfiprintf_r+0x32>
 801020c:	2140      	movs	r1, #64	; 0x40
 801020e:	f7ff feff 	bl	8010010 <_malloc_r>
 8010212:	6028      	str	r0, [r5, #0]
 8010214:	6128      	str	r0, [r5, #16]
 8010216:	b920      	cbnz	r0, 8010222 <_svfiprintf_r+0x2e>
 8010218:	230c      	movs	r3, #12
 801021a:	603b      	str	r3, [r7, #0]
 801021c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010220:	e0d1      	b.n	80103c6 <_svfiprintf_r+0x1d2>
 8010222:	2340      	movs	r3, #64	; 0x40
 8010224:	616b      	str	r3, [r5, #20]
 8010226:	2300      	movs	r3, #0
 8010228:	9309      	str	r3, [sp, #36]	; 0x24
 801022a:	2320      	movs	r3, #32
 801022c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010230:	f8cd 800c 	str.w	r8, [sp, #12]
 8010234:	2330      	movs	r3, #48	; 0x30
 8010236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103e0 <_svfiprintf_r+0x1ec>
 801023a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801023e:	f04f 0901 	mov.w	r9, #1
 8010242:	4623      	mov	r3, r4
 8010244:	469a      	mov	sl, r3
 8010246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801024a:	b10a      	cbz	r2, 8010250 <_svfiprintf_r+0x5c>
 801024c:	2a25      	cmp	r2, #37	; 0x25
 801024e:	d1f9      	bne.n	8010244 <_svfiprintf_r+0x50>
 8010250:	ebba 0b04 	subs.w	fp, sl, r4
 8010254:	d00b      	beq.n	801026e <_svfiprintf_r+0x7a>
 8010256:	465b      	mov	r3, fp
 8010258:	4622      	mov	r2, r4
 801025a:	4629      	mov	r1, r5
 801025c:	4638      	mov	r0, r7
 801025e:	f7ff ff6d 	bl	801013c <__ssputs_r>
 8010262:	3001      	adds	r0, #1
 8010264:	f000 80aa 	beq.w	80103bc <_svfiprintf_r+0x1c8>
 8010268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801026a:	445a      	add	r2, fp
 801026c:	9209      	str	r2, [sp, #36]	; 0x24
 801026e:	f89a 3000 	ldrb.w	r3, [sl]
 8010272:	2b00      	cmp	r3, #0
 8010274:	f000 80a2 	beq.w	80103bc <_svfiprintf_r+0x1c8>
 8010278:	2300      	movs	r3, #0
 801027a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801027e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010282:	f10a 0a01 	add.w	sl, sl, #1
 8010286:	9304      	str	r3, [sp, #16]
 8010288:	9307      	str	r3, [sp, #28]
 801028a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801028e:	931a      	str	r3, [sp, #104]	; 0x68
 8010290:	4654      	mov	r4, sl
 8010292:	2205      	movs	r2, #5
 8010294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010298:	4851      	ldr	r0, [pc, #324]	; (80103e0 <_svfiprintf_r+0x1ec>)
 801029a:	f7ef ff99 	bl	80001d0 <memchr>
 801029e:	9a04      	ldr	r2, [sp, #16]
 80102a0:	b9d8      	cbnz	r0, 80102da <_svfiprintf_r+0xe6>
 80102a2:	06d0      	lsls	r0, r2, #27
 80102a4:	bf44      	itt	mi
 80102a6:	2320      	movmi	r3, #32
 80102a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102ac:	0711      	lsls	r1, r2, #28
 80102ae:	bf44      	itt	mi
 80102b0:	232b      	movmi	r3, #43	; 0x2b
 80102b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102b6:	f89a 3000 	ldrb.w	r3, [sl]
 80102ba:	2b2a      	cmp	r3, #42	; 0x2a
 80102bc:	d015      	beq.n	80102ea <_svfiprintf_r+0xf6>
 80102be:	9a07      	ldr	r2, [sp, #28]
 80102c0:	4654      	mov	r4, sl
 80102c2:	2000      	movs	r0, #0
 80102c4:	f04f 0c0a 	mov.w	ip, #10
 80102c8:	4621      	mov	r1, r4
 80102ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ce:	3b30      	subs	r3, #48	; 0x30
 80102d0:	2b09      	cmp	r3, #9
 80102d2:	d94e      	bls.n	8010372 <_svfiprintf_r+0x17e>
 80102d4:	b1b0      	cbz	r0, 8010304 <_svfiprintf_r+0x110>
 80102d6:	9207      	str	r2, [sp, #28]
 80102d8:	e014      	b.n	8010304 <_svfiprintf_r+0x110>
 80102da:	eba0 0308 	sub.w	r3, r0, r8
 80102de:	fa09 f303 	lsl.w	r3, r9, r3
 80102e2:	4313      	orrs	r3, r2
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	46a2      	mov	sl, r4
 80102e8:	e7d2      	b.n	8010290 <_svfiprintf_r+0x9c>
 80102ea:	9b03      	ldr	r3, [sp, #12]
 80102ec:	1d19      	adds	r1, r3, #4
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	9103      	str	r1, [sp, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	bfbb      	ittet	lt
 80102f6:	425b      	neglt	r3, r3
 80102f8:	f042 0202 	orrlt.w	r2, r2, #2
 80102fc:	9307      	strge	r3, [sp, #28]
 80102fe:	9307      	strlt	r3, [sp, #28]
 8010300:	bfb8      	it	lt
 8010302:	9204      	strlt	r2, [sp, #16]
 8010304:	7823      	ldrb	r3, [r4, #0]
 8010306:	2b2e      	cmp	r3, #46	; 0x2e
 8010308:	d10c      	bne.n	8010324 <_svfiprintf_r+0x130>
 801030a:	7863      	ldrb	r3, [r4, #1]
 801030c:	2b2a      	cmp	r3, #42	; 0x2a
 801030e:	d135      	bne.n	801037c <_svfiprintf_r+0x188>
 8010310:	9b03      	ldr	r3, [sp, #12]
 8010312:	1d1a      	adds	r2, r3, #4
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	9203      	str	r2, [sp, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	bfb8      	it	lt
 801031c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010320:	3402      	adds	r4, #2
 8010322:	9305      	str	r3, [sp, #20]
 8010324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103f0 <_svfiprintf_r+0x1fc>
 8010328:	7821      	ldrb	r1, [r4, #0]
 801032a:	2203      	movs	r2, #3
 801032c:	4650      	mov	r0, sl
 801032e:	f7ef ff4f 	bl	80001d0 <memchr>
 8010332:	b140      	cbz	r0, 8010346 <_svfiprintf_r+0x152>
 8010334:	2340      	movs	r3, #64	; 0x40
 8010336:	eba0 000a 	sub.w	r0, r0, sl
 801033a:	fa03 f000 	lsl.w	r0, r3, r0
 801033e:	9b04      	ldr	r3, [sp, #16]
 8010340:	4303      	orrs	r3, r0
 8010342:	3401      	adds	r4, #1
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801034a:	4826      	ldr	r0, [pc, #152]	; (80103e4 <_svfiprintf_r+0x1f0>)
 801034c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010350:	2206      	movs	r2, #6
 8010352:	f7ef ff3d 	bl	80001d0 <memchr>
 8010356:	2800      	cmp	r0, #0
 8010358:	d038      	beq.n	80103cc <_svfiprintf_r+0x1d8>
 801035a:	4b23      	ldr	r3, [pc, #140]	; (80103e8 <_svfiprintf_r+0x1f4>)
 801035c:	bb1b      	cbnz	r3, 80103a6 <_svfiprintf_r+0x1b2>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	3307      	adds	r3, #7
 8010362:	f023 0307 	bic.w	r3, r3, #7
 8010366:	3308      	adds	r3, #8
 8010368:	9303      	str	r3, [sp, #12]
 801036a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801036c:	4433      	add	r3, r6
 801036e:	9309      	str	r3, [sp, #36]	; 0x24
 8010370:	e767      	b.n	8010242 <_svfiprintf_r+0x4e>
 8010372:	fb0c 3202 	mla	r2, ip, r2, r3
 8010376:	460c      	mov	r4, r1
 8010378:	2001      	movs	r0, #1
 801037a:	e7a5      	b.n	80102c8 <_svfiprintf_r+0xd4>
 801037c:	2300      	movs	r3, #0
 801037e:	3401      	adds	r4, #1
 8010380:	9305      	str	r3, [sp, #20]
 8010382:	4619      	mov	r1, r3
 8010384:	f04f 0c0a 	mov.w	ip, #10
 8010388:	4620      	mov	r0, r4
 801038a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801038e:	3a30      	subs	r2, #48	; 0x30
 8010390:	2a09      	cmp	r2, #9
 8010392:	d903      	bls.n	801039c <_svfiprintf_r+0x1a8>
 8010394:	2b00      	cmp	r3, #0
 8010396:	d0c5      	beq.n	8010324 <_svfiprintf_r+0x130>
 8010398:	9105      	str	r1, [sp, #20]
 801039a:	e7c3      	b.n	8010324 <_svfiprintf_r+0x130>
 801039c:	fb0c 2101 	mla	r1, ip, r1, r2
 80103a0:	4604      	mov	r4, r0
 80103a2:	2301      	movs	r3, #1
 80103a4:	e7f0      	b.n	8010388 <_svfiprintf_r+0x194>
 80103a6:	ab03      	add	r3, sp, #12
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	462a      	mov	r2, r5
 80103ac:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <_svfiprintf_r+0x1f8>)
 80103ae:	a904      	add	r1, sp, #16
 80103b0:	4638      	mov	r0, r7
 80103b2:	f3af 8000 	nop.w
 80103b6:	1c42      	adds	r2, r0, #1
 80103b8:	4606      	mov	r6, r0
 80103ba:	d1d6      	bne.n	801036a <_svfiprintf_r+0x176>
 80103bc:	89ab      	ldrh	r3, [r5, #12]
 80103be:	065b      	lsls	r3, r3, #25
 80103c0:	f53f af2c 	bmi.w	801021c <_svfiprintf_r+0x28>
 80103c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103c6:	b01d      	add	sp, #116	; 0x74
 80103c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103cc:	ab03      	add	r3, sp, #12
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	462a      	mov	r2, r5
 80103d2:	4b06      	ldr	r3, [pc, #24]	; (80103ec <_svfiprintf_r+0x1f8>)
 80103d4:	a904      	add	r1, sp, #16
 80103d6:	4638      	mov	r0, r7
 80103d8:	f000 f87a 	bl	80104d0 <_printf_i>
 80103dc:	e7eb      	b.n	80103b6 <_svfiprintf_r+0x1c2>
 80103de:	bf00      	nop
 80103e0:	08010dbc 	.word	0x08010dbc
 80103e4:	08010dc6 	.word	0x08010dc6
 80103e8:	00000000 	.word	0x00000000
 80103ec:	0801013d 	.word	0x0801013d
 80103f0:	08010dc2 	.word	0x08010dc2

080103f4 <_printf_common>:
 80103f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103f8:	4616      	mov	r6, r2
 80103fa:	4699      	mov	r9, r3
 80103fc:	688a      	ldr	r2, [r1, #8]
 80103fe:	690b      	ldr	r3, [r1, #16]
 8010400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010404:	4293      	cmp	r3, r2
 8010406:	bfb8      	it	lt
 8010408:	4613      	movlt	r3, r2
 801040a:	6033      	str	r3, [r6, #0]
 801040c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010410:	4607      	mov	r7, r0
 8010412:	460c      	mov	r4, r1
 8010414:	b10a      	cbz	r2, 801041a <_printf_common+0x26>
 8010416:	3301      	adds	r3, #1
 8010418:	6033      	str	r3, [r6, #0]
 801041a:	6823      	ldr	r3, [r4, #0]
 801041c:	0699      	lsls	r1, r3, #26
 801041e:	bf42      	ittt	mi
 8010420:	6833      	ldrmi	r3, [r6, #0]
 8010422:	3302      	addmi	r3, #2
 8010424:	6033      	strmi	r3, [r6, #0]
 8010426:	6825      	ldr	r5, [r4, #0]
 8010428:	f015 0506 	ands.w	r5, r5, #6
 801042c:	d106      	bne.n	801043c <_printf_common+0x48>
 801042e:	f104 0a19 	add.w	sl, r4, #25
 8010432:	68e3      	ldr	r3, [r4, #12]
 8010434:	6832      	ldr	r2, [r6, #0]
 8010436:	1a9b      	subs	r3, r3, r2
 8010438:	42ab      	cmp	r3, r5
 801043a:	dc26      	bgt.n	801048a <_printf_common+0x96>
 801043c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010440:	1e13      	subs	r3, r2, #0
 8010442:	6822      	ldr	r2, [r4, #0]
 8010444:	bf18      	it	ne
 8010446:	2301      	movne	r3, #1
 8010448:	0692      	lsls	r2, r2, #26
 801044a:	d42b      	bmi.n	80104a4 <_printf_common+0xb0>
 801044c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010450:	4649      	mov	r1, r9
 8010452:	4638      	mov	r0, r7
 8010454:	47c0      	blx	r8
 8010456:	3001      	adds	r0, #1
 8010458:	d01e      	beq.n	8010498 <_printf_common+0xa4>
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	68e5      	ldr	r5, [r4, #12]
 801045e:	6832      	ldr	r2, [r6, #0]
 8010460:	f003 0306 	and.w	r3, r3, #6
 8010464:	2b04      	cmp	r3, #4
 8010466:	bf08      	it	eq
 8010468:	1aad      	subeq	r5, r5, r2
 801046a:	68a3      	ldr	r3, [r4, #8]
 801046c:	6922      	ldr	r2, [r4, #16]
 801046e:	bf0c      	ite	eq
 8010470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010474:	2500      	movne	r5, #0
 8010476:	4293      	cmp	r3, r2
 8010478:	bfc4      	itt	gt
 801047a:	1a9b      	subgt	r3, r3, r2
 801047c:	18ed      	addgt	r5, r5, r3
 801047e:	2600      	movs	r6, #0
 8010480:	341a      	adds	r4, #26
 8010482:	42b5      	cmp	r5, r6
 8010484:	d11a      	bne.n	80104bc <_printf_common+0xc8>
 8010486:	2000      	movs	r0, #0
 8010488:	e008      	b.n	801049c <_printf_common+0xa8>
 801048a:	2301      	movs	r3, #1
 801048c:	4652      	mov	r2, sl
 801048e:	4649      	mov	r1, r9
 8010490:	4638      	mov	r0, r7
 8010492:	47c0      	blx	r8
 8010494:	3001      	adds	r0, #1
 8010496:	d103      	bne.n	80104a0 <_printf_common+0xac>
 8010498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801049c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a0:	3501      	adds	r5, #1
 80104a2:	e7c6      	b.n	8010432 <_printf_common+0x3e>
 80104a4:	18e1      	adds	r1, r4, r3
 80104a6:	1c5a      	adds	r2, r3, #1
 80104a8:	2030      	movs	r0, #48	; 0x30
 80104aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104ae:	4422      	add	r2, r4
 80104b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104b8:	3302      	adds	r3, #2
 80104ba:	e7c7      	b.n	801044c <_printf_common+0x58>
 80104bc:	2301      	movs	r3, #1
 80104be:	4622      	mov	r2, r4
 80104c0:	4649      	mov	r1, r9
 80104c2:	4638      	mov	r0, r7
 80104c4:	47c0      	blx	r8
 80104c6:	3001      	adds	r0, #1
 80104c8:	d0e6      	beq.n	8010498 <_printf_common+0xa4>
 80104ca:	3601      	adds	r6, #1
 80104cc:	e7d9      	b.n	8010482 <_printf_common+0x8e>
	...

080104d0 <_printf_i>:
 80104d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104d4:	460c      	mov	r4, r1
 80104d6:	4691      	mov	r9, r2
 80104d8:	7e27      	ldrb	r7, [r4, #24]
 80104da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80104dc:	2f78      	cmp	r7, #120	; 0x78
 80104de:	4680      	mov	r8, r0
 80104e0:	469a      	mov	sl, r3
 80104e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104e6:	d807      	bhi.n	80104f8 <_printf_i+0x28>
 80104e8:	2f62      	cmp	r7, #98	; 0x62
 80104ea:	d80a      	bhi.n	8010502 <_printf_i+0x32>
 80104ec:	2f00      	cmp	r7, #0
 80104ee:	f000 80d8 	beq.w	80106a2 <_printf_i+0x1d2>
 80104f2:	2f58      	cmp	r7, #88	; 0x58
 80104f4:	f000 80a3 	beq.w	801063e <_printf_i+0x16e>
 80104f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010500:	e03a      	b.n	8010578 <_printf_i+0xa8>
 8010502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010506:	2b15      	cmp	r3, #21
 8010508:	d8f6      	bhi.n	80104f8 <_printf_i+0x28>
 801050a:	a001      	add	r0, pc, #4	; (adr r0, 8010510 <_printf_i+0x40>)
 801050c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010510:	08010569 	.word	0x08010569
 8010514:	0801057d 	.word	0x0801057d
 8010518:	080104f9 	.word	0x080104f9
 801051c:	080104f9 	.word	0x080104f9
 8010520:	080104f9 	.word	0x080104f9
 8010524:	080104f9 	.word	0x080104f9
 8010528:	0801057d 	.word	0x0801057d
 801052c:	080104f9 	.word	0x080104f9
 8010530:	080104f9 	.word	0x080104f9
 8010534:	080104f9 	.word	0x080104f9
 8010538:	080104f9 	.word	0x080104f9
 801053c:	08010689 	.word	0x08010689
 8010540:	080105ad 	.word	0x080105ad
 8010544:	0801066b 	.word	0x0801066b
 8010548:	080104f9 	.word	0x080104f9
 801054c:	080104f9 	.word	0x080104f9
 8010550:	080106ab 	.word	0x080106ab
 8010554:	080104f9 	.word	0x080104f9
 8010558:	080105ad 	.word	0x080105ad
 801055c:	080104f9 	.word	0x080104f9
 8010560:	080104f9 	.word	0x080104f9
 8010564:	08010673 	.word	0x08010673
 8010568:	680b      	ldr	r3, [r1, #0]
 801056a:	1d1a      	adds	r2, r3, #4
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	600a      	str	r2, [r1, #0]
 8010570:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010578:	2301      	movs	r3, #1
 801057a:	e0a3      	b.n	80106c4 <_printf_i+0x1f4>
 801057c:	6825      	ldr	r5, [r4, #0]
 801057e:	6808      	ldr	r0, [r1, #0]
 8010580:	062e      	lsls	r6, r5, #24
 8010582:	f100 0304 	add.w	r3, r0, #4
 8010586:	d50a      	bpl.n	801059e <_printf_i+0xce>
 8010588:	6805      	ldr	r5, [r0, #0]
 801058a:	600b      	str	r3, [r1, #0]
 801058c:	2d00      	cmp	r5, #0
 801058e:	da03      	bge.n	8010598 <_printf_i+0xc8>
 8010590:	232d      	movs	r3, #45	; 0x2d
 8010592:	426d      	negs	r5, r5
 8010594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010598:	485e      	ldr	r0, [pc, #376]	; (8010714 <_printf_i+0x244>)
 801059a:	230a      	movs	r3, #10
 801059c:	e019      	b.n	80105d2 <_printf_i+0x102>
 801059e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80105a2:	6805      	ldr	r5, [r0, #0]
 80105a4:	600b      	str	r3, [r1, #0]
 80105a6:	bf18      	it	ne
 80105a8:	b22d      	sxthne	r5, r5
 80105aa:	e7ef      	b.n	801058c <_printf_i+0xbc>
 80105ac:	680b      	ldr	r3, [r1, #0]
 80105ae:	6825      	ldr	r5, [r4, #0]
 80105b0:	1d18      	adds	r0, r3, #4
 80105b2:	6008      	str	r0, [r1, #0]
 80105b4:	0628      	lsls	r0, r5, #24
 80105b6:	d501      	bpl.n	80105bc <_printf_i+0xec>
 80105b8:	681d      	ldr	r5, [r3, #0]
 80105ba:	e002      	b.n	80105c2 <_printf_i+0xf2>
 80105bc:	0669      	lsls	r1, r5, #25
 80105be:	d5fb      	bpl.n	80105b8 <_printf_i+0xe8>
 80105c0:	881d      	ldrh	r5, [r3, #0]
 80105c2:	4854      	ldr	r0, [pc, #336]	; (8010714 <_printf_i+0x244>)
 80105c4:	2f6f      	cmp	r7, #111	; 0x6f
 80105c6:	bf0c      	ite	eq
 80105c8:	2308      	moveq	r3, #8
 80105ca:	230a      	movne	r3, #10
 80105cc:	2100      	movs	r1, #0
 80105ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105d2:	6866      	ldr	r6, [r4, #4]
 80105d4:	60a6      	str	r6, [r4, #8]
 80105d6:	2e00      	cmp	r6, #0
 80105d8:	bfa2      	ittt	ge
 80105da:	6821      	ldrge	r1, [r4, #0]
 80105dc:	f021 0104 	bicge.w	r1, r1, #4
 80105e0:	6021      	strge	r1, [r4, #0]
 80105e2:	b90d      	cbnz	r5, 80105e8 <_printf_i+0x118>
 80105e4:	2e00      	cmp	r6, #0
 80105e6:	d04d      	beq.n	8010684 <_printf_i+0x1b4>
 80105e8:	4616      	mov	r6, r2
 80105ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80105ee:	fb03 5711 	mls	r7, r3, r1, r5
 80105f2:	5dc7      	ldrb	r7, [r0, r7]
 80105f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105f8:	462f      	mov	r7, r5
 80105fa:	42bb      	cmp	r3, r7
 80105fc:	460d      	mov	r5, r1
 80105fe:	d9f4      	bls.n	80105ea <_printf_i+0x11a>
 8010600:	2b08      	cmp	r3, #8
 8010602:	d10b      	bne.n	801061c <_printf_i+0x14c>
 8010604:	6823      	ldr	r3, [r4, #0]
 8010606:	07df      	lsls	r7, r3, #31
 8010608:	d508      	bpl.n	801061c <_printf_i+0x14c>
 801060a:	6923      	ldr	r3, [r4, #16]
 801060c:	6861      	ldr	r1, [r4, #4]
 801060e:	4299      	cmp	r1, r3
 8010610:	bfde      	ittt	le
 8010612:	2330      	movle	r3, #48	; 0x30
 8010614:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010618:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801061c:	1b92      	subs	r2, r2, r6
 801061e:	6122      	str	r2, [r4, #16]
 8010620:	f8cd a000 	str.w	sl, [sp]
 8010624:	464b      	mov	r3, r9
 8010626:	aa03      	add	r2, sp, #12
 8010628:	4621      	mov	r1, r4
 801062a:	4640      	mov	r0, r8
 801062c:	f7ff fee2 	bl	80103f4 <_printf_common>
 8010630:	3001      	adds	r0, #1
 8010632:	d14c      	bne.n	80106ce <_printf_i+0x1fe>
 8010634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010638:	b004      	add	sp, #16
 801063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063e:	4835      	ldr	r0, [pc, #212]	; (8010714 <_printf_i+0x244>)
 8010640:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010644:	6823      	ldr	r3, [r4, #0]
 8010646:	680e      	ldr	r6, [r1, #0]
 8010648:	061f      	lsls	r7, r3, #24
 801064a:	f856 5b04 	ldr.w	r5, [r6], #4
 801064e:	600e      	str	r6, [r1, #0]
 8010650:	d514      	bpl.n	801067c <_printf_i+0x1ac>
 8010652:	07d9      	lsls	r1, r3, #31
 8010654:	bf44      	itt	mi
 8010656:	f043 0320 	orrmi.w	r3, r3, #32
 801065a:	6023      	strmi	r3, [r4, #0]
 801065c:	b91d      	cbnz	r5, 8010666 <_printf_i+0x196>
 801065e:	6823      	ldr	r3, [r4, #0]
 8010660:	f023 0320 	bic.w	r3, r3, #32
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	2310      	movs	r3, #16
 8010668:	e7b0      	b.n	80105cc <_printf_i+0xfc>
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	f043 0320 	orr.w	r3, r3, #32
 8010670:	6023      	str	r3, [r4, #0]
 8010672:	2378      	movs	r3, #120	; 0x78
 8010674:	4828      	ldr	r0, [pc, #160]	; (8010718 <_printf_i+0x248>)
 8010676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801067a:	e7e3      	b.n	8010644 <_printf_i+0x174>
 801067c:	065e      	lsls	r6, r3, #25
 801067e:	bf48      	it	mi
 8010680:	b2ad      	uxthmi	r5, r5
 8010682:	e7e6      	b.n	8010652 <_printf_i+0x182>
 8010684:	4616      	mov	r6, r2
 8010686:	e7bb      	b.n	8010600 <_printf_i+0x130>
 8010688:	680b      	ldr	r3, [r1, #0]
 801068a:	6826      	ldr	r6, [r4, #0]
 801068c:	6960      	ldr	r0, [r4, #20]
 801068e:	1d1d      	adds	r5, r3, #4
 8010690:	600d      	str	r5, [r1, #0]
 8010692:	0635      	lsls	r5, r6, #24
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	d501      	bpl.n	801069c <_printf_i+0x1cc>
 8010698:	6018      	str	r0, [r3, #0]
 801069a:	e002      	b.n	80106a2 <_printf_i+0x1d2>
 801069c:	0671      	lsls	r1, r6, #25
 801069e:	d5fb      	bpl.n	8010698 <_printf_i+0x1c8>
 80106a0:	8018      	strh	r0, [r3, #0]
 80106a2:	2300      	movs	r3, #0
 80106a4:	6123      	str	r3, [r4, #16]
 80106a6:	4616      	mov	r6, r2
 80106a8:	e7ba      	b.n	8010620 <_printf_i+0x150>
 80106aa:	680b      	ldr	r3, [r1, #0]
 80106ac:	1d1a      	adds	r2, r3, #4
 80106ae:	600a      	str	r2, [r1, #0]
 80106b0:	681e      	ldr	r6, [r3, #0]
 80106b2:	6862      	ldr	r2, [r4, #4]
 80106b4:	2100      	movs	r1, #0
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ef fd8a 	bl	80001d0 <memchr>
 80106bc:	b108      	cbz	r0, 80106c2 <_printf_i+0x1f2>
 80106be:	1b80      	subs	r0, r0, r6
 80106c0:	6060      	str	r0, [r4, #4]
 80106c2:	6863      	ldr	r3, [r4, #4]
 80106c4:	6123      	str	r3, [r4, #16]
 80106c6:	2300      	movs	r3, #0
 80106c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106cc:	e7a8      	b.n	8010620 <_printf_i+0x150>
 80106ce:	6923      	ldr	r3, [r4, #16]
 80106d0:	4632      	mov	r2, r6
 80106d2:	4649      	mov	r1, r9
 80106d4:	4640      	mov	r0, r8
 80106d6:	47d0      	blx	sl
 80106d8:	3001      	adds	r0, #1
 80106da:	d0ab      	beq.n	8010634 <_printf_i+0x164>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	079b      	lsls	r3, r3, #30
 80106e0:	d413      	bmi.n	801070a <_printf_i+0x23a>
 80106e2:	68e0      	ldr	r0, [r4, #12]
 80106e4:	9b03      	ldr	r3, [sp, #12]
 80106e6:	4298      	cmp	r0, r3
 80106e8:	bfb8      	it	lt
 80106ea:	4618      	movlt	r0, r3
 80106ec:	e7a4      	b.n	8010638 <_printf_i+0x168>
 80106ee:	2301      	movs	r3, #1
 80106f0:	4632      	mov	r2, r6
 80106f2:	4649      	mov	r1, r9
 80106f4:	4640      	mov	r0, r8
 80106f6:	47d0      	blx	sl
 80106f8:	3001      	adds	r0, #1
 80106fa:	d09b      	beq.n	8010634 <_printf_i+0x164>
 80106fc:	3501      	adds	r5, #1
 80106fe:	68e3      	ldr	r3, [r4, #12]
 8010700:	9903      	ldr	r1, [sp, #12]
 8010702:	1a5b      	subs	r3, r3, r1
 8010704:	42ab      	cmp	r3, r5
 8010706:	dcf2      	bgt.n	80106ee <_printf_i+0x21e>
 8010708:	e7eb      	b.n	80106e2 <_printf_i+0x212>
 801070a:	2500      	movs	r5, #0
 801070c:	f104 0619 	add.w	r6, r4, #25
 8010710:	e7f5      	b.n	80106fe <_printf_i+0x22e>
 8010712:	bf00      	nop
 8010714:	08010dcd 	.word	0x08010dcd
 8010718:	08010dde 	.word	0x08010dde

0801071c <__retarget_lock_acquire_recursive>:
 801071c:	4770      	bx	lr

0801071e <__retarget_lock_release_recursive>:
 801071e:	4770      	bx	lr

08010720 <memmove>:
 8010720:	4288      	cmp	r0, r1
 8010722:	b510      	push	{r4, lr}
 8010724:	eb01 0402 	add.w	r4, r1, r2
 8010728:	d902      	bls.n	8010730 <memmove+0x10>
 801072a:	4284      	cmp	r4, r0
 801072c:	4623      	mov	r3, r4
 801072e:	d807      	bhi.n	8010740 <memmove+0x20>
 8010730:	1e43      	subs	r3, r0, #1
 8010732:	42a1      	cmp	r1, r4
 8010734:	d008      	beq.n	8010748 <memmove+0x28>
 8010736:	f811 2b01 	ldrb.w	r2, [r1], #1
 801073a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801073e:	e7f8      	b.n	8010732 <memmove+0x12>
 8010740:	4402      	add	r2, r0
 8010742:	4601      	mov	r1, r0
 8010744:	428a      	cmp	r2, r1
 8010746:	d100      	bne.n	801074a <memmove+0x2a>
 8010748:	bd10      	pop	{r4, pc}
 801074a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801074e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010752:	e7f7      	b.n	8010744 <memmove+0x24>

08010754 <_realloc_r>:
 8010754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010756:	4607      	mov	r7, r0
 8010758:	4614      	mov	r4, r2
 801075a:	460e      	mov	r6, r1
 801075c:	b921      	cbnz	r1, 8010768 <_realloc_r+0x14>
 801075e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010762:	4611      	mov	r1, r2
 8010764:	f7ff bc54 	b.w	8010010 <_malloc_r>
 8010768:	b922      	cbnz	r2, 8010774 <_realloc_r+0x20>
 801076a:	f7ff fc01 	bl	800ff70 <_free_r>
 801076e:	4625      	mov	r5, r4
 8010770:	4628      	mov	r0, r5
 8010772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010774:	f000 f814 	bl	80107a0 <_malloc_usable_size_r>
 8010778:	42a0      	cmp	r0, r4
 801077a:	d20f      	bcs.n	801079c <_realloc_r+0x48>
 801077c:	4621      	mov	r1, r4
 801077e:	4638      	mov	r0, r7
 8010780:	f7ff fc46 	bl	8010010 <_malloc_r>
 8010784:	4605      	mov	r5, r0
 8010786:	2800      	cmp	r0, #0
 8010788:	d0f2      	beq.n	8010770 <_realloc_r+0x1c>
 801078a:	4631      	mov	r1, r6
 801078c:	4622      	mov	r2, r4
 801078e:	f7ff fbd9 	bl	800ff44 <memcpy>
 8010792:	4631      	mov	r1, r6
 8010794:	4638      	mov	r0, r7
 8010796:	f7ff fbeb 	bl	800ff70 <_free_r>
 801079a:	e7e9      	b.n	8010770 <_realloc_r+0x1c>
 801079c:	4635      	mov	r5, r6
 801079e:	e7e7      	b.n	8010770 <_realloc_r+0x1c>

080107a0 <_malloc_usable_size_r>:
 80107a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107a4:	1f18      	subs	r0, r3, #4
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	bfbc      	itt	lt
 80107aa:	580b      	ldrlt	r3, [r1, r0]
 80107ac:	18c0      	addlt	r0, r0, r3
 80107ae:	4770      	bx	lr

080107b0 <_init>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	bf00      	nop
 80107b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b6:	bc08      	pop	{r3}
 80107b8:	469e      	mov	lr, r3
 80107ba:	4770      	bx	lr

080107bc <_fini>:
 80107bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107be:	bf00      	nop
 80107c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107c2:	bc08      	pop	{r3}
 80107c4:	469e      	mov	lr, r3
 80107c6:	4770      	bx	lr
