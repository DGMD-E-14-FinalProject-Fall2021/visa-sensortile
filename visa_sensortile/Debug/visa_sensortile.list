
visa_sensortile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0801083c  0801083c  0002083c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e68  08010e68  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08010e68  08010e68  00020e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e70  08010e70  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e70  08010e70  00020e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e74  08010e74  00020e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08010e78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027b8  20000104  08010f7c  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028bc  08010f7c  000328bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046c52  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007400  00000000  00000000  00076d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  0007e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002800  00000000  00000000  00080c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000319f6  00000000  00000000  00083428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032785  00000000  00000000  000b4e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010beaf  00000000  00000000  000e75a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f3452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b7d8  00000000  00000000  001f34a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000104 	.word	0x20000104
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010824 	.word	0x08010824

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000108 	.word	0x20000108
 80001cc:	08010824 	.word	0x08010824

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <InitTargetPlatform>:
  * @brief  Initialize all the Target platform's Features
  * @param  TargetType_t BoardType Nucleo/BlueCoin/SensorTile
  * @retval None
  */
void InitTargetPlatform(TargetType_t BoardType)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0c6      	sub	sp, #280	; 0x118
 800056c:	af02      	add	r7, sp, #8
 800056e:	4602      	mov	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
  TargetBoardFeatures.BoardType = BoardType;
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <InitTargetPlatform+0x68>)
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	7013      	strb	r3, [r2, #0]
   * for looking the MOTENV1 Initialization phase */
  HAL_Delay(10000);
#endif /* ENABLE_USB_DEBUG */
  
  /* Initialize LED */
  BSP_LED_Init( LED1 );
 800057c:	2000      	movs	r0, #0
 800057e:	f004 fae9 	bl	8004b54 <BSP_LED_Init>

  STLBLE_PRINTF("\r\nSTMicroelectronics %s:\r\n"
 8000582:	f107 000c 	add.w	r0, r7, #12
 8000586:	2330      	movs	r3, #48	; 0x30
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2335      	movs	r3, #53	; 0x35
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2332      	movs	r3, #50	; 0x32
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <InitTargetPlatform+0x6c>)
 8000592:	4911      	ldr	r1, [pc, #68]	; (80005d8 <InitTargetPlatform+0x70>)
 8000594:	f00f fde0 	bl	8010158 <siprintf>
 8000598:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800059c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fc80 	bl	8002eac <CDC_Fill_Buffer>
          "\r\n",
          STLBLE_PACKAGENAME,
          STLBLE_VERSION_MAJOR,STLBLE_VERSION_MINOR,STLBLE_VERSION_PATCH);

  /* Reset all the Target's Features */
  memset(&TargetBoardFeatures, 0, sizeof(TargetFeatures_t));
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	2100      	movs	r1, #0
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <InitTargetPlatform+0x68>)
 80005b2:	f00f fd0f 	bl	800ffd4 <memset>
  /* Discovery and Intialize all the Target's Features */
  Sensor_IO_SPI_CS_Init_All();
 80005b6:	f004 fb79 	bl	8004cac <Sensor_IO_SPI_CS_Init_All>
  Init_MEM1_Sensors();
 80005ba:	f000 f80f 	bl	80005dc <Init_MEM1_Sensors>
  
  TargetBoardFeatures.LedStatus = 0; /*Off by default */
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <InitTargetPlatform+0x68>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80005c6:	bf00      	nop
 80005c8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200005f0 	.word	0x200005f0
 80005d4:	0801083c 	.word	0x0801083c
 80005d8:	08010844 	.word	0x08010844

080005dc <Init_MEM1_Sensors>:
/** @brief Initialize all the MEMS1 sensors
 * @param None
 * @retval None
 */
static void Init_MEM1_Sensors(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c8      	sub	sp, #288	; 0x120
 80005e0:	af00      	add	r7, sp, #0
  /* Humidity Temperature1 */
  if(BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY|ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80005e2:	2105      	movs	r1, #5
 80005e4:	2000      	movs	r0, #0
 80005e6:	f004 fee9 	bl	80053bc <BSP_ENV_SENSOR_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d126      	bne.n	800063e <Init_MEM1_Sensors+0x62>
  {
    STLBLE_PRINTF("OK Humidity Sensor\n\r");
 80005f0:	463b      	mov	r3, r7
 80005f2:	495e      	ldr	r1, [pc, #376]	; (800076c <Init_MEM1_Sensors+0x190>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00f fdaf 	bl	8010158 <siprintf>
 80005fa:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 80005fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000602:	463b      	mov	r3, r7
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fc50 	bl	8002eac <CDC_Fill_Buffer>
    TargetBoardFeatures.HandleHumSensor=1;
 800060c:	4b58      	ldr	r3, [pc, #352]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]

    STLBLE_PRINTF("OK Temperature Sensor1\n\r");
 8000612:	463b      	mov	r3, r7
 8000614:	4957      	ldr	r1, [pc, #348]	; (8000774 <Init_MEM1_Sensors+0x198>)
 8000616:	4618      	mov	r0, r3
 8000618:	f00f fd9e 	bl	8010158 <siprintf>
 800061c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000620:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000624:	463b      	mov	r3, r7
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fc3f 	bl	8002eac <CDC_Fill_Buffer>
    TargetBoardFeatures.NumTempSensors++;
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	4a4e      	ldr	r2, [pc, #312]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000636:	6093      	str	r3, [r2, #8]
    TargetBoardFeatures.HandleTempSensors[0]=1;
 8000638:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800063a:	2201      	movs	r2, #1
 800063c:	60da      	str	r2, [r3, #12]
  }

  /* Temperature2 Pressure */
  if(BSP_ENV_SENSOR_Init(LPS22HB_0, ENV_TEMPERATURE|ENV_PRESSURE)==BSP_ERROR_NONE)
 800063e:	2103      	movs	r1, #3
 8000640:	2001      	movs	r0, #1
 8000642:	f004 febb 	bl	80053bc <BSP_ENV_SENSOR_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d126      	bne.n	800069a <Init_MEM1_Sensors+0xbe>
  {
     STLBLE_PRINTF("OK Temperature Sensor2\n\r");
 800064c:	463b      	mov	r3, r7
 800064e:	494a      	ldr	r1, [pc, #296]	; (8000778 <Init_MEM1_Sensors+0x19c>)
 8000650:	4618      	mov	r0, r3
 8000652:	f00f fd81 	bl	8010158 <siprintf>
 8000656:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800065a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800065e:	463b      	mov	r3, r7
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fc22 	bl	8002eac <CDC_Fill_Buffer>
     TargetBoardFeatures.NumTempSensors++;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	3301      	adds	r3, #1
 800066e:	4a40      	ldr	r2, [pc, #256]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000670:	6093      	str	r3, [r2, #8]
     TargetBoardFeatures.HandleTempSensors[1]=1;
 8000672:	4b3f      	ldr	r3, [pc, #252]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000674:	2201      	movs	r2, #1
 8000676:	611a      	str	r2, [r3, #16]

     STLBLE_PRINTF("OK Pressure Sensor\n\r");
 8000678:	463b      	mov	r3, r7
 800067a:	4940      	ldr	r1, [pc, #256]	; (800077c <Init_MEM1_Sensors+0x1a0>)
 800067c:	4618      	mov	r0, r3
 800067e:	f00f fd6b 	bl	8010158 <siprintf>
 8000682:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8000686:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800068a:	463b      	mov	r3, r7
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fc0c 	bl	8002eac <CDC_Fill_Buffer>
     TargetBoardFeatures.HandlePressSensor=1;
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000696:	2201      	movs	r2, #1
 8000698:	615a      	str	r2, [r3, #20]
  }

  if(TargetBoardFeatures.HandleHumSensor) {
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <Init_MEM1_Sensors+0x194>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d014      	beq.n	80006cc <Init_MEM1_Sensors+0xf0>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_HUMIDITY)==BSP_ERROR_NONE)
 80006a2:	2104      	movs	r1, #4
 80006a4:	2000      	movs	r0, #0
 80006a6:	f004 ff49 	bl	800553c <BSP_ENV_SENSOR_Enable>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10d      	bne.n	80006cc <Init_MEM1_Sensors+0xf0>
    {
      STLBLE_PRINTF("Enabled Humidity Sensor\n\r");
 80006b0:	463b      	mov	r3, r7
 80006b2:	4933      	ldr	r1, [pc, #204]	; (8000780 <Init_MEM1_Sensors+0x1a4>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00f fd4f 	bl	8010158 <siprintf>
 80006ba:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80006be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80006c2:	463b      	mov	r3, r7
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fbf0 	bl	8002eac <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[0]){
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <Init_MEM1_Sensors+0x194>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <Init_MEM1_Sensors+0x122>
    if(BSP_ENV_SENSOR_Enable(HTS221_0, ENV_TEMPERATURE)==BSP_ERROR_NONE)
 80006d4:	2101      	movs	r1, #1
 80006d6:	2000      	movs	r0, #0
 80006d8:	f004 ff30 	bl	800553c <BSP_ENV_SENSOR_Enable>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10d      	bne.n	80006fe <Init_MEM1_Sensors+0x122>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor1\n\r");
 80006e2:	463b      	mov	r3, r7
 80006e4:	4927      	ldr	r1, [pc, #156]	; (8000784 <Init_MEM1_Sensors+0x1a8>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00f fd36 	bl	8010158 <siprintf>
 80006ec:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80006f0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80006f4:	463b      	mov	r3, r7
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fbd7 	bl	8002eac <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandleTempSensors[1]){
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d014      	beq.n	8000730 <Init_MEM1_Sensors+0x154>
    if(BSP_ENV_SENSOR_Enable( LPS22HB_0, ENV_TEMPERATURE)==BSP_ERROR_NONE) 
 8000706:	2101      	movs	r1, #1
 8000708:	2001      	movs	r0, #1
 800070a:	f004 ff17 	bl	800553c <BSP_ENV_SENSOR_Enable>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <Init_MEM1_Sensors+0x154>
    {
      STLBLE_PRINTF("Enabled Temperature Sensor2\n\r");
 8000714:	463b      	mov	r3, r7
 8000716:	491c      	ldr	r1, [pc, #112]	; (8000788 <Init_MEM1_Sensors+0x1ac>)
 8000718:	4618      	mov	r0, r3
 800071a:	f00f fd1d 	bl	8010158 <siprintf>
 800071e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000722:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000726:	463b      	mov	r3, r7
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fbbe 	bl	8002eac <CDC_Fill_Buffer>
    }
  }
  
  if(TargetBoardFeatures.HandlePressSensor) {
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <Init_MEM1_Sensors+0x194>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d014      	beq.n	8000762 <Init_MEM1_Sensors+0x186>
    if(BSP_ENV_SENSOR_Enable(LPS22HB_0, ENV_PRESSURE)==BSP_ERROR_NONE)
 8000738:	2102      	movs	r1, #2
 800073a:	2001      	movs	r0, #1
 800073c:	f004 fefe 	bl	800553c <BSP_ENV_SENSOR_Enable>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10d      	bne.n	8000762 <Init_MEM1_Sensors+0x186>
    {
      STLBLE_PRINTF("Enabled Pressure Sensor\n\r");
 8000746:	463b      	mov	r3, r7
 8000748:	4910      	ldr	r1, [pc, #64]	; (800078c <Init_MEM1_Sensors+0x1b0>)
 800074a:	4618      	mov	r0, r3
 800074c:	f00f fd04 	bl	8010158 <siprintf>
 8000750:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8000754:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000758:	463b      	mov	r3, r7
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fba5 	bl	8002eac <CDC_Fill_Buffer>
    }
  }
}
 8000762:	bf00      	nop
 8000764:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	08010880 	.word	0x08010880
 8000770:	200005f0 	.word	0x200005f0
 8000774:	08010898 	.word	0x08010898
 8000778:	080108b4 	.word	0x080108b4
 800077c:	080108d0 	.word	0x080108d0
 8000780:	080108e8 	.word	0x080108e8
 8000784:	08010904 	.word	0x08010904
 8000788:	08010924 	.word	0x08010924
 800078c:	08010944 	.word	0x08010944

08000790 <LedOnTargetPlatform>:
  * @brief  This function switches on the LED
  * @param  None
  * @retval None
  */
void LedOnTargetPlatform(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  BSP_LED_On( LED1 );
 8000794:	2000      	movs	r0, #0
 8000796:	f004 fa2d 	bl	8004bf4 <BSP_LED_On>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <LedOffTargetPlatform>:
  * @brief  This function switches off the LED
  * @param  None
  * @retval None
  */
void LedOffTargetPlatform(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  BSP_LED_Off( LED1 );
 80007a2:	2000      	movs	r0, #0
 80007a4:	f004 fa54 	bl	8004c50 <BSP_LED_Off>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80007b4:	f008 fbae 	bl	8008f14 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a27      	ldr	r2, [pc, #156]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HCI_TL_SPI_Init+0xc8>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2104      	movs	r1, #4
 8000804:	481c      	ldr	r0, [pc, #112]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000806:	f006 fa37 	bl	8006c78 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800080a:	2320      	movs	r3, #32
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HCI_TL_SPI_Init+0xd0>)
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <HCI_TL_SPI_Init+0xd4>)
 800081e:	f005 ff75 	bl	800670c <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000822:	2301      	movs	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <HCI_TL_SPI_Init+0xd8>)
 800083a:	f005 ff67 	bl	800670c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800083e:	2304      	movs	r3, #4
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000856:	f005 ff59 	bl	800670c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2104      	movs	r1, #4
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <HCI_TL_SPI_Init+0xcc>)
 8000860:	f006 fa0a 	bl	8006c78 <HAL_GPIO_WritePin>
    
  return BSP_SPI1_Init();
 8000864:	f004 fb9c 	bl	8004fa0 <BSP_SPI1_Init>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400
 800087c:	10110000 	.word	0x10110000
 8000880:	48000800 	.word	0x48000800
 8000884:	48001c00 	.word	0x48001c00

08000888 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800088c:	2120      	movs	r1, #32
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <HCI_TL_SPI_DeInit+0x24>)
 8000890:	f006 f8e6 	bl	8006a60 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HCI_TL_SPI_DeInit+0x28>)
 8000898:	f006 f8e2 	bl	8006a60 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HCI_TL_SPI_DeInit+0x2c>)
 80008a0:	f006 f8de 	bl	8006a60 <HAL_GPIO_DeInit>
  return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	48000800 	.word	0x48000800
 80008b0:	48000400 	.word	0x48000400
 80008b4:	48001c00 	.word	0x48001c00

080008b8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <HCI_TL_SPI_Reset+0x2c>)
 80008c2:	f006 f9d9 	bl	8006c78 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80008c6:	2005      	movs	r0, #5
 80008c8:	f000 ff84 	bl	80017d4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <HCI_TL_SPI_Reset+0x2c>)
 80008d2:	f006 f9d1 	bl	8006c78 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 ff7c 	bl	80017d4 <HAL_Delay>
  return 0;
 80008dc:	2300      	movs	r3, #0
}  
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	48001c00 	.word	0x48001c00

080008e8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80008f8:	23ff      	movs	r3, #255	; 0xff
 80008fa:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80008fc:	4a25      	ldr	r2, [pc, #148]	; (8000994 <HCI_TL_SPI_Receive+0xac>)
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000906:	6018      	str	r0, [r3, #0]
 8000908:	3304      	adds	r3, #4
 800090a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	4821      	ldr	r0, [pc, #132]	; (8000998 <HCI_TL_SPI_Receive+0xb0>)
 8000912:	f006 f9b1 	bl	8006c78 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000916:	f107 010c 	add.w	r1, r7, #12
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2205      	movs	r2, #5
 8000920:	4618      	mov	r0, r3
 8000922:	f004 fb61 	bl	8004fe8 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8000926:	7b3b      	ldrb	r3, [r7, #12]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d129      	bne.n	8000980 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800092c:	7c3b      	ldrb	r3, [r7, #16]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21a      	sxth	r2, r3
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b21b      	sxth	r3, r3
 8000936:	4313      	orrs	r3, r2
 8000938:	b21b      	sxth	r3, r3
 800093a:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 800093c:	8bfb      	ldrh	r3, [r7, #30]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01e      	beq.n	8000980 <HCI_TL_SPI_Receive+0x98>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 8000942:	8bfa      	ldrh	r2, [r7, #30]
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	429a      	cmp	r2, r3
 8000948:	d901      	bls.n	800094e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 800094e:	2300      	movs	r3, #0
 8000950:	777b      	strb	r3, [r7, #29]
 8000952:	e010      	b.n	8000976 <HCI_TL_SPI_Receive+0x8e>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8000954:	f107 011b 	add.w	r1, r7, #27
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	2201      	movs	r2, #1
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fb42 	bl	8004fe8 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000964:	7f7b      	ldrb	r3, [r7, #29]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	7efa      	ldrb	r2, [r7, #27]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000970:	7f7b      	ldrb	r3, [r7, #29]
 8000972:	3301      	adds	r3, #1
 8000974:	777b      	strb	r3, [r7, #29]
 8000976:	7f7b      	ldrb	r3, [r7, #29]
 8000978:	b29b      	uxth	r3, r3
 800097a:	8bfa      	ldrh	r2, [r7, #30]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8e9      	bhi.n	8000954 <HCI_TL_SPI_Receive+0x6c>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2104      	movs	r1, #4
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <HCI_TL_SPI_Receive+0xb0>)
 8000986:	f006 f977 	bl	8006c78 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 800098a:	7f7b      	ldrb	r3, [r7, #29]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08010960 	.word	0x08010960
 8000998:	48000400 	.word	0x48000400

0800099c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80009a8:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <HCI_TL_SPI_Send+0x9c>)
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b2:	6018      	str	r0, [r3, #0]
 80009b4:	3304      	adds	r3, #4
 80009b6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f005 fa9e 	bl	8005ef8 <HAL_GetTick>
 80009bc:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2104      	movs	r1, #4
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <HCI_TL_SPI_Send+0xa0>)
 80009c8:	f006 f956 	bl	8006c78 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80009cc:	f107 0108 	add.w	r1, r7, #8
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2205      	movs	r2, #5
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 fb06 	bl	8004fe8 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d10f      	bne.n	8000a02 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80009e2:	7a7b      	ldrb	r3, [r7, #9]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	887a      	ldrh	r2, [r7, #2]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d806      	bhi.n	80009fa <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4913      	ldr	r1, [pc, #76]	; (8000a40 <HCI_TL_SPI_Send+0xa4>)
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f004 faf8 	bl	8004fe8 <BSP_SPI1_SendRecv>
 80009f8:	e006      	b.n	8000a08 <HCI_TL_SPI_Send+0x6c>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80009fa:	f06f 0301 	mvn.w	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e002      	b.n	8000a08 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a06:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HCI_TL_SPI_Send+0xa0>)
 8000a0e:	f006 f933 	bl	8006c78 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000a12:	f005 fa71 	bl	8005ef8 <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d903      	bls.n	8000a28 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000a20:	f06f 0302 	mvn.w	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
      break;
 8000a26:	e002      	b.n	8000a2e <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dbc7      	blt.n	80009be <HCI_TL_SPI_Send+0x22>
  
  return result;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	08010968 	.word	0x08010968
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	20000120 	.word	0x20000120

08000a44 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <IsDataAvailable+0x1c>)
 8000a4c:	f006 f8fc 	bl	8006c48 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	bf0c      	ite	eq
 8000a56:	2301      	moveq	r3, #1
 8000a58:	2300      	movne	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
} 
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	48000800 	.word	0x48000800

08000a64 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <hci_tl_lowlevel_init+0x50>)
 8000a6c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <hci_tl_lowlevel_init+0x54>)
 8000a70:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <hci_tl_lowlevel_init+0x58>)
 8000a74:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <hci_tl_lowlevel_init+0x5c>)
 8000a78:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <hci_tl_lowlevel_init+0x60>)
 8000a7c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <hci_tl_lowlevel_init+0x64>)
 8000a80:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00e ffa3 	bl	800f9d0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
 8000a8a:	4910      	ldr	r1, [pc, #64]	; (8000acc <hci_tl_lowlevel_init+0x68>)
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <hci_tl_lowlevel_init+0x6c>)
 8000a8e:	f005 fdf9 	bl	8006684 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <hci_tl_lowlevel_init+0x70>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <hci_tl_lowlevel_init+0x6c>)
 8000a98:	f005 fdda 	bl	8006650 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f005 fb3e 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aa6:	2017      	movs	r0, #23
 8000aa8:	f005 fb57 	bl	800615a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	080007ad 	.word	0x080007ad
 8000ab8:	08000889 	.word	0x08000889
 8000abc:	0800099d 	.word	0x0800099d
 8000ac0:	080008e9 	.word	0x080008e9
 8000ac4:	080008b9 	.word	0x080008b9
 8000ac8:	08005029 	.word	0x08005029
 8000acc:	16000005 	.word	0x16000005
 8000ad0:	200008f4 	.word	0x200008f4
 8000ad4:	08000ad9 	.word	0x08000ad9

08000ad8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8000adc:	e008      	b.n	8000af0 <hci_tl_lowlevel_isr+0x18>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f00f f8dc 	bl	800fc9c <hci_notify_asynch_evt>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d108      	bne.n	8000afc <hci_tl_lowlevel_isr+0x24>
      return;
	}
    HCI_ProcessEvent=1;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <hci_tl_lowlevel_isr+0x28>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
  while(IsDataAvailable())
 8000af0:	f7ff ffa8 	bl	8000a44 <IsDataAvailable>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f1      	bne.n	8000ade <hci_tl_lowlevel_isr+0x6>
 8000afa:	e000      	b.n	8000afe <hci_tl_lowlevel_isr+0x26>
      return;
 8000afc:	bf00      	nop
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200008fc 	.word	0x200008fc

08000b04 <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	b0cd      	sub	sp, #308	; 0x134
 8000b08:	af06      	add	r7, sp, #24
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Set NVIC Group Priority to 4
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000b0a:	f005 f985 	bl	8005e18 <HAL_Init>
  
  /* Configure the System clock */
  SystemClock_Config();
 8000b0e:	f000 fdd3 	bl	80016b8 <SystemClock_Config>
  
  InitTargetPlatform(TARGET_SENSORTILE);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fd28 	bl	8000568 <InitTargetPlatform>
  
  STLBLE_PRINTF("\t(HAL %ld.%ld.%ld_%ld)\r\n"
 8000b18:	f005 f9fa 	bl	8005f10 <HAL_GetHalVersion>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	0e1d      	lsrs	r5, r3, #24
 8000b20:	f005 f9f6 	bl	8005f10 <HAL_GetHalVersion>
 8000b24:	4603      	mov	r3, r0
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	b2de      	uxtb	r6, r3
 8000b2a:	f005 f9f1 	bl	8005f10 <HAL_GetHalVersion>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b2dc      	uxtb	r4, r3
 8000b34:	f005 f9ec 	bl	8005f10 <HAL_GetHalVersion>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	1d38      	adds	r0, r7, #4
 8000b3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b42:	9204      	str	r2, [sp, #16]
 8000b44:	4a4e      	ldr	r2, [pc, #312]	; (8000c80 <main+0x17c>)
 8000b46:	9203      	str	r2, [sp, #12]
 8000b48:	4a4e      	ldr	r2, [pc, #312]	; (8000c84 <main+0x180>)
 8000b4a:	9202      	str	r2, [sp, #8]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	9400      	str	r4, [sp, #0]
 8000b50:	4633      	mov	r3, r6
 8000b52:	462a      	mov	r2, r5
 8000b54:	494c      	ldr	r1, [pc, #304]	; (8000c88 <main+0x184>)
 8000b56:	f00f faff 	bl	8010158 <siprintf>
 8000b5a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8000b5e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 f9a0 	bl	8002eac <CDC_Fill_Buffer>
                        HAL_GetHalVersion()      &0xFF,
                        __DATE__,__TIME__,
                        uhCCR1_Val/10);
  
#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF("Debug Connection         Enabled\r\n");
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4947      	ldr	r1, [pc, #284]	; (8000c8c <main+0x188>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00f faf1 	bl	8010158 <siprintf>
 8000b76:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000b7a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 f992 	bl	8002eac <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  STLBLE_PRINTF("Debug Notify Trasmission Enabled\r\n");
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4941      	ldr	r1, [pc, #260]	; (8000c90 <main+0x18c>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00f fae3 	bl	8010158 <siprintf>
 8000b92:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8000b96:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f984 	bl	8002eac <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Initialize the BlueNRG */
  Init_BlueNRG_Stack();
 8000ba4:	f000 fbe0 	bl	8001368 <Init_BlueNRG_Stack>
  
  /* Initialize the BlueNRG Custom services */
  Init_BlueNRG_Custom_Services();  
 8000ba8:	f000 fd2a 	bl	8001600 <Init_BlueNRG_Custom_Services>
  
  MX_GPIO_Init();
 8000bac:	f000 f8ce 	bl	8000d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb0:	f000 f8ae 	bl	8000d10 <MX_DMA_Init>
  MX_UART5_Init();
 8000bb4:	f000 f87c 	bl	8000cb0 <MX_UART5_Init>
  us100_init(&huart5, &hdma_uart5_rx);
 8000bb8:	4936      	ldr	r1, [pc, #216]	; (8000c94 <main+0x190>)
 8000bba:	4837      	ldr	r0, [pc, #220]	; (8000c98 <main+0x194>)
 8000bbc:	f005 f860 	bl	8005c80 <us100_init>

  /* US-100 distance */
  int distance = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

  /* initialize timers */
  InitTimers();
 8000bc6:	f000 fb8d 	bl	80012e4 <InitTimers>
  
  StartTime = HAL_GetTick();
 8000bca:	f005 f995 	bl	8005ef8 <HAL_GetTick>
 8000bce:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  /* Infinite loop */
  while (1)
  {
    /* Led Blinking when there is not a client connected */
    if(!connected) 
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <main+0x198>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d12a      	bne.n	8000c30 <main+0x12c>
    {
      if(!TargetBoardFeatures.LedStatus) 
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <main+0x19c>)
 8000bdc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d113      	bne.n	8000c0c <main+0x108>
      {
        if(HAL_GetTick()-StartTime > 1000)
 8000be4:	f005 f988 	bl	8005ef8 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bf4:	d91c      	bls.n	8000c30 <main+0x12c>
        {
          LedOnTargetPlatform();
 8000bf6:	f7ff fdcb 	bl	8000790 <LedOnTargetPlatform>
          TargetBoardFeatures.LedStatus =1;
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <main+0x19c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000c02:	f005 f979 	bl	8005ef8 <HAL_GetTick>
 8000c06:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000c0a:	e011      	b.n	8000c30 <main+0x12c>
        }
      } 
      else 
      {
        if(HAL_GetTick()-StartTime > 50)
 8000c0c:	f005 f974 	bl	8005ef8 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b32      	cmp	r3, #50	; 0x32
 8000c1a:	d909      	bls.n	8000c30 <main+0x12c>
        {
          LedOffTargetPlatform();
 8000c1c:	f7ff fdbf 	bl	800079e <LedOffTargetPlatform>
          TargetBoardFeatures.LedStatus =0;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <main+0x19c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          StartTime = HAL_GetTick();
 8000c28:	f005 f966 	bl	8005ef8 <HAL_GetTick>
 8000c2c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
        }
      }
    }
    
    /* handle BLE event */
    if(HCI_ProcessEvent) 
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <main+0x1a0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d004      	beq.n	8000c42 <main+0x13e>
    {
      HCI_ProcessEvent=0;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <main+0x1a0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
      hci_user_evt_proc();
 8000c3e:	f00f f801 	bl	800fc44 <hci_user_evt_proc>
    }
    
    /* Update the BLE advertise data and make the Board connectable */
    if(set_connectable)
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <main+0x1a4>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d004      	beq.n	8000c54 <main+0x150>
    {
      setConnectable();
 8000c4a:	f001 fa9b 	bl	8002184 <setConnectable>
      set_connectable = FALSE;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <main+0x1a4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
    }
    
    /* Environmental Data */
    if(SendEnv) 
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <main+0x1a8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <main+0x162>
    {
      SendEnv=0;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <main+0x1a8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
      SendEnvironmentalData();
 8000c62:	f000 f8cb 	bl	8000dfc <SendEnvironmentalData>
    }
    
  	if (us100_data_available()) {
 8000c66:	f005 f849 	bl	8005cfc <us100_data_available>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <main+0x176>
    		distance = us100_get_distance();
 8000c70:	f005 f88c 	bl	8005d8c <us100_get_distance>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* Wait for Interrupt */
    __WFI();
 8000c7a:	bf30      	wfi
    if(!connected) 
 8000c7c:	e7a9      	b.n	8000bd2 <main+0xce>
 8000c7e:	bf00      	nop
 8000c80:	080109d8 	.word	0x080109d8
 8000c84:	080109e4 	.word	0x080109e4
 8000c88:	08010970 	.word	0x08010970
 8000c8c:	080109f0 	.word	0x080109f0
 8000c90:	08010a14 	.word	0x08010a14
 8000c94:	20000ad8 	.word	0x20000ad8
 8000c98:	20000954 	.word	0x20000954
 8000c9c:	20000228 	.word	0x20000228
 8000ca0:	200005f0 	.word	0x200005f0
 8000ca4:	200008fc 	.word	0x200008fc
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000224 	.word	0x20000224

08000cb0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <MX_UART5_Init+0x5c>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cc0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_UART5_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_UART5_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_UART5_Init+0x58>)
 8000cf4:	f00b f9e7 	bl	800c0c6 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000cfe:	f000 fd81 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000954 	.word	0x20000954
 8000d0c:	40005000 	.word	0x40005000

08000d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_DMA_Init+0x38>)
 8000d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <MX_DMA_Init+0x38>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6493      	str	r3, [r2, #72]	; 0x48
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_DMA_Init+0x38>)
 8000d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2039      	movs	r0, #57	; 0x39
 8000d34:	f005 f9f5 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000d38:	2039      	movs	r0, #57	; 0x39
 8000d3a:	f005 fa0e 	bl	800615a <HAL_NVIC_EnableIRQ>

}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_GPIO_Init+0x44>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <MX_GPIO_Init+0x44>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_GPIO_Init+0x44>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_GPIO_Init+0x44>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <MX_GPIO_Init+0x44>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_GPIO_Init+0x44>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_TIM_OC_DelayElapsedCallback>:
* @brief  Output Compare callback in non blocking mode 
* @param  htim : TIM OC handle
* @retval None
*/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t uhCapture=0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  
  /* TIM1_CH1 toggling with frequency = 2Hz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7f1b      	ldrb	r3, [r3, #28]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d10e      	bne.n	8000dc6 <HAL_TIM_OC_DelayElapsedCallback+0x32>
  {
    uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000da8:	2100      	movs	r1, #0
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f00a fd76 	bl	800b89c <HAL_TIM_ReadCapturedValue>
 8000db0:	60f8      	str	r0, [r7, #12]
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	6353      	str	r3, [r2, #52]	; 0x34
    SendEnv=1;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000908 	.word	0x20000908
 8000dd4:	20000224 	.word	0x20000224

08000dd8 <HAL_TIM_PeriodElapsedCallback>:
* @brief  Period elapsed callback in non blocking mode for Environmental timer
* @param  htim : TIM handle
* @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim == (&TimHandle)) 
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d102      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    CDC_TIM_PeriodElapsedCallback(htim);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f002 f889 	bl	8002f00 <CDC_TIM_PeriodElapsedCallback>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20002328 	.word	0x20002328

08000dfc <SendEnvironmentalData>:
* @brief  Send Environmetal Data (Temperature/Pressure/Humidity) to BLE
* @param  None
* @retval None
*/
static void SendEnvironmentalData(void)
{  
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ce      	sub	sp, #312	; 0x138
 8000e00:	af00      	add	r7, sp, #0
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8000e02:	4bcf      	ldr	r3, [pc, #828]	; (8001140 <SendEnvironmentalData+0x344>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00e      	beq.n	8000e30 <SendEnvironmentalData+0x34>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"Sending: ");
 8000e12:	49cc      	ldr	r1, [pc, #816]	; (8001144 <SendEnvironmentalData+0x348>)
 8000e14:	48cc      	ldr	r0, [pc, #816]	; (8001148 <SendEnvironmentalData+0x34c>)
 8000e16:	f00f f99f 	bl	8010158 <siprintf>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4acb      	ldr	r2, [pc, #812]	; (800114c <SendEnvironmentalData+0x350>)
 8000e1e:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8000e20:	4bca      	ldr	r3, [pc, #808]	; (800114c <SendEnvironmentalData+0x350>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	48c7      	ldr	r0, [pc, #796]	; (8001148 <SendEnvironmentalData+0x34c>)
 8000e2a:	f000 fdad 	bl	8001988 <Term_Update>
 8000e2e:	e00d      	b.n	8000e4c <SendEnvironmentalData+0x50>
  } 
  else 
  {
    STLBLE_PRINTF("Sending: ");
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	49c4      	ldr	r1, [pc, #784]	; (8001144 <SendEnvironmentalData+0x348>)
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00f f98f 	bl	8010158 <siprintf>
 8000e3a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8000e3e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 f830 	bl	8002eac <CDC_Fill_Buffer>
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
  
  /* Pressure,Humidity, and Temperatures*/
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV)) 
 8000e4c:	4bbc      	ldr	r3, [pc, #752]	; (8001140 <SendEnvironmentalData+0x344>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 820b 	beq.w	8001272 <SendEnvironmentalData+0x476>
  {
    float SensorValue;
    int32_t PressToSend=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t HumToSend=0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    int32_t decPart, intPart;
    
    if(TargetBoardFeatures.HandlePressSensor) 
 8000e74:	4bb6      	ldr	r3, [pc, #728]	; (8001150 <SendEnvironmentalData+0x354>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d055      	beq.n	8000f28 <SendEnvironmentalData+0x12c>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 8000e7c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e80:	461a      	mov	r2, r3
 8000e82:	2102      	movs	r1, #2
 8000e84:	2001      	movs	r0, #1
 8000e86:	f004 fb9b 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 8000e8a:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e92:	ee17 3a90 	vmov	r3, s15
 8000e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e9a:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8000e9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eae:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001154 <SendEnvironmentalData+0x358>
 8000eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eba:	ee17 3a90 	vmov	r3, s15
 8000ebe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      PressToSend=intPart*100+decPart;
 8000ec2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ec6:	2264      	movs	r2, #100	; 0x64
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000ed6:	4b9a      	ldr	r3, [pc, #616]	; (8001140 <SendEnvironmentalData+0x344>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d010      	beq.n	8000f08 <SendEnvironmentalData+0x10c>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Press=%ld ",PressToSend);
 8000ee6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000eea:	499b      	ldr	r1, [pc, #620]	; (8001158 <SendEnvironmentalData+0x35c>)
 8000eec:	4896      	ldr	r0, [pc, #600]	; (8001148 <SendEnvironmentalData+0x34c>)
 8000eee:	f00f f933 	bl	8010158 <siprintf>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a95      	ldr	r2, [pc, #596]	; (800114c <SendEnvironmentalData+0x350>)
 8000ef6:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000ef8:	4b94      	ldr	r3, [pc, #592]	; (800114c <SendEnvironmentalData+0x350>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	4891      	ldr	r0, [pc, #580]	; (8001148 <SendEnvironmentalData+0x34c>)
 8000f02:	f000 fd41 	bl	8001988 <Term_Update>
 8000f06:	e00f      	b.n	8000f28 <SendEnvironmentalData+0x12c>
      } 
      else 
      {
        STLBLE_PRINTF("Press=%ld ",PressToSend);
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000f0e:	4992      	ldr	r1, [pc, #584]	; (8001158 <SendEnvironmentalData+0x35c>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00f f921 	bl	8010158 <siprintf>
 8000f16:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8000f1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 ffc2 	bl	8002eac <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 8000f28:	4b89      	ldr	r3, [pc, #548]	; (8001150 <SendEnvironmentalData+0x354>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d05a      	beq.n	8000fe6 <SendEnvironmentalData+0x1ea>
    {
      
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8000f30:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f34:	461a      	mov	r2, r3
 8000f36:	2104      	movs	r1, #4
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f004 fb41 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000f3e:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f46:	ee17 3a90 	vmov	r3, s15
 8000f4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000f4e:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8000f52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      HumToSend = intPart*10+decPart;
 8000f76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8000f92:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <SendEnvironmentalData+0x344>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d011      	beq.n	8000fc6 <SendEnvironmentalData+0x1ca>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Hum=%d ",HumToSend);
 8000fa2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	496c      	ldr	r1, [pc, #432]	; (800115c <SendEnvironmentalData+0x360>)
 8000faa:	4867      	ldr	r0, [pc, #412]	; (8001148 <SendEnvironmentalData+0x34c>)
 8000fac:	f00f f8d4 	bl	8010158 <siprintf>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a66      	ldr	r2, [pc, #408]	; (800114c <SendEnvironmentalData+0x350>)
 8000fb4:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8000fb6:	4b65      	ldr	r3, [pc, #404]	; (800114c <SendEnvironmentalData+0x350>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4862      	ldr	r0, [pc, #392]	; (8001148 <SendEnvironmentalData+0x34c>)
 8000fc0:	f000 fce2 	bl	8001988 <Term_Update>
 8000fc4:	e00f      	b.n	8000fe6 <SendEnvironmentalData+0x1ea>
      } 
      else 
      {
        STLBLE_PRINTF("Hum=%d ",HumToSend);
 8000fc6:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4963      	ldr	r1, [pc, #396]	; (800115c <SendEnvironmentalData+0x360>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00f f8c2 	bl	8010158 <siprintf>
 8000fd4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000fd8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 ff63 	bl	8002eac <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <SendEnvironmentalData+0x354>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	f040 80cd 	bne.w	800118a <SendEnvironmentalData+0x38e>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8000ff0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f004 fae1 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8000ffe:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8001002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800100e:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8001012:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001022:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 3a90 	vmov	r3, s15
 8001032:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      Temp1ToSend = intPart*10+decPart;
 8001036:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800104a:	b29b      	uxth	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b29b      	uxth	r3, r3
 8001050:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <SendEnvironmentalData+0x344>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d011      	beq.n	8001088 <SendEnvironmentalData+0x28c>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp=%d ",Temp1ToSend);
 8001064:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8001068:	461a      	mov	r2, r3
 800106a:	493d      	ldr	r1, [pc, #244]	; (8001160 <SendEnvironmentalData+0x364>)
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <SendEnvironmentalData+0x34c>)
 800106e:	f00f f873 	bl	8010158 <siprintf>
 8001072:	4603      	mov	r3, r0
 8001074:	4a35      	ldr	r2, [pc, #212]	; (800114c <SendEnvironmentalData+0x350>)
 8001076:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <SendEnvironmentalData+0x350>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	4831      	ldr	r0, [pc, #196]	; (8001148 <SendEnvironmentalData+0x34c>)
 8001082:	f000 fc81 	bl	8001988 <Term_Update>
 8001086:	e00f      	b.n	80010a8 <SendEnvironmentalData+0x2ac>
      } 
      else 
      {
        STLBLE_PRINTF("Temp=%d ",Temp1ToSend);
 8001088:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4934      	ldr	r1, [pc, #208]	; (8001160 <SendEnvironmentalData+0x364>)
 8001090:	4618      	mov	r0, r3
 8001092:	f00f f861 	bl	8010158 <siprintf>
 8001096:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 800109a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 ff02 	bl	8002eac <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 80010a8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80010ac:	461a      	mov	r2, r3
 80010ae:	2101      	movs	r1, #1
 80010b0:	2001      	movs	r0, #1
 80010b2:	f004 fa85 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80010b6:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 80010ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010be:	ee17 3a90 	vmov	r3, s15
 80010c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010c6:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 80010ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      Temp2ToSend = intPart*10+decPart;
 80010ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001102:	b29b      	uxth	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b29b      	uxth	r3, r3
 8001108:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <SendEnvironmentalData+0x344>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d025      	beq.n	8001168 <SendEnvironmentalData+0x36c>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp2=%d ",Temp2ToSend);
 800111c:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8001120:	461a      	mov	r2, r3
 8001122:	4910      	ldr	r1, [pc, #64]	; (8001164 <SendEnvironmentalData+0x368>)
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <SendEnvironmentalData+0x34c>)
 8001126:	f00f f817 	bl	8010158 <siprintf>
 800112a:	4603      	mov	r3, r0
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <SendEnvironmentalData+0x350>)
 800112e:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SendEnvironmentalData+0x350>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <SendEnvironmentalData+0x34c>)
 800113a:	f000 fc25 	bl	8001988 <Term_Update>
 800113e:	e08e      	b.n	800125e <SendEnvironmentalData+0x462>
 8001140:	20000220 	.word	0x20000220
 8001144:	08010a38 	.word	0x08010a38
 8001148:	200009d8 	.word	0x200009d8
 800114c:	20000b20 	.word	0x20000b20
 8001150:	200005f0 	.word	0x200005f0
 8001154:	42c80000 	.word	0x42c80000
 8001158:	08010a44 	.word	0x08010a44
 800115c:	08010a50 	.word	0x08010a50
 8001160:	08010a58 	.word	0x08010a58
 8001164:	08010a64 	.word	0x08010a64
      } 
      else 
      {
        STLBLE_PRINTF("Temp2=%d ",Temp2ToSend);
 8001168:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	4956      	ldr	r1, [pc, #344]	; (80012c8 <SendEnvironmentalData+0x4cc>)
 8001170:	4618      	mov	r0, r3
 8001172:	f00e fff1 	bl	8010158 <siprintf>
 8001176:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800117a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fe92 	bl	8002eac <CDC_Fill_Buffer>
 8001188:	e069      	b.n	800125e <SendEnvironmentalData+0x462>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */      
    } 
    else if(TargetBoardFeatures.NumTempSensors==1)
 800118a:	4b50      	ldr	r3, [pc, #320]	; (80012cc <SendEnvironmentalData+0x4d0>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d165      	bne.n	800125e <SendEnvironmentalData+0x462>
    {
      if (BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue)!=BSP_ERROR_NONE)
 8001192:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001196:	461a      	mov	r2, r3
 8001198:	2101      	movs	r1, #1
 800119a:	2000      	movs	r0, #0
 800119c:	f004 fa10 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <SendEnvironmentalData+0x3b8>
      {
        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 80011a6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80011aa:	461a      	mov	r2, r3
 80011ac:	2101      	movs	r1, #1
 80011ae:	2001      	movs	r0, #1
 80011b0:	f004 fa06 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      }
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80011b4:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 80011b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011bc:	ee17 3a90 	vmov	r3, s15
 80011c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011c4:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 80011c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	ee17 3a90 	vmov	r3, s15
 80011e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      Temp1ToSend = intPart*10+decPart;
 80011ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001200:	b29b      	uxth	r3, r3
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <SendEnvironmentalData+0x4d4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d011      	beq.n	800123e <SendEnvironmentalData+0x442>
      {
        BytesToWrite = sprintf((char *)BufferToWrite,"Temp1=%d ",Temp1ToSend);
 800121a:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 800121e:	461a      	mov	r2, r3
 8001220:	492c      	ldr	r1, [pc, #176]	; (80012d4 <SendEnvironmentalData+0x4d8>)
 8001222:	482d      	ldr	r0, [pc, #180]	; (80012d8 <SendEnvironmentalData+0x4dc>)
 8001224:	f00e ff98 	bl	8010158 <siprintf>
 8001228:	4603      	mov	r3, r0
 800122a:	4a2c      	ldr	r2, [pc, #176]	; (80012dc <SendEnvironmentalData+0x4e0>)
 800122c:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <SendEnvironmentalData+0x4e0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	4828      	ldr	r0, [pc, #160]	; (80012d8 <SendEnvironmentalData+0x4dc>)
 8001238:	f000 fba6 	bl	8001988 <Term_Update>
 800123c:	e00f      	b.n	800125e <SendEnvironmentalData+0x462>
      }
      else
      {
        STLBLE_PRINTF("Temp1=%d ",Temp1ToSend);
 800123e:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	; 0x12e
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4923      	ldr	r1, [pc, #140]	; (80012d4 <SendEnvironmentalData+0x4d8>)
 8001246:	4618      	mov	r0, r3
 8001248:	f00e ff86 	bl	8010158 <siprintf>
 800124c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001250:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fe27 	bl	8002eac <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
      
    }
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 800125e:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8001262:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 8001266:	f8b7 1132 	ldrh.w	r1, [r7, #306]	; 0x132
 800126a:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 800126e:	f000 fdf5 	bl	8001e5c <Environmental_Update>
  }
  
#ifdef ENABLE_USB_DEBUG_NOTIFY_TRAMISSION
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <SendEnvironmentalData+0x4d4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00e      	beq.n	80012a0 <SendEnvironmentalData+0x4a4>
  {
    BytesToWrite = sprintf((char *)BufferToWrite,"\r\n");
 8001282:	4917      	ldr	r1, [pc, #92]	; (80012e0 <SendEnvironmentalData+0x4e4>)
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <SendEnvironmentalData+0x4dc>)
 8001286:	f00e ff67 	bl	8010158 <siprintf>
 800128a:	4603      	mov	r3, r0
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <SendEnvironmentalData+0x4e0>)
 800128e:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <SendEnvironmentalData+0x4e0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4619      	mov	r1, r3
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <SendEnvironmentalData+0x4dc>)
 800129a:	f000 fb75 	bl	8001988 <Term_Update>
  else 
  {
    STLBLE_PRINTF("\r\n");
  }
#endif /* ENABLE_USB_DEBUG_NOTIFY_TRAMISSION */
}
 800129e:	e00d      	b.n	80012bc <SendEnvironmentalData+0x4c0>
    STLBLE_PRINTF("\r\n");
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	490f      	ldr	r1, [pc, #60]	; (80012e0 <SendEnvironmentalData+0x4e4>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00e ff57 	bl	8010158 <siprintf>
 80012aa:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80012ae:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fdf8 	bl	8002eac <CDC_Fill_Buffer>
}
 80012bc:	bf00      	nop
 80012be:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08010a64 	.word	0x08010a64
 80012cc:	200005f0 	.word	0x200005f0
 80012d0:	20000220 	.word	0x20000220
 80012d4:	08010a70 	.word	0x08010a70
 80012d8:	200009d8 	.word	0x200009d8
 80012dc:	20000b20 	.word	0x20000b20
 80012e0:	08010a7c 	.word	0x08010a7c

080012e4 <InitTimers>:
*  - 1 for sending the Environmental info
* @param  None
* @retval None
*/
static void InitTimers(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  
  /* Timer Output Compare Configuration Structure declaration */
  TIM_OC_InitTypeDef sConfig;
  
  /* Compute the prescaler value to have TIM3 counter clock equal to 10 KHz */
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <InitTimers+0x74>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <InitTimers+0x78>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	0b5b      	lsrs	r3, r3, #13
 80012f6:	3b01      	subs	r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
  
  /* Set TIM1 instance (Motion)*/
  /* Set TIM1 instance */
  TimCCHandle.Instance = TIM1;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <InitTimers+0x7c>)
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <InitTimers+0x80>)
 80012fe:	601a      	str	r2, [r3, #0]
  TimCCHandle.Init.Period        = 65535;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <InitTimers+0x7c>)
 8001302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001306:	60da      	str	r2, [r3, #12]
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <InitTimers+0x7c>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	6053      	str	r3, [r2, #4]
  TimCCHandle.Init.ClockDivision = 0;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <InitTimers+0x7c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <InitTimers+0x7c>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <InitTimers+0x7c>)
 800131c:	f009 fea8 	bl	800b070 <HAL_TIM_OC_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <InitTimers+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8001326:	f000 fa6d 	bl	8001804 <Error_Handler>
  }
  
  /* Configure the Output Compare channels */
  /* Common configuration for all channels */
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 800132a:	2330      	movs	r3, #48	; 0x30
 800132c:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 800132e:	2302      	movs	r3, #2
 8001330:	60bb      	str	r3, [r7, #8]
  
  /* Output Compare Toggle Mode configuration: Channel1 */
  sConfig.Pulse = uhCCR1_Val;
 8001332:	f241 3388 	movw	r3, #5000	; 0x1388
 8001336:	607b      	str	r3, [r7, #4]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <InitTimers+0x7c>)
 8001340:	f00a fa36 	bl	800b7b0 <HAL_TIM_OC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <InitTimers+0x6a>
  {
    /* Configuration Error */
    Error_Handler();
 800134a:	f000 fa5b 	bl	8001804 <Error_Handler>
  }  
  
}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000004 	.word	0x20000004
 800135c:	d1b71759 	.word	0xd1b71759
 8001360:	20000908 	.word	0x20000908
 8001364:	40012c00 	.word	0x40012c00

08001368 <Init_BlueNRG_Stack>:
/** @brief Initialize the BlueNRG Stack
* @param None
* @retval None
*/
static void Init_BlueNRG_Stack(void)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b0db      	sub	sp, #364	; 0x16c
 800136c:	af0a      	add	r7, sp, #40	; 0x28
  const char BoardName[8] = {NAME_STLBLE,0};
 800136e:	4a96      	ldr	r2, [pc, #600]	; (80015c8 <Init_BlueNRG_Stack+0x260>)
 8001370:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001378:	e883 0003 	stmia.w	r3, {r0, r1}
      bdaddr[i] = tmp_bdaddr[i];
  }
#endif /* STATIC_BLE_MAC */

  /* Initialize the BlueNRG HCI */
  hci_init(HCI_Event_CB, NULL);
 800137c:	2100      	movs	r1, #0
 800137e:	4893      	ldr	r0, [pc, #588]	; (80015cc <Init_BlueNRG_Stack+0x264>)
 8001380:	f00e fae4 	bl	800f94c <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001384:	f507 7289 	add.w	r2, r7, #274	; 0x112
 8001388:	f207 1315 	addw	r3, r7, #277	; 0x115
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f00e f919 	bl	800f5c6 <getBlueNRGVersion>
  * Reset BlueNRG again otherwise we won't
  * be able to change its MAC address.
  * aci_hal_write_config_data() must be the first
  * command after reset otherwise it will fail.
  */
  hci_reset();
 8001394:	f00e f95b 	bl	800f64e <hci_reset>
  
  HAL_Delay(100);
 8001398:	2064      	movs	r0, #100	; 0x64
 800139a:	f000 fa1b 	bl	80017d4 <HAL_Delay>
  
#ifndef STATIC_BLE_MAC
  /* Create a Unique BLE MAC */
  {
    bdaddr[0] = (STM32_UUID[1]>>24)&0xFF;
 800139e:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <Init_BlueNRG_Stack+0x268>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0e1b      	lsrs	r3, r3, #24
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 80013a8:	701a      	strb	r2, [r3, #0]
    bdaddr[1] = (STM32_UUID[0]    )&0xFF;
 80013aa:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <Init_BlueNRG_Stack+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 80013b2:	705a      	strb	r2, [r3, #1]
    bdaddr[2] = (STM32_UUID[2] >>8)&0xFF;
 80013b4:	4b89      	ldr	r3, [pc, #548]	; (80015dc <Init_BlueNRG_Stack+0x274>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b85      	ldr	r3, [pc, #532]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 80013be:	709a      	strb	r2, [r3, #2]
    bdaddr[3] = (STM32_UUID[0]>>16)&0xFF;
 80013c0:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <Init_BlueNRG_Stack+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0c1b      	lsrs	r3, r3, #16
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 80013ca:	70da      	strb	r2, [r3, #3]
    bdaddr[4] = (((STLBLE_VERSION_MAJOR-48)*10) + (STLBLE_VERSION_MINOR-48)+100)&0xFF;
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 80013ce:	227d      	movs	r2, #125	; 0x7d
 80013d0:	711a      	strb	r2, [r3, #4]
    bdaddr[5] = 0xC0; /* for a Legal BLE Random MAC */
 80013d2:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 80013d4:	22c0      	movs	r2, #192	; 0xc0
 80013d6:	715a      	strb	r2, [r3, #5]
    STLBLE_PRINTF("\r\nSetting Pubblic BD_ADDR failed\r\n");
    goto fail;
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_init();    
 80013d8:	f00d fe84 	bl	800f0e4 <aci_gatt_init>
 80013dc:	4603      	mov	r3, r0
 80013de:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if(ret)
 80013e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d010      	beq.n	800140c <Init_BlueNRG_Stack+0xa4>
  {
    STLBLE_PRINTF("\r\nGATT_Init failed\r\n");
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	497c      	ldr	r1, [pc, #496]	; (80015e0 <Init_BlueNRG_Stack+0x278>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00e feb1 	bl	8010158 <siprintf>
 80013f6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
 80013fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fd51 	bl	8002eac <CDC_Fill_Buffer>
    goto fail;
 800140a:	e0d7      	b.n	80015bc <Init_BlueNRG_Stack+0x254>
  }
  

    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800140c:	f507 728d 	add.w	r2, r7, #282	; 0x11a
 8001410:	f507 738b 	add.w	r3, r7, #278	; 0x116
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	2207      	movs	r2, #7
 8001420:	2100      	movs	r1, #0
 8001422:	2001      	movs	r0, #1
 8001424:	f00d fc76 	bl	800ed14 <aci_gap_init_IDB05A1>
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  
  if(ret != BLE_STATUS_SUCCESS)
 800142e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001432:	2b00      	cmp	r3, #0
 8001434:	d010      	beq.n	8001458 <Init_BlueNRG_Stack+0xf0>
  {
    STLBLE_PRINTF("\r\nGAP_Init failed\r\n");
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	496a      	ldr	r1, [pc, #424]	; (80015e4 <Init_BlueNRG_Stack+0x27c>)
 800143c:	4618      	mov	r0, r3
 800143e:	f00e fe8b 	bl	8010158 <siprintf>
 8001442:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8001446:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fd2b 	bl	8002eac <CDC_Fill_Buffer>
    goto fail;
 8001456:	e0b1      	b.n	80015bc <Init_BlueNRG_Stack+0x254>
  }
  
#ifndef  STATIC_BLE_MAC
  ret = hci_le_set_random_address(bdaddr);
 8001458:	485e      	ldr	r0, [pc, #376]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 800145a:	f00e f9a5 	bl	800f7a8 <hci_le_set_random_address>
 800145e:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
  
  if(ret)
 8001462:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001466:	2b00      	cmp	r3, #0
 8001468:	d010      	beq.n	800148c <Init_BlueNRG_Stack+0x124>
  {
    STLBLE_PRINTF("\r\nSetting the Static Random BD_ADDR failed\r\n");
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	495e      	ldr	r1, [pc, #376]	; (80015e8 <Init_BlueNRG_Stack+0x280>)
 8001470:	4618      	mov	r0, r3
 8001472:	f00e fe71 	bl	8010158 <siprintf>
 8001476:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800147a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f001 fd11 	bl	8002eac <CDC_Fill_Buffer>
    goto fail;
 800148a:	e097      	b.n	80015bc <Init_BlueNRG_Stack+0x254>
  }
#endif /* STATIC_BLE_MAC */
  
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800148c:	f8b7 011a 	ldrh.w	r0, [r7, #282]	; 0x11a
 8001490:	f8b7 1118 	ldrh.w	r1, [r7, #280]	; 0x118
 8001494:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2307      	movs	r3, #7
 800149c:	2200      	movs	r2, #0
 800149e:	f00d ffa2 	bl	800f3e6 <aci_gatt_update_char_value>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                                   7/*strlen(BoardName)*/, (uint8_t *)BoardName);
  
  if(ret)
 80014a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d010      	beq.n	80014d2 <Init_BlueNRG_Stack+0x16a>
  {
    STLBLE_PRINTF("\r\naci_gatt_update_char_value failed\r\n");
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	494d      	ldr	r1, [pc, #308]	; (80015ec <Init_BlueNRG_Stack+0x284>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00e fe4e 	bl	8010158 <siprintf>
 80014bc:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 80014c0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fcee 	bl	8002eac <CDC_Fill_Buffer>
    while(1);
 80014d0:	e7fe      	b.n	80014d0 <Init_BlueNRG_Stack+0x168>
  }
  
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80014d2:	2301      	movs	r3, #1
 80014d4:	9303      	str	r3, [sp, #12]
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <Init_BlueNRG_Stack+0x288>)
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2300      	movs	r3, #0
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2310      	movs	r3, #16
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2307      	movs	r3, #7
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2001      	movs	r0, #1
 80014ea:	f00d fd52 	bl	800ef92 <aci_gap_set_auth_requirement>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                                     OOB_AUTH_DATA_ABSENT,
                                     NULL, 7, 16,
                                     USE_FIXED_PIN_FOR_PAIRING, 123456,
                                     BONDING);
  if (ret != BLE_STATUS_SUCCESS) 
 80014f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d010      	beq.n	800151e <Init_BlueNRG_Stack+0x1b6>
  {
    STLBLE_PRINTF("\r\nGAP setting Authentication failed\r\n");
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	493c      	ldr	r1, [pc, #240]	; (80015f4 <Init_BlueNRG_Stack+0x28c>)
 8001502:	4618      	mov	r0, r3
 8001504:	f00e fe28 	bl	8010158 <siprintf>
 8001508:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 800150c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fcc8 	bl	8002eac <CDC_Fill_Buffer>
    goto fail;
 800151c:	e04e      	b.n	80015bc <Init_BlueNRG_Stack+0x254>
  }
  
  STLBLE_PRINTF("SERVER: BLE Stack Initialized \r\n"
 800151e:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001522:	469c      	mov	ip, r3
 8001524:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	b29b      	uxth	r3, r3
 800152c:	461c      	mov	r4, r3
 800152e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	b29b      	uxth	r3, r3
 8001536:	f003 020f 	and.w	r2, r3, #15
 800153a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800153e:	2b30      	cmp	r3, #48	; 0x30
 8001540:	d905      	bls.n	800154e <Init_BlueNRG_Stack+0x1e6>
 8001542:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3360      	adds	r3, #96	; 0x60
 800154c:	e000      	b.n	8001550 <Init_BlueNRG_Stack+0x1e8>
 800154e:	2361      	movs	r3, #97	; 0x61
 8001550:	4920      	ldr	r1, [pc, #128]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 8001552:	7949      	ldrb	r1, [r1, #5]
 8001554:	460d      	mov	r5, r1
 8001556:	491f      	ldr	r1, [pc, #124]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 8001558:	7909      	ldrb	r1, [r1, #4]
 800155a:	460e      	mov	r6, r1
 800155c:	491d      	ldr	r1, [pc, #116]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 800155e:	78c9      	ldrb	r1, [r1, #3]
 8001560:	60f9      	str	r1, [r7, #12]
 8001562:	491c      	ldr	r1, [pc, #112]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 8001564:	7889      	ldrb	r1, [r1, #2]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	491a      	ldr	r1, [pc, #104]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 800156a:	7849      	ldrb	r1, [r1, #1]
 800156c:	6079      	str	r1, [r7, #4]
 800156e:	4919      	ldr	r1, [pc, #100]	; (80015d4 <Init_BlueNRG_Stack+0x26c>)
 8001570:	7809      	ldrb	r1, [r1, #0]
 8001572:	f107 0010 	add.w	r0, r7, #16
 8001576:	9109      	str	r1, [sp, #36]	; 0x24
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	9108      	str	r1, [sp, #32]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	9107      	str	r1, [sp, #28]
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	9106      	str	r1, [sp, #24]
 8001584:	9605      	str	r6, [sp, #20]
 8001586:	9504      	str	r5, [sp, #16]
 8001588:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800158c:	9103      	str	r1, [sp, #12]
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	9201      	str	r2, [sp, #4]
 8001592:	9400      	str	r4, [sp, #0]
 8001594:	4663      	mov	r3, ip
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <Init_BlueNRG_Stack+0x290>)
 8001598:	4918      	ldr	r1, [pc, #96]	; (80015fc <Init_BlueNRG_Stack+0x294>)
 800159a:	f00e fddd 	bl	8010158 <siprintf>
 800159e:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 80015a2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 fc7d 	bl	8002eac <CDC_Fill_Buffer>
                    (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a',
                    BoardName,
                    bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  
  /* Set output power level */
  aci_hal_set_tx_power_level(1,4);
 80015b2:	2104      	movs	r1, #4
 80015b4:	2001      	movs	r0, #1
 80015b6:	f00d ffd5 	bl	800f564 <aci_hal_set_tx_power_level>
  
  return;
 80015ba:	e000      	b.n	80015be <Init_BlueNRG_Stack+0x256>
  
fail:
  return;
 80015bc:	bf00      	nop
}
 80015be:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	08010bb8 	.word	0x08010bb8
 80015cc:	08002a95 	.word	0x08002a95
 80015d0:	1fff7594 	.word	0x1fff7594
 80015d4:	20000900 	.word	0x20000900
 80015d8:	1fff7590 	.word	0x1fff7590
 80015dc:	1fff7598 	.word	0x1fff7598
 80015e0:	08010a80 	.word	0x08010a80
 80015e4:	08010a98 	.word	0x08010a98
 80015e8:	08010aac 	.word	0x08010aac
 80015ec:	08010adc 	.word	0x08010adc
 80015f0:	0001e240 	.word	0x0001e240
 80015f4:	08010b04 	.word	0x08010b04
 80015f8:	08010b2c 	.word	0x08010b2c
 80015fc:	08010b38 	.word	0x08010b38

08001600 <Init_BlueNRG_Custom_Services>:
/** @brief Initialize all the Custom BlueNRG services
* @param None
* @retval None
*/
static void Init_BlueNRG_Custom_Services(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0c6      	sub	sp, #280	; 0x118
 8001604:	af00      	add	r7, sp, #0
  int ret;
  
  ret = Add_HWServW2ST_Service();
 8001606:	f000 fb2b 	bl	8001c60 <Add_HWServW2ST_Service>
 800160a:	4603      	mov	r3, r0
 800160c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 8001610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10e      	bne.n	8001636 <Init_BlueNRG_Custom_Services+0x36>
  {
    STLBLE_PRINTF("HW      Service W2ST added successfully\r\n");
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4923      	ldr	r1, [pc, #140]	; (80016a8 <Init_BlueNRG_Custom_Services+0xa8>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00e fd9b 	bl	8010158 <siprintf>
 8001622:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001626:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f001 fc3c 	bl	8002eac <CDC_Fill_Buffer>
 8001634:	e00d      	b.n	8001652 <Init_BlueNRG_Custom_Services+0x52>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding HW Service W2ST\r\n");
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	491c      	ldr	r1, [pc, #112]	; (80016ac <Init_BlueNRG_Custom_Services+0xac>)
 800163a:	4618      	mov	r0, r3
 800163c:	f00e fd8c 	bl	8010158 <siprintf>
 8001640:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001644:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f001 fc2d 	bl	8002eac <CDC_Fill_Buffer>
  }
  
  ret = Add_ConfigW2ST_Service();
 8001652:	f000 f8db 	bl	800180c <Add_ConfigW2ST_Service>
 8001656:	4603      	mov	r3, r0
 8001658:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  if(ret == BLE_STATUS_SUCCESS) 
 800165c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10e      	bne.n	8001682 <Init_BlueNRG_Custom_Services+0x82>
  {
    STLBLE_PRINTF("Config  Service W2ST added successfully\r\n");
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4912      	ldr	r1, [pc, #72]	; (80016b0 <Init_BlueNRG_Custom_Services+0xb0>)
 8001668:	4618      	mov	r0, r3
 800166a:	f00e fd75 	bl	8010158 <siprintf>
 800166e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8001672:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fc16 	bl	8002eac <CDC_Fill_Buffer>
  } 
  else 
  {
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
  }
}
 8001680:	e00d      	b.n	800169e <Init_BlueNRG_Custom_Services+0x9e>
    STLBLE_PRINTF("\r\nError while adding Config Service W2ST\r\n");
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	490b      	ldr	r1, [pc, #44]	; (80016b4 <Init_BlueNRG_Custom_Services+0xb4>)
 8001686:	4618      	mov	r0, r3
 8001688:	f00e fd66 	bl	8010158 <siprintf>
 800168c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8001690:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fc07 	bl	8002eac <CDC_Fill_Buffer>
}
 800169e:	bf00      	nop
 80016a0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08010bc0 	.word	0x08010bc0
 80016ac:	08010bec 	.word	0x08010bec
 80016b0:	08010c14 	.word	0x08010c14
 80016b4:	08010c40 	.word	0x08010c40

080016b8 <SystemClock_Config>:
* @brief  System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0ba      	sub	sp, #232	; 0xe8
 80016bc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016d2:	2244      	movs	r2, #68	; 0x44
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00e fc7c 	bl	800ffd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	2288      	movs	r2, #136	; 0x88
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00e fc75 	bl	800ffd4 <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <SystemClock_Config+0x118>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <SystemClock_Config+0x118>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <SystemClock_Config+0x118>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 8001702:	f007 fbe9 	bl	8008ed8 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001706:	2304      	movs	r3, #4
 8001708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001716:	4618      	mov	r0, r3
 8001718:	f007 fc0c 	bl	8008f34 <HAL_RCC_OscConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d000      	beq.n	8001724 <SystemClock_Config+0x6c>
  {
    while(1);
 8001722:	e7fe      	b.n	8001722 <SystemClock_Config+0x6a>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8001724:	f008 fcdc 	bl	800a0e0 <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8001728:	2310      	movs	r3, #16
 800172a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800172e:	2301      	movs	r3, #1
 8001730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800173a:	23b0      	movs	r3, #176	; 0xb0
 800173c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001740:	2302      	movs	r3, #2
 8001742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8001746:	2301      	movs	r3, #1
 8001748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 800174c:	2306      	movs	r3, #6
 800174e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8001752:	2328      	movs	r3, #40	; 0x28
 8001754:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8001758:	2307      	movs	r3, #7
 800175a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800175e:	2304      	movs	r3, #4
 8001760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8001764:	2304      	movs	r3, #4
 8001766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800176e:	4618      	mov	r0, r3
 8001770:	f007 fbe0 	bl	8008f34 <HAL_RCC_OscConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d000      	beq.n	800177c <SystemClock_Config+0xc4>
  {
    while(1);
 800177a:	e7fe      	b.n	800177a <SystemClock_Config+0xc2>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 800177c:	f008 fcc8 	bl	800a110 <HAL_RCCEx_EnableMSIPLLMode>
  
  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001784:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8001786:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800178a:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f008 f9bb 	bl	8009b0c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001796:	230f      	movs	r3, #15
 8001798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2303      	movs	r3, #3
 800179e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017b8:	2104      	movs	r1, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f007 ffa0 	bl	8009700 <HAL_RCC_ClockConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d000      	beq.n	80017c8 <SystemClock_Config+0x110>
  {
    while(1);
 80017c6:	e7fe      	b.n	80017c6 <SystemClock_Config+0x10e>
  }
}
 80017c8:	bf00      	nop
 80017ca:	37e8      	adds	r7, #232	; 0xe8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_Delay>:
* @note This is a user implementation using WFI state
* @param Delay: specifies the delay time length, in milliseconds.
* @retval None
*/
void HAL_Delay(__IO uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80017e0:	f004 fb8a 	bl	8005ef8 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80017e6:	e000      	b.n	80017ea <HAL_Delay+0x16>
  {
    __WFI();
 80017e8:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay)
 80017ea:	f004 fb85 	bl	8005ef8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3f6      	bcc.n	80017e8 <HAL_Delay+0x14>
  }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <Error_Handler>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8001808:	e7fe      	b.n	8001808 <Error_Handler+0x4>
	...

0800180c <Add_ConfigW2ST_Service>:
* @brief  Add the Config service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_ConfigW2ST_Service(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af06      	add	r7, sp, #24
  tBleStatus ret;
  
  uint8_t uuid[16];
  
  COPY_CONFIG_SERVICE_UUID(uuid);
 8001812:	231b      	movs	r3, #27
 8001814:	713b      	strb	r3, [r7, #4]
 8001816:	23c5      	movs	r3, #197	; 0xc5
 8001818:	717b      	strb	r3, [r7, #5]
 800181a:	23d5      	movs	r3, #213	; 0xd5
 800181c:	71bb      	strb	r3, [r7, #6]
 800181e:	23a5      	movs	r3, #165	; 0xa5
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	2302      	movs	r3, #2
 8001824:	723b      	strb	r3, [r7, #8]
 8001826:	2300      	movs	r3, #0
 8001828:	727b      	strb	r3, [r7, #9]
 800182a:	23b4      	movs	r3, #180	; 0xb4
 800182c:	72bb      	strb	r3, [r7, #10]
 800182e:	239a      	movs	r3, #154	; 0x9a
 8001830:	72fb      	strb	r3, [r7, #11]
 8001832:	23e1      	movs	r3, #225	; 0xe1
 8001834:	733b      	strb	r3, [r7, #12]
 8001836:	2311      	movs	r3, #17
 8001838:	737b      	strb	r3, [r7, #13]
 800183a:	230f      	movs	r3, #15
 800183c:	73bb      	strb	r3, [r7, #14]
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	2300      	movs	r3, #0
 8001844:	743b      	strb	r3, [r7, #16]
 8001846:	2300      	movs	r3, #0
 8001848:	747b      	strb	r3, [r7, #17]
 800184a:	2300      	movs	r3, #0
 800184c:	74bb      	strb	r3, [r7, #18]
 800184e:	2300      	movs	r3, #0
 8001850:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);
 8001852:	1d39      	adds	r1, r7, #4
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <Add_ConfigW2ST_Service+0xe4>)
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2304      	movs	r3, #4
 800185a:	2201      	movs	r2, #1
 800185c:	2002      	movs	r0, #2
 800185e:	f00d fc64 	bl	800f12a <aci_gatt_add_serv>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]
  
  if (ret != BLE_STATUS_SUCCESS)
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d139      	bne.n	80018e0 <Add_ConfigW2ST_Service+0xd4>
    goto fail;
  
  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 800186c:	231b      	movs	r3, #27
 800186e:	713b      	strb	r3, [r7, #4]
 8001870:	23c5      	movs	r3, #197	; 0xc5
 8001872:	717b      	strb	r3, [r7, #5]
 8001874:	23d5      	movs	r3, #213	; 0xd5
 8001876:	71bb      	strb	r3, [r7, #6]
 8001878:	23a5      	movs	r3, #165	; 0xa5
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	2302      	movs	r3, #2
 800187e:	723b      	strb	r3, [r7, #8]
 8001880:	2300      	movs	r3, #0
 8001882:	727b      	strb	r3, [r7, #9]
 8001884:	2336      	movs	r3, #54	; 0x36
 8001886:	72bb      	strb	r3, [r7, #10]
 8001888:	23ac      	movs	r3, #172	; 0xac
 800188a:	72fb      	strb	r3, [r7, #11]
 800188c:	23e1      	movs	r3, #225	; 0xe1
 800188e:	733b      	strb	r3, [r7, #12]
 8001890:	2311      	movs	r3, #17
 8001892:	737b      	strb	r3, [r7, #13]
 8001894:	230f      	movs	r3, #15
 8001896:	73bb      	strb	r3, [r7, #14]
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	2302      	movs	r3, #2
 800189e:	743b      	strb	r3, [r7, #16]
 80018a0:	2300      	movs	r3, #0
 80018a2:	747b      	strb	r3, [r7, #17]
 80018a4:	2300      	movs	r3, #0
 80018a6:	74bb      	strb	r3, [r7, #18]
 80018a8:	2300      	movs	r3, #0
 80018aa:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <Add_ConfigW2ST_Service+0xe4>)
 80018ae:	8818      	ldrh	r0, [r3, #0]
 80018b0:	1d3a      	adds	r2, r7, #4
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <Add_ConfigW2ST_Service+0xe8>)
 80018b4:	9305      	str	r3, [sp, #20]
 80018b6:	2301      	movs	r3, #1
 80018b8:	9304      	str	r3, [sp, #16]
 80018ba:	2310      	movs	r3, #16
 80018bc:	9303      	str	r3, [sp, #12]
 80018be:	2305      	movs	r3, #5
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2300      	movs	r3, #0
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	2314      	movs	r3, #20
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2314      	movs	r3, #20
 80018cc:	2102      	movs	r1, #2
 80018ce:	f00d fcb8 	bl	800f242 <aci_gatt_add_char>
 80018d2:	4603      	mov	r3, r0
 80018d4:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &ConfigCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <Add_ConfigW2ST_Service+0xd8>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 80018dc:	2300      	movs	r3, #0
 80018de:	e003      	b.n	80018e8 <Add_ConfigW2ST_Service+0xdc>
    goto fail;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <Add_ConfigW2ST_Service+0xda>
    goto fail;
 80018e4:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding Configuration service.\n");
  return BLE_STATUS_ERROR;
 80018e6:	2347      	movs	r3, #71	; 0x47
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000232 	.word	0x20000232
 80018f4:	20000234 	.word	0x20000234

080018f8 <Stderr_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Stderr_Update(uint8_t *data,uint8_t length)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages*/
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e02d      	b.n	8001966 <Stderr_Update+0x6e>
  {
    DataToSend = (length-Offset);
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8001912:	7bbb      	ldrb	r3, [r7, #14]
 8001914:	2b14      	cmp	r3, #20
 8001916:	bf28      	it	cs
 8001918:	2314      	movcs	r3, #20
 800191a:	73bb      	strb	r3, [r7, #14]
    
    /* keep a copy */
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	7bba      	ldrb	r2, [r7, #14]
 8001924:	4619      	mov	r1, r3
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <Stderr_Update+0x80>)
 8001928:	f00e fb46 	bl	800ffb8 <memcpy>
    LastStderrLen = DataToSend;
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <Stderr_Update+0x84>)
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <Stderr_Update+0x88>)
 8001934:	8818      	ldrh	r0, [r3, #0]
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <Stderr_Update+0x8c>)
 8001938:	8819      	ldrh	r1, [r3, #0]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	7bba      	ldrb	r2, [r7, #14]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	2200      	movs	r2, #0
 8001948:	f00d fd4d 	bl	800f3e6 <aci_gatt_update_char_value>
 800194c:	4603      	mov	r3, r0
 800194e:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS)
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <Stderr_Update+0x62>
    {
      return BLE_STATUS_ERROR;
 8001956:	2347      	movs	r3, #71	; 0x47
 8001958:	e00a      	b.n	8001970 <Stderr_Update+0x78>
    }
    HAL_Delay(10);
 800195a:	200a      	movs	r0, #10
 800195c:	f7ff ff3a 	bl	80017d4 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3314      	adds	r3, #20
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3cd      	bcc.n	800190a <Stderr_Update+0x12>
  }
  
  return BLE_STATUS_SUCCESS;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000023c 	.word	0x2000023c
 800197c:	20000250 	.word	0x20000250
 8001980:	20000236 	.word	0x20000236
 8001984:	2000023a 	.word	0x2000023a

08001988 <Term_Update>:
* @param  uint8_t *data string to write
* @param  uint8_t lenght lengt of string to write
* @retval tBleStatus      Status
*/
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0c6      	sub	sp, #280	; 0x118
 800198c:	af02      	add	r7, sp, #8
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	6018      	str	r0, [r3, #0]
 8001992:	460a      	mov	r2, r1
 8001994:	1cfb      	adds	r3, r7, #3
 8001996:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;
  
  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001998:	2300      	movs	r3, #0
 800199a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800199e:	e04d      	b.n	8001a3c <Term_Update+0xb4>
  {
    DataToSend = (length-Offset);
 80019a0:	1cfb      	adds	r3, r7, #3
 80019a2:	781a      	ldrb	r2, [r3, #0]
 80019a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 80019ae:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80019b2:	2b14      	cmp	r3, #20
 80019b4:	bf28      	it	cs
 80019b6:	2314      	movcs	r3, #20
 80019b8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    
    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 80019bc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019c0:	1d3a      	adds	r2, r7, #4
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80019ca:	4619      	mov	r1, r3
 80019cc:	4821      	ldr	r0, [pc, #132]	; (8001a54 <Term_Update+0xcc>)
 80019ce:	f00e faf3 	bl	800ffb8 <memcpy>
    LastTermLen = DataToSend;
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <Term_Update+0xd0>)
 80019d4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80019d8:	7013      	strb	r3, [r2, #0]
    
    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <Term_Update+0xd4>)
 80019dc:	8818      	ldrh	r0, [r3, #0]
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <Term_Update+0xd8>)
 80019e0:	8819      	ldrh	r1, [r3, #0]
 80019e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019e6:	1d3a      	adds	r2, r7, #4
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4613      	mov	r3, r2
 80019f4:	2200      	movs	r2, #0
 80019f6:	f00d fcf6 	bl	800f3e6 <aci_gatt_update_char_value>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
    if (ret != BLE_STATUS_SUCCESS) 
 8001a00:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d011      	beq.n	8001a2c <Term_Update+0xa4>
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4915      	ldr	r1, [pc, #84]	; (8001a64 <Term_Update+0xdc>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00e fba2 	bl	8010158 <siprintf>
 8001a14:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8001a18:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fa42 	bl	8002eac <CDC_Fill_Buffer>
      return BLE_STATUS_ERROR;
 8001a28:	2347      	movs	r3, #71	; 0x47
 8001a2a:	e00e      	b.n	8001a4a <Term_Update+0xc2>
    }
    HAL_Delay(20);
 8001a2c:	2014      	movs	r0, #20
 8001a2e:	f7ff fed1 	bl	80017d4 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN)
 8001a32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a36:	3314      	adds	r3, #20
 8001a38:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a3c:	1cfb      	adds	r3, r7, #3
 8001a3e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3ab      	bcc.n	80019a0 <Term_Update+0x18>
  }
  
  return BLE_STATUS_SUCCESS;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000254 	.word	0x20000254
 8001a58:	20000268 	.word	0x20000268
 8001a5c:	20000236 	.word	0x20000236
 8001a60:	20000238 	.word	0x20000238
 8001a64:	08010c6c 	.word	0x08010c6c

08001a68 <Stderr_Update_AfterRead>:
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Stderr_Update_AfterRead(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <Stderr_Update_AfterRead+0x34>)
 8001a70:	8818      	ldrh	r0, [r3, #0]
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <Stderr_Update_AfterRead+0x38>)
 8001a74:	8819      	ldrh	r1, [r3, #0]
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <Stderr_Update_AfterRead+0x3c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <Stderr_Update_AfterRead+0x40>)
 8001a7c:	9200      	str	r2, [sp, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f00d fcb1 	bl	800f3e6 <aci_gatt_update_char_value>
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) 
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <Stderr_Update_AfterRead+0x2a>
  {
    return BLE_STATUS_ERROR;
 8001a8e:	2347      	movs	r3, #71	; 0x47
 8001a90:	e000      	b.n	8001a94 <Stderr_Update_AfterRead+0x2c>
  }
  
  return BLE_STATUS_SUCCESS;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000236 	.word	0x20000236
 8001aa0:	2000023a 	.word	0x2000023a
 8001aa4:	20000250 	.word	0x20000250
 8001aa8:	2000023c 	.word	0x2000023c

08001aac <Term_Update_AfterRead>:
* @brief  Update Terminal characteristic value after a read request
* @param None
* @retval tBleStatus      Status
*/
static tBleStatus Term_Update_AfterRead(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0c4      	sub	sp, #272	; 0x110
 8001ab0:	af02      	add	r7, sp, #8
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <Term_Update_AfterRead+0x84>)
 8001ab4:	8818      	ldrh	r0, [r3, #0]
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <Term_Update_AfterRead+0x88>)
 8001ab8:	8819      	ldrh	r1, [r3, #0]
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <Term_Update_AfterRead+0x8c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <Term_Update_AfterRead+0x90>)
 8001ac0:	9200      	str	r2, [sp, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f00d fc8f 	bl	800f3e6 <aci_gatt_update_char_value>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  if (ret != BLE_STATUS_SUCCESS) 
 8001ace:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d026      	beq.n	8001b24 <Term_Update_AfterRead+0x78>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <Term_Update_AfterRead+0x94>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00e      	beq.n	8001b04 <Term_Update_AfterRead+0x58>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Stdout Char\r\n");
 8001ae6:	4917      	ldr	r1, [pc, #92]	; (8001b44 <Term_Update_AfterRead+0x98>)
 8001ae8:	4817      	ldr	r0, [pc, #92]	; (8001b48 <Term_Update_AfterRead+0x9c>)
 8001aea:	f00e fb35 	bl	8010158 <siprintf>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <Term_Update_AfterRead+0xa0>)
 8001af2:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <Term_Update_AfterRead+0xa0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	4812      	ldr	r0, [pc, #72]	; (8001b48 <Term_Update_AfterRead+0x9c>)
 8001afe:	f7ff fefb 	bl	80018f8 <Stderr_Update>
 8001b02:	e00d      	b.n	8001b20 <Term_Update_AfterRead+0x74>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Stdout Char\r\n");
 8001b04:	463b      	mov	r3, r7
 8001b06:	490f      	ldr	r1, [pc, #60]	; (8001b44 <Term_Update_AfterRead+0x98>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00e fb25 	bl	8010158 <siprintf>
 8001b0e:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8001b12:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001b16:	463b      	mov	r3, r7
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 f9c6 	bl	8002eac <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001b20:	2347      	movs	r3, #71	; 0x47
 8001b22:	e000      	b.n	8001b26 <Term_Update_AfterRead+0x7a>
  }
  
  return BLE_STATUS_SUCCESS;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000236 	.word	0x20000236
 8001b34:	20000238 	.word	0x20000238
 8001b38:	20000268 	.word	0x20000268
 8001b3c:	20000254 	.word	0x20000254
 8001b40:	20000220 	.word	0x20000220
 8001b44:	08010c6c 	.word	0x08010c6c
 8001b48:	200009d8 	.word	0x200009d8
 8001b4c:	20000b20 	.word	0x20000b20

08001b50 <Config_Notify>:
 * @param  uint8_t Command Replay to this Command
 * @param  uint8_t data result to send back
 * @retval tBleStatus Status
 */
tBleStatus Config_Notify(uint32_t Feature,uint8_t Command,uint8_t data)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0c8      	sub	sp, #288	; 0x120
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	6018      	str	r0, [r3, #0]
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	1cfb      	adds	r3, r7, #3
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	1cbb      	adds	r3, r7, #2
 8001b66:	460a      	mov	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint8_t buff[2+4+1+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001b6a:	f004 f9c5 	bl	8005ef8 <HAL_GetTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
 8001b78:	f004 f9be 	bl	8005ef8 <HAL_GetTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	0adb      	lsrs	r3, r3, #11
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  STORE_BE_32(buff+2,Feature);
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e1b      	lsrs	r3, r3, #24
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
  buff[6] = Command;
 8001bb4:	1cfb      	adds	r3, r7, #3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  buff[7] = data;
 8001bbc:	1cbb      	adds	r3, r7, #2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  
  ret = aci_gatt_update_char_value (ConfigServW2STHandle, ConfigCharHandle, 0, 8,buff);
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <Config_Notify+0xf8>)
 8001bc6:	8818      	ldrh	r0, [r3, #0]
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <Config_Notify+0xfc>)
 8001bca:	8819      	ldrh	r1, [r3, #0]
 8001bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f00d fc06 	bl	800f3e6 <aci_gatt_update_char_value>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  if (ret != BLE_STATUS_SUCCESS)
 8001be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d028      	beq.n	8001c3a <Config_Notify+0xea>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <Config_Notify+0x100>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0a5b      	lsrs	r3, r3, #9
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <Config_Notify+0xc6>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Configuration Char\r\n");
 8001bf8:	4916      	ldr	r1, [pc, #88]	; (8001c54 <Config_Notify+0x104>)
 8001bfa:	4817      	ldr	r0, [pc, #92]	; (8001c58 <Config_Notify+0x108>)
 8001bfc:	f00e faac 	bl	8010158 <siprintf>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <Config_Notify+0x10c>)
 8001c04:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <Config_Notify+0x10c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <Config_Notify+0x108>)
 8001c10:	f7ff fe72 	bl	80018f8 <Stderr_Update>
 8001c14:	e00f      	b.n	8001c36 <Config_Notify+0xe6>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Configuration Char\r\n");
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <Config_Notify+0x104>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00e fa9b 	bl	8010158 <siprintf>
 8001c22:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8001c26:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 f93b 	bl	8002eac <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8001c36:	2347      	movs	r3, #71	; 0x47
 8001c38:	e000      	b.n	8001c3c <Config_Notify+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000232 	.word	0x20000232
 8001c4c:	20000234 	.word	0x20000234
 8001c50:	20000220 	.word	0x20000220
 8001c54:	08010c8c 	.word	0x08010c8c
 8001c58:	200009d8 	.word	0x200009d8
 8001c5c:	20000b20 	.word	0x20000b20

08001c60 <Add_HWServW2ST_Service>:
* @brief  Add the HW Features service using a vendor specific profile
* @param  None
* @retval tBleStatus Status
*/
tBleStatus Add_HWServW2ST_Service(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberChars = 4;
 8001c66:	2304      	movs	r3, #4
 8001c68:	617b      	str	r3, [r7, #20]
  
  uint8_t uuid[16];
  
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001c6a:	231b      	movs	r3, #27
 8001c6c:	703b      	strb	r3, [r7, #0]
 8001c6e:	23c5      	movs	r3, #197	; 0xc5
 8001c70:	707b      	strb	r3, [r7, #1]
 8001c72:	23d5      	movs	r3, #213	; 0xd5
 8001c74:	70bb      	strb	r3, [r7, #2]
 8001c76:	23a5      	movs	r3, #165	; 0xa5
 8001c78:	70fb      	strb	r3, [r7, #3]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	713b      	strb	r3, [r7, #4]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	717b      	strb	r3, [r7, #5]
 8001c82:	23b4      	movs	r3, #180	; 0xb4
 8001c84:	71bb      	strb	r3, [r7, #6]
 8001c86:	239a      	movs	r3, #154	; 0x9a
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	23e1      	movs	r3, #225	; 0xe1
 8001c8c:	723b      	strb	r3, [r7, #8]
 8001c8e:	2311      	movs	r3, #17
 8001c90:	727b      	strb	r3, [r7, #9]
 8001c92:	2301      	movs	r3, #1
 8001c94:	72bb      	strb	r3, [r7, #10]
 8001c96:	2300      	movs	r3, #0
 8001c98:	72fb      	strb	r3, [r7, #11]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	733b      	strb	r3, [r7, #12]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	737b      	strb	r3, [r7, #13]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73bb      	strb	r3, [r7, #14]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	0052      	lsls	r2, r2, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4639      	mov	r1, r7
 8001cbc:	4a62      	ldr	r2, [pc, #392]	; (8001e48 <Add_HWServW2ST_Service+0x1e8>)
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f00d fa31 	bl	800f12a <aci_gatt_add_serv>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberChars,
                          &HWServW2STHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 80b0 	bne.w	8001e34 <Add_HWServW2ST_Service+0x1d4>
  {
    goto fail;
  }
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001cd4:	231b      	movs	r3, #27
 8001cd6:	703b      	strb	r3, [r7, #0]
 8001cd8:	23c5      	movs	r3, #197	; 0xc5
 8001cda:	707b      	strb	r3, [r7, #1]
 8001cdc:	23d5      	movs	r3, #213	; 0xd5
 8001cde:	70bb      	strb	r3, [r7, #2]
 8001ce0:	23a5      	movs	r3, #165	; 0xa5
 8001ce2:	70fb      	strb	r3, [r7, #3]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	713b      	strb	r3, [r7, #4]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	717b      	strb	r3, [r7, #5]
 8001cec:	2336      	movs	r3, #54	; 0x36
 8001cee:	71bb      	strb	r3, [r7, #6]
 8001cf0:	23ac      	movs	r3, #172	; 0xac
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	23e1      	movs	r3, #225	; 0xe1
 8001cf6:	723b      	strb	r3, [r7, #8]
 8001cf8:	2311      	movs	r3, #17
 8001cfa:	727b      	strb	r3, [r7, #9]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	72bb      	strb	r3, [r7, #10]
 8001d00:	2300      	movs	r3, #0
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	2300      	movs	r3, #0
 8001d06:	733b      	strb	r3, [r7, #12]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	737b      	strb	r3, [r7, #13]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73bb      	strb	r3, [r7, #14]
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001d14:	4b4d      	ldr	r3, [pc, #308]	; (8001e4c <Add_HWServW2ST_Service+0x1ec>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d10b      	bne.n	8001d34 <Add_HWServW2ST_Service+0xd4>
  {
    uuid[14] |= 0x05; /* Two Temperature values*/
 8001d1c:	7bbb      	ldrb	r3, [r7, #14]
 8001d1e:	f043 0305 	orr.w	r3, r3, #5
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2*2;
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e00e      	b.n	8001d52 <Add_HWServW2ST_Service+0xf2>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001d34:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <Add_HWServW2ST_Service+0x1ec>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10a      	bne.n	8001d52 <Add_HWServW2ST_Service+0xf2>
  {
    uuid[14] |= 0x04; /* One Temperature value*/
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001d46:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d50:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <Add_HWServW2ST_Service+0x1ec>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <Add_HWServW2ST_Service+0x110>
  {
    uuid[14] |= 0x08; /* Humidity */
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2;
 8001d64:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3302      	adds	r3, #2
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d6e:	701a      	strb	r2, [r3, #0]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <Add_HWServW2ST_Service+0x1ec>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <Add_HWServW2ST_Service+0x12e>
  {
    uuid[14] |= 0x10; /* Pressure value*/
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=4;
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3304      	adds	r3, #4
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d8c:	701a      	strb	r2, [r3, #0]
  }
  
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, EnvironmentalCharSize,
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <Add_HWServW2ST_Service+0x1e8>)
 8001d90:	8818      	ldrh	r0, [r3, #0]
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <Add_HWServW2ST_Service+0x1f0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	463a      	mov	r2, r7
 8001d98:	492e      	ldr	r1, [pc, #184]	; (8001e54 <Add_HWServW2ST_Service+0x1f4>)
 8001d9a:	9105      	str	r1, [sp, #20]
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	9104      	str	r1, [sp, #16]
 8001da0:	2110      	movs	r1, #16
 8001da2:	9103      	str	r1, [sp, #12]
 8001da4:	2104      	movs	r1, #4
 8001da6:	9102      	str	r1, [sp, #8]
 8001da8:	2100      	movs	r1, #0
 8001daa:	9101      	str	r1, [sp, #4]
 8001dac:	2112      	movs	r1, #18
 8001dae:	9100      	str	r1, [sp, #0]
 8001db0:	2102      	movs	r1, #2
 8001db2:	f00d fa46 	bl	800f242 <aci_gatt_add_char>
 8001db6:	4603      	mov	r3, r0
 8001db8:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d13b      	bne.n	8001e38 <Add_HWServW2ST_Service+0x1d8>
  {
    goto fail;
  }
  
  COPY_LED_W2ST_CHAR_UUID(uuid);
 8001dc0:	231b      	movs	r3, #27
 8001dc2:	703b      	strb	r3, [r7, #0]
 8001dc4:	23c5      	movs	r3, #197	; 0xc5
 8001dc6:	707b      	strb	r3, [r7, #1]
 8001dc8:	23d5      	movs	r3, #213	; 0xd5
 8001dca:	70bb      	strb	r3, [r7, #2]
 8001dcc:	23a5      	movs	r3, #165	; 0xa5
 8001dce:	70fb      	strb	r3, [r7, #3]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	713b      	strb	r3, [r7, #4]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	717b      	strb	r3, [r7, #5]
 8001dd8:	2336      	movs	r3, #54	; 0x36
 8001dda:	71bb      	strb	r3, [r7, #6]
 8001ddc:	23ac      	movs	r3, #172	; 0xac
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	23e1      	movs	r3, #225	; 0xe1
 8001de2:	723b      	strb	r3, [r7, #8]
 8001de4:	2311      	movs	r3, #17
 8001de6:	727b      	strb	r3, [r7, #9]
 8001de8:	2301      	movs	r3, #1
 8001dea:	72bb      	strb	r3, [r7, #10]
 8001dec:	2300      	movs	r3, #0
 8001dee:	72fb      	strb	r3, [r7, #11]
 8001df0:	2300      	movs	r3, #0
 8001df2:	733b      	strb	r3, [r7, #12]
 8001df4:	2300      	movs	r3, #0
 8001df6:	737b      	strb	r3, [r7, #13]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73bb      	strb	r3, [r7, #14]
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <Add_HWServW2ST_Service+0x1e8>)
 8001e02:	8818      	ldrh	r0, [r3, #0]
 8001e04:	463a      	mov	r2, r7
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <Add_HWServW2ST_Service+0x1f8>)
 8001e08:	9305      	str	r3, [sp, #20]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9304      	str	r3, [sp, #16]
 8001e0e:	2310      	movs	r3, #16
 8001e10:	9303      	str	r3, [sp, #12]
 8001e12:	2304      	movs	r3, #4
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	2312      	movs	r3, #18
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2303      	movs	r3, #3
 8001e20:	2102      	movs	r1, #2
 8001e22:	f00d fa0e 	bl	800f242 <aci_gatt_add_char>
 8001e26:	4603      	mov	r3, r0
 8001e28:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &LedCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) 
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <Add_HWServW2ST_Service+0x1dc>
  {
    goto fail;
  }
  
  return BLE_STATUS_SUCCESS;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e005      	b.n	8001e40 <Add_HWServW2ST_Service+0x1e0>
    goto fail;
 8001e34:	bf00      	nop
 8001e36:	e002      	b.n	8001e3e <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001e38:	bf00      	nop
 8001e3a:	e000      	b.n	8001e3e <Add_HWServW2ST_Service+0x1de>
    goto fail;
 8001e3c:	bf00      	nop
  
fail:
  //STLBLE_PRINTF("Error while adding HW's Characteristcs service.\n");
  return BLE_STATUS_ERROR;
 8001e3e:	2347      	movs	r3, #71	; 0x47
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000022c 	.word	0x2000022c
 8001e4c:	200005f0 	.word	0x200005f0
 8001e50:	20000001 	.word	0x20000001
 8001e54:	2000022e 	.word	0x2000022e
 8001e58:	20000230 	.word	0x20000230

08001e5c <Environmental_Update>:
* @param  int16_t Temp2 Temperature in tenths of degree second sensor
* @param  int16_t Temp1 Temperature in tenths of degree first sensor
* @retval tBleStatus   Status
*/
tBleStatus Environmental_Update(int32_t Press,uint16_t Hum,int16_t Temp2,int16_t Temp1)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b0cd      	sub	sp, #308	; 0x134
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	f107 040c 	add.w	r4, r7, #12
 8001e66:	6020      	str	r0, [r4, #0]
 8001e68:	460c      	mov	r4, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f107 030a 	add.w	r3, r7, #10
 8001e72:	4622      	mov	r2, r4
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	460a      	mov	r2, r1
 8001e82:	801a      	strh	r2, [r3, #0]
  tBleStatus ret;
  uint8_t BuffPos;
  
  uint8_t buff[2+4/*Press*/+2/*Hum*/+2/*Temp2*/+2/*Temp1*/];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8001e84:	f004 f838 	bl	8005ef8 <HAL_GetTick>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001e92:	f004 f831 	bl	8005ef8 <HAL_GetTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	0adb      	lsrs	r3, r3, #11
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  BuffPos=2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8001ea6:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <Environmental_Update+0x238>)
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d032      	beq.n	8001f14 <Environmental_Update+0xb8>
  {
    STORE_LE_32(buff+BuffPos,Press);
 8001eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001eb2:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f107 020c 	add.w	r2, r7, #12
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1219      	asrs	r1, r3, #8
 8001eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1419      	asrs	r1, r3, #16
 8001ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001eec:	4413      	add	r3, r2
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	1619      	asrs	r1, r3, #24
 8001efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001efe:	3303      	adds	r3, #3
 8001f00:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f04:	4413      	add	r3, r2
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
    BuffPos+=4;
 8001f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f0e:	3304      	adds	r3, #4
 8001f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8001f14:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <Environmental_Update+0x238>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <Environmental_Update+0xf8>
  {
    STORE_LE_16(buff+BuffPos,Hum);
 8001f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f20:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f24:	4413      	add	r3, r2
 8001f26:	f107 020a 	add.w	r2, r7, #10
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	f107 030a 	add.w	r3, r7, #10
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f44:	4413      	add	r3, r2
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  if(TargetBoardFeatures.NumTempSensors==2) 
 8001f54:	4b4f      	ldr	r3, [pc, #316]	; (8002094 <Environmental_Update+0x238>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d138      	bne.n	8001fce <Environmental_Update+0x172>
  {
    STORE_LE_16(buff+BuffPos,Temp2);
 8001f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f60:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f64:	4413      	add	r3, r2
 8001f66:	f107 0208 	add.w	r2, r7, #8
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f78:	121b      	asrs	r3, r3, #8
 8001f7a:	b219      	sxth	r1, r3
 8001f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f80:	3301      	adds	r3, #1
 8001f82:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f86:	4413      	add	r3, r2
 8001f88:	b2ca      	uxtb	r2, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f90:	3302      	adds	r3, #2
 8001f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    STORE_LE_16(buff+BuffPos,Temp1);
 8001f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001f9a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f9e:	4413      	add	r3, r2
 8001fa0:	1dba      	adds	r2, r7, #6
 8001fa2:	8812      	ldrh	r2, [r2, #0]
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	1dbb      	adds	r3, r7, #6
 8001faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fae:	121b      	asrs	r3, r3, #8
 8001fb0:	b219      	sxth	r1, r3
 8001fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8001fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8001fcc:	e01e      	b.n	800200c <Environmental_Update+0x1b0>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <Environmental_Update+0x238>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d11a      	bne.n	800200c <Environmental_Update+0x1b0>
  {
    STORE_LE_16(buff+BuffPos,Temp1);
 8001fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001fda:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001fde:	4413      	add	r3, r2
 8001fe0:	1dba      	adds	r2, r7, #6
 8001fe2:	8812      	ldrh	r2, [r2, #0]
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	1dbb      	adds	r3, r7, #6
 8001fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fee:	121b      	asrs	r3, r3, #8
 8001ff0:	b219      	sxth	r1, r3
 8001ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
    BuffPos+=2;
 8002002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002006:	3302      	adds	r3, #2
 8002008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  }
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, EnvironmentalCharSize,buff);
 800200c:	4b22      	ldr	r3, [pc, #136]	; (8002098 <Environmental_Update+0x23c>)
 800200e:	8818      	ldrh	r0, [r3, #0]
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <Environmental_Update+0x240>)
 8002012:	8819      	ldrh	r1, [r3, #0]
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <Environmental_Update+0x244>)
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	2200      	movs	r2, #0
 8002022:	f00d f9e0 	bl	800f3e6 <aci_gatt_update_char_value>
 8002026:	4603      	mov	r3, r0
 8002028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  
  if (ret != BLE_STATUS_SUCCESS)
 800202c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002030:	2b00      	cmp	r3, #0
 8002032:	d028      	beq.n	8002086 <Environmental_Update+0x22a>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <Environmental_Update+0x248>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0a5b      	lsrs	r3, r3, #9
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00e      	beq.n	8002062 <Environmental_Update+0x206>
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
 8002044:	4918      	ldr	r1, [pc, #96]	; (80020a8 <Environmental_Update+0x24c>)
 8002046:	4819      	ldr	r0, [pc, #100]	; (80020ac <Environmental_Update+0x250>)
 8002048:	f00e f886 	bl	8010158 <siprintf>
 800204c:	4603      	mov	r3, r0
 800204e:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <Environmental_Update+0x254>)
 8002050:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <Environmental_Update+0x254>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <Environmental_Update+0x250>)
 800205c:	f7ff fc4c 	bl	80018f8 <Stderr_Update>
 8002060:	e00f      	b.n	8002082 <Environmental_Update+0x226>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Environmental Char\r\n");
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4910      	ldr	r1, [pc, #64]	; (80020a8 <Environmental_Update+0x24c>)
 8002068:	4618      	mov	r0, r3
 800206a:	f00e f875 	bl	8010158 <siprintf>
 800206e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8002072:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f000 ff15 	bl	8002eac <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8002082:	2347      	movs	r3, #71	; 0x47
 8002084:	e000      	b.n	8002088 <Environmental_Update+0x22c>
  }
  return BLE_STATUS_SUCCESS;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	bf00      	nop
 8002094:	200005f0 	.word	0x200005f0
 8002098:	2000022c 	.word	0x2000022c
 800209c:	2000022e 	.word	0x2000022e
 80020a0:	20000001 	.word	0x20000001
 80020a4:	20000220 	.word	0x20000220
 80020a8:	08010cb0 	.word	0x08010cb0
 80020ac:	200009d8 	.word	0x200009d8
 80020b0:	20000b20 	.word	0x20000b20

080020b4 <LED_Update>:
* @brief  Update LEDs characteristic value
* @param  uint8_t LedStatus LEDs status 0/1 (off/on)
* @retval tBleStatus   Status
*/
tBleStatus LED_Update(uint8_t LedStatus)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0c8      	sub	sp, #288	; 0x120
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	4602      	mov	r2, r0
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  
  uint8_t buff[2+1];
  
  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 80020c0:	f003 ff1a 	bl	8005ef8 <HAL_GetTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80020ce:	f003 ff13 	bl	8005ef8 <HAL_GetTick>
 80020d2:	4603      	mov	r3, r0
 80020d4:	0adb      	lsrs	r3, r3, #11
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
  buff[2] = LedStatus;
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, LedCharHandle, 0, 2+1,buff);
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <LED_Update+0xb4>)
 80020e6:	8818      	ldrh	r0, [r3, #0]
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <LED_Update+0xb8>)
 80020ea:	8819      	ldrh	r1, [r3, #0]
 80020ec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2303      	movs	r3, #3
 80020f4:	2200      	movs	r2, #0
 80020f6:	f00d f976 	bl	800f3e6 <aci_gatt_update_char_value>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
  if (ret != BLE_STATUS_SUCCESS)
 8002100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002104:	2b00      	cmp	r3, #0
 8002106:	d028      	beq.n	800215a <LED_Update+0xa6>
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <LED_Update+0xbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0a5b      	lsrs	r3, r3, #9
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <LED_Update+0x82>
    {
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating LED Char\r\n");
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <LED_Update+0xc0>)
 800211a:	4817      	ldr	r0, [pc, #92]	; (8002178 <LED_Update+0xc4>)
 800211c:	f00e f81c 	bl	8010158 <siprintf>
 8002120:	4603      	mov	r3, r0
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <LED_Update+0xc8>)
 8002124:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <LED_Update+0xc8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4619      	mov	r1, r3
 800212e:	4812      	ldr	r0, [pc, #72]	; (8002178 <LED_Update+0xc4>)
 8002130:	f7ff fbe2 	bl	80018f8 <Stderr_Update>
 8002134:	e00f      	b.n	8002156 <LED_Update+0xa2>
    } 
    else 
    {
      STLBLE_PRINTF("Error Updating Temp Char\r\n");
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	4911      	ldr	r1, [pc, #68]	; (8002180 <LED_Update+0xcc>)
 800213c:	4618      	mov	r0, r3
 800213e:	f00e f80b 	bl	8010158 <siprintf>
 8002142:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8002146:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f000 feab 	bl	8002eac <CDC_Fill_Buffer>
    }
    return BLE_STATUS_ERROR;
 8002156:	2347      	movs	r3, #71	; 0x47
 8002158:	e000      	b.n	800215c <LED_Update+0xa8>
  }
  return BLE_STATUS_SUCCESS;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000022c 	.word	0x2000022c
 800216c:	20000230 	.word	0x20000230
 8002170:	20000220 	.word	0x20000220
 8002174:	08010cd4 	.word	0x08010cd4
 8002178:	200009d8 	.word	0x200009d8
 800217c:	20000b20 	.word	0x20000b20
 8002180:	08010cf0 	.word	0x08010cf0

08002184 <setConnectable>:
 * @brief  Puts the device in connectable mode.
 * @param  None 
 * @retval None
 */
void setConnectable(void)
{  
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b092      	sub	sp, #72	; 0x48
 8002188:	af08      	add	r7, sp, #32
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_STLBLE};
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <setConnectable+0x108>)
 800218c:	f107 0320 	add.w	r3, r7, #32
 8002190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002194:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t manuf_data[26] = {
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <setConnectable+0x10c>)
 800219a:	1d3c      	adds	r4, r7, #4
 800219c:	461d      	mov	r5, r3
 800219e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a6:	c403      	stmia	r4!, {r0, r1}
 80021a8:	8022      	strh	r2, [r4, #0]
    0x00,
    0x00, /* BLE MAC stop */
  };
  
  /* BLE MAC */
  manuf_data[20] = bdaddr[5];
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <setConnectable+0x110>)
 80021ac:	795b      	ldrb	r3, [r3, #5]
 80021ae:	763b      	strb	r3, [r7, #24]
  manuf_data[21] = bdaddr[4];
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <setConnectable+0x110>)
 80021b2:	791b      	ldrb	r3, [r3, #4]
 80021b4:	767b      	strb	r3, [r7, #25]
  manuf_data[22] = bdaddr[3];
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <setConnectable+0x110>)
 80021b8:	78db      	ldrb	r3, [r3, #3]
 80021ba:	76bb      	strb	r3, [r7, #26]
  manuf_data[23] = bdaddr[2];
 80021bc:	4b35      	ldr	r3, [pc, #212]	; (8002294 <setConnectable+0x110>)
 80021be:	789b      	ldrb	r3, [r3, #2]
 80021c0:	76fb      	strb	r3, [r7, #27]
  manuf_data[24] = bdaddr[1];
 80021c2:	4b34      	ldr	r3, [pc, #208]	; (8002294 <setConnectable+0x110>)
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	773b      	strb	r3, [r7, #28]
  manuf_data[25] = bdaddr[0];
 80021c8:	4b32      	ldr	r3, [pc, #200]	; (8002294 <setConnectable+0x110>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	777b      	strb	r3, [r7, #29]
  
  manuf_data[16] |= 0x20; /* Led */
 80021ce:	7d3b      	ldrb	r3, [r7, #20]
 80021d0:	f043 0320 	orr.w	r3, r3, #32
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	753b      	strb	r3, [r7, #20]
  
  if(TargetBoardFeatures.HandleGGComponent)
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <setConnectable+0x114>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <setConnectable+0x66>
  {
    manuf_data[17] |= 0x02; /* Battery Present */
 80021e0:	7d7b      	ldrb	r3, [r7, #21]
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.NumTempSensors==2)
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <setConnectable+0x114>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d105      	bne.n	80021fe <setConnectable+0x7a>
  {
    manuf_data[17] |= 0x05; /* Two Temperature values*/
 80021f2:	7d7b      	ldrb	r3, [r7, #21]
 80021f4:	f043 0305 	orr.w	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	757b      	strb	r3, [r7, #21]
 80021fc:	e008      	b.n	8002210 <setConnectable+0x8c>
  } 
  else if(TargetBoardFeatures.NumTempSensors==1) 
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <setConnectable+0x114>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d104      	bne.n	8002210 <setConnectable+0x8c>
  {
    manuf_data[17] |= 0x04; /* One Temperature value*/
 8002206:	7d7b      	ldrb	r3, [r7, #21]
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	b2db      	uxtb	r3, r3
 800220e:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandleHumSensor) 
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <setConnectable+0x114>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <setConnectable+0x9e>
  {
    manuf_data[17] |= 0x08; /* Humidity */
 8002218:	7d7b      	ldrb	r3, [r7, #21]
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	b2db      	uxtb	r3, r3
 8002220:	757b      	strb	r3, [r7, #21]
  }
  
  if(TargetBoardFeatures.HandlePressSensor) 
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <setConnectable+0x114>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <setConnectable+0xb0>
  {
    manuf_data[17] |= 0x10; /* Pressure value*/
 800222a:	7d7b      	ldrb	r3, [r7, #21]
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	b2db      	uxtb	r3, r3
 8002232:	757b      	strb	r3, [r7, #21]
  }
  
  /* DS3 DIL24  present*/
  if(TargetBoardFeatures.HWAdvanceFeatures) 
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <setConnectable+0x114>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <setConnectable+0xc2>
  {
    /* Accelerometer Events */
    manuf_data[18] |=0x04;
 800223c:	7dbb      	ldrb	r3, [r7, #22]
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	b2db      	uxtb	r3, r3
 8002244:	75bb      	strb	r3, [r7, #22]
  }
  
  
  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
 8002246:	2100      	movs	r1, #0
 8002248:	2000      	movs	r0, #0
 800224a:	f00d fa6c 	bl	800f726 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 800224e:	2300      	movs	r3, #0
 8002250:	9306      	str	r3, [sp, #24]
 8002252:	2300      	movs	r3, #0
 8002254:	9305      	str	r3, [sp, #20]
 8002256:	2300      	movs	r3, #0
 8002258:	9304      	str	r3, [sp, #16]
 800225a:	2300      	movs	r3, #0
 800225c:	9303      	str	r3, [sp, #12]
 800225e:	f107 0320 	add.w	r3, r7, #32
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	2308      	movs	r3, #8
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	2300      	movs	r3, #0
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2301      	movs	r3, #1
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2000      	movs	r0, #0
 8002274:	f00c fd9e 	bl	800edb4 <aci_gap_set_discoverable>
#endif /* STATIC_BLE_MAC */
                           NO_WHITE_LIST_USE,
                           sizeof(local_name), local_name, 0, NULL, 0, 0);
  
  /* Send Advertising data */
  aci_gap_update_adv_data(26, manuf_data);
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	4619      	mov	r1, r3
 800227c:	201a      	movs	r0, #26
 800227e:	f00c fedf 	bl	800f040 <aci_gap_update_adv_data>
}
 8002282:	bf00      	nop
 8002284:	3728      	adds	r7, #40	; 0x28
 8002286:	46bd      	mov	sp, r7
 8002288:	bdb0      	pop	{r4, r5, r7, pc}
 800228a:	bf00      	nop
 800228c:	08010d0c 	.word	0x08010d0c
 8002290:	08010d14 	.word	0x08010d14
 8002294:	20000900 	.word	0x20000900
 8002298:	200005f0 	.word	0x200005f0

0800229c <GAP_ConnectionComplete_CB>:
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	b0c9      	sub	sp, #292	; 0x124
 80022a0:	af04      	add	r7, sp, #16
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	6018      	str	r0, [r3, #0]
 80022a6:	460a      	mov	r2, r1
 80022a8:	1cbb      	adds	r3, r7, #2
 80022aa:	801a      	strh	r2, [r3, #0]
  connected = TRUE;
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <GAP_ConnectionComplete_CB+0x90>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <GAP_ConnectionComplete_CB+0x94>)
 80022b4:	1cbb      	adds	r3, r7, #2
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	8013      	strh	r3, [r2, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION
  STLBLE_PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3305      	adds	r3, #5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461d      	mov	r5, r3
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3304      	adds	r3, #4
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461e      	mov	r6, r3
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3303      	adds	r3, #3
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3302      	adds	r3, #2
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461c      	mov	r4, r3
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f107 000c 	add.w	r0, r7, #12
 80022f6:	9303      	str	r3, [sp, #12]
 80022f8:	9402      	str	r4, [sp, #8]
 80022fa:	9101      	str	r1, [sp, #4]
 80022fc:	9200      	str	r2, [sp, #0]
 80022fe:	4633      	mov	r3, r6
 8002300:	462a      	mov	r2, r5
 8002302:	490c      	ldr	r1, [pc, #48]	; (8002334 <GAP_ConnectionComplete_CB+0x98>)
 8002304:	f00d ff28 	bl	8010158 <siprintf>
 8002308:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800230c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fdc8 	bl	8002eac <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <GAP_ConnectionComplete_CB+0x9c>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
  
}
 8002322:	bf00      	nop
 8002324:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002328:	46bd      	mov	sp, r7
 800232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232c:	20000228 	.word	0x20000228
 8002330:	2000026a 	.word	0x2000026a
 8002334:	08010d30 	.word	0x08010d30
 8002338:	20000220 	.word	0x20000220

0800233c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b0c2      	sub	sp, #264	; 0x108
 8002340:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <GAP_DisconnectionComplete_CB+0x50>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_USB_DEBUG_CONNECTION  
  STLBLE_PRINTF("<<<<<<DISCONNECTED\r\n");
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	4911      	ldr	r1, [pc, #68]	; (8002390 <GAP_DisconnectionComplete_CB+0x54>)
 800234c:	4618      	mov	r0, r3
 800234e:	f00d ff03 	bl	8010158 <siprintf>
 8002352:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8002356:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fda4 	bl	8002eac <CDC_Fill_Buffer>
#endif /* ENABLE_USB_DEBUG_CONNECTION */  

  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <GAP_DisconnectionComplete_CB+0x58>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]

  ConnectionBleStatus=0;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <GAP_DisconnectionComplete_CB+0x5c>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK){
 8002370:	2100      	movs	r1, #0
 8002372:	480a      	ldr	r0, [pc, #40]	; (800239c <GAP_DisconnectionComplete_CB+0x60>)
 8002374:	f009 f820 	bl	800b3b8 <HAL_TIM_OC_Stop_IT>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <GAP_DisconnectionComplete_CB+0x46>
    /* Stopping Error */
    Error_Handler();
 800237e:	f7ff fa41 	bl	8001804 <Error_Handler>
  }
}
 8002382:	bf00      	nop
 8002384:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000228 	.word	0x20000228
 8002390:	08010d54 	.word	0x08010d54
 8002394:	20000000 	.word	0x20000000
 8002398:	20000220 	.word	0x20000220
 800239c:	20000908 	.word	0x20000908

080023a0 <Read_Request_CB>:
* @brief  This function is called when there is a Bluetooth Read request
* @param  uint16_t handle Handle of the attribute
* @retval None
*/
void Read_Request_CB(uint16_t handle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  if(handle == EnvironmentalCharHandle + 1)
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	4b99      	ldr	r3, [pc, #612]	; (8002614 <Read_Request_CB+0x274>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	429a      	cmp	r2, r3
 80023b4:	f040 8102 	bne.w	80025bc <Read_Request_CB+0x21c>
  {
    /* Read Request for Pressure,Humidity, and Temperatures*/
    float SensorValue;
    int32_t PressToSend=0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
    uint16_t HumToSend=0;
 80023bc:	2300      	movs	r3, #0
 80023be:	837b      	strh	r3, [r7, #26]
    int16_t Temp2ToSend=0,Temp1ToSend=0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	833b      	strh	r3, [r7, #24]
 80023c4:	2300      	movs	r3, #0
 80023c6:	82fb      	strh	r3, [r7, #22]
    int32_t decPart, intPart;
    
    if(TargetBoardFeatures.HandlePressSensor) 
 80023c8:	4b93      	ldr	r3, [pc, #588]	; (8002618 <Read_Request_CB+0x278>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d026      	beq.n	800241e <Read_Request_CB+0x7e>
    {
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_PRESSURE,(float *)&SensorValue);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	461a      	mov	r2, r3
 80023d6:	2102      	movs	r1, #2
 80023d8:	2001      	movs	r0, #1
 80023da:	f003 f8f1 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 80023de:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e6:	ee17 3a90 	vmov	r3, s15
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fe:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800261c <Read_Request_CB+0x27c>
 8002402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240a:	ee17 3a90 	vmov	r3, s15
 800240e:	60fb      	str	r3, [r7, #12]
      PressToSend=intPart*100+decPart;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2264      	movs	r2, #100	; 0x64
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	61fb      	str	r3, [r7, #28]
    }
    
    if(TargetBoardFeatures.HandleHumSensor)
 800241e:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <Read_Request_CB+0x278>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02a      	beq.n	800247c <Read_Request_CB+0xdc>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, (float *)&SensorValue);
 8002426:	f107 0308 	add.w	r3, r7, #8
 800242a:	461a      	mov	r2, r3
 800242c:	2104      	movs	r1, #4
 800242e:	2000      	movs	r0, #0
 8002430:	f003 f8c6 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8002434:	edd7 7a02 	vldr	s15, [r7, #8]
 8002438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243c:	ee17 3a90 	vmov	r3, s15
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	ed97 7a02 	vldr	s14, [r7, #8]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002460:	ee17 3a90 	vmov	r3, s15
 8002464:	60fb      	str	r3, [r7, #12]
      HumToSend = intPart*10+decPart;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4413      	add	r3, r2
 800247a:	837b      	strh	r3, [r7, #26]
    }
    
    if(TargetBoardFeatures.NumTempSensors==2) 
 800247c:	4b66      	ldr	r3, [pc, #408]	; (8002618 <Read_Request_CB+0x278>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d158      	bne.n	8002536 <Read_Request_CB+0x196>
    {
      BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	461a      	mov	r2, r3
 800248a:	2101      	movs	r1, #1
 800248c:	2000      	movs	r0, #0
 800248e:	f003 f897 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8002492:	edd7 7a02 	vldr	s15, [r7, #8]
 8002496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249a:	ee17 3a90 	vmov	r3, s15
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024be:	ee17 3a90 	vmov	r3, s15
 80024c2:	60fb      	str	r3, [r7, #12]
      Temp1ToSend = intPart*10+decPart; 
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	82fb      	strh	r3, [r7, #22]
      
      BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	461a      	mov	r2, r3
 80024e2:	2101      	movs	r1, #1
 80024e4:	2001      	movs	r0, #1
 80024e6:	f003 f86b 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 80024ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f2:	ee17 3a90 	vmov	r3, s15
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800250e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002516:	ee17 3a90 	vmov	r3, s15
 800251a:	60fb      	str	r3, [r7, #12]
      Temp2ToSend = intPart*10+decPart;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4413      	add	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4413      	add	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	833b      	strh	r3, [r7, #24]
 8002534:	e039      	b.n	80025aa <Read_Request_CB+0x20a>
    } 
    else if(TargetBoardFeatures.NumTempSensors==1)
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <Read_Request_CB+0x278>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d135      	bne.n	80025aa <Read_Request_CB+0x20a>
    {
      if (BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_TEMPERATURE,(float *)&SensorValue)!=BSP_ERROR_NONE)
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	461a      	mov	r2, r3
 8002544:	2101      	movs	r1, #1
 8002546:	2000      	movs	r0, #0
 8002548:	f003 f83a 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <Read_Request_CB+0x1c0>
      {
        BSP_ENV_SENSOR_GetValue(LPS22HB_0, ENV_TEMPERATURE,(float *)&SensorValue);
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	461a      	mov	r2, r3
 8002558:	2101      	movs	r1, #1
 800255a:	2001      	movs	r0, #1
 800255c:	f003 f830 	bl	80055c0 <BSP_ENV_SENSOR_GetValue>
      }
      MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
 8002560:	edd7 7a02 	vldr	s15, [r7, #8]
 8002564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002568:	ee17 3a90 	vmov	r3, s15
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002580:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258c:	ee17 3a90 	vmov	r3, s15
 8002590:	60fb      	str	r3, [r7, #12]
      Temp1ToSend = intPart*10+decPart;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	4413      	add	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	82fb      	strh	r3, [r7, #22]
    }
    
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
 80025aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025ae:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80025b2:	8b79      	ldrh	r1, [r7, #26]
 80025b4:	69f8      	ldr	r0, [r7, #28]
 80025b6:	f7ff fc51 	bl	8001e5c <Environmental_Update>
 80025ba:	e01d      	b.n	80025f8 <Read_Request_CB+0x258>
  } 
  else if(handle == LedCharHandle + 1)
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <Read_Request_CB+0x280>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d106      	bne.n	80025d6 <Read_Request_CB+0x236>
  {
    /* Read Request for Led Status */
    LED_Update(TargetBoardFeatures.LedStatus);
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <Read_Request_CB+0x278>)
 80025ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fd70 	bl	80020b4 <LED_Update>
 80025d4:	e010      	b.n	80025f8 <Read_Request_CB+0x258>
  }
  else if (handle == StdErrCharHandle + 1) 
 80025d6:	88fa      	ldrh	r2, [r7, #6]
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <Read_Request_CB+0x284>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	429a      	cmp	r2, r3
 80025e0:	d102      	bne.n	80025e8 <Read_Request_CB+0x248>
  {
    /* Send again the last packet for StdError */
    Stderr_Update_AfterRead();
 80025e2:	f7ff fa41 	bl	8001a68 <Stderr_Update_AfterRead>
 80025e6:	e007      	b.n	80025f8 <Read_Request_CB+0x258>
  } 
  else if (handle == TermCharHandle + 1)
 80025e8:	88fa      	ldrh	r2, [r7, #6]
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <Read_Request_CB+0x288>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d101      	bne.n	80025f8 <Read_Request_CB+0x258>
  {
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 80025f4:	f7ff fa5a 	bl	8001aac <Term_Update_AfterRead>
  }
  
  //EXIT:
  if(connection_handle != 0)
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <Read_Request_CB+0x28c>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <Read_Request_CB+0x26a>
    aci_gatt_allow_read(connection_handle);
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <Read_Request_CB+0x28c>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f00c ff80 	bl	800f50a <aci_gatt_allow_read>
}
 800260a:	bf00      	nop
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000022e 	.word	0x2000022e
 8002618:	200005f0 	.word	0x200005f0
 800261c:	42c80000 	.word	0x42c80000
 8002620:	20000230 	.word	0x20000230
 8002624:	2000023a 	.word	0x2000023a
 8002628:	20000238 	.word	0x20000238
 800262c:	2000026a 	.word	0x2000026a

08002630 <Attribute_Modified_CB>:
* @param uint8_t *att_data attribute data
* @param uint8_t data_length length of the data
* @retval None
*/
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0c6      	sub	sp, #280	; 0x118
 8002634:	af00      	add	r7, sp, #0
 8002636:	463b      	mov	r3, r7
 8002638:	6019      	str	r1, [r3, #0]
 800263a:	4611      	mov	r1, r2
 800263c:	1dbb      	adds	r3, r7, #6
 800263e:	4602      	mov	r2, r0
 8002640:	801a      	strh	r2, [r3, #0]
 8002642:	1d7b      	adds	r3, r7, #5
 8002644:	460a      	mov	r2, r1
 8002646:	701a      	strb	r2, [r3, #0]
  if(attr_handle == ConfigCharHandle + 2) 
 8002648:	1dbb      	adds	r3, r7, #6
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <Attribute_Modified_CB+0x2b0>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	3302      	adds	r3, #2
 8002652:	429a      	cmp	r2, r3
 8002654:	f000 8172 	beq.w	800293c <Attribute_Modified_CB+0x30c>
  {
    ;/* do nothing... only for removing the message "Notification UNKNOW handle" */
  }
  else if(attr_handle == EnvironmentalCharHandle + 2)
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	4ba1      	ldr	r3, [pc, #644]	; (80028e4 <Attribute_Modified_CB+0x2b4>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	3302      	adds	r3, #2
 8002662:	429a      	cmp	r2, r3
 8002664:	d172      	bne.n	800274c <Attribute_Modified_CB+0x11c>
  {
    if (att_data[0] == 01) 
 8002666:	463b      	mov	r3, r7
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d11c      	bne.n	80026aa <Attribute_Modified_CB+0x7a>
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
 8002670:	4b9d      	ldr	r3, [pc, #628]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	4a9b      	ldr	r2, [pc, #620]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 800267a:	6013      	str	r3, [r2, #0]
      
      /* Start the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 800267c:	2100      	movs	r1, #0
 800267e:	489b      	ldr	r0, [pc, #620]	; (80028ec <Attribute_Modified_CB+0x2bc>)
 8002680:	f008 fd4e 	bl	800b120 <HAL_TIM_OC_Start_IT>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <Attribute_Modified_CB+0x5e>
      {
        /* Starting Error */
        Error_Handler();
 800268a:	f7ff f8bb 	bl	8001804 <Error_Handler>
      }
      
      /* Set the new Capture compare value */
      {
        uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 800268e:	4b97      	ldr	r3, [pc, #604]	; (80028ec <Attribute_Modified_CB+0x2bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* Set the Capture Compare Register value */
        __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_1, (uhCapture + uhCCR1_Val));
 8002698:	4b94      	ldr	r3, [pc, #592]	; (80028ec <Attribute_Modified_CB+0x2bc>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80026a4:	3308      	adds	r3, #8
 80026a6:	6353      	str	r3, [r2, #52]	; 0x34
 80026a8:	e013      	b.n	80026d2 <Attribute_Modified_CB+0xa2>
      }
    } 
    else if (att_data[0] == 0)
 80026aa:	463b      	mov	r3, r7
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10e      	bne.n	80026d2 <Attribute_Modified_CB+0xa2>
    {
      W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	4a8a      	ldr	r2, [pc, #552]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80026be:	6013      	str	r3, [r2, #0]
      
      /* Stop the TIM Base generation in interrupt mode */
      if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_1) != HAL_OK)
 80026c0:	2100      	movs	r1, #0
 80026c2:	488a      	ldr	r0, [pc, #552]	; (80028ec <Attribute_Modified_CB+0x2bc>)
 80026c4:	f008 fe78 	bl	800b3b8 <HAL_TIM_OC_Stop_IT>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <Attribute_Modified_CB+0xa2>
      {
        /* Stopping Error */
        Error_Handler();
 80026ce:	f7ff f899 	bl	8001804 <Error_Handler>
      }
    }
#ifdef ENABLE_USB_DEBUG_CONNECTION
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d019      	beq.n	8002716 <Attribute_Modified_CB+0xe6>
    {
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 80026e2:	4b81      	ldr	r3, [pc, #516]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <Attribute_Modified_CB+0xc4>
 80026f0:	4b7f      	ldr	r3, [pc, #508]	; (80028f0 <Attribute_Modified_CB+0x2c0>)
 80026f2:	e000      	b.n	80026f6 <Attribute_Modified_CB+0xc6>
 80026f4:	4b7f      	ldr	r3, [pc, #508]	; (80028f4 <Attribute_Modified_CB+0x2c4>)
 80026f6:	461a      	mov	r2, r3
 80026f8:	497f      	ldr	r1, [pc, #508]	; (80028f8 <Attribute_Modified_CB+0x2c8>)
 80026fa:	4880      	ldr	r0, [pc, #512]	; (80028fc <Attribute_Modified_CB+0x2cc>)
 80026fc:	f00d fd2c 	bl	8010158 <siprintf>
 8002700:	4603      	mov	r3, r0
 8002702:	4a7f      	ldr	r2, [pc, #508]	; (8002900 <Attribute_Modified_CB+0x2d0>)
 8002704:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8002706:	4b7e      	ldr	r3, [pc, #504]	; (8002900 <Attribute_Modified_CB+0x2d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	487b      	ldr	r0, [pc, #492]	; (80028fc <Attribute_Modified_CB+0x2cc>)
 8002710:	f7ff f93a 	bl	8001988 <Term_Update>
    else
    {
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
    }
  }
}
 8002714:	e112      	b.n	800293c <Attribute_Modified_CB+0x30c>
      STLBLE_PRINTF("--->Env=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV) ? "ON" : "OFF");
 8002716:	4b74      	ldr	r3, [pc, #464]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <Attribute_Modified_CB+0xf8>
 8002724:	4a72      	ldr	r2, [pc, #456]	; (80028f0 <Attribute_Modified_CB+0x2c0>)
 8002726:	e000      	b.n	800272a <Attribute_Modified_CB+0xfa>
 8002728:	4a72      	ldr	r2, [pc, #456]	; (80028f4 <Attribute_Modified_CB+0x2c4>)
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	4972      	ldr	r1, [pc, #456]	; (80028f8 <Attribute_Modified_CB+0x2c8>)
 8002730:	4618      	mov	r0, r3
 8002732:	f00d fd11 	bl	8010158 <siprintf>
 8002736:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800273a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fbb1 	bl	8002eac <CDC_Fill_Buffer>
}
 800274a:	e0f7      	b.n	800293c <Attribute_Modified_CB+0x30c>
  else if(attr_handle == StdErrCharHandle + 2)
 800274c:	1dbb      	adds	r3, r7, #6
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	4b6c      	ldr	r3, [pc, #432]	; (8002904 <Attribute_Modified_CB+0x2d4>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	3302      	adds	r3, #2
 8002756:	429a      	cmp	r2, r3
 8002758:	d118      	bne.n	800278c <Attribute_Modified_CB+0x15c>
    if (att_data[0] == 01) 
 800275a:	463b      	mov	r3, r7
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d106      	bne.n	8002772 <Attribute_Modified_CB+0x142>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
 8002764:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276c:	4a5e      	ldr	r2, [pc, #376]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	e0e4      	b.n	800293c <Attribute_Modified_CB+0x30c>
    else if (att_data[0] == 0)
 8002772:	463b      	mov	r3, r7
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f040 80df 	bne.w	800293c <Attribute_Modified_CB+0x30c>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
 800277e:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002786:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	e0d7      	b.n	800293c <Attribute_Modified_CB+0x30c>
  else if(attr_handle == TermCharHandle + 2)
 800278c:	1dbb      	adds	r3, r7, #6
 800278e:	881a      	ldrh	r2, [r3, #0]
 8002790:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <Attribute_Modified_CB+0x2d8>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	3302      	adds	r3, #2
 8002796:	429a      	cmp	r2, r3
 8002798:	d118      	bne.n	80027cc <Attribute_Modified_CB+0x19c>
    if (att_data[0] == 01) 
 800279a:	463b      	mov	r3, r7
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <Attribute_Modified_CB+0x182>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_TERM);
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	4a4e      	ldr	r2, [pc, #312]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	e0c4      	b.n	800293c <Attribute_Modified_CB+0x30c>
    else if (att_data[0] == 0)
 80027b2:	463b      	mov	r3, r7
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 80bf 	bne.w	800293c <Attribute_Modified_CB+0x30c>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_TERM);
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c6:	4a48      	ldr	r2, [pc, #288]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80027c8:	6013      	str	r3, [r2, #0]
}
 80027ca:	e0b7      	b.n	800293c <Attribute_Modified_CB+0x30c>
  else if(attr_handle == LedCharHandle + 2)
 80027cc:	1dbb      	adds	r3, r7, #6
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	4b4e      	ldr	r3, [pc, #312]	; (800290c <Attribute_Modified_CB+0x2dc>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	3302      	adds	r3, #2
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d15b      	bne.n	8002892 <Attribute_Modified_CB+0x262>
    if (att_data[0] == 01) 
 80027da:	463b      	mov	r3, r7
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10c      	bne.n	80027fe <Attribute_Modified_CB+0x1ce>
      W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
 80027e4:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80027ee:	6013      	str	r3, [r2, #0]
      LED_Update(TargetBoardFeatures.LedStatus);
 80027f0:	4b47      	ldr	r3, [pc, #284]	; (8002910 <Attribute_Modified_CB+0x2e0>)
 80027f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fc5c 	bl	80020b4 <LED_Update>
 80027fc:	e00a      	b.n	8002814 <Attribute_Modified_CB+0x1e4>
    else if (att_data[0] == 0)
 80027fe:	463b      	mov	r3, r7
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <Attribute_Modified_CB+0x1e4>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
 8002808:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 0302 	bic.w	r3, r3, #2
 8002810:	4a35      	ldr	r2, [pc, #212]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002812:	6013      	str	r3, [r2, #0]
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM))
 8002814:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01a      	beq.n	800285a <Attribute_Modified_CB+0x22a>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8002824:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <Attribute_Modified_CB+0x208>
 8002834:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <Attribute_Modified_CB+0x2c0>)
 8002836:	e000      	b.n	800283a <Attribute_Modified_CB+0x20a>
 8002838:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <Attribute_Modified_CB+0x2c4>)
 800283a:	461a      	mov	r2, r3
 800283c:	4935      	ldr	r1, [pc, #212]	; (8002914 <Attribute_Modified_CB+0x2e4>)
 800283e:	482f      	ldr	r0, [pc, #188]	; (80028fc <Attribute_Modified_CB+0x2cc>)
 8002840:	f00d fc8a 	bl	8010158 <siprintf>
 8002844:	4603      	mov	r3, r0
 8002846:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <Attribute_Modified_CB+0x2d0>)
 8002848:	6013      	str	r3, [r2, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <Attribute_Modified_CB+0x2d0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	482a      	ldr	r0, [pc, #168]	; (80028fc <Attribute_Modified_CB+0x2cc>)
 8002854:	f7ff f898 	bl	8001988 <Term_Update>
}
 8002858:	e070      	b.n	800293c <Attribute_Modified_CB+0x30c>
      STLBLE_PRINTF("--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <Attribute_Modified_CB+0x23e>
 800286a:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <Attribute_Modified_CB+0x2c0>)
 800286c:	e000      	b.n	8002870 <Attribute_Modified_CB+0x240>
 800286e:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <Attribute_Modified_CB+0x2c4>)
 8002870:	f107 0308 	add.w	r3, r7, #8
 8002874:	4927      	ldr	r1, [pc, #156]	; (8002914 <Attribute_Modified_CB+0x2e4>)
 8002876:	4618      	mov	r0, r3
 8002878:	f00d fc6e 	bl	8010158 <siprintf>
 800287c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8002880:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fb0e 	bl	8002eac <CDC_Fill_Buffer>
}
 8002890:	e054      	b.n	800293c <Attribute_Modified_CB+0x30c>
  else if (attr_handle == ConfigCharHandle + 1) 
 8002892:	1dbb      	adds	r3, r7, #6
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <Attribute_Modified_CB+0x2b0>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	429a      	cmp	r2, r3
 800289e:	d107      	bne.n	80028b0 <Attribute_Modified_CB+0x280>
    ConfigCommandParsing(att_data, data_length);    
 80028a0:	1d7b      	adds	r3, r7, #5
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	463b      	mov	r3, r7
 80028a6:	4611      	mov	r1, r2
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f000 f84f 	bl	800294c <ConfigCommandParsing>
}
 80028ae:	e045      	b.n	800293c <Attribute_Modified_CB+0x30c>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <Attribute_Modified_CB+0x2b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0a5b      	lsrs	r3, r3, #9
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02d      	beq.n	800291c <Attribute_Modified_CB+0x2ec>
      BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
 80028c0:	4915      	ldr	r1, [pc, #84]	; (8002918 <Attribute_Modified_CB+0x2e8>)
 80028c2:	480e      	ldr	r0, [pc, #56]	; (80028fc <Attribute_Modified_CB+0x2cc>)
 80028c4:	f00d fc48 	bl	8010158 <siprintf>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <Attribute_Modified_CB+0x2d0>)
 80028cc:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <Attribute_Modified_CB+0x2d0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	4619      	mov	r1, r3
 80028d6:	4809      	ldr	r0, [pc, #36]	; (80028fc <Attribute_Modified_CB+0x2cc>)
 80028d8:	f7ff f80e 	bl	80018f8 <Stderr_Update>
}
 80028dc:	e02e      	b.n	800293c <Attribute_Modified_CB+0x30c>
 80028de:	bf00      	nop
 80028e0:	20000234 	.word	0x20000234
 80028e4:	2000022e 	.word	0x2000022e
 80028e8:	20000220 	.word	0x20000220
 80028ec:	20000908 	.word	0x20000908
 80028f0:	08010d6c 	.word	0x08010d6c
 80028f4:	08010d70 	.word	0x08010d70
 80028f8:	08010d74 	.word	0x08010d74
 80028fc:	200009d8 	.word	0x200009d8
 8002900:	20000b20 	.word	0x20000b20
 8002904:	2000023a 	.word	0x2000023a
 8002908:	20000238 	.word	0x20000238
 800290c:	20000230 	.word	0x20000230
 8002910:	200005f0 	.word	0x200005f0
 8002914:	08010d84 	.word	0x08010d84
 8002918:	08010d94 	.word	0x08010d94
      STLBLE_PRINTF("Notification UNKNOW handle\r\n");
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	4909      	ldr	r1, [pc, #36]	; (8002948 <Attribute_Modified_CB+0x318>)
 8002922:	4618      	mov	r0, r3
 8002924:	f00d fc18 	bl	8010158 <siprintf>
 8002928:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800292c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fab8 	bl	8002eac <CDC_Fill_Buffer>
}
 800293c:	bf00      	nop
 800293e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	08010d94 	.word	0x08010d94

0800294c <ConfigCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
static void ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0c6      	sub	sp, #280	; 0x118
 8002950:	af00      	add	r7, sp, #0
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	6018      	str	r0, [r3, #0]
 8002956:	460a      	mov	r2, r1
 8002958:	1cfb      	adds	r3, r7, #3
 800295a:	701a      	strb	r2, [r3, #0]
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3303      	adds	r3, #3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3302      	adds	r3, #2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	431a      	orrs	r2, r3
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	431a      	orrs	r2, r3
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint8_t Command = att_data[4];
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	791b      	ldrb	r3, [r3, #4]
 8002992:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  uint8_t Data    = att_data[5];
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	795b      	ldrb	r3, [r3, #5]
 800299c:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

  switch (FeatureMask) {
 80029a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a8:	d162      	bne.n	8002a70 <ConfigCommandParsing+0x124>
    case FEATURE_MASK_LED:
      /* Led events */
#ifdef ENABLE_USB_DEBUG_CONNECTION
      if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) {
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <ConfigCommandParsing+0x130>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <ConfigCommandParsing+0x94>
        BytesToWrite = sprintf((char *)BufferToWrite,"Conf Sig F=%lx C=%2x\n\r",FeatureMask,Command);
 80029ba:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80029be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029c2:	492f      	ldr	r1, [pc, #188]	; (8002a80 <ConfigCommandParsing+0x134>)
 80029c4:	482f      	ldr	r0, [pc, #188]	; (8002a84 <ConfigCommandParsing+0x138>)
 80029c6:	f00d fbc7 	bl	8010158 <siprintf>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <ConfigCommandParsing+0x13c>)
 80029ce:	6013      	str	r3, [r2, #0]
        Term_Update(BufferToWrite,BytesToWrite);
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <ConfigCommandParsing+0x13c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	4619      	mov	r1, r3
 80029d8:	482a      	ldr	r0, [pc, #168]	; (8002a84 <ConfigCommandParsing+0x138>)
 80029da:	f7fe ffd5 	bl	8001988 <Term_Update>
 80029de:	e012      	b.n	8002a06 <ConfigCommandParsing+0xba>
      } else {
        STLBLE_PRINTF("Conf Sig F=%lx C=%2x\r\n",FeatureMask,Command);
 80029e0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80029e4:	f107 000c 	add.w	r0, r7, #12
 80029e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029ec:	4927      	ldr	r1, [pc, #156]	; (8002a8c <ConfigCommandParsing+0x140>)
 80029ee:	f00d fbb3 	bl	8010158 <siprintf>
 80029f2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80029f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fa53 	bl	8002eac <CDC_Fill_Buffer>
      }
#endif /* ENABLE_USB_DEBUG_CONNECTION */
     switch(Command) {
 8002a06:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d011      	beq.n	8002a32 <ConfigCommandParsing+0xe6>
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d11f      	bne.n	8002a52 <ConfigCommandParsing+0x106>
      case 1:
        TargetBoardFeatures.LedStatus=1;
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <ConfigCommandParsing+0x144>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOnTargetPlatform();
 8002a1a:	f7fd feb9 	bl	8000790 <LedOnTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 8002a1e:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8002a22:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002a2c:	f7ff f890 	bl	8001b50 <Config_Notify>
        break;
 8002a30:	e00f      	b.n	8002a52 <ConfigCommandParsing+0x106>
      case 0:
        TargetBoardFeatures.LedStatus=0;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <ConfigCommandParsing+0x144>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        LedOffTargetPlatform();
 8002a3a:	f7fd feb0 	bl	800079e <LedOffTargetPlatform>
        Config_Notify(FEATURE_MASK_LED,Command,Data);
 8002a3e:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8002a42:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002a4c:	f7ff f880 	bl	8001b50 <Config_Notify>
        break;
 8002a50:	bf00      	nop
     }
     /* Update the LED feature */
     if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED)) {
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <ConfigCommandParsing+0x130>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <ConfigCommandParsing+0x122>
       LED_Update(TargetBoardFeatures.LedStatus);
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <ConfigCommandParsing+0x144>)
 8002a64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fb23 	bl	80020b4 <LED_Update>
     }
    break;
 8002a6e:	bf00      	nop
  }
}
 8002a70:	bf00      	nop
 8002a72:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000220 	.word	0x20000220
 8002a80:	08010db4 	.word	0x08010db4
 8002a84:	200009d8 	.word	0x200009d8
 8002a88:	20000b20 	.word	0x20000b20
 8002a8c:	08010dcc 	.word	0x08010dcc
 8002a90:	200005f0 	.word	0x200005f0

08002a94 <HCI_Event_CB>:
*         parsed.
* @param  void *pckt Pointer to the ACI packet
* @retval None
*/
void HCI_Event_CB(void *pckt)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pckt;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	623b      	str	r3, [r7, #32]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d14a      	bne.n	8002b44 <HCI_Event_CB+0xb0>
  {
    return;
  }
  
  switch(event_pckt->evt)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2bff      	cmp	r3, #255	; 0xff
 8002ab4:	d01f      	beq.n	8002af6 <HCI_Event_CB+0x62>
 8002ab6:	2bff      	cmp	r3, #255	; 0xff
 8002ab8:	dc49      	bgt.n	8002b4e <HCI_Event_CB+0xba>
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d002      	beq.n	8002ac4 <HCI_Event_CB+0x30>
 8002abe:	2b3e      	cmp	r3, #62	; 0x3e
 8002ac0:	d003      	beq.n	8002aca <HCI_Event_CB+0x36>
 8002ac2:	e044      	b.n	8002b4e <HCI_Event_CB+0xba>
  {
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002ac4:	f7ff fc3a 	bl	800233c <GAP_DisconnectionComplete_CB>
    }
    break;
 8002ac8:	e041      	b.n	8002b4e <HCI_Event_CB+0xba>
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	3302      	adds	r3, #2
 8002ace:	613b      	str	r3, [r7, #16]
      
      switch(evt->subevent)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d137      	bne.n	8002b48 <HCI_Event_CB+0xb4>
      {
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1d5a      	adds	r2, r3, #5
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f7ff fbd5 	bl	800229c <GAP_ConnectionComplete_CB>
        }
        break;
 8002af2:	bf00      	nop
      }
    }
    break;
 8002af4:	e028      	b.n	8002b48 <HCI_Event_CB+0xb4>
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	3302      	adds	r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f640 4201 	movw	r2, #3073	; 0xc01
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00d      	beq.n	8002b26 <HCI_Event_CB+0x92>
 8002b0a:	f640 4214 	movw	r2, #3092	; 0xc14
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d11c      	bne.n	8002b4c <HCI_Event_CB+0xb8>
      {
      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data; 
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3302      	adds	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);                    
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	885b      	ldrh	r3, [r3, #2]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fc3e 	bl	80023a0 <Read_Request_CB>
        }
        break;
 8002b24:	e00d      	b.n	8002b42 <HCI_Event_CB+0xae>
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	617b      	str	r3, [r7, #20]
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	885b      	ldrh	r3, [r3, #2]
 8002b30:	b298      	uxth	r0, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	1dd9      	adds	r1, r3, #7
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	791b      	ldrb	r3, [r3, #4]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7ff fd78 	bl	8002630 <Attribute_Modified_CB>
        }
        break;
 8002b40:	bf00      	nop
      }
    }
    break;
 8002b42:	e003      	b.n	8002b4c <HCI_Event_CB+0xb8>
    return;
 8002b44:	bf00      	nop
 8002b46:	e002      	b.n	8002b4e <HCI_Event_CB+0xba>
    break;
 8002b48:	bf00      	nop
 8002b4a:	e000      	b.n	8002b4e <HCI_Event_CB+0xba>
    break;
 8002b4c:	bf00      	nop
  }
}
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b0ac      	sub	sp, #176	; 0xb0
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	2288      	movs	r2, #136	; 0x88
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f00d fa2d 	bl	800ffd4 <memset>
  if(huart->Instance==UART5)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a47      	ldr	r2, [pc, #284]	; (8002c9c <HAL_UART_MspInit+0x148>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	f040 8086 	bne.w	8002c92 <HAL_UART_MspInit+0x13e>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002b86:	2310      	movs	r3, #16
 8002b88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4618      	mov	r0, r3
 8002b94:	f006 ffba 	bl	8009b0c <HAL_RCCEx_PeriphCLKConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b9e:	f7fe fe31 	bl	8001804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	4a3e      	ldr	r2, [pc, #248]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bac:	6593      	str	r3, [r2, #88]	; 0x58
 8002bae:	4b3c      	ldr	r3, [pc, #240]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a38      	ldr	r2, [pc, #224]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_UART_MspInit+0x14c>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bea:	2304      	movs	r3, #4
 8002bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c02:	2308      	movs	r3, #8
 8002c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4825      	ldr	r0, [pc, #148]	; (8002ca4 <HAL_UART_MspInit+0x150>)
 8002c10:	f003 fd7c 	bl	800670c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c2e:	2308      	movs	r3, #8
 8002c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	481b      	ldr	r0, [pc, #108]	; (8002ca8 <HAL_UART_MspInit+0x154>)
 8002c3c:	f003 fd66 	bl	800670c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c42:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <HAL_UART_MspInit+0x15c>)
 8002c44:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c48:	2202      	movs	r2, #2
 8002c4a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002c76:	480d      	ldr	r0, [pc, #52]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c78:	f003 faa4 	bl	80061c4 <HAL_DMA_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002c82:	f7fe fdbf 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a08      	ldr	r2, [pc, #32]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c8a:	671a      	str	r2, [r3, #112]	; 0x70
 8002c8c:	4a07      	ldr	r2, [pc, #28]	; (8002cac <HAL_UART_MspInit+0x158>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002c92:	bf00      	nop
 8002c94:	37b0      	adds	r7, #176	; 0xb0
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40005000 	.word	0x40005000
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48000c00 	.word	0x48000c00
 8002ca8:	48000800 	.word	0x48000800
 8002cac:	20000ad8 	.word	0x20000ad8
 8002cb0:	4002041c 	.word	0x4002041c

08002cb4 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_TIM_OC_MspInit+0x38>)
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_TIM_OC_MspInit+0x38>)
 8002cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_TIM_OC_MspInit+0x38>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2108      	movs	r1, #8
 8002cd8:	201b      	movs	r0, #27
 8002cda:	f003 fa22 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002cde:	201b      	movs	r0, #27
 8002ce0:	f003 fa3b 	bl	800615a <HAL_NVIC_EnableIRQ>
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000

08002cf0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d16 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d44:	f003 f8c4 	bl	8005ed0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002d48:	f003 fa2f 	bl	80061aa <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <DMA2_Channel2_IRQHandler+0x10>)
 8002d56:	f003 fb8e 	bl	8006476 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000ad8 	.word	0x20000ad8

08002d64 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimCCHandle);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <TIM1_CC_IRQHandler+0x10>)
 8002d6a:	f008 fc01 	bl	800b570 <HAL_TIM_IRQHandler>
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000908 	.word	0x20000908

08002d78 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti5);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <EXTI9_5_IRQHandler+0x10>)
 8002d7e:	f003 fc95 	bl	80066ac <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200008f4 	.word	0x200008f4

08002d8c <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <OTG_FS_IRQHandler+0x10>)
 8002d92:	f005 fa27 	bl	80081e4 <HAL_PCD_IRQHandler>
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20002374 	.word	0x20002374

08002da0 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <TIM3_IRQHandler+0x10>)
 8002da6:	f008 fbe3 	bl	800b570 <HAL_TIM_IRQHandler>
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20002328 	.word	0x20002328

08002db4 <I2C3_EV_IRQHandler>:

/**
* @brief This function handles I2C3 event interrupt.
*/
void I2C3_EV_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hbusi2c3);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <I2C3_EV_IRQHandler+0x10>)
 8002dba:	f004 fa75 	bl	80072a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000277c 	.word	0x2000277c

08002dc8 <I2C3_ER_IRQHandler>:

/**
* @brief This function handles I2C3 error interrupt.
*/
void I2C3_ER_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hbusi2c3);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <I2C3_ER_IRQHandler+0x10>)
 8002dce:	f004 fa85 	bl	80072dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000277c 	.word	0x2000277c

08002ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <_sbrk+0x5c>)
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <_sbrk+0x60>)
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <_sbrk+0x64>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <_sbrk+0x68>)
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e0c:	f00d f8aa 	bl	800ff64 <__errno>
 8002e10:	4603      	mov	r3, r0
 8002e12:	220c      	movs	r2, #12
 8002e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e1a:	e009      	b.n	8002e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <_sbrk+0x64>)
 8002e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20018000 	.word	0x20018000
 8002e3c:	00000400 	.word	0x00000400
 8002e40:	2000026c 	.word	0x2000026c
 8002e44:	200028c0 	.word	0x200028c0

08002e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <SystemInit+0x5c>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <SystemInit+0x5c>)
 8002e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <SystemInit+0x60>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <SystemInit+0x60>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <SystemInit+0x60>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <SystemInit+0x60>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <SystemInit+0x60>)
 8002e74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <SystemInit+0x60>)
 8002e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <SystemInit+0x60>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <SystemInit+0x60>)
 8002e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SystemInit+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	40021000 	.word	0x40021000

08002eac <CDC_Fill_Buffer>:
  * @param  Buf: pointer to the tx buffer
  * @param  TotalLen: number of bytes to be sent
  * @retval Result of the operation: USBD_OK if all operations are OK
  */
uint8_t CDC_Fill_Buffer(uint8_t* Buf, uint32_t TotalLen)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint16_t i;
  
  for (i = 0; i < TotalLen; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	81fb      	strh	r3, [r7, #14]
 8002eba:	e011      	b.n	8002ee0 <CDC_Fill_Buffer+0x34>
  {
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 8002ebc:	89fb      	ldrh	r3, [r7, #14]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	441a      	add	r2, r3
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <CDC_Fill_Buffer+0x4c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	7811      	ldrb	r1, [r2, #0]
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <CDC_Fill_Buffer+0x50>)
 8002eca:	54d1      	strb	r1, [r2, r3]
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <CDC_Fill_Buffer+0x4c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <CDC_Fill_Buffer+0x4c>)
 8002ed8:	6013      	str	r3, [r2, #0]
  for (i = 0; i < TotalLen; i++)
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	3301      	adds	r3, #1
 8002ede:	81fb      	strh	r3, [r7, #14]
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d8e9      	bhi.n	8002ebc <CDC_Fill_Buffer+0x10>
  }
  return (USBD_OK);
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000270 	.word	0x20000270
 8002efc:	20001328 	.word	0x20001328

08002f00 <CDC_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void CDC_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;
  
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d030      	beq.n	8002f76 <CDC_TIM_PeriodElapsedCallback+0x76>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d905      	bls.n	8002f2c <CDC_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e005      	b.n	8002f38 <CDC_TIM_PeriodElapsedCallback+0x38>
    }
    else 
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <CDC_TIM_PeriodElapsedCallback+0x84>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	60fb      	str	r3, [r7, #12]
    }
    
    buffptr = UserTxBufPtrOut;
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60bb      	str	r3, [r7, #8]
    
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <CDC_TIM_PeriodElapsedCallback+0x88>)
 8002f42:	4413      	add	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4810      	ldr	r0, [pc, #64]	; (8002f8c <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8002f4a:	f00a fe0d 	bl	800db68 <USBD_CDC_SetTxBuffer>
    
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8002f4e:	480f      	ldr	r0, [pc, #60]	; (8002f8c <CDC_TIM_PeriodElapsedCallback+0x8c>)
 8002f50:	f00a fe28 	bl	800dba4 <USBD_CDC_TransmitPacket>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10d      	bne.n	8002f76 <CDC_TIM_PeriodElapsedCallback+0x76>
    {
      UserTxBufPtrOut += buffsize;
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f64:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6e:	d102      	bne.n	8002f76 <CDC_TIM_PeriodElapsedCallback+0x76>
      {
        UserTxBufPtrOut = 0;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <CDC_TIM_PeriodElapsedCallback+0x80>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000274 	.word	0x20000274
 8002f84:	20000270 	.word	0x20000270
 8002f88:	20001328 	.word	0x20001328
 8002f8c:	20000624 	.word	0x20000624

08002f90 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f00a fe6b 	bl	800dc82 <USBD_LL_SetupStage>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f00a fea5 	bl	800dd2c <USBD_LL_DataOutStage>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3348      	adds	r3, #72	; 0x48
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	4619      	mov	r1, r3
 8003012:	f00a feee 	bl	800ddf2 <USBD_LL_DataInStage>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800302c:	4618      	mov	r0, r3
 800302e:	f00b f802 	bl	800e036 <USBD_LL_SOF>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003048:	4618      	mov	r0, r3
 800304a:	f00a ff68 	bl	800df1e <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003054:	2101      	movs	r1, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f00a ffaf 	bl	800dfba <USBD_LL_SetSpeed>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003072:	4618      	mov	r0, r3
 8003074:	f00a ffb1 	bl	800dfda <USBD_LL_Suspend>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800308e:	4618      	mov	r0, r3
 8003090:	f00a ffb9 	bl	800e006 <USBD_LL_Resume>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f00b f807 	bl	800e0c6 <USBD_LL_IsoOUTIncomplete>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f00a ffcf 	bl	800e07a <USBD_LL_IsoINIncomplete>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030f2:	4618      	mov	r0, r3
 80030f4:	f00b f80d 	bl	800e112 <USBD_LL_DevConnected>
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800310e:	4618      	mov	r0, r3
 8003110:	f00b f80a 	bl	800e128 <USBD_LL_DevDisconnected>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	70fb      	strb	r3, [r7, #3]
 800312e:	460b      	mov	r3, r1
 8003130:	70bb      	strb	r3, [r7, #2]
 8003132:	4613      	mov	r3, r2
 8003134:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800313c:	78bb      	ldrb	r3, [r7, #2]
 800313e:	883a      	ldrh	r2, [r7, #0]
 8003140:	78f9      	ldrb	r1, [r7, #3]
 8003142:	f005 fc18 	bl	8008976 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f005 fce8 	bl	8008b3c <HAL_PCD_EP_SetStall>
  return USBD_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f005 fd37 	bl	8008c00 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80031ae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80031b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da0b      	bge.n	80031d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	333e      	adds	r3, #62	; 0x3e
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	e00b      	b.n	80031e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031d6:	68f9      	ldr	r1, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80031e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f005 fb8e 	bl	800892c <HAL_PCD_SetAddress>
  return USBD_OK; 
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	460b      	mov	r3, r1
 8003228:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003230:	7af9      	ldrb	r1, [r7, #11]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	f005 fc44 	bl	8008ac2 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800325a:	7af9      	ldrb	r1, [r7, #11]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	f005 fbf1 	bl	8008a46 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003274:	f7ff fde8 	bl	8002e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003278:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800327a:	e003      	b.n	8003284 <LoopCopyDataInit>

0800327c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800327e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003280:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003282:	3104      	adds	r1, #4

08003284 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003284:	480a      	ldr	r0, [pc, #40]	; (80032b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003288:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800328a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800328c:	d3f6      	bcc.n	800327c <CopyDataInit>
	ldr	r2, =_sbss
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003290:	e002      	b.n	8003298 <LoopFillZerobss>

08003292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003292:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003294:	f842 3b04 	str.w	r3, [r2], #4

08003298 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <LoopForever+0x16>)
	cmp	r2, r3
 800329a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800329c:	d3f9      	bcc.n	8003292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800329e:	f00c fe67 	bl	800ff70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032a2:	f7fd fc2f 	bl	8000b04 <main>

080032a6 <LoopForever>:

LoopForever:
    b LoopForever
 80032a6:	e7fe      	b.n	80032a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80032a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80032ac:	08010e78 	.word	0x08010e78
	ldr	r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032b4:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 80032b8:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 80032bc:	200028bc 	.word	0x200028bc

080032c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032c0:	e7fe      	b.n	80032c0 <ADC1_2_IRQHandler>
	...

080032c4 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e030      	b.n	800333e <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	7b1a      	ldrb	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <HTS221_RegisterBusIO+0x84>)
 8003318:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0b      	ldr	r2, [pc, #44]	; (800334c <HTS221_RegisterBusIO+0x88>)
 800331e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4798      	blx	r3
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	e002      	b.n	800333e <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800333c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	0800397b 	.word	0x0800397b
 800334c:	080039dd 	.word	0x080039dd

08003350 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 faa4 	bl	80038b0 <HTS221_Initialize>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003372:	e004      	b.n	800337e <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003394:	2b01      	cmp	r3, #1
 8003396:	d111      	bne.n	80033bc <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f878 	bl	800348e <HTS221_HUM_Disable>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a8:	e00d      	b.n	80033c6 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f95f 	bl	800366e <HTS221_TEMP_Disable>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ba:	e004      	b.n	80033c6 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	331c      	adds	r3, #28
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fc28 	bl	8003c34 <hts221_device_id_get>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ee:	e000      	b.n	80033f2 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HTS221_GetCapabilities+0x44>)
 8003422:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4a06      	ldr	r2, [pc, #24]	; (8003440 <HTS221_GetCapabilities+0x44>)
 8003428:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	41480000 	.word	0x41480000

08003444 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e015      	b.n	8003486 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	331c      	adds	r3, #28
 8003468:	2101      	movs	r1, #1
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fbf3 	bl	8003c56 <hts221_power_on_set>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800347a:	e004      	b.n	8003486 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e015      	b.n	80034d0 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	331c      	adds	r3, #28
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fbce 	bl	8003c56 <hts221_power_on_set>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034c4:	e004      	b.n	80034d0 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f96f 	bl	80037c8 <HTS221_GetOutputDataRate>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003500:	ed97 0a00 	vldr	s0, [r7]
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f9a3 	bl	8003850 <HTS221_SetOutputDataRate>
 800350a:	4603      	mov	r3, r0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	331c      	adds	r3, #28
 8003522:	f107 020c 	add.w	r2, r7, #12
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fc58 	bl	8003dde <hts221_hum_adc_point_0_get>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003538:	e06b      	b.n	8003612 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f103 021c 	add.w	r2, r3, #28
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	3304      	adds	r3, #4
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f000 fbaa 	bl	8003ca2 <hts221_hum_rh_point_0_get>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003558:	e05b      	b.n	8003612 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f103 021c 	add.w	r2, r3, #28
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	3308      	adds	r3, #8
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 fc5c 	bl	8003e26 <hts221_hum_adc_point_1_get>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003578:	e04b      	b.n	8003612 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f103 021c 	add.w	r2, r3, #28
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	330c      	adds	r3, #12
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f000 fba8 	bl	8003cde <hts221_hum_rh_point_1_get>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8003594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003598:	e03b      	b.n	8003612 <HTS221_HUM_GetHumidity+0xfe>
 800359a:	2300      	movs	r3, #0
 800359c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	331c      	adds	r3, #28
 80035a2:	f107 021c 	add.w	r2, r7, #28
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fafd 	bl	8003ba8 <hts221_humidity_raw_get>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035b8:	e02b      	b.n	8003612 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80035ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	eeb0 0a67 	vmov.f32	s0, s15
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f99a 	bl	8003908 <Linear_Interpolation>
 80035d4:	eef0 7a40 	vmov.f32	s15, s0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ec:	d503      	bpl.n	80035f6 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800361c <HTS221_HUM_GetHumidity+0x108>
 8003600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	dd02      	ble.n	8003610 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <HTS221_HUM_GetHumidity+0x10c>)
 800360e:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	42c80000 	.word	0x42c80000
 8003620:	42c80000 	.word	0x42c80000

08003624 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e015      	b.n	8003666 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	331c      	adds	r3, #28
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fb03 	bl	8003c56 <hts221_power_on_set>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800365a:	e004      	b.n	8003666 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e015      	b.n	80036b0 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	331c      	adds	r3, #28
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fade 	bl	8003c56 <hts221_power_on_set>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036a4:	e004      	b.n	80036b0 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f87f 	bl	80037c8 <HTS221_GetOutputDataRate>
 80036ca:	4603      	mov	r3, r0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80036e0:	ed97 0a00 	vldr	s0, [r7]
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8b3 	bl	8003850 <HTS221_SetOutputDataRate>
 80036ea:	4603      	mov	r3, r0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	331c      	adds	r3, #28
 8003702:	f107 020c 	add.w	r2, r7, #12
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fbb0 	bl	8003e6e <hts221_temp_adc_point_0_get>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003718:	e052      	b.n	80037c0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f103 021c 	add.w	r2, r3, #28
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f000 faf6 	bl	8003d1a <hts221_temp_deg_point_0_get>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003738:	e042      	b.n	80037c0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 021c 	add.w	r2, r3, #28
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	3308      	adds	r3, #8
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f000 fbb4 	bl	8003eb6 <hts221_temp_adc_point_1_get>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003758:	e032      	b.n	80037c0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 021c 	add.w	r2, r3, #28
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	330c      	adds	r3, #12
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f000 fb07 	bl	8003d7c <hts221_temp_deg_point_1_get>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003778:	e022      	b.n	80037c0 <HTS221_TEMP_GetTemperature+0xcc>
 800377a:	2300      	movs	r3, #0
 800377c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	331c      	adds	r3, #28
 8003782:	f107 021c 	add.w	r2, r7, #28
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fa30 	bl	8003bee <hts221_temperature_raw_get>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003798:	e012      	b.n	80037c0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800379a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a6:	f107 030c 	add.w	r3, r7, #12
 80037aa:	eeb0 0a67 	vmov.f32	s0, s15
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f8aa 	bl	8003908 <Linear_Interpolation>
 80037b4:	eef0 7a40 	vmov.f32	s15, s0
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	331c      	adds	r3, #28
 80037da:	f107 020b 	add.w	r2, r7, #11
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f983 	bl	8003aec <hts221_data_rate_get>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f0:	e025      	b.n	800383e <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80037f2:	7afb      	ldrb	r3, [r7, #11]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d81d      	bhi.n	8003834 <HTS221_GetOutputDataRate+0x6c>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <HTS221_GetOutputDataRate+0x38>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003811 	.word	0x08003811
 8003804:	0800381b 	.word	0x0800381b
 8003808:	08003825 	.word	0x08003825
 800380c:	0800382d 	.word	0x0800382d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
      break;
 8003818:	e010      	b.n	800383c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003820:	601a      	str	r2, [r3, #0]
      break;
 8003822:	e00b      	b.n	800383c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4a08      	ldr	r2, [pc, #32]	; (8003848 <HTS221_GetOutputDataRate+0x80>)
 8003828:	601a      	str	r2, [r3, #0]
      break;
 800382a:	e007      	b.n	800383c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4a07      	ldr	r2, [pc, #28]	; (800384c <HTS221_GetOutputDataRate+0x84>)
 8003830:	601a      	str	r2, [r3, #0]
      break;
 8003832:	e003      	b.n	800383c <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003838:	60fb      	str	r3, [r7, #12]
      break;
 800383a:	bf00      	nop
  }

  return ret;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40e00000 	.word	0x40e00000
 800384c:	41480000 	.word	0x41480000

08003850 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800385c:	edd7 7a00 	vldr	s15, [r7]
 8003860:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386c:	d801      	bhi.n	8003872 <HTS221_SetOutputDataRate+0x22>
 800386e:	2301      	movs	r3, #1
 8003870:	e00b      	b.n	800388a <HTS221_SetOutputDataRate+0x3a>
 8003872:	edd7 7a00 	vldr	s15, [r7]
 8003876:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800387a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	d801      	bhi.n	8003888 <HTS221_SetOutputDataRate+0x38>
 8003884:	2302      	movs	r3, #2
 8003886:	e000      	b.n	800388a <HTS221_SetOutputDataRate+0x3a>
 8003888:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800388a:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	331c      	adds	r3, #28
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f902 	bl	8003a9e <hts221_data_rate_set>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038a4:	e000      	b.n	80038a8 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	331c      	adds	r3, #28
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f9c9 	bl	8003c56 <hts221_power_on_set>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038ce:	e017      	b.n	8003900 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	331c      	adds	r3, #28
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f940 	bl	8003b5c <hts221_block_data_update_set>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e6:	e00b      	b.n	8003900 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80038e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ffaf 	bl	8003850 <HTS221_SetOutputDataRate>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038fc:	e000      	b.n	8003900 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	ed93 7a03 	vldr	s14, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003920:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003924:	edd7 7a00 	vldr	s15, [r7]
 8003928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	edd3 7a01 	vldr	s15, [r3, #4]
 8003938:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	ed93 6a00 	vldr	s12, [r3]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	edd3 7a03 	vldr	s15, [r3, #12]
 8003948:	ee66 7a27 	vmul.f32	s15, s12, s15
 800394c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	edd3 6a02 	vldr	s13, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003964:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003968:	eef0 7a66 	vmov.f32	s15, s13
}
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800397a:	b590      	push	{r4, r7, lr}
 800397c:	b087      	sub	sp, #28
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	461a      	mov	r2, r3
 8003986:	460b      	mov	r3, r1
 8003988:	72fb      	strb	r3, [r7, #11]
 800398a:	4613      	mov	r3, r2
 800398c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	695c      	ldr	r4, [r3, #20]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	7b1b      	ldrb	r3, [r3, #12]
 80039a2:	b298      	uxth	r0, r3
 80039a4:	7afb      	ldrb	r3, [r7, #11]
 80039a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	b299      	uxth	r1, r3
 80039ae:	893b      	ldrh	r3, [r7, #8]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	47a0      	blx	r4
 80039b4:	4603      	mov	r3, r0
 80039b6:	e00d      	b.n	80039d4 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	695c      	ldr	r4, [r3, #20]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	7b1b      	ldrb	r3, [r3, #12]
 80039c0:	b298      	uxth	r0, r3
 80039c2:	7afb      	ldrb	r3, [r7, #11]
 80039c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	b299      	uxth	r1, r3
 80039cc:	893b      	ldrh	r3, [r7, #8]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	47a0      	blx	r4
 80039d2:	4603      	mov	r3, r0
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}

080039dc <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	461a      	mov	r2, r3
 80039e8:	460b      	mov	r3, r1
 80039ea:	72fb      	strb	r3, [r7, #11]
 80039ec:	4613      	mov	r3, r2
 80039ee:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10e      	bne.n	8003a1a <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	691c      	ldr	r4, [r3, #16]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	7b1b      	ldrb	r3, [r3, #12]
 8003a04:	b298      	uxth	r0, r3
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	b299      	uxth	r1, r3
 8003a10:	893b      	ldrh	r3, [r7, #8]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	47a0      	blx	r4
 8003a16:	4603      	mov	r3, r0
 8003a18:	e00d      	b.n	8003a36 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	691c      	ldr	r4, [r3, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	7b1b      	ldrb	r3, [r3, #12]
 8003a22:	b298      	uxth	r0, r3
 8003a24:	7afb      	ldrb	r3, [r7, #11]
 8003a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	b299      	uxth	r1, r3
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	47a0      	blx	r4
 8003a34:	4603      	mov	r3, r0
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd90      	pop	{r4, r7, pc}

08003a3e <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8003a3e:	b590      	push	{r4, r7, lr}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	72fb      	strb	r3, [r7, #11]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685c      	ldr	r4, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6898      	ldr	r0, [r3, #8]
 8003a5a:	893b      	ldrh	r3, [r7, #8]
 8003a5c:	7af9      	ldrb	r1, [r7, #11]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	47a0      	blx	r4
 8003a62:	6178      	str	r0, [r7, #20]
  return ret;
 8003a64:	697b      	ldr	r3, [r7, #20]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}

08003a6e <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003a6e:	b590      	push	{r4, r7, lr}
 8003a70:	b087      	sub	sp, #28
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	72fb      	strb	r3, [r7, #11]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6898      	ldr	r0, [r3, #8]
 8003a8a:	893b      	ldrh	r3, [r7, #8]
 8003a8c:	7af9      	ldrb	r1, [r7, #11]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	47a0      	blx	r4
 8003a92:	6178      	str	r0, [r7, #20]
  return ret;
 8003a94:	697b      	ldr	r3, [r7, #20]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}

08003a9e <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003aaa:	f107 0208 	add.w	r2, r7, #8
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffc3 	bl	8003a3e <hts221_read_reg>
 8003ab8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	7a3b      	ldrb	r3, [r7, #8]
 8003aca:	f362 0301 	bfi	r3, r2, #0, #2
 8003ace:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003ad0:	f107 0208 	add.w	r2, r7, #8
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	2120      	movs	r1, #32
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ffc8 	bl	8003a6e <hts221_write_reg>
 8003ade:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003af6:	f107 0208 	add.w	r2, r7, #8
 8003afa:	2301      	movs	r3, #1
 8003afc:	2120      	movs	r1, #32
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff9d 	bl	8003a3e <hts221_read_reg>
 8003b04:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003b06:	7a3b      	ldrb	r3, [r7, #8]
 8003b08:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d81a      	bhi.n	8003b48 <hts221_data_rate_get+0x5c>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <hts221_data_rate_get+0x2c>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b31 	.word	0x08003b31
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b41 	.word	0x08003b41
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	e00f      	b.n	8003b50 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	e00b      	b.n	8003b50 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	e007      	b.n	8003b50 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2203      	movs	r2, #3
 8003b44:	701a      	strb	r2, [r3, #0]
      break;
 8003b46:	e003      	b.n	8003b50 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	701a      	strb	r2, [r3, #0]
      break;
 8003b4e:	bf00      	nop
  }

  return ret;
 8003b50:	68fb      	ldr	r3, [r7, #12]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003b68:	f107 0208 	add.w	r2, r7, #8
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	2120      	movs	r1, #32
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff64 	bl	8003a3e <hts221_read_reg>
 8003b76:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	7a3b      	ldrb	r3, [r7, #8]
 8003b88:	f362 0382 	bfi	r3, r2, #2, #1
 8003b8c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003b8e:	f107 0208 	add.w	r2, r7, #8
 8003b92:	2301      	movs	r3, #1
 8003b94:	2120      	movs	r1, #32
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ff69 	bl	8003a6e <hts221_write_reg>
 8003b9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003bb2:	f107 0208 	add.w	r2, r7, #8
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	2128      	movs	r1, #40	; 0x28
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ff3f 	bl	8003a3e <hts221_read_reg>
 8003bc0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003bc2:	7a7b      	ldrb	r3, [r7, #9]
 8003bc4:	b21a      	sxth	r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	7a3b      	ldrb	r3, [r7, #8]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	801a      	strh	r2, [r3, #0]
  return ret;
 8003be4:	68fb      	ldr	r3, [r7, #12]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003bf8:	f107 0208 	add.w	r2, r7, #8
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	212a      	movs	r1, #42	; 0x2a
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff1c 	bl	8003a3e <hts221_read_reg>
 8003c06:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003c08:	7a7b      	ldrb	r3, [r7, #9]
 8003c0a:	b21a      	sxth	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	7a3b      	ldrb	r3, [r7, #8]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4413      	add	r3, r2
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	b21a      	sxth	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	801a      	strh	r2, [r3, #0]
  return ret;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003c3e:	2301      	movs	r3, #1
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	210f      	movs	r1, #15
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fefa 	bl	8003a3e <hts221_read_reg>
 8003c4a:	60f8      	str	r0, [r7, #12]
  return ret;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003c62:	f107 0208 	add.w	r2, r7, #8
 8003c66:	2301      	movs	r3, #1
 8003c68:	2120      	movs	r1, #32
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fee7 	bl	8003a3e <hts221_read_reg>
 8003c70:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <hts221_power_on_set+0x42>
    reg.pd = val;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	7a3b      	ldrb	r3, [r7, #8]
 8003c82:	f362 13c7 	bfi	r3, r2, #7, #1
 8003c86:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003c88:	f107 0208 	add.w	r2, r7, #8
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	2120      	movs	r1, #32
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff feec 	bl	8003a6e <hts221_write_reg>
 8003c96:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c98:	68fb      	ldr	r3, [r7, #12]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003cac:	f107 020b 	add.w	r2, r7, #11
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	2130      	movs	r1, #48	; 0x30
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fec2 	bl	8003a3e <hts221_read_reg>
 8003cba:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cc6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003ce8:	f107 020b 	add.w	r2, r7, #11
 8003cec:	2301      	movs	r3, #1
 8003cee:	2131      	movs	r1, #49	; 0x31
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fea4 	bl	8003a3e <hts221_read_reg>
 8003cf6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d02:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003d10:	68fb      	ldr	r3, [r7, #12]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003d24:	f107 020f 	add.w	r2, r7, #15
 8003d28:	2301      	movs	r3, #1
 8003d2a:	2132      	movs	r1, #50	; 0x32
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fe86 	bl	8003a3e <hts221_read_reg>
 8003d32:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11b      	bne.n	8003d72 <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003d3a:	f107 0210 	add.w	r2, r7, #16
 8003d3e:	2301      	movs	r3, #1
 8003d40:	2135      	movs	r1, #53	; 0x35
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fe7b 	bl	8003a3e <hts221_read_reg>
 8003d48:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003d4a:	7c3b      	ldrb	r3, [r7, #16]
 8003d4c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d64:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003d72:	697b      	ldr	r3, [r7, #20]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003d86:	f107 020f 	add.w	r2, r7, #15
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	2133      	movs	r1, #51	; 0x33
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fe55 	bl	8003a3e <hts221_read_reg>
 8003d94:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11b      	bne.n	8003dd4 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003d9c:	f107 0210 	add.w	r2, r7, #16
 8003da0:	2301      	movs	r3, #1
 8003da2:	2135      	movs	r1, #53	; 0x35
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fe4a 	bl	8003a3e <hts221_read_reg>
 8003daa:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003dac:	7c3b      	ldrb	r3, [r7, #16]
 8003dae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003dd4:	697b      	ldr	r3, [r7, #20]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003de8:	f107 0208 	add.w	r2, r7, #8
 8003dec:	2302      	movs	r3, #2
 8003dee:	2136      	movs	r1, #54	; 0x36
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fe24 	bl	8003a3e <hts221_read_reg>
 8003df6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003df8:	7a7b      	ldrb	r3, [r7, #9]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	7a3b      	ldrb	r3, [r7, #8]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003e0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003e30:	f107 0208 	add.w	r2, r7, #8
 8003e34:	2302      	movs	r3, #2
 8003e36:	213a      	movs	r1, #58	; 0x3a
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fe00 	bl	8003a3e <hts221_read_reg>
 8003e3e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003e40:	7a7b      	ldrb	r3, [r7, #9]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	7a3b      	ldrb	r3, [r7, #8]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003e52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003e78:	f107 0208 	add.w	r2, r7, #8
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	213c      	movs	r1, #60	; 0x3c
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fddc 	bl	8003a3e <hts221_read_reg>
 8003e86:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003e88:	7a7b      	ldrb	r3, [r7, #9]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	7a3b      	ldrb	r3, [r7, #8]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003e9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003eac:	68fb      	ldr	r3, [r7, #12]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003ec0:	f107 0208 	add.w	r2, r7, #8
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	213e      	movs	r1, #62	; 0x3e
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fdb8 	bl	8003a3e <hts221_read_reg>
 8003ece:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003ed0:	7a7b      	ldrb	r3, [r7, #9]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	7a3b      	ldrb	r3, [r7, #8]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003ee2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e04d      	b.n	8003fb8 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7b1a      	ldrb	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <LPS22HB_RegisterBusIO+0xc4>)
 8003f58:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <LPS22HB_RegisterBusIO+0xc8>)
 8003f5e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e020      	b.n	8003fb8 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4798      	blx	r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e016      	b.n	8003fb8 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d112      	bne.n	8003fb8 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10d      	bne.n	8003fb8 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2110      	movs	r1, #16
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9df 	bl	800436a <LPS22HB_Write_Reg>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fb6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	0800462b 	.word	0x0800462b
 8003fc8:	080046b1 	.word	0x080046b1

08003fcc <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 faca 	bl	8004578 <LPS22HB_Initialize>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fee:	e004      	b.n	8003ffa <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004010:	2b01      	cmp	r3, #1
 8004012:	d111      	bne.n	8004038 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f877 	bl	8004108 <LPS22HB_PRESS_Disable>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004024:	e00d      	b.n	8004042 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f918 	bl	800425c <LPS22HB_TEMP_Disable>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004036:	e004      	b.n	8004042 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	331c      	adds	r3, #28
 8004058:	6839      	ldr	r1, [r7, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fcd0 	bl	8004a00 <lps22hb_device_id_get>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8004066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800406a:	e000      	b.n	800406e <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2200      	movs	r2, #0
 8004086:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2201      	movs	r2, #1
 800408c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4a05      	ldr	r2, [pc, #20]	; (80040bc <LPS22HB_GetCapabilities+0x44>)
 80040a6:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4a04      	ldr	r2, [pc, #16]	; (80040bc <LPS22HB_GetCapabilities+0x44>)
 80040ac:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	42960000 	.word	0x42960000

080040c0 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e014      	b.n	8004100 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f103 021c 	add.w	r2, r3, #28
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 fbd5 	bl	8004894 <lps22hb_data_rate_set>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f4:	e004      	b.n	8004100 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e024      	b.n	8004168 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11a      	bne.n	800415e <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 021c 	add.w	r2, r3, #28
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	332b      	adds	r3, #43	; 0x2b
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f000 fbd3 	bl	80048e0 <lps22hb_data_rate_get>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004144:	e010      	b.n	8004168 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	331c      	adds	r3, #28
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fba1 	bl	8004894 <lps22hb_data_rate_set>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800415c:	e004      	b.n	8004168 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f90f 	bl	80043a0 <LPS22HB_GetOutputDataRate>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d106      	bne.n	80041b0 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80041a2:	ed97 0a00 	vldr	s0, [r7]
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f94e 	bl	8004448 <LPS22HB_SetOutputDataRate_When_Enabled>
 80041ac:	4603      	mov	r3, r0
 80041ae:	e005      	b.n	80041bc <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80041b0:	ed97 0a00 	vldr	s0, [r7]
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f99f 	bl	80044f8 <LPS22HB_SetOutputDataRate_When_Disabled>
 80041ba:	4603      	mov	r3, r0
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80041ce:	f107 030c 	add.w	r3, r7, #12
 80041d2:	2204      	movs	r2, #4
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f00b fefc 	bl	800ffd4 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	331c      	adds	r3, #28
 80041e0:	f107 020c 	add.w	r2, r7, #12
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fbbe 	bl	8004968 <lps22hb_pressure_raw_get>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f6:	e009      	b.n	800420c <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 facc 	bl	8004798 <lps22hb_from_lsb_to_hpa>
 8004200:	eef0 7a40 	vmov.f32	s15, s0
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e014      	b.n	8004254 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f103 021c 	add.w	r2, r3, #28
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f000 fb2b 	bl	8004894 <lps22hb_data_rate_set>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004248:	e004      	b.n	8004254 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e024      	b.n	80042bc <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004278:	2b00      	cmp	r3, #0
 800427a:	d11a      	bne.n	80042b2 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f103 021c 	add.w	r2, r3, #28
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	332b      	adds	r3, #43	; 0x2b
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f000 fb29 	bl	80048e0 <lps22hb_data_rate_get>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004298:	e010      	b.n	80042bc <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	331c      	adds	r3, #28
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 faf7 	bl	8004894 <lps22hb_data_rate_set>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b0:	e004      	b.n	80042bc <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80042ce:	6839      	ldr	r1, [r7, #0]
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f865 	bl	80043a0 <LPS22HB_GetOutputDataRate>
 80042d6:	4603      	mov	r3, r0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d106      	bne.n	8004304 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80042f6:	ed97 0a00 	vldr	s0, [r7]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8a4 	bl	8004448 <LPS22HB_SetOutputDataRate_When_Enabled>
 8004300:	4603      	mov	r3, r0
 8004302:	e005      	b.n	8004310 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004304:	ed97 0a00 	vldr	s0, [r7]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8f5 	bl	80044f8 <LPS22HB_SetOutputDataRate_When_Disabled>
 800430e:	4603      	mov	r3, r0
  }
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004322:	f107 030c 	add.w	r3, r7, #12
 8004326:	2202      	movs	r2, #2
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f00b fe52 	bl	800ffd4 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	331c      	adds	r3, #28
 8004334:	f107 020c 	add.w	r2, r7, #12
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fb3d 	bl	80049ba <lps22hb_temperature_raw_get>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800434a:	e00a      	b.n	8004362 <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 800434c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fa39 	bl	80047c8 <lps22hb_from_lsb_to_degc>
 8004356:	eef0 7a40 	vmov.f32	s15, s0
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	70fb      	strb	r3, [r7, #3]
 8004376:	4613      	mov	r3, r2
 8004378:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f103 001c 	add.w	r0, r3, #28
 8004380:	1cba      	adds	r2, r7, #2
 8004382:	78f9      	ldrb	r1, [r7, #3]
 8004384:	2301      	movs	r3, #1
 8004386:	f000 f9ee 	bl	8004766 <lps22hb_write_reg>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004394:	e000      	b.n	8004398 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	331c      	adds	r3, #28
 80043b2:	f107 020b 	add.w	r2, r7, #11
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fa91 	bl	80048e0 <lps22hb_data_rate_get>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c8:	e031      	b.n	800442e <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80043ca:	7afb      	ldrb	r3, [r7, #11]
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d829      	bhi.n	8004424 <LPS22HB_GetOutputDataRate+0x84>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <LPS22HB_GetOutputDataRate+0x38>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043f1 	.word	0x080043f1
 80043dc:	080043fb 	.word	0x080043fb
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800441d 	.word	0x0800441d
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
      break;
 80043f8:	e018      	b.n	800442c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004400:	601a      	str	r2, [r3, #0]
      break;
 8004402:	e013      	b.n	800442c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <LPS22HB_GetOutputDataRate+0x98>)
 8004408:	601a      	str	r2, [r3, #0]
      break;
 800440a:	e00f      	b.n	800442c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4a0b      	ldr	r2, [pc, #44]	; (800443c <LPS22HB_GetOutputDataRate+0x9c>)
 8004410:	601a      	str	r2, [r3, #0]
      break;
 8004412:	e00b      	b.n	800442c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <LPS22HB_GetOutputDataRate+0xa0>)
 8004418:	601a      	str	r2, [r3, #0]
      break;
 800441a:	e007      	b.n	800442c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <LPS22HB_GetOutputDataRate+0xa4>)
 8004420:	601a      	str	r2, [r3, #0]
      break;
 8004422:	e003      	b.n	800442c <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004428:	60fb      	str	r3, [r7, #12]
      break;
 800442a:	bf00      	nop
  }

  return ret;
 800442c:	68fb      	ldr	r3, [r7, #12]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	41200000 	.word	0x41200000
 800443c:	41c80000 	.word	0x41c80000
 8004440:	42480000 	.word	0x42480000
 8004444:	42960000 	.word	0x42960000

08004448 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004454:	edd7 7a00 	vldr	s15, [r7]
 8004458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800445c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	d801      	bhi.n	800446a <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8004466:	2301      	movs	r3, #1
 8004468:	e021      	b.n	80044ae <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800446a:	edd7 7a00 	vldr	s15, [r7]
 800446e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	d801      	bhi.n	8004480 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 800447c:	2302      	movs	r3, #2
 800447e:	e016      	b.n	80044ae <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004480:	edd7 7a00 	vldr	s15, [r7]
 8004484:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	d801      	bhi.n	8004496 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8004492:	2303      	movs	r3, #3
 8004494:	e00b      	b.n	80044ae <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004496:	edd7 7a00 	vldr	s15, [r7]
 800449a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80044f4 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 800449e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a6:	d801      	bhi.n	80044ac <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80044a8:	2304      	movs	r3, #4
 80044aa:	e000      	b.n	80044ae <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80044ac:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80044ae:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	331c      	adds	r3, #28
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f9eb 	bl	8004894 <lps22hb_data_rate_set>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 80044c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c8:	e00f      	b.n	80044ea <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f103 021c 	add.w	r2, r3, #28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	332b      	adds	r3, #43	; 0x2b
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f000 fa02 	bl	80048e0 <lps22hb_data_rate_get>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044e6:	e000      	b.n	80044ea <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	42480000 	.word	0x42480000

080044f8 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004504:	edd7 7a00 	vldr	s15, [r7]
 8004508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800450c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004514:	d801      	bhi.n	800451a <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8004516:	2301      	movs	r3, #1
 8004518:	e021      	b.n	800455e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800451a:	edd7 7a00 	vldr	s15, [r7]
 800451e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452a:	d801      	bhi.n	8004530 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 800452c:	2302      	movs	r3, #2
 800452e:	e016      	b.n	800455e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004530:	edd7 7a00 	vldr	s15, [r7]
 8004534:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	d801      	bhi.n	8004546 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8004542:	2303      	movs	r3, #3
 8004544:	e00b      	b.n	800455e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004546:	edd7 7a00 	vldr	s15, [r7]
 800454a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004574 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 800454e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d801      	bhi.n	800455c <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004558:	2304      	movs	r3, #4
 800455a:	e000      	b.n	800455e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800455c:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	42480000 	.word	0x42480000

08004578 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	331c      	adds	r3, #28
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fa71 	bl	8004a6e <lps22hb_low_power_set>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8004592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004596:	e044      	b.n	8004622 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	331c      	adds	r3, #28
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f978 	bl	8004894 <lps22hb_data_rate_set>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ae:	e038      	b.n	8004622 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	331c      	adds	r3, #28
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f946 	bl	8004848 <lps22hb_low_pass_filter_mode_set>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c6:	e02c      	b.n	8004622 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	331c      	adds	r3, #28
 80045cc:	2101      	movs	r1, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f914 	bl	80047fc <lps22hb_block_data_update_set>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045de:	e020      	b.n	8004622 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	331c      	adds	r3, #28
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fa89 	bl	8004b06 <lps22hb_auto_add_inc_set>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00e      	beq.n	8004618 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045fe:	e010      	b.n	8004622 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	331c      	adds	r3, #28
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fa7d 	bl	8004b06 <lps22hb_auto_add_inc_set>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004616:	e004      	b.n	8004622 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2203      	movs	r2, #3
 800461c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800462a:	b590      	push	{r4, r7, lr}
 800462c:	b089      	sub	sp, #36	; 0x24
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	461a      	mov	r2, r3
 8004636:	460b      	mov	r3, r1
 8004638:	72fb      	strb	r3, [r7, #11]
 800463a:	4613      	mov	r3, r2
 800463c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d121      	bne.n	8004692 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800464e:	2300      	movs	r3, #0
 8004650:	83fb      	strh	r3, [r7, #30]
 8004652:	e018      	b.n	8004686 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	695c      	ldr	r4, [r3, #20]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	7b1b      	ldrb	r3, [r3, #12]
 800465c:	b298      	uxth	r0, r3
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	b29a      	uxth	r2, r3
 8004662:	8bfb      	ldrh	r3, [r7, #30]
 8004664:	4413      	add	r3, r2
 8004666:	b299      	uxth	r1, r3
 8004668:	8bfb      	ldrh	r3, [r7, #30]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	441a      	add	r2, r3
 800466e:	2301      	movs	r3, #1
 8004670:	47a0      	blx	r4
 8004672:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467e:	e013      	b.n	80046a8 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004680:	8bfb      	ldrh	r3, [r7, #30]
 8004682:	3301      	adds	r3, #1
 8004684:	83fb      	strh	r3, [r7, #30]
 8004686:	8bfa      	ldrh	r2, [r7, #30]
 8004688:	893b      	ldrh	r3, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d3e2      	bcc.n	8004654 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	e00a      	b.n	80046a8 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	695c      	ldr	r4, [r3, #20]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	7b1b      	ldrb	r3, [r3, #12]
 800469a:	b298      	uxth	r0, r3
 800469c:	7afb      	ldrb	r3, [r7, #11]
 800469e:	b299      	uxth	r1, r3
 80046a0:	893b      	ldrh	r3, [r7, #8]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	47a0      	blx	r4
 80046a6:	4603      	mov	r3, r0
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3724      	adds	r7, #36	; 0x24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd90      	pop	{r4, r7, pc}

080046b0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	460b      	mov	r3, r1
 80046be:	72fb      	strb	r3, [r7, #11]
 80046c0:	4613      	mov	r3, r2
 80046c2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d121      	bne.n	8004718 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	83fb      	strh	r3, [r7, #30]
 80046d8:	e018      	b.n	800470c <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	691c      	ldr	r4, [r3, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	7b1b      	ldrb	r3, [r3, #12]
 80046e2:	b298      	uxth	r0, r3
 80046e4:	7afb      	ldrb	r3, [r7, #11]
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	8bfb      	ldrh	r3, [r7, #30]
 80046ea:	4413      	add	r3, r2
 80046ec:	b299      	uxth	r1, r3
 80046ee:	8bfb      	ldrh	r3, [r7, #30]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	441a      	add	r2, r3
 80046f4:	2301      	movs	r3, #1
 80046f6:	47a0      	blx	r4
 80046f8:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004704:	e013      	b.n	800472e <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004706:	8bfb      	ldrh	r3, [r7, #30]
 8004708:	3301      	adds	r3, #1
 800470a:	83fb      	strh	r3, [r7, #30]
 800470c:	8bfa      	ldrh	r2, [r7, #30]
 800470e:	893b      	ldrh	r3, [r7, #8]
 8004710:	429a      	cmp	r2, r3
 8004712:	d3e2      	bcc.n	80046da <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	e00a      	b.n	800472e <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	691c      	ldr	r4, [r3, #16]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	7b1b      	ldrb	r3, [r3, #12]
 8004720:	b298      	uxth	r0, r3
 8004722:	7afb      	ldrb	r3, [r7, #11]
 8004724:	b299      	uxth	r1, r3
 8004726:	893b      	ldrh	r3, [r7, #8]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	47a0      	blx	r4
 800472c:	4603      	mov	r3, r0
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3724      	adds	r7, #36	; 0x24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd90      	pop	{r4, r7, pc}

08004736 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004736:	b590      	push	{r4, r7, lr}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	461a      	mov	r2, r3
 8004742:	460b      	mov	r3, r1
 8004744:	72fb      	strb	r3, [r7, #11]
 8004746:	4613      	mov	r3, r2
 8004748:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685c      	ldr	r4, [r3, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6898      	ldr	r0, [r3, #8]
 8004752:	893b      	ldrh	r3, [r7, #8]
 8004754:	7af9      	ldrb	r1, [r7, #11]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	47a0      	blx	r4
 800475a:	6178      	str	r0, [r7, #20]
  return ret;
 800475c:	697b      	ldr	r3, [r7, #20]
}
 800475e:	4618      	mov	r0, r3
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}

08004766 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004766:	b590      	push	{r4, r7, lr}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	461a      	mov	r2, r3
 8004772:	460b      	mov	r3, r1
 8004774:	72fb      	strb	r3, [r7, #11]
 8004776:	4613      	mov	r3, r2
 8004778:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681c      	ldr	r4, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6898      	ldr	r0, [r3, #8]
 8004782:	893b      	ldrh	r3, [r7, #8]
 8004784:	7af9      	ldrb	r1, [r7, #11]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	47a0      	blx	r4
 800478a:	6178      	str	r0, [r7, #20]
  return ret;
 800478c:	697b      	ldr	r3, [r7, #20]
}
 800478e:	4618      	mov	r0, r3
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd90      	pop	{r4, r7, pc}
	...

08004798 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80047c4 <lps22hb_from_lsb_to_hpa+0x2c>
 80047ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80047b6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	49800000 	.word	0x49800000

080047c8 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80047d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80047f8 <lps22hb_from_lsb_to_degc+0x30>
 80047e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80047ea:	eeb0 0a67 	vmov.f32	s0, s15
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	42c80000 	.word	0x42c80000

080047fc <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004808:	f107 0208 	add.w	r2, r7, #8
 800480c:	2301      	movs	r3, #1
 800480e:	2110      	movs	r1, #16
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ff90 	bl	8004736 <lps22hb_read_reg>
 8004816:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	b2da      	uxtb	r2, r3
 8004826:	7a3b      	ldrb	r3, [r7, #8]
 8004828:	f362 0341 	bfi	r3, r2, #1, #1
 800482c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800482e:	f107 0208 	add.w	r2, r7, #8
 8004832:	2301      	movs	r3, #1
 8004834:	2110      	movs	r1, #16
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff ff95 	bl	8004766 <lps22hb_write_reg>
 800483c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004854:	f107 0208 	add.w	r2, r7, #8
 8004858:	2301      	movs	r3, #1
 800485a:	2110      	movs	r1, #16
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ff6a 	bl	8004736 <lps22hb_read_reg>
 8004862:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10f      	bne.n	800488a <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	b2da      	uxtb	r2, r3
 8004872:	7a3b      	ldrb	r3, [r7, #8]
 8004874:	f362 0383 	bfi	r3, r2, #2, #2
 8004878:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800487a:	f107 0208 	add.w	r2, r7, #8
 800487e:	2301      	movs	r3, #1
 8004880:	2110      	movs	r1, #16
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ff6f 	bl	8004766 <lps22hb_write_reg>
 8004888:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80048a0:	f107 0208 	add.w	r2, r7, #8
 80048a4:	2301      	movs	r3, #1
 80048a6:	2110      	movs	r1, #16
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ff44 	bl	8004736 <lps22hb_read_reg>
 80048ae:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	7a3b      	ldrb	r3, [r7, #8]
 80048c0:	f362 1306 	bfi	r3, r2, #4, #3
 80048c4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80048c6:	f107 0208 	add.w	r2, r7, #8
 80048ca:	2301      	movs	r3, #1
 80048cc:	2110      	movs	r1, #16
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff49 	bl	8004766 <lps22hb_write_reg>
 80048d4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80048ea:	f107 0208 	add.w	r2, r7, #8
 80048ee:	2301      	movs	r3, #1
 80048f0:	2110      	movs	r1, #16
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ff1f 	bl	8004736 <lps22hb_read_reg>
 80048f8:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 80048fa:	7a3b      	ldrb	r3, [r7, #8]
 80048fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b05      	cmp	r3, #5
 8004904:	d826      	bhi.n	8004954 <lps22hb_data_rate_get+0x74>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <lps22hb_data_rate_get+0x2c>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004925 	.word	0x08004925
 8004910:	0800492d 	.word	0x0800492d
 8004914:	08004935 	.word	0x08004935
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
      break;
 800492a:	e017      	b.n	800495c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
      break;
 8004932:	e013      	b.n	800495c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]
      break;
 800493a:	e00f      	b.n	800495c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2203      	movs	r2, #3
 8004940:	701a      	strb	r2, [r3, #0]
      break;
 8004942:	e00b      	b.n	800495c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2204      	movs	r2, #4
 8004948:	701a      	strb	r2, [r3, #0]
      break;
 800494a:	e007      	b.n	800495c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2205      	movs	r2, #5
 8004950:	701a      	strb	r2, [r3, #0]
      break;
 8004952:	e003      	b.n	800495c <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
      break;
 800495a:	bf00      	nop
  }

  return ret;
 800495c:	68fb      	ldr	r3, [r7, #12]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop

08004968 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8004972:	f107 0208 	add.w	r2, r7, #8
 8004976:	2303      	movs	r3, #3
 8004978:	2128      	movs	r1, #40	; 0x28
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fedb 	bl	8004736 <lps22hb_read_reg>
 8004980:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004982:	7abb      	ldrb	r3, [r7, #10]
 8004984:	461a      	mov	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	7a7a      	ldrb	r2, [r7, #9]
 8004992:	441a      	add	r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	7a3a      	ldrb	r2, [r7, #8]
 80049a0:	441a      	add	r2, r3
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	601a      	str	r2, [r3, #0]
  return ret;
 80049b0:	68fb      	ldr	r3, [r7, #12]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 80049c4:	f107 0208 	add.w	r2, r7, #8
 80049c8:	2302      	movs	r3, #2
 80049ca:	212b      	movs	r1, #43	; 0x2b
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff feb2 	bl	8004736 <lps22hb_read_reg>
 80049d2:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80049d4:	7a7b      	ldrb	r3, [r7, #9]
 80049d6:	b21a      	sxth	r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	7a3b      	ldrb	r3, [r7, #8]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	b21a      	sxth	r2, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	801a      	strh	r2, [r3, #0]
  return ret;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	210f      	movs	r1, #15
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fe90 	bl	8004736 <lps22hb_read_reg>
 8004a16:	60f8      	str	r0, [r7, #12]
  return ret;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <lps22hb_boot_set>:
  * @param  val    Change the values of boot in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a2e:	f107 0208 	add.w	r2, r7, #8
 8004a32:	2301      	movs	r3, #1
 8004a34:	2111      	movs	r1, #17
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fe7d 	bl	8004736 <lps22hb_read_reg>
 8004a3c:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10f      	bne.n	8004a64 <lps22hb_boot_set+0x42>
    ctrl_reg2.boot = val;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	7a3b      	ldrb	r3, [r7, #8]
 8004a4e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004a52:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004a54:	f107 0208 	add.w	r2, r7, #8
 8004a58:	2301      	movs	r3, #1
 8004a5a:	2111      	movs	r1, #17
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fe82 	bl	8004766 <lps22hb_write_reg>
 8004a62:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8004a7a:	f107 0208 	add.w	r2, r7, #8
 8004a7e:	2301      	movs	r3, #1
 8004a80:	211a      	movs	r1, #26
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fe57 	bl	8004736 <lps22hb_read_reg>
 8004a88:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10f      	bne.n	8004ab0 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	7a3b      	ldrb	r3, [r7, #8]
 8004a9a:	f362 0300 	bfi	r3, r2, #0, #1
 8004a9e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8004aa0:	f107 0208 	add.w	r2, r7, #8
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	211a      	movs	r1, #26
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fe5c 	bl	8004766 <lps22hb_write_reg>
 8004aae:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <lps22hb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hb_i2c_dis_t val)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004ac6:	f107 0208 	add.w	r2, r7, #8
 8004aca:	2301      	movs	r3, #1
 8004acc:	2111      	movs	r1, #17
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fe31 	bl	8004736 <lps22hb_read_reg>
 8004ad4:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10f      	bne.n	8004afc <lps22hb_i2c_interface_set+0x42>
    ctrl_reg2.i2c_dis = (uint8_t)val;
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	7a3b      	ldrb	r3, [r7, #8]
 8004ae6:	f362 03c3 	bfi	r3, r2, #3, #1
 8004aea:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004aec:	f107 0208 	add.w	r2, r7, #8
 8004af0:	2301      	movs	r3, #1
 8004af2:	2111      	movs	r1, #17
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff fe36 	bl	8004766 <lps22hb_write_reg>
 8004afa:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004afc:	68fb      	ldr	r3, [r7, #12]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004b12:	f107 0208 	add.w	r2, r7, #8
 8004b16:	2301      	movs	r3, #1
 8004b18:	2111      	movs	r1, #17
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fe0b 	bl	8004736 <lps22hb_read_reg>
 8004b20:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	7a3b      	ldrb	r3, [r7, #8]
 8004b32:	f362 1304 	bfi	r3, r2, #4, #1
 8004b36:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8004b38:	f107 0208 	add.w	r2, r7, #8
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	2111      	movs	r1, #17
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fe10 	bl	8004766 <lps22hb_write_reg>
 8004b46:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004b48:	68fb      	ldr	r3, [r7, #12]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <BSP_LED_Init+0x94>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <BSP_LED_Init+0x94>)
 8004b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b68:	6593      	str	r3, [r2, #88]	; 0x58
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <BSP_LED_Init+0x94>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8004b76:	f004 f9cd 	bl	8008f14 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <BSP_LED_Init+0x44>
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <BSP_LED_Init+0x94>)
 8004b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b84:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <BSP_LED_Init+0x94>)
 8004b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b8c:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <BSP_LED_Init+0x94>)
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10b      	bne.n	8004bb6 <BSP_LED_Init+0x62>
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <BSP_LED_Init+0x94>)
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba2:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <BSP_LED_Init+0x94>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <BSP_LED_Init+0x94>)
 8004bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <BSP_LED_Init+0x98>)
 8004bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <BSP_LED_Init+0x9c>)
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	f107 0214 	add.w	r2, r7, #20
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fd96 	bl	800670c <HAL_GPIO_Init>
}
 8004be0:	bf00      	nop
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	08010e2c 	.word	0x08010e2c
 8004bf0:	20000078 	.word	0x20000078

08004bf4 <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10d      	bne.n	8004c20 <BSP_LED_On+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <BSP_LED_On+0x54>)
 8004c08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	4a0f      	ldr	r2, [pc, #60]	; (8004c4c <BSP_LED_On+0x58>)
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2201      	movs	r2, #1
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f002 f82d 	bl	8006c78 <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  }
}
 8004c1e:	e00f      	b.n	8004c40 <BSP_LED_On+0x4c>
  else if (Led == LEDSWD)
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d10c      	bne.n	8004c40 <BSP_LED_On+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	4a07      	ldr	r2, [pc, #28]	; (8004c48 <BSP_LED_On+0x54>)
 8004c2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	4a06      	ldr	r2, [pc, #24]	; (8004c4c <BSP_LED_On+0x58>)
 8004c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f002 f81c 	bl	8006c78 <HAL_GPIO_WritePin>
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000078 	.word	0x20000078
 8004c4c:	08010e2c 	.word	0x08010e2c

08004c50 <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10d      	bne.n	8004c7c <BSP_LED_Off+0x2c>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	4a10      	ldr	r2, [pc, #64]	; (8004ca4 <BSP_LED_Off+0x54>)
 8004c64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <BSP_LED_Off+0x58>)
 8004c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2200      	movs	r2, #0
 8004c74:	4619      	mov	r1, r3
 8004c76:	f001 ffff 	bl	8006c78 <HAL_GPIO_WritePin>
  }
  else if (Led == LEDSWD)
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
  }
}
 8004c7a:	e00f      	b.n	8004c9c <BSP_LED_Off+0x4c>
  else if (Led == LEDSWD)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10c      	bne.n	8004c9c <BSP_LED_Off+0x4c>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <BSP_LED_Off+0x54>)
 8004c86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <BSP_LED_Off+0x58>)
 8004c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2201      	movs	r2, #1
 8004c96:	4619      	mov	r1, r3
 8004c98:	f001 ffee 	bl	8006c78 <HAL_GPIO_WritePin>
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000078 	.word	0x20000078
 8004ca8:	08010e2c 	.word	0x08010e2c

08004cac <Sensor_IO_SPI_CS_Init_All>:
  * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
  * @param  None
  * @retval HAL_StatusTypeDef HAL Status
  */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 8004cb2:	4b44      	ldr	r3, [pc, #272]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	4a43      	ldr	r2, [pc, #268]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cbe:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 8004cca:	4b3e      	ldr	r3, [pc, #248]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8004ce2:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	4a37      	ldr	r2, [pc, #220]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cee:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8004cfa:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfe:	4a31      	ldr	r2, [pc, #196]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d06:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <Sensor_IO_SPI_CS_Init_All+0x118>)
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004d12:	2201      	movs	r2, #1
 8004d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d18:	482b      	ldr	r0, [pc, #172]	; (8004dc8 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004d1a:	f001 ffad 	bl	8006c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2110      	movs	r1, #16
 8004d22:	482a      	ldr	r0, [pc, #168]	; (8004dcc <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004d24:	f001 ffa8 	bl	8006c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004d28:	2201      	movs	r2, #1
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	4826      	ldr	r0, [pc, #152]	; (8004dc8 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004d2e:	f001 ffa3 	bl	8006c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004d32:	2201      	movs	r2, #1
 8004d34:	2108      	movs	r1, #8
 8004d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d3a:	f001 ff9d 	bl	8006c78 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 8004d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8004d50:	f107 0314 	add.w	r3, r7, #20
 8004d54:	4619      	mov	r1, r3
 8004d56:	481c      	ldr	r0, [pc, #112]	; (8004dc8 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004d58:	f001 fcd8 	bl	800670c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d62:	4819      	ldr	r0, [pc, #100]	; (8004dc8 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004d64:	f001 ff88 	bl	8006c78 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8004d68:	2310      	movs	r3, #16
 8004d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4619      	mov	r1, r3
 8004d72:	4816      	ldr	r0, [pc, #88]	; (8004dcc <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004d74:	f001 fcca 	bl	800670c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004d78:	2201      	movs	r2, #1
 8004d7a:	2110      	movs	r1, #16
 8004d7c:	4813      	ldr	r0, [pc, #76]	; (8004dcc <Sensor_IO_SPI_CS_Init_All+0x120>)
 8004d7e:	f001 ff7b 	bl	8006c78 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 8004d82:	2302      	movs	r3, #2
 8004d84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 8004d86:	f107 0314 	add.w	r3, r7, #20
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004d8e:	f001 fcbd 	bl	800670c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004d92:	2201      	movs	r2, #1
 8004d94:	2102      	movs	r1, #2
 8004d96:	480c      	ldr	r0, [pc, #48]	; (8004dc8 <Sensor_IO_SPI_CS_Init_All+0x11c>)
 8004d98:	f001 ff6e 	bl	8006c78 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004daa:	f001 fcaf 	bl	800670c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004dae:	2201      	movs	r2, #1
 8004db0:	2108      	movs	r1, #8
 8004db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004db6:	f001 ff5f 	bl	8006c78 <HAL_GPIO_WritePin>

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3728      	adds	r7, #40	; 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	48000400 	.word	0x48000400
 8004dcc:	48000800 	.word	0x48000800

08004dd0 <BSP_I2C3_Init>:
/**
  * @brief  Initialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_Init(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
  
  hbusi2c3.Instance  = I2C3;
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <BSP_I2C3_Init+0x44>)
 8004ddc:	4a0e      	ldr	r2, [pc, #56]	; (8004e18 <BSP_I2C3_Init+0x48>)
 8004dde:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&hbusi2c3) == HAL_I2C_STATE_RESET)
 8004de0:	480c      	ldr	r0, [pc, #48]	; (8004e14 <BSP_I2C3_Init+0x44>)
 8004de2:	f002 fb1c 	bl	800741e <HAL_I2C_GetState>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10e      	bne.n	8004e0a <BSP_I2C3_Init+0x3a>
  {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C3_MspInit(&hbusi2c3);
 8004dec:	4809      	ldr	r0, [pc, #36]	; (8004e14 <BSP_I2C3_Init+0x44>)
 8004dee:	f000 f9ef 	bl	80051d0 <I2C3_MspInit>
        }
      }
    #endif

    /* Init the I2C */
    if(MX_I2C3_Init(&hbusi2c3) != HAL_OK)
 8004df2:	4808      	ldr	r0, [pc, #32]	; (8004e14 <BSP_I2C3_Init+0x44>)
 8004df4:	f000 f9c8 	bl	8005188 <MX_I2C3_Init>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <BSP_I2C3_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004dfe:	f06f 0307 	mvn.w	r3, #7
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	e001      	b.n	8004e0a <BSP_I2C3_Init+0x3a>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
    }	
  }

  return ret;
 8004e0a:	687b      	ldr	r3, [r7, #4]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	2000277c 	.word	0x2000277c
 8004e18:	40005c00 	.word	0x40005c00

08004e1c <BSP_I2C3_DeInit>:
/**
  * @brief  DeInitialize a bus
  * @param None
  * @retval BSP status
  */
int32_t BSP_I2C3_DeInit(void) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004e22:	f06f 0307 	mvn.w	r3, #7
 8004e26:	607b      	str	r3, [r7, #4]
  
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    /* DeInit the I2C */ 
    I2C3_MspDeInit(&hbusi2c3);
 8004e28:	4807      	ldr	r0, [pc, #28]	; (8004e48 <BSP_I2C3_DeInit+0x2c>)
 8004e2a:	f000 fa35 	bl	8005298 <I2C3_MspDeInit>
  #endif  
  
  if (HAL_I2C_DeInit(&hbusi2c3) == HAL_OK) {
 8004e2e:	4806      	ldr	r0, [pc, #24]	; (8004e48 <BSP_I2C3_DeInit+0x2c>)
 8004e30:	f001 ffc9 	bl	8006dc6 <HAL_I2C_DeInit>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <BSP_I2C3_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8004e3e:	687b      	ldr	r3, [r7, #4]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	2000277c 	.word	0x2000277c

08004e4c <BSP_I2C3_WriteReg>:
  * @param  Addr: Device address on Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af04      	add	r7, sp, #16
 8004e52:	60ba      	str	r2, [r7, #8]
 8004e54:	461a      	mov	r2, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	81fb      	strh	r3, [r7, #14]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	81bb      	strh	r3, [r7, #12]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004e62:	f06f 0307 	mvn.w	r3, #7
 8004e66:	617b      	str	r3, [r7, #20]

  if(HAL_I2C_Mem_Write(&hbusi2c3, (uint8_t)DevAddr,
 8004e68:	89fb      	ldrh	r3, [r7, #14]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	89ba      	ldrh	r2, [r7, #12]
 8004e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e74:	9302      	str	r3, [sp, #8]
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4806      	ldr	r0, [pc, #24]	; (8004e9c <BSP_I2C3_WriteReg+0x50>)
 8004e82:	f001 ffe3 	bl	8006e4c <HAL_I2C_Mem_Write>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <BSP_I2C3_WriteReg+0x44>
                       (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                       (uint8_t *)pData, len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004e90:	697b      	ldr	r3, [r7, #20]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	2000277c 	.word	0x2000277c

08004ea0 <BSP_I2C3_ReadReg>:
  * @brief  Read registers through a bus (8 bits)
  * @param  DevAddr: Device address on BUS
  * @param  Reg: The target register address to read
  * @retval BSP status
  */
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af04      	add	r7, sp, #16
 8004ea6:	60ba      	str	r2, [r7, #8]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	81fb      	strh	r3, [r7, #14]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	81bb      	strh	r3, [r7, #12]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004eb6:	f06f 0307 	mvn.w	r3, #7
 8004eba:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hbusi2c3, DevAddr, (uint16_t)Reg,
 8004ebc:	89ba      	ldrh	r2, [r7, #12]
 8004ebe:	89f9      	ldrh	r1, [r7, #14]
 8004ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ec4:	9302      	str	r3, [sp, #8]
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4806      	ldr	r0, [pc, #24]	; (8004eec <BSP_I2C3_ReadReg+0x4c>)
 8004ed2:	f002 f8cf 	bl	8007074 <HAL_I2C_Mem_Read>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <BSP_I2C3_ReadReg+0x40>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004ee0:	697b      	ldr	r3, [r7, #20]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	2000277c 	.word	0x2000277c

08004ef0 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
  
  hbusspi2.Instance  = SPI2;
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <BSP_SPI2_Init+0x40>)
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <BSP_SPI2_Init+0x44>)
 8004efe:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET) 
 8004f00:	480b      	ldr	r0, [pc, #44]	; (8004f30 <BSP_SPI2_Init+0x40>)
 8004f02:	f005 ff47 	bl	800ad94 <HAL_SPI_GetState>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <BSP_SPI2_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 8004f0c:	4808      	ldr	r0, [pc, #32]	; (8004f30 <BSP_SPI2_Init+0x40>)
 8004f0e:	f000 f8ed 	bl	80050ec <SPI2_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8004f12:	4807      	ldr	r0, [pc, #28]	; (8004f30 <BSP_SPI2_Init+0x40>)
 8004f14:	f000 f890 	bl	8005038 <MX_SPI2_Init>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004f1e:	f06f 0307 	mvn.w	r3, #7
 8004f22:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004f24:	687b      	ldr	r3, [r7, #4]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	200027c8 	.word	0x200027c8
 8004f34:	40003800 	.word	0x40003800

08004f38 <BSP_SPI2_DeInit>:
/**
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004f3e:	f06f 0307 	mvn.w	r3, #7
 8004f42:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 8004f44:	4807      	ldr	r0, [pc, #28]	; (8004f64 <BSP_SPI2_DeInit+0x2c>)
 8004f46:	f000 f907 	bl	8005158 <SPI2_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi2) == HAL_OK) {
 8004f4a:	4806      	ldr	r0, [pc, #24]	; (8004f64 <BSP_SPI2_DeInit+0x2c>)
 8004f4c:	f005 fb65 	bl	800a61a <HAL_SPI_DeInit>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <BSP_SPI2_DeInit+0x22>
    ret = BSP_ERROR_NONE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8004f5a:	687b      	ldr	r3, [r7, #4]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	200027c8 	.word	0x200027c8

08004f68 <BSP_SPI2_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004f74:	f06f 0305 	mvn.w	r3, #5
 8004f78:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4806      	ldr	r0, [pc, #24]	; (8004f9c <BSP_SPI2_Send+0x34>)
 8004f84:	f005 fb85 	bl	800a692 <HAL_SPI_Transmit>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <BSP_SPI2_Send+0x2a>
  {
      ret = len;
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200027c8 	.word	0x200027c8

08004fa0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	607b      	str	r3, [r7, #4]
  
  hbusspi1.Instance  = SPI1;
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <BSP_SPI1_Init+0x40>)
 8004fac:	4a0d      	ldr	r2, [pc, #52]	; (8004fe4 <BSP_SPI1_Init+0x44>)
 8004fae:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8004fb0:	480b      	ldr	r0, [pc, #44]	; (8004fe0 <BSP_SPI1_Init+0x40>)
 8004fb2:	f005 feef 	bl	800ad94 <HAL_SPI_GetState>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <BSP_SPI1_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbusspi1);
 8004fbc:	4808      	ldr	r0, [pc, #32]	; (8004fe0 <BSP_SPI1_Init+0x40>)
 8004fbe:	f000 f9c9 	bl	8005354 <SPI1_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8004fc2:	4807      	ldr	r0, [pc, #28]	; (8004fe0 <BSP_SPI1_Init+0x40>)
 8004fc4:	f000 f984 	bl	80052d0 <MX_SPI1_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <BSP_SPI1_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004fce:	f06f 0307 	mvn.w	r3, #7
 8004fd2:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004fd4:	687b      	ldr	r3, [r7, #4]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	2000282c 	.word	0x2000282c
 8004fe4:	40013000 	.word	0x40013000

08004fe8 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ff6:	f06f 0305 	mvn.w	r3, #5
 8004ffa:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005002:	9200      	str	r2, [sp, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	4806      	ldr	r0, [pc, #24]	; (8005024 <BSP_SPI1_SendRecv+0x3c>)
 800500a:	f005 fcb0 	bl	800a96e <HAL_SPI_TransmitReceive>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <BSP_SPI1_SendRecv+0x30>
  {
      ret = len;
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005018:	697b      	ldr	r3, [r7, #20]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	2000282c 	.word	0x2000282c

08005028 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800502c:	f000 ff64 	bl	8005ef8 <HAL_GetTick>
 8005030:	4603      	mov	r3, r0
}
 8005032:	4618      	mov	r0, r3
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <MX_SPI2_Init>:

/* SPI2 init function */ 

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <MX_SPI2_Init+0xb0>)
 8005048:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005050:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005058:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005060:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005074:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2230      	movs	r2, #48	; 0x30
 800507a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2207      	movs	r2, #7
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	635a      	str	r2, [r3, #52]	; 0x34
  
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f005 fa17 	bl	800a4d4 <HAL_SPI_Init>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_SPI2_Init+0x78>
  {
    ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
  }
  
  HAL_Delay(5);
 80050b0:	2005      	movs	r0, #5
 80050b2:	f7fc fb8f 	bl	80017d4 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c4:	601a      	str	r2, [r3, #0]
  HAL_Delay(5);
 80050c6:	2005      	movs	r0, #5
 80050c8:	f7fc fb84 	bl	80017d4 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050da:	601a      	str	r2, [r3, #0]
  
  return ret;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40003800 	.word	0x40003800

080050ec <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08a      	sub	sp, #40	; 0x28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <SPI2_MspInit+0x64>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	4a15      	ldr	r2, [pc, #84]	; (8005150 <SPI2_MspInit+0x64>)
 80050fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <SPI2_MspInit+0x64>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510c:	4b10      	ldr	r3, [pc, #64]	; (8005150 <SPI2_MspInit+0x64>)
 800510e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005110:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <SPI2_MspInit+0x64>)
 8005112:	f043 0302 	orr.w	r3, r3, #2
 8005116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <SPI2_MspInit+0x64>)
 800511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
  
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005124:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512a:	2302      	movs	r3, #2
 800512c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800512e:	2301      	movs	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005132:	2302      	movs	r3, #2
 8005134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005136:	2305      	movs	r3, #5
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513a:	f107 0314 	add.w	r3, r7, #20
 800513e:	4619      	mov	r1, r3
 8005140:	4804      	ldr	r0, [pc, #16]	; (8005154 <SPI2_MspInit+0x68>)
 8005142:	f001 fae3 	bl	800670c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8005146:	bf00      	nop
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	48000400 	.word	0x48000400

08005158 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <SPI2_MspDeInit+0x28>)
 8005162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005164:	4a06      	ldr	r2, [pc, #24]	; (8005180 <SPI2_MspDeInit+0x28>)
 8005166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516a:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_13);
 800516c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8005170:	4804      	ldr	r0, [pc, #16]	; (8005184 <SPI2_MspDeInit+0x2c>)
 8005172:	f001 fc75 	bl	8006a60 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000
 8005184:	48000400 	.word	0x48000400

08005188 <MX_I2C3_Init>:

/* I2C3 init function */ 

__weak HAL_StatusTypeDef MX_I2C3_Init(I2C_HandleTypeDef* hi2c)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C3;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0c      	ldr	r2, [pc, #48]	; (80051c8 <MX_I2C3_Init+0x40>)
 8005198:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10801541;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a0b      	ldr	r2, [pc, #44]	; (80051cc <MX_I2C3_Init+0x44>)
 800519e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0x33;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2233      	movs	r2, #51	; 0x33
 80051a4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	60da      	str	r2, [r3, #12]
  
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 fd7b 	bl	8006ca8 <HAL_I2C_Init>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <MX_I2C3_Init+0x34>
  {
    ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40005c00 	.word	0x40005c00
 80051cc:	10801541 	.word	0x10801541

080051d0 <I2C3_MspInit>:

static void I2C3_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b0ac      	sub	sp, #176	; 0xb0
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C3_MspInit 0 */
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80051d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051dc:	617b      	str	r3, [r7, #20]
  RCC_PeriphCLKInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 80051de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct)!=HAL_OK)
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4618      	mov	r0, r3
 80051ea:	f004 fc8f 	bl	8009b0c <HAL_RCCEx_PeriphCLKConfig>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d000      	beq.n	80051f6 <I2C3_MspInit+0x26>
  {
    while(1);
 80051f4:	e7fe      	b.n	80051f4 <I2C3_MspInit+0x24>
  }
  
  /* Enable I2C GPIO clocks */
  __GPIOC_CLK_ENABLE();
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <I2C3_MspInit+0xc0>)
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	4a25      	ldr	r2, [pc, #148]	; (8005290 <I2C3_MspInit+0xc0>)
 80051fc:	f043 0304 	orr.w	r3, r3, #4
 8005200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005202:	4b23      	ldr	r3, [pc, #140]	; (8005290 <I2C3_MspInit+0xc0>)
 8005204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	693b      	ldr	r3, [r7, #16]
  
  /**I2C3 GPIO Configuration    
  PC1     ------> I2C3_SDA
  PC0     ------> I2C3_SCL 
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800520e:	2303      	movs	r3, #3
 8005210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005214:	2312      	movs	r3, #18
 8005216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800521a:	2301      	movs	r3, #1
 800521c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005220:	2303      	movs	r3, #3
 8005222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005226:	2304      	movs	r3, #4
 8005228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800522c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005230:	4619      	mov	r1, r3
 8005232:	4818      	ldr	r0, [pc, #96]	; (8005294 <I2C3_MspInit+0xc4>)
 8005234:	f001 fa6a 	bl	800670c <HAL_GPIO_Init>
  
  /* Peripheral clock enable */
  __HAL_RCC_I2C3_CLK_ENABLE();
 8005238:	4b15      	ldr	r3, [pc, #84]	; (8005290 <I2C3_MspInit+0xc0>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <I2C3_MspInit+0xc0>)
 800523e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <I2C3_MspInit+0xc0>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
  
  /* Force the I2C peripheral clock reset */
  __I2C3_FORCE_RESET();
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <I2C3_MspInit+0xc0>)
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <I2C3_MspInit+0xc0>)
 8005256:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800525a:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Release the I2C peripheral clock reset */
  __I2C3_RELEASE_RESET();
 800525c:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <I2C3_MspInit+0xc0>)
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <I2C3_MspInit+0xc0>)
 8005262:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005266:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005268:	2200      	movs	r2, #0
 800526a:	2100      	movs	r1, #0
 800526c:	2048      	movs	r0, #72	; 0x48
 800526e:	f000 ff58 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005272:	2048      	movs	r0, #72	; 0x48
 8005274:	f000 ff71 	bl	800615a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005278:	2200      	movs	r2, #0
 800527a:	2100      	movs	r1, #0
 800527c:	2049      	movs	r0, #73	; 0x49
 800527e:	f000 ff50 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005282:	2049      	movs	r0, #73	; 0x49
 8005284:	f000 ff69 	bl	800615a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */
  
  /* USER CODE END I2C3_MspInit 1 */
}
 8005288:	bf00      	nop
 800528a:	37b0      	adds	r7, #176	; 0xb0
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	48000800 	.word	0x48000800

08005298 <I2C3_MspDeInit>:

static void I2C3_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <I2C3_MspDeInit+0x30>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <I2C3_MspDeInit+0x30>)
 80052a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052aa:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C3 GPIO Configuration    
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 80052ac:	2103      	movs	r1, #3
 80052ae:	4807      	ldr	r0, [pc, #28]	; (80052cc <I2C3_MspDeInit+0x34>)
 80052b0:	f001 fbd6 	bl	8006a60 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80052b4:	2048      	movs	r0, #72	; 0x48
 80052b6:	f000 ff5e 	bl	8006176 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80052ba:	2049      	movs	r0, #73	; 0x49
 80052bc:	f000 ff5b 	bl	8006176 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021000 	.word	0x40021000
 80052cc:	48000800 	.word	0x48000800

080052d0 <MX_SPI1_Init>:


/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <MX_SPI1_Init+0x80>)
 80052e0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052e8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052f6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800530a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2218      	movs	r2, #24
 8005310:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2207      	movs	r2, #7
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2208      	movs	r2, #8
 8005334:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f005 f8cc 	bl	800a4d4 <HAL_SPI_Init>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40013000 	.word	0x40013000

08005354 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800535c:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <SPI1_MspInit+0x64>)
 800535e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005360:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <SPI1_MspInit+0x64>)
 8005362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005366:	6613      	str	r3, [r2, #96]	; 0x60
 8005368:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <SPI1_MspInit+0x64>)
 800536a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005374:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <SPI1_MspInit+0x64>)
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <SPI1_MspInit+0x64>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <SPI1_MspInit+0x64>)
 8005382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800538c:	23e0      	movs	r3, #224	; 0xe0
 800538e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005390:	2302      	movs	r3, #2
 8005392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005394:	2301      	movs	r3, #1
 8005396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005398:	2303      	movs	r3, #3
 800539a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800539c:	2305      	movs	r3, #5
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	4619      	mov	r1, r3
 80053a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053aa:	f001 f9af 	bl	800670c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80053ae:	bf00      	nop
 80053b0:	3728      	adds	r7, #40	; 0x28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000

080053bc <BSP_ENV_SENSOR_Init>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	; 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61bb      	str	r3, [r7, #24]
  ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <BSP_ENV_SENSOR_Init+0x24>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d032      	beq.n	8005444 <BSP_ENV_SENSOR_Init+0x88>
 80053de:	e063      	b.n	80054a8 <BSP_ENV_SENSOR_Init+0xec>
  {
#if (USE_ENV_SENSOR_HTS221_0 == 1)
    case HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80053e0:	6838      	ldr	r0, [r7, #0]
 80053e2:	f000 f931 	bl	8005648 <HTS221_0_Probe>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <BSP_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053f0:	e098      	b.n	8005524 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80053f2:	4a4e      	ldr	r2, [pc, #312]	; (800552c <BSP_ENV_SENSOR_Init+0x170>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	494c      	ldr	r1, [pc, #304]	; (8005530 <BSP_ENV_SENSOR_Init+0x174>)
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005404:	f107 0108 	add.w	r1, r7, #8
 8005408:	4610      	mov	r0, r2
 800540a:	4798      	blx	r3
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <BSP_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005412:	f06f 0306 	mvn.w	r3, #6
 8005416:	e085      	b.n	8005524 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005418:	7a3b      	ldrb	r3, [r7, #8]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d103      	bne.n	8005426 <BSP_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005426:	7abb      	ldrb	r3, [r7, #10]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d103      	bne.n	8005434 <BSP_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f043 0304 	orr.w	r3, r3, #4
 8005432:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005434:	7a7b      	ldrb	r3, [r7, #9]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d13a      	bne.n	80054b0 <BSP_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f043 0302 	orr.w	r3, r3, #2
 8005440:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005442:	e035      	b.n	80054b0 <BSP_ENV_SENSOR_Init+0xf4>
#endif
#if (USE_ENV_SENSOR_LPS22HB_0 == 1)
    case LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8005444:	6838      	ldr	r0, [r7, #0]
 8005446:	f000 f9a9 	bl	800579c <LPS22HB_0_Probe>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <BSP_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005454:	e066      	b.n	8005524 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005456:	4a35      	ldr	r2, [pc, #212]	; (800552c <BSP_ENV_SENSOR_Init+0x170>)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4933      	ldr	r1, [pc, #204]	; (8005530 <BSP_ENV_SENSOR_Init+0x174>)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005468:	f107 0108 	add.w	r1, r7, #8
 800546c:	4610      	mov	r0, r2
 800546e:	4798      	blx	r3
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <BSP_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005476:	f06f 0306 	mvn.w	r3, #6
 800547a:	e053      	b.n	8005524 <BSP_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800547c:	7a3b      	ldrb	r3, [r7, #8]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d103      	bne.n	800548a <BSP_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800548a:	7abb      	ldrb	r3, [r7, #10]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d103      	bne.n	8005498 <BSP_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f043 0304 	orr.w	r3, r3, #4
 8005496:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005498:	7a7b      	ldrb	r3, [r7, #9]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10a      	bne.n	80054b4 <BSP_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f043 0302 	orr.w	r3, r3, #2
 80054a4:	61bb      	str	r3, [r7, #24]
      }
      break;
 80054a6:	e005      	b.n	80054b4 <BSP_ENV_SENSOR_Init+0xf8>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80054a8:	f06f 0301 	mvn.w	r3, #1
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80054ae:	e002      	b.n	80054b6 <BSP_ENV_SENSOR_Init+0xfa>
      break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <BSP_ENV_SENSOR_Init+0xfa>
      break;
 80054b4:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <BSP_ENV_SENSOR_Init+0x104>
  {
    return ret;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	e031      	b.n	8005524 <BSP_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e02a      	b.n	800551c <BSP_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	4013      	ands	r3, r2
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d11e      	bne.n	8005510 <BSP_ENV_SENSOR_Init+0x154>
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	4013      	ands	r3, r2
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d118      	bne.n	8005510 <BSP_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <BSP_ENV_SENSOR_Init+0x178>)
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054e6:	4814      	ldr	r0, [pc, #80]	; (8005538 <BSP_ENV_SENSOR_Init+0x17c>)
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	440b      	add	r3, r1
 80054f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	490d      	ldr	r1, [pc, #52]	; (8005530 <BSP_ENV_SENSOR_Init+0x174>)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005500:	4610      	mov	r0, r2
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <BSP_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800550a:	f06f 0304 	mvn.w	r3, #4
 800550e:	e009      	b.n	8005524 <BSP_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	623b      	str	r3, [r7, #32]
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3301      	adds	r3, #1
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d9d1      	bls.n	80054c6 <BSP_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	; 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000290 	.word	0x20000290
 8005530:	20002890 	.word	0x20002890
 8005534:	20000080 	.word	0x20000080
 8005538:	20000278 	.word	0x20000278

0800553c <BSP_ENV_SENSOR_Enable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d903      	bls.n	8005554 <BSP_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800554c:	f06f 0301 	mvn.w	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e028      	b.n	80055a6 <BSP_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <BSP_ENV_SENSOR_Enable+0x74>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4013      	ands	r3, r2
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d11c      	bne.n	80055a0 <BSP_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005566:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <BSP_ENV_SENSOR_Enable+0x78>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800556e:	4812      	ldr	r0, [pc, #72]	; (80055b8 <BSP_ENV_SENSOR_Enable+0x7c>)
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	440b      	add	r3, r1
 800557a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	490e      	ldr	r1, [pc, #56]	; (80055bc <BSP_ENV_SENSOR_Enable+0x80>)
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005588:	4610      	mov	r0, r2
 800558a:	4798      	blx	r3
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <BSP_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005592:	f06f 0304 	mvn.w	r3, #4
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e005      	b.n	80055a6 <BSP_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e002      	b.n	80055a6 <BSP_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80055a0:	f06f 0301 	mvn.w	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000298 	.word	0x20000298
 80055b4:	20000080 	.word	0x20000080
 80055b8:	20000278 	.word	0x20000278
 80055bc:	20002890 	.word	0x20002890

080055c0 <BSP_ENV_SENSOR_GetValue>:
 *         - ENV_HUMIDITY
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_INSTANCES_NBR)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d903      	bls.n	80055da <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055d2:	f06f 0301 	mvn.w	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e029      	b.n	800562e <BSP_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80055da:	4a17      	ldr	r2, [pc, #92]	; (8005638 <BSP_ENV_SENSOR_GetValue+0x78>)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d11d      	bne.n	8005628 <BSP_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <BSP_ENV_SENSOR_GetValue+0x7c>)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055f4:	4812      	ldr	r0, [pc, #72]	; (8005640 <BSP_ENV_SENSOR_GetValue+0x80>)
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	440b      	add	r3, r1
 8005600:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	490f      	ldr	r1, [pc, #60]	; (8005644 <BSP_ENV_SENSOR_GetValue+0x84>)
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <BSP_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800561a:	f06f 0304 	mvn.w	r3, #4
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e005      	b.n	800562e <BSP_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e002      	b.n	800562e <BSP_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005628:	f06f 0301 	mvn.w	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800562e:	697b      	ldr	r3, [r7, #20]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000298 	.word	0x20000298
 800563c:	20000080 	.word	0x20000080
 8005640:	20000278 	.word	0x20000278
 8005644:	20002890 	.word	0x20002890

08005648 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b090      	sub	sp, #64	; 0x40
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8005650:	2300      	movs	r3, #0
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8005654:	2300      	movs	r3, #0
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8005658:	23bf      	movs	r3, #191	; 0xbf
 800565a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = BSP_I2C3_Init;
 800565e:	4b41      	ldr	r3, [pc, #260]	; (8005764 <HTS221_0_Probe+0x11c>)
 8005660:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = BSP_I2C3_DeInit;
 8005662:	4b41      	ldr	r3, [pc, #260]	; (8005768 <HTS221_0_Probe+0x120>)
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = BSP_I2C3_ReadReg;
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <HTS221_0_Probe+0x124>)
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = BSP_I2C3_WriteReg;
 800566a:	4b41      	ldr	r3, [pc, #260]	; (8005770 <HTS221_0_Probe+0x128>)
 800566c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = BSP_GetTick;
 800566e:	4b41      	ldr	r3, [pc, #260]	; (8005774 <HTS221_0_Probe+0x12c>)
 8005670:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005672:	f107 0320 	add.w	r3, r7, #32
 8005676:	4619      	mov	r1, r3
 8005678:	483f      	ldr	r0, [pc, #252]	; (8005778 <HTS221_0_Probe+0x130>)
 800567a:	f7fd fe23 	bl	80032c4 <HTS221_RegisterBusIO>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005684:	f06f 0306 	mvn.w	r3, #6
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568a:	e065      	b.n	8005758 <HTS221_0_Probe+0x110>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800568c:	f107 031f 	add.w	r3, r7, #31
 8005690:	4619      	mov	r1, r3
 8005692:	4839      	ldr	r0, [pc, #228]	; (8005778 <HTS221_0_Probe+0x130>)
 8005694:	f7fd fe9b 	bl	80033ce <HTS221_ReadID>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800569e:	f06f 0306 	mvn.w	r3, #6
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a4:	e058      	b.n	8005758 <HTS221_0_Probe+0x110>
  }
  else if (id != HTS221_ID)
 80056a6:	7ffb      	ldrb	r3, [r7, #31]
 80056a8:	2bbc      	cmp	r3, #188	; 0xbc
 80056aa:	d003      	beq.n	80056b4 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056ac:	f06f 0306 	mvn.w	r3, #6
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b2:	e051      	b.n	8005758 <HTS221_0_Probe+0x110>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80056b4:	f107 030c 	add.w	r3, r7, #12
 80056b8:	4619      	mov	r1, r3
 80056ba:	482f      	ldr	r0, [pc, #188]	; (8005778 <HTS221_0_Probe+0x130>)
 80056bc:	f7fd fe9e 	bl	80033fc <HTS221_GetCapabilities>
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056c0:	7b3b      	ldrb	r3, [r7, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	7b7b      	ldrb	r3, [r7, #13]
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	431a      	orrs	r2, r3
                                   uint32_t)cap.Humidity << 2);
 80056ca:	7bbb      	ldrb	r3, [r7, #14]
 80056cc:	009b      	lsls	r3, r3, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056ce:	4313      	orrs	r3, r2
 80056d0:	4a2a      	ldr	r2, [pc, #168]	; (800577c <HTS221_0_Probe+0x134>)
 80056d2:	6013      	str	r3, [r2, #0]

    EnvCompObj[HTS221_0] = &hts221_obj_0;
 80056d4:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <HTS221_0_Probe+0x138>)
 80056d6:	4a28      	ldr	r2, [pc, #160]	; (8005778 <HTS221_0_Probe+0x130>)
 80056d8:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80056da:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <HTS221_0_Probe+0x13c>)
 80056dc:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <HTS221_0_Probe+0x140>)
 80056de:	601a      	str	r2, [r3, #0]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d018      	beq.n	800571c <HTS221_0_Probe+0xd4>
 80056ea:	7b3b      	ldrb	r3, [r7, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d115      	bne.n	800571c <HTS221_0_Probe+0xd4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80056f0:	4b26      	ldr	r3, [pc, #152]	; (800578c <HTS221_0_Probe+0x144>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a26      	ldr	r2, [pc, #152]	; (8005790 <HTS221_0_Probe+0x148>)
 80056f6:	4927      	ldr	r1, [pc, #156]	; (8005794 <HTS221_0_Probe+0x14c>)
 80056f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <HTS221_0_Probe+0x13c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <HTS221_0_Probe+0x138>)
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	4610      	mov	r0, r2
 8005708:	4798      	blx	r3
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HTS221_0_Probe+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005710:	f06f 0304 	mvn.w	r3, #4
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005716:	e001      	b.n	800571c <HTS221_0_Probe+0xd4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005718:	2300      	movs	r3, #0
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d018      	beq.n	8005758 <HTS221_0_Probe+0x110>
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d115      	bne.n	8005758 <HTS221_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800572c:	4b17      	ldr	r3, [pc, #92]	; (800578c <HTS221_0_Probe+0x144>)
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	4a17      	ldr	r2, [pc, #92]	; (8005790 <HTS221_0_Probe+0x148>)
 8005732:	4919      	ldr	r1, [pc, #100]	; (8005798 <HTS221_0_Probe+0x150>)
 8005734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8005738:	4b12      	ldr	r3, [pc, #72]	; (8005784 <HTS221_0_Probe+0x13c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a10      	ldr	r2, [pc, #64]	; (8005780 <HTS221_0_Probe+0x138>)
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	4610      	mov	r0, r2
 8005744:	4798      	blx	r3
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HTS221_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800574c:	f06f 0304 	mvn.w	r3, #4
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005752:	e001      	b.n	8005758 <HTS221_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005754:	2300      	movs	r3, #0
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  return ret;
 8005758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800575a:	4618      	mov	r0, r3
 800575c:	3740      	adds	r7, #64	; 0x40
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08004dd1 	.word	0x08004dd1
 8005768:	08004e1d 	.word	0x08004e1d
 800576c:	08004ea1 	.word	0x08004ea1
 8005770:	08004e4d 	.word	0x08004e4d
 8005774:	08005029 	.word	0x08005029
 8005778:	200002a0 	.word	0x200002a0
 800577c:	20000298 	.word	0x20000298
 8005780:	20002890 	.word	0x20002890
 8005784:	20000290 	.word	0x20000290
 8005788:	20000008 	.word	0x20000008
 800578c:	20000080 	.word	0x20000080
 8005790:	20000278 	.word	0x20000278
 8005794:	2000002c 	.word	0x2000002c
 8005798:	20000018 	.word	0x20000018

0800579c <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b090      	sub	sp, #64	; 0x40
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;
  
  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_SPI_3WIRES_BUS; /* SPI 3-Wires */
 80057a8:	2302      	movs	r3, #2
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = 0x0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = BSP_LPS22HB_Init;
 80057b2:	4b56      	ldr	r3, [pc, #344]	; (800590c <LPS22HB_0_Probe+0x170>)
 80057b4:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = BSP_LPS22HB_DeInit;
 80057b6:	4b56      	ldr	r3, [pc, #344]	; (8005910 <LPS22HB_0_Probe+0x174>)
 80057b8:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = BSP_LPS22HB_ReadReg;
 80057ba:	4b56      	ldr	r3, [pc, #344]	; (8005914 <LPS22HB_0_Probe+0x178>)
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = BSP_LPS22HB_WriteReg;
 80057be:	4b56      	ldr	r3, [pc, #344]	; (8005918 <LPS22HB_0_Probe+0x17c>)
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 80057c2:	4b56      	ldr	r3, [pc, #344]	; (800591c <LPS22HB_0_Probe+0x180>)
 80057c4:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80057c6:	f107 031c 	add.w	r3, r7, #28
 80057ca:	4619      	mov	r1, r3
 80057cc:	4854      	ldr	r0, [pc, #336]	; (8005920 <LPS22HB_0_Probe+0x184>)
 80057ce:	f7fe fb97 	bl	8003f00 <LPS22HB_RegisterBusIO>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057d8:	f06f 0306 	mvn.w	r3, #6
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057de:	e08f      	b.n	8005900 <LPS22HB_0_Probe+0x164>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 80057e0:	f107 031b 	add.w	r3, r7, #27
 80057e4:	4619      	mov	r1, r3
 80057e6:	484e      	ldr	r0, [pc, #312]	; (8005920 <LPS22HB_0_Probe+0x184>)
 80057e8:	f7fe fc2f 	bl	800404a <LPS22HB_ReadID>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057f2:	f06f 0306 	mvn.w	r3, #6
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f8:	e082      	b.n	8005900 <LPS22HB_0_Probe+0x164>
  }
  else if (id != LPS22HB_ID)
 80057fa:	7efb      	ldrb	r3, [r7, #27]
 80057fc:	2bb1      	cmp	r3, #177	; 0xb1
 80057fe:	d003      	beq.n	8005808 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005800:	f06f 0306 	mvn.w	r3, #6
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005806:	e07b      	b.n	8005900 <LPS22HB_0_Probe+0x164>
  }
  else
  {
    /* LPS22HB_SwResetAndMemoryBoot */
    if (lps22hb_boot_set(&lps22hb_obj_0.Ctx, PROPERTY_ENABLE) != LPS22HB_OK) 
 8005808:	2101      	movs	r1, #1
 800580a:	4846      	ldr	r0, [pc, #280]	; (8005924 <LPS22HB_0_Probe+0x188>)
 800580c:	f7ff f909 	bl	8004a22 <lps22hb_boot_set>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <LPS22HB_0_Probe+0x80>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005816:	f06f 0306 	mvn.w	r3, #6
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    
    HAL_Delay(1000);
 800581c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005820:	f7fb ffd8 	bl	80017d4 <HAL_Delay>
    
    /* Do again the "LPS22HB_RegisterBusIO" */
    {
      uint8_t data = 0x01;
 8005824:	2301      	movs	r3, #1
 8005826:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      
      if (LPS22HB_Write_Reg(&lps22hb_obj_0, LPS22HB_CTRL_REG1, data) != LPS22HB_OK) 
 800582a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800582e:	461a      	mov	r2, r3
 8005830:	2110      	movs	r1, #16
 8005832:	483b      	ldr	r0, [pc, #236]	; (8005920 <LPS22HB_0_Probe+0x184>)
 8005834:	f7fe fd99 	bl	800436a <LPS22HB_Write_Reg>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <LPS22HB_0_Probe+0xa8>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800583e:	f06f 0306 	mvn.w	r3, #6
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }

    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005844:	f107 0308 	add.w	r3, r7, #8
 8005848:	4619      	mov	r1, r3
 800584a:	4835      	ldr	r0, [pc, #212]	; (8005920 <LPS22HB_0_Probe+0x184>)
 800584c:	f7fe fc14 	bl	8004078 <LPS22HB_GetCapabilities>
    
    EnvCtx[LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((uint32_t)cap.Humidity << 2);
 8005850:	7a3b      	ldrb	r3, [r7, #8]
 8005852:	461a      	mov	r2, r3
 8005854:	7a7b      	ldrb	r3, [r7, #9]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	431a      	orrs	r2, r3
 800585a:	7abb      	ldrb	r3, [r7, #10]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4313      	orrs	r3, r2
 8005860:	4a31      	ldr	r2, [pc, #196]	; (8005928 <LPS22HB_0_Probe+0x18c>)
 8005862:	6053      	str	r3, [r2, #4]
    
    EnvCompObj[LPS22HB_0] = &lps22hb_obj_0;
 8005864:	4b31      	ldr	r3, [pc, #196]	; (800592c <LPS22HB_0_Probe+0x190>)
 8005866:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <LPS22HB_0_Probe+0x184>)
 8005868:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800586a:	4b31      	ldr	r3, [pc, #196]	; (8005930 <LPS22HB_0_Probe+0x194>)
 800586c:	4a31      	ldr	r2, [pc, #196]	; (8005934 <LPS22HB_0_Probe+0x198>)
 800586e:	605a      	str	r2, [r3, #4]
    
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d019      	beq.n	80058ae <LPS22HB_0_Probe+0x112>
 800587a:	7a3b      	ldrb	r3, [r7, #8]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d116      	bne.n	80058ae <LPS22HB_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8005880:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <LPS22HB_0_Probe+0x19c>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a2d      	ldr	r2, [pc, #180]	; (800593c <LPS22HB_0_Probe+0x1a0>)
 8005886:	3303      	adds	r3, #3
 8005888:	492d      	ldr	r1, [pc, #180]	; (8005940 <LPS22HB_0_Probe+0x1a4>)
 800588a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 800588e:	4b28      	ldr	r3, [pc, #160]	; (8005930 <LPS22HB_0_Probe+0x194>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <LPS22HB_0_Probe+0x190>)
 8005896:	6852      	ldr	r2, [r2, #4]
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <LPS22HB_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058a2:	f06f 0304 	mvn.w	r3, #4
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a8:	e001      	b.n	80058ae <LPS22HB_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d023      	beq.n	8005900 <LPS22HB_0_Probe+0x164>
 80058b8:	7a7b      	ldrb	r3, [r7, #9]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d120      	bne.n	8005900 <LPS22HB_0_Probe+0x164>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80058be:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <LPS22HB_0_Probe+0x19c>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4a1e      	ldr	r2, [pc, #120]	; (800593c <LPS22HB_0_Probe+0x1a0>)
 80058c4:	3303      	adds	r3, #3
 80058c6:	491f      	ldr	r1, [pc, #124]	; (8005944 <LPS22HB_0_Probe+0x1a8>)
 80058c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      if (EnvDrv[LPS22HB_0]->Init(EnvCompObj[LPS22HB_0]) != LPS22HB_OK)
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <LPS22HB_0_Probe+0x194>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a16      	ldr	r2, [pc, #88]	; (800592c <LPS22HB_0_Probe+0x190>)
 80058d4:	6852      	ldr	r2, [r2, #4]
 80058d6:	4610      	mov	r0, r2
 80058d8:	4798      	blx	r3
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <LPS22HB_0_Probe+0x14c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058e0:	f06f 0304 	mvn.w	r3, #4
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e6:	e001      	b.n	80058ec <LPS22HB_0_Probe+0x150>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
      if (lps22hb_i2c_interface_set(&lps22hb_obj_0.Ctx, LPS22HB_I2C_DISABLE) != LPS22HB_OK)
 80058ec:	2101      	movs	r1, #1
 80058ee:	480d      	ldr	r0, [pc, #52]	; (8005924 <LPS22HB_0_Probe+0x188>)
 80058f0:	f7ff f8e3 	bl	8004aba <lps22hb_i2c_interface_set>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <LPS22HB_0_Probe+0x164>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80058fa:	f06f 0306 	mvn.w	r3, #6
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      
    }
  }
  
  return ret;
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005902:	4618      	mov	r0, r3
 8005904:	3740      	adds	r7, #64	; 0x40
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	08005949 	.word	0x08005949
 8005910:	080059c1 	.word	0x080059c1
 8005914:	08005a59 	.word	0x08005a59
 8005918:	080059e5 	.word	0x080059e5
 800591c:	08005029 	.word	0x08005029
 8005920:	200002cc 	.word	0x200002cc
 8005924:	200002e8 	.word	0x200002e8
 8005928:	20000298 	.word	0x20000298
 800592c:	20002890 	.word	0x20002890
 8005930:	20000290 	.word	0x20000290
 8005934:	20000040 	.word	0x20000040
 8005938:	20000080 	.word	0x20000080
 800593c:	20000278 	.word	0x20000278
 8005940:	20000064 	.word	0x20000064
 8005944:	20000050 	.word	0x20000050

08005948 <BSP_LPS22HB_Init>:
/**
 * @brief  Initialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_Init(void)
{  
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800594e:	f06f 0305 	mvn.w	r3, #5
 8005952:	61fb      	str	r3, [r7, #28]
  
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005954:	2201      	movs	r2, #1
 8005956:	2108      	movs	r1, #8
 8005958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800595c:	f001 f98c 	bl	8006c78 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005960:	2303      	movs	r3, #3
 8005962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005968:	2301      	movs	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
  
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <BSP_LPS22HB_Init+0x74>)
 800596e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005970:	4a12      	ldr	r2, [pc, #72]	; (80059bc <BSP_LPS22HB_Init+0x74>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005978:	4b10      	ldr	r3, [pc, #64]	; (80059bc <BSP_LPS22HB_Init+0x74>)
 800597a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8005984:	2308      	movs	r3, #8
 8005986:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8005988:	f107 0308 	add.w	r3, r7, #8
 800598c:	4619      	mov	r1, r3
 800598e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005992:	f000 febb 	bl	800670c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005996:	2201      	movs	r2, #1
 8005998:	2108      	movs	r1, #8
 800599a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800599e:	f001 f96b 	bl	8006c78 <HAL_GPIO_WritePin>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80059a2:	f7ff faa5 	bl	8004ef0 <BSP_SPI2_Init>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <BSP_LPS22HB_Init+0x68>
  {
    ret = BSP_ERROR_NONE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80059b0:	69fb      	ldr	r3, [r7, #28]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000

080059c0 <BSP_LPS22HB_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LPS22HB
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_DeInit(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80059c6:	f06f 0305 	mvn.w	r3, #5
 80059ca:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 80059cc:	f7ff fab4 	bl	8004f38 <BSP_SPI2_DeInit>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <BSP_LPS22HB_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80059da:	687b      	ldr	r3, [r7, #4]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <BSP_LPS22HB_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t BSP_LPS22HB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60ba      	str	r2, [r7, #8]
 80059ec:	461a      	mov	r2, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	81fb      	strh	r3, [r7, #14]
 80059f2:	460b      	mov	r3, r1
 80059f4:	81bb      	strh	r3, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 80059fe:	89bb      	ldrh	r3, [r7, #12]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005a04:	2200      	movs	r2, #0
 8005a06:	2108      	movs	r1, #8
 8005a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a0c:	f001 f934 	bl	8006c78 <HAL_GPIO_WritePin>

  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 8005a10:	f107 0313 	add.w	r3, r7, #19
 8005a14:	2101      	movs	r1, #1
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff faa6 	bl	8004f68 <BSP_SPI2_Send>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d002      	beq.n	8005a28 <BSP_LPS22HB_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005a22:	f06f 0305 	mvn.w	r3, #5
 8005a26:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI2_Send(pdata, len) != len)
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68b8      	ldr	r0, [r7, #8]
 8005a2e:	f7ff fa9b 	bl	8004f68 <BSP_SPI2_Send>
 8005a32:	4602      	mov	r2, r0
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d002      	beq.n	8005a40 <BSP_LPS22HB_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005a3a:	f06f 0305 	mvn.w	r3, #5
 8005a3e:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005a40:	2201      	movs	r2, #1
 8005a42:	2108      	movs	r1, #8
 8005a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a48:	f001 f916 	bl	8006c78 <HAL_GPIO_WritePin>

  return ret;
 8005a4c:	697b      	ldr	r3, [r7, #20]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <BSP_LPS22HB_ReadReg>:
* @param  pdata the pointer to the data to be read
* @param  len the length of the data to be read
* @retval BSP status
*/
static int32_t BSP_LPS22HB_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60ba      	str	r2, [r7, #8]
 8005a60:	461a      	mov	r2, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	81fb      	strh	r3, [r7, #14]
 8005a66:	460b      	mov	r3, r1
 8005a68:	81bb      	strh	r3, [r7, #12]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8005a72:	89bb      	ldrh	r3, [r7, #12]
 8005a74:	74fb      	strb	r3, [r7, #19]
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);  
 8005a76:	2200      	movs	r2, #0
 8005a78:	2108      	movs	r1, #8
 8005a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a7e:	f001 f8fb 	bl	8006c78 <HAL_GPIO_WritePin>
  LPS22HB_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005a82:	7cfb      	ldrb	r3, [r7, #19]
 8005a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	481d      	ldr	r0, [pc, #116]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005a8e:	f000 f8cd 	bl	8005c2c <LPS22HB_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005a92:	4b1c      	ldr	r3, [pc, #112]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]
  SPI_1LINE_RX(&hbusspi2);  
 8005aa2:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ab0:	601a      	str	r2, [r3, #0]
  
  if (len > 1)
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d906      	bls.n	8005ac6 <BSP_LPS22HB_ReadReg+0x6e>
  {
    LPS22HB_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	461a      	mov	r2, r3
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	4811      	ldr	r0, [pc, #68]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005ac0:	f000 f822 	bl	8005b08 <LPS22HB_SPI_Read_nBytes>
 8005ac4:	e003      	b.n	8005ace <BSP_LPS22HB_ReadReg+0x76>
  }
  else
  {
    LPS22HB_SPI_Read(&hbusspi2, (pdata));
 8005ac6:	68b9      	ldr	r1, [r7, #8]
 8005ac8:	480e      	ldr	r0, [pc, #56]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005aca:	f000 f874 	bl	8005bb6 <LPS22HB_SPI_Read>
  }
  
  /* CS Disable */
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);  
 8005ace:	2201      	movs	r2, #1
 8005ad0:	2108      	movs	r1, #8
 8005ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad6:	f001 f8cf 	bl	8006c78 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <BSP_LPS22HB_ReadReg+0xac>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af8:	601a      	str	r2, [r3, #0]
  
  return ret;
 8005afa:	697b      	ldr	r3, [r7, #20]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	200027c8 	.word	0x200027c8

08005b08 <LPS22HB_SPI_Read_nBytes>:
* @param  val: value.
* @param  nBytesToRead: number of bytes to read.
* @retval None
*/
void LPS22HB_SPI_Read_nBytes(SPI_HandleTypeDef* xSpiHandle, uint8_t *val, uint16_t nBytesToRead)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b16:	b672      	cpsid	i
}
 8005b18:	bf00      	nop
  /* Interrupts should be disabled during this operation */
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b28:	601a      	str	r2, [r3, #0]
  
  /* Transfer loop */
  while (nBytesToRead > 1U)
 8005b2a:	e013      	b.n	8005b54 <LPS22HB_SPI_Read_nBytes+0x4c>
  {
    /* Check the RXNE flag */
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00c      	beq.n	8005b54 <LPS22HB_SPI_Read_nBytes+0x4c>
    {
      /* read the received data */
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	701a      	strb	r2, [r3, #0]
      val += sizeof(uint8_t);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60bb      	str	r3, [r7, #8]
      nBytesToRead--;
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	80fb      	strh	r3, [r7, #6]
  while (nBytesToRead > 1U)
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d8e8      	bhi.n	8005b2c <LPS22HB_SPI_Read_nBytes+0x24>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b5a:	f3bf 8f4f 	dsb	sy
}
 8005b5e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005b60:	f3bf 8f4f 	dsb	sy
}
 8005b64:	bf00      	nop
  disabled after the first bit and before the latest bit of the last Byte received */
  /* __DSB instruction are inserted to garantee that clock is Disabled in the right timeframe */
  
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(xSpiHandle);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b76:	b662      	cpsie	i
}
 8005b78:	bf00      	nop
  
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005b7a:	bf00      	nop
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d1f8      	bne.n	8005b7c <LPS22HB_SPI_Read_nBytes+0x74>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b98:	bf00      	nop
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d0f8      	beq.n	8005b9a <LPS22HB_SPI_Read_nBytes+0x92>
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <LPS22HB_SPI_Read>:
* @param  command: command id.
* @param  uint8_t val: value.
* @retval None
*/
void LPS22HB_SPI_Read(SPI_HandleTypeDef* xSpiHandle, uint8_t *val)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bc0:	b672      	cpsid	i
}
 8005bc2:	bf00      	nop
  So to guarantee the clock generation for only one data, the clock must be
  disabled after the first bit and before the latest bit */
  /* Interrupts should be disabled during this operation */
  
  __disable_irq();
  __HAL_SPI_ENABLE(xSpiHandle);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd2:	601a      	str	r2, [r3, #0]
  __asm("dsb\n");
 8005bd4:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005bd8:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005bec:	b662      	cpsie	i
}
 8005bee:	bf00      	nop
  __enable_irq();
  
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005bf0:	bf00      	nop
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d1f8      	bne.n	8005bf2 <LPS22HB_SPI_Read+0x3c>
  /* read the received data */
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	701a      	strb	r2, [r3, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005c0e:	bf00      	nop
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b80      	cmp	r3, #128	; 0x80
 8005c1c:	d0f8      	beq.n	8005c10 <LPS22HB_SPI_Read+0x5a>
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LPS22HB_SPI_Write>:
* @param  command : command id.
* @param  val : value.
* @retval None
*/
void LPS22HB_SPI_Write(SPI_HandleTypeDef* xSpiHandle, uint8_t val)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  /* check TXE flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005c38:	bf00      	nop
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d1f8      	bne.n	8005c3a <LPS22HB_SPI_Write+0xe>
  
  /* Write the data */
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	701a      	strb	r2, [r3, #0]
  
  /* Wait BSY flag */
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005c52:	bf00      	nop
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f8      	bne.n	8005c54 <LPS22HB_SPI_Write+0x28>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005c62:	bf00      	nop
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d0f8      	beq.n	8005c64 <LPS22HB_SPI_Write+0x38>
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <us100_init>:
/**
 * Initializes the US-100 UART and DMA.
 * @param huart_init        The UART_HandleTypeDef associated with the UART connected to sensor.
 * @param hdma_uart_rx_init The DMA_HandleTypeDef associated with the DMA to be used with sensor.
 */
void us100_init(UART_HandleTypeDef *huart_init, DMA_HandleTypeDef *hdma_uart_rx_init) {
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
	huart = huart_init;
 8005c8a:	4a06      	ldr	r2, [pc, #24]	; (8005ca4 <us100_init+0x24>)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6013      	str	r3, [r2, #0]
	hdma_uart_rx = hdma_uart_rx_init;
 8005c90:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <us100_init+0x28>)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6013      	str	r3, [r2, #0]
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000300 	.word	0x20000300
 8005ca8:	20000304 	.word	0x20000304

08005cac <us100_write>:

/**
 * Writes a value to the sensor.
 * @param val Value to write to sensor.
 */
void us100_write(uint8_t val) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(huart, &val, 1, HAL_MAX_DELAY);
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <us100_write+0x24>)
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	1df9      	adds	r1, r7, #7
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f006 fa4e 	bl	800c162 <HAL_UART_Transmit>
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000300 	.word	0x20000300

08005cd4 <us100_read>:
/**
 * Read value from the sensor using DMA.
 * @param buffer Buffer to store data received from sensor.
 * @param size   Size of buffer.
 */
void us100_read(uint8_t *buffer, uint8_t size) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive_DMA(huart, buffer, size);
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <us100_read+0x24>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	b292      	uxth	r2, r2
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f006 face 	bl	800c28c <HAL_UART_Receive_DMA>
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000300 	.word	0x20000300

08005cfc <us100_data_available>:

/**
 * Function to check if data is available from the US-100 sensor.
 * @return TRUE if data is available and FALSE otherwise.
 */
uint8_t us100_data_available(void) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
	if (state == IDLE)
 8005d00:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <us100_data_available+0x7c>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10f      	bne.n	8005d28 <us100_data_available+0x2c>
	{
		// Send request to measure distance
		us100_write(cmd_dist);
 8005d08:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <us100_data_available+0x80>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff ffcd 	bl	8005cac <us100_write>
		us100_read(UART5_rx_buffer, 2);
 8005d12:	2102      	movs	r1, #2
 8005d14:	481a      	ldr	r0, [pc, #104]	; (8005d80 <us100_data_available+0x84>)
 8005d16:	f7ff ffdd 	bl	8005cd4 <us100_read>
		// Change state to wait for response
		state = WAIT_DIST;
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <us100_data_available+0x7c>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
		try = 0;
 8005d20:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <us100_data_available+0x88>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e014      	b.n	8005d52 <us100_data_available+0x56>
	}
	else if (state == CALC_DIST)
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <us100_data_available+0x7c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d110      	bne.n	8005d52 <us100_data_available+0x56>
	{
		// Calculate the distance
		distance = (UART5_rx_buffer[0] << 8) + UART5_rx_buffer[1];
 8005d30:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <us100_data_available+0x84>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <us100_data_available+0x84>)
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <us100_data_available+0x8c>)
 8005d46:	801a      	strh	r2, [r3, #0]
		state = IDLE;
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <us100_data_available+0x7c>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e010      	b.n	8005d74 <us100_data_available+0x78>
	}

  HAL_Delay(100);
 8005d52:	2064      	movs	r0, #100	; 0x64
 8005d54:	f7fb fd3e 	bl	80017d4 <HAL_Delay>

  // Retry after 5 seconds
  if (++try >= 50) {
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <us100_data_available+0x88>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <us100_data_available+0x88>)
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <us100_data_available+0x88>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b31      	cmp	r3, #49	; 0x31
 8005d6a:	d902      	bls.n	8005d72 <us100_data_available+0x76>
  	state = IDLE;
 8005d6c:	4b02      	ldr	r3, [pc, #8]	; (8005d78 <us100_data_available+0x7c>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
  }
  return FALSE;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200002f8 	.word	0x200002f8
 8005d7c:	20000094 	.word	0x20000094
 8005d80:	200002fc 	.word	0x200002fc
 8005d84:	200002f9 	.word	0x200002f9
 8005d88:	200002fa 	.word	0x200002fa

08005d8c <us100_get_distance>:

/**
 * Returns the distance calculated by the US-100 sensor.
 * @return Distance calculated by sensor in millimeters.
 */
uint16_t us100_get_distance(void) {
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0

	distance = (UART5_rx_buffer[0] << 8) + UART5_rx_buffer[1];
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <us100_get_distance+0x54>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <us100_get_distance+0x54>)
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <us100_get_distance+0x58>)
 8005da6:	801a      	strh	r2, [r3, #0]

	if (distance > max_mm_distance)
 8005da8:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <us100_get_distance+0x58>)
 8005daa:	881a      	ldrh	r2, [r3, #0]
 8005dac:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <us100_get_distance+0x5c>)
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d904      	bls.n	8005dbe <us100_get_distance+0x32>
	{
		distance = UINT16_MAX;
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <us100_get_distance+0x58>)
 8005db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e008      	b.n	8005dd0 <us100_get_distance+0x44>
	}
	else if (distance < min_mm_distance) {
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <us100_get_distance+0x58>)
 8005dc0:	881a      	ldrh	r2, [r3, #0]
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <us100_get_distance+0x60>)
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d202      	bcs.n	8005dd0 <us100_get_distance+0x44>
		distance = 0;
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <us100_get_distance+0x58>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	801a      	strh	r2, [r3, #0]
	}
	return distance;
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <us100_get_distance+0x58>)
 8005dd2:	881b      	ldrh	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	200002fc 	.word	0x200002fc
 8005de4:	200002fa 	.word	0x200002fa
 8005de8:	20000096 	.word	0x20000096
 8005dec:	20000308 	.word	0x20000308

08005df0 <HAL_UART_RxCpltCallback>:
/**
 * Callback function for DMA.
 * @param huart The UART_HandleTypeDef that is utilized for US-100 sensor UART channel.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	if (state == WAIT_DIST) {
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <HAL_UART_RxCpltCallback+0x24>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d102      	bne.n	8005e06 <HAL_UART_RxCpltCallback+0x16>
		state = CALC_DIST;
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <HAL_UART_RxCpltCallback+0x24>)
 8005e02:	2202      	movs	r2, #2
 8005e04:	701a      	strb	r2, [r3, #0]
	}
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	200002f8 	.word	0x200002f8

08005e18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e22:	2003      	movs	r0, #3
 8005e24:	f000 f972 	bl	800610c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e28:	200f      	movs	r0, #15
 8005e2a:	f000 f815 	bl	8005e58 <HAL_InitTick>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	71fb      	strb	r3, [r7, #7]
 8005e38:	e001      	b.n	8005e3e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e3a:	f000 f805 	bl	8005e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005e64:	4b17      	ldr	r3, [pc, #92]	; (8005ec4 <HAL_InitTick+0x6c>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d023      	beq.n	8005eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005e6c:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <HAL_InitTick+0x70>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <HAL_InitTick+0x6c>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f985 	bl	8006192 <HAL_SYSTICK_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10f      	bne.n	8005eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b0f      	cmp	r3, #15
 8005e92:	d809      	bhi.n	8005ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e94:	2200      	movs	r2, #0
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e9c:	f000 f941 	bl	8006122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <HAL_InitTick+0x74>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e007      	b.n	8005eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
 8005eac:	e004      	b.n	8005eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
 8005eb2:	e001      	b.n	8005eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	2000009c 	.word	0x2000009c
 8005ec8:	20000004 	.word	0x20000004
 8005ecc:	20000098 	.word	0x20000098

08005ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <HAL_IncTick+0x20>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_IncTick+0x24>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <HAL_IncTick+0x24>)
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	2000009c 	.word	0x2000009c
 8005ef4:	20002898 	.word	0x20002898

08005ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return uwTick;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_GetTick+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20002898 	.word	0x20002898

08005f10 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8005f14:	4b02      	ldr	r3, [pc, #8]	; (8005f20 <HAL_GetHalVersion+0x10>)
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	010d0000 	.word	0x010d0000

08005f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f34:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <__NVIC_SetPriorityGrouping+0x44>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f40:	4013      	ands	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f56:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <__NVIC_SetPriorityGrouping+0x44>)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	60d3      	str	r3, [r2, #12]
}
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <__NVIC_GetPriorityGrouping+0x18>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	0a1b      	lsrs	r3, r3, #8
 8005f76:	f003 0307 	and.w	r3, r3, #7
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	e000ed00 	.word	0xe000ed00

08005f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	db0b      	blt.n	8005fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	f003 021f 	and.w	r2, r3, #31
 8005fa0:	4907      	ldr	r1, [pc, #28]	; (8005fc0 <__NVIC_EnableIRQ+0x38>)
 8005fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	2001      	movs	r0, #1
 8005faa:	fa00 f202 	lsl.w	r2, r0, r2
 8005fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e100 	.word	0xe000e100

08005fc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db12      	blt.n	8005ffc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	f003 021f 	and.w	r2, r3, #31
 8005fdc:	490a      	ldr	r1, [pc, #40]	; (8006008 <__NVIC_DisableIRQ+0x44>)
 8005fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8005fea:	3320      	adds	r3, #32
 8005fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ff0:	f3bf 8f4f 	dsb	sy
}
 8005ff4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ff6:	f3bf 8f6f 	isb	sy
}
 8005ffa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	e000e100 	.word	0xe000e100

0800600c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	6039      	str	r1, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601c:	2b00      	cmp	r3, #0
 800601e:	db0a      	blt.n	8006036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	490c      	ldr	r1, [pc, #48]	; (8006058 <__NVIC_SetPriority+0x4c>)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	0112      	lsls	r2, r2, #4
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	440b      	add	r3, r1
 8006030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006034:	e00a      	b.n	800604c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	b2da      	uxtb	r2, r3
 800603a:	4908      	ldr	r1, [pc, #32]	; (800605c <__NVIC_SetPriority+0x50>)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	3b04      	subs	r3, #4
 8006044:	0112      	lsls	r2, r2, #4
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	440b      	add	r3, r1
 800604a:	761a      	strb	r2, [r3, #24]
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000e100 	.word	0xe000e100
 800605c:	e000ed00 	.word	0xe000ed00

08006060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006060:	b480      	push	{r7}
 8006062:	b089      	sub	sp, #36	; 0x24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f1c3 0307 	rsb	r3, r3, #7
 800607a:	2b04      	cmp	r3, #4
 800607c:	bf28      	it	cs
 800607e:	2304      	movcs	r3, #4
 8006080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3304      	adds	r3, #4
 8006086:	2b06      	cmp	r3, #6
 8006088:	d902      	bls.n	8006090 <NVIC_EncodePriority+0x30>
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3b03      	subs	r3, #3
 800608e:	e000      	b.n	8006092 <NVIC_EncodePriority+0x32>
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43da      	mvns	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	401a      	ands	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	43d9      	mvns	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b8:	4313      	orrs	r3, r2
         );
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d8:	d301      	bcc.n	80060de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060da:	2301      	movs	r3, #1
 80060dc:	e00f      	b.n	80060fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <SysTick_Config+0x40>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060e6:	210f      	movs	r1, #15
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ec:	f7ff ff8e 	bl	800600c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <SysTick_Config+0x40>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <SysTick_Config+0x40>)
 80060f8:	2207      	movs	r2, #7
 80060fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000e010 	.word	0xe000e010

0800610c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff05 	bl	8005f24 <__NVIC_SetPriorityGrouping>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	4603      	mov	r3, r0
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006134:	f7ff ff1a 	bl	8005f6c <__NVIC_GetPriorityGrouping>
 8006138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7ff ff8e 	bl	8006060 <NVIC_EncodePriority>
 8006144:	4602      	mov	r2, r0
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff ff5d 	bl	800600c <__NVIC_SetPriority>
}
 8006152:	bf00      	nop
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	4603      	mov	r3, r0
 8006162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff0d 	bl	8005f88 <__NVIC_EnableIRQ>
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	4603      	mov	r3, r0
 800617e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff ff1d 	bl	8005fc4 <__NVIC_DisableIRQ>
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ff94 	bl	80060c8 <SysTick_Config>
 80061a0:	4603      	mov	r3, r0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80061ae:	f000 f802 	bl	80061b6 <HAL_SYSTICK_Callback>
}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e098      	b.n	8006308 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	4b4d      	ldr	r3, [pc, #308]	; (8006314 <HAL_DMA_Init+0x150>)
 80061de:	429a      	cmp	r2, r3
 80061e0:	d80f      	bhi.n	8006202 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	4b4b      	ldr	r3, [pc, #300]	; (8006318 <HAL_DMA_Init+0x154>)
 80061ea:	4413      	add	r3, r2
 80061ec:	4a4b      	ldr	r2, [pc, #300]	; (800631c <HAL_DMA_Init+0x158>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	009a      	lsls	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a48      	ldr	r2, [pc, #288]	; (8006320 <HAL_DMA_Init+0x15c>)
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006200:	e00e      	b.n	8006220 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	4b46      	ldr	r3, [pc, #280]	; (8006324 <HAL_DMA_Init+0x160>)
 800620a:	4413      	add	r3, r2
 800620c:	4a43      	ldr	r2, [pc, #268]	; (800631c <HAL_DMA_Init+0x158>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	009a      	lsls	r2, r3, #2
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a42      	ldr	r2, [pc, #264]	; (8006328 <HAL_DMA_Init+0x164>)
 800621e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800625c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800627a:	d039      	beq.n	80062f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	4a27      	ldr	r2, [pc, #156]	; (8006320 <HAL_DMA_Init+0x15c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d11a      	bne.n	80062bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006286:	4b29      	ldr	r3, [pc, #164]	; (800632c <HAL_DMA_Init+0x168>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f003 031c 	and.w	r3, r3, #28
 8006292:	210f      	movs	r1, #15
 8006294:	fa01 f303 	lsl.w	r3, r1, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	4924      	ldr	r1, [pc, #144]	; (800632c <HAL_DMA_Init+0x168>)
 800629c:	4013      	ands	r3, r2
 800629e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80062a0:	4b22      	ldr	r3, [pc, #136]	; (800632c <HAL_DMA_Init+0x168>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6859      	ldr	r1, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	f003 031c 	and.w	r3, r3, #28
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	491d      	ldr	r1, [pc, #116]	; (800632c <HAL_DMA_Init+0x168>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]
 80062ba:	e019      	b.n	80062f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80062bc:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <HAL_DMA_Init+0x16c>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	f003 031c 	and.w	r3, r3, #28
 80062c8:	210f      	movs	r1, #15
 80062ca:	fa01 f303 	lsl.w	r3, r1, r3
 80062ce:	43db      	mvns	r3, r3
 80062d0:	4917      	ldr	r1, [pc, #92]	; (8006330 <HAL_DMA_Init+0x16c>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <HAL_DMA_Init+0x16c>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6859      	ldr	r1, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f003 031c 	and.w	r3, r3, #28
 80062e6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ea:	4911      	ldr	r1, [pc, #68]	; (8006330 <HAL_DMA_Init+0x16c>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40020407 	.word	0x40020407
 8006318:	bffdfff8 	.word	0xbffdfff8
 800631c:	cccccccd 	.word	0xcccccccd
 8006320:	40020000 	.word	0x40020000
 8006324:	bffdfbf8 	.word	0xbffdfbf8
 8006328:	40020400 	.word	0x40020400
 800632c:	400200a8 	.word	0x400200a8
 8006330:	400204a8 	.word	0x400204a8

08006334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_DMA_Start_IT+0x20>
 8006350:	2302      	movs	r3, #2
 8006352:	e04b      	b.n	80063ec <HAL_DMA_Start_IT+0xb8>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d13a      	bne.n	80063de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0201 	bic.w	r2, r2, #1
 8006384:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f92f 	bl	80065f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 020e 	orr.w	r2, r2, #14
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e00f      	b.n	80063cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 020a 	orr.w	r2, r2, #10
 80063ca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e005      	b.n	80063ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d005      	beq.n	8006418 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2204      	movs	r2, #4
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	e029      	b.n	800646c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 020e 	bic.w	r2, r2, #14
 8006426:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f003 021c 	and.w	r2, r3, #28
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	2101      	movs	r1, #1
 8006446:	fa01 f202 	lsl.w	r2, r1, r2
 800644a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
    }
  }
  return status;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	f003 031c 	and.w	r3, r3, #28
 8006496:	2204      	movs	r2, #4
 8006498:	409a      	lsls	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4013      	ands	r3, r2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d026      	beq.n	80064f0 <HAL_DMA_IRQHandler+0x7a>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d021      	beq.n	80064f0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d107      	bne.n	80064ca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0204 	bic.w	r2, r2, #4
 80064c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f003 021c 	and.w	r2, r3, #28
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	2104      	movs	r1, #4
 80064d8:	fa01 f202 	lsl.w	r2, r1, r2
 80064dc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d071      	beq.n	80065ca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80064ee:	e06c      	b.n	80065ca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f4:	f003 031c 	and.w	r3, r3, #28
 80064f8:	2202      	movs	r2, #2
 80064fa:	409a      	lsls	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4013      	ands	r3, r2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02e      	beq.n	8006562 <HAL_DMA_IRQHandler+0xec>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d029      	beq.n	8006562 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 020a 	bic.w	r2, r2, #10
 800652a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	f003 021c 	and.w	r2, r3, #28
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	2102      	movs	r1, #2
 8006542:	fa01 f202 	lsl.w	r2, r1, r2
 8006546:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d038      	beq.n	80065ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006560:	e033      	b.n	80065ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	f003 031c 	and.w	r3, r3, #28
 800656a:	2208      	movs	r2, #8
 800656c:	409a      	lsls	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d02a      	beq.n	80065cc <HAL_DMA_IRQHandler+0x156>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d025      	beq.n	80065cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 020e 	bic.w	r2, r2, #14
 800658e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006594:	f003 021c 	and.w	r2, r3, #28
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	2101      	movs	r1, #1
 800659e:	fa01 f202 	lsl.w	r2, r1, r2
 80065a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
}
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065e2:	b2db      	uxtb	r3, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	f003 021c 	and.w	r2, r3, #28
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	2101      	movs	r1, #1
 800660c:	fa01 f202 	lsl.w	r2, r1, r2
 8006610:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2b10      	cmp	r3, #16
 8006620:	d108      	bne.n	8006634 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006632:	e007      	b.n	8006644 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	460b      	mov	r3, r1
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8006662:	7afb      	ldrb	r3, [r7, #11]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	605a      	str	r2, [r3, #4]
      break;
 800666e:	e002      	b.n	8006676 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	75fb      	strb	r3, [r7, #23]
      break;
 8006674:	bf00      	nop
  }

  return status;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
}
 8006678:	4618      	mov	r0, r3
 800667a:	371c      	adds	r7, #28
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e003      	b.n	80066a0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800669e:	2300      	movs	r3, #0
  }
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	2201      	movs	r2, #1
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <HAL_EXTI_IRQHandler+0x5c>)
 80066d6:	4413      	add	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4013      	ands	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4798      	blx	r3
    }
  }
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40010414 	.word	0x40010414

0800670c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800671a:	e17f      	b.n	8006a1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	2101      	movs	r1, #1
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	4013      	ands	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8171 	beq.w	8006a16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d00b      	beq.n	8006754 <HAL_GPIO_Init+0x48>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d007      	beq.n	8006754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006748:	2b11      	cmp	r3, #17
 800674a:	d003      	beq.n	8006754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b12      	cmp	r3, #18
 8006752:	d130      	bne.n	80067b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	2203      	movs	r2, #3
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	43db      	mvns	r3, r3
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4013      	ands	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	fa02 f303 	lsl.w	r3, r2, r3
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800678a:	2201      	movs	r2, #1
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43db      	mvns	r3, r3
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4013      	ands	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	091b      	lsrs	r3, r3, #4
 80067a0:	f003 0201 	and.w	r2, r3, #1
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d118      	bne.n	80067f4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80067c8:	2201      	movs	r2, #1
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	08db      	lsrs	r3, r3, #3
 80067de:	f003 0201 	and.w	r2, r3, #1
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	fa02 f303 	lsl.w	r3, r2, r3
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	2203      	movs	r2, #3
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4013      	ands	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d003      	beq.n	8006834 <HAL_GPIO_Init+0x128>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b12      	cmp	r3, #18
 8006832:	d123      	bne.n	800687c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	08da      	lsrs	r2, r3, #3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3208      	adds	r2, #8
 800683c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006840:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	220f      	movs	r2, #15
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	43db      	mvns	r3, r3
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4013      	ands	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	08da      	lsrs	r2, r3, #3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3208      	adds	r2, #8
 8006876:	6939      	ldr	r1, [r7, #16]
 8006878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	2203      	movs	r2, #3
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	43db      	mvns	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f003 0203 	and.w	r2, r3, #3
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	fa02 f303 	lsl.w	r3, r2, r3
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80ac 	beq.w	8006a16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068be:	4b5f      	ldr	r3, [pc, #380]	; (8006a3c <HAL_GPIO_Init+0x330>)
 80068c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c2:	4a5e      	ldr	r2, [pc, #376]	; (8006a3c <HAL_GPIO_Init+0x330>)
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	6613      	str	r3, [r2, #96]	; 0x60
 80068ca:	4b5c      	ldr	r3, [pc, #368]	; (8006a3c <HAL_GPIO_Init+0x330>)
 80068cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	60bb      	str	r3, [r7, #8]
 80068d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80068d6:	4a5a      	ldr	r2, [pc, #360]	; (8006a40 <HAL_GPIO_Init+0x334>)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	3302      	adds	r3, #2
 80068de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	220f      	movs	r2, #15
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	43db      	mvns	r3, r3
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4013      	ands	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006900:	d025      	beq.n	800694e <HAL_GPIO_Init+0x242>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a4f      	ldr	r2, [pc, #316]	; (8006a44 <HAL_GPIO_Init+0x338>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01f      	beq.n	800694a <HAL_GPIO_Init+0x23e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a4e      	ldr	r2, [pc, #312]	; (8006a48 <HAL_GPIO_Init+0x33c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d019      	beq.n	8006946 <HAL_GPIO_Init+0x23a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a4d      	ldr	r2, [pc, #308]	; (8006a4c <HAL_GPIO_Init+0x340>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d013      	beq.n	8006942 <HAL_GPIO_Init+0x236>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a4c      	ldr	r2, [pc, #304]	; (8006a50 <HAL_GPIO_Init+0x344>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00d      	beq.n	800693e <HAL_GPIO_Init+0x232>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a4b      	ldr	r2, [pc, #300]	; (8006a54 <HAL_GPIO_Init+0x348>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <HAL_GPIO_Init+0x22e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a4a      	ldr	r2, [pc, #296]	; (8006a58 <HAL_GPIO_Init+0x34c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_GPIO_Init+0x22a>
 8006932:	2306      	movs	r3, #6
 8006934:	e00c      	b.n	8006950 <HAL_GPIO_Init+0x244>
 8006936:	2307      	movs	r3, #7
 8006938:	e00a      	b.n	8006950 <HAL_GPIO_Init+0x244>
 800693a:	2305      	movs	r3, #5
 800693c:	e008      	b.n	8006950 <HAL_GPIO_Init+0x244>
 800693e:	2304      	movs	r3, #4
 8006940:	e006      	b.n	8006950 <HAL_GPIO_Init+0x244>
 8006942:	2303      	movs	r3, #3
 8006944:	e004      	b.n	8006950 <HAL_GPIO_Init+0x244>
 8006946:	2302      	movs	r3, #2
 8006948:	e002      	b.n	8006950 <HAL_GPIO_Init+0x244>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <HAL_GPIO_Init+0x244>
 800694e:	2300      	movs	r3, #0
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	f002 0203 	and.w	r2, r2, #3
 8006956:	0092      	lsls	r2, r2, #2
 8006958:	4093      	lsls	r3, r2
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006960:	4937      	ldr	r1, [pc, #220]	; (8006a40 <HAL_GPIO_Init+0x334>)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	089b      	lsrs	r3, r3, #2
 8006966:	3302      	adds	r3, #2
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800696e:	4b3b      	ldr	r3, [pc, #236]	; (8006a5c <HAL_GPIO_Init+0x350>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	43db      	mvns	r3, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006992:	4a32      	ldr	r2, [pc, #200]	; (8006a5c <HAL_GPIO_Init+0x350>)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006998:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <HAL_GPIO_Init+0x350>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	43db      	mvns	r3, r3
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4013      	ands	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80069bc:	4a27      	ldr	r2, [pc, #156]	; (8006a5c <HAL_GPIO_Init+0x350>)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069c2:	4b26      	ldr	r3, [pc, #152]	; (8006a5c <HAL_GPIO_Init+0x350>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	43db      	mvns	r3, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069e6:	4a1d      	ldr	r2, [pc, #116]	; (8006a5c <HAL_GPIO_Init+0x350>)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069ec:	4b1b      	ldr	r3, [pc, #108]	; (8006a5c <HAL_GPIO_Init+0x350>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	43db      	mvns	r3, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a10:	4a12      	ldr	r2, [pc, #72]	; (8006a5c <HAL_GPIO_Init+0x350>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	fa22 f303 	lsr.w	r3, r2, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f47f ae78 	bne.w	800671c <HAL_GPIO_Init+0x10>
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	40010000 	.word	0x40010000
 8006a44:	48000400 	.word	0x48000400
 8006a48:	48000800 	.word	0x48000800
 8006a4c:	48000c00 	.word	0x48000c00
 8006a50:	48001000 	.word	0x48001000
 8006a54:	48001400 	.word	0x48001400
 8006a58:	48001800 	.word	0x48001800
 8006a5c:	40010400 	.word	0x40010400

08006a60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006a6e:	e0cd      	b.n	8006c0c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006a70:	2201      	movs	r2, #1
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80c0 	beq.w	8006c06 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006a86:	4a68      	ldr	r2, [pc, #416]	; (8006c28 <HAL_GPIO_DeInit+0x1c8>)
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	089b      	lsrs	r3, r3, #2
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	220f      	movs	r2, #15
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006aae:	d025      	beq.n	8006afc <HAL_GPIO_DeInit+0x9c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a5e      	ldr	r2, [pc, #376]	; (8006c2c <HAL_GPIO_DeInit+0x1cc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d01f      	beq.n	8006af8 <HAL_GPIO_DeInit+0x98>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a5d      	ldr	r2, [pc, #372]	; (8006c30 <HAL_GPIO_DeInit+0x1d0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d019      	beq.n	8006af4 <HAL_GPIO_DeInit+0x94>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a5c      	ldr	r2, [pc, #368]	; (8006c34 <HAL_GPIO_DeInit+0x1d4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <HAL_GPIO_DeInit+0x90>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a5b      	ldr	r2, [pc, #364]	; (8006c38 <HAL_GPIO_DeInit+0x1d8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00d      	beq.n	8006aec <HAL_GPIO_DeInit+0x8c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a5a      	ldr	r2, [pc, #360]	; (8006c3c <HAL_GPIO_DeInit+0x1dc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <HAL_GPIO_DeInit+0x88>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a59      	ldr	r2, [pc, #356]	; (8006c40 <HAL_GPIO_DeInit+0x1e0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d101      	bne.n	8006ae4 <HAL_GPIO_DeInit+0x84>
 8006ae0:	2306      	movs	r3, #6
 8006ae2:	e00c      	b.n	8006afe <HAL_GPIO_DeInit+0x9e>
 8006ae4:	2307      	movs	r3, #7
 8006ae6:	e00a      	b.n	8006afe <HAL_GPIO_DeInit+0x9e>
 8006ae8:	2305      	movs	r3, #5
 8006aea:	e008      	b.n	8006afe <HAL_GPIO_DeInit+0x9e>
 8006aec:	2304      	movs	r3, #4
 8006aee:	e006      	b.n	8006afe <HAL_GPIO_DeInit+0x9e>
 8006af0:	2303      	movs	r3, #3
 8006af2:	e004      	b.n	8006afe <HAL_GPIO_DeInit+0x9e>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e002      	b.n	8006afe <HAL_GPIO_DeInit+0x9e>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_GPIO_DeInit+0x9e>
 8006afc:	2300      	movs	r3, #0
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	f002 0203 	and.w	r2, r2, #3
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	4093      	lsls	r3, r2
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d132      	bne.n	8006b74 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006b0e:	4b4d      	ldr	r3, [pc, #308]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	43db      	mvns	r3, r3
 8006b16:	494b      	ldr	r1, [pc, #300]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006b1c:	4b49      	ldr	r3, [pc, #292]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	43db      	mvns	r3, r3
 8006b24:	4947      	ldr	r1, [pc, #284]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006b2a:	4b46      	ldr	r3, [pc, #280]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	4944      	ldr	r1, [pc, #272]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006b38:	4b42      	ldr	r3, [pc, #264]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	4940      	ldr	r1, [pc, #256]	; (8006c44 <HAL_GPIO_DeInit+0x1e4>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	220f      	movs	r2, #15
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006b56:	4a34      	ldr	r2, [pc, #208]	; (8006c28 <HAL_GPIO_DeInit+0x1c8>)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	43da      	mvns	r2, r3
 8006b66:	4830      	ldr	r0, [pc, #192]	; (8006c28 <HAL_GPIO_DeInit+0x1c8>)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	400a      	ands	r2, r1
 8006b6e:	3302      	adds	r3, #2
 8006b70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	2103      	movs	r1, #3
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	08da      	lsrs	r2, r3, #3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3208      	adds	r2, #8
 8006b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	220f      	movs	r2, #15
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	08d2      	lsrs	r2, r2, #3
 8006ba8:	4019      	ands	r1, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3208      	adds	r2, #8
 8006bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	2103      	movs	r1, #3
 8006bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	2101      	movs	r1, #1
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	401a      	ands	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	2103      	movs	r1, #3
 8006be6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bea:	43db      	mvns	r3, r3
 8006bec:	401a      	ands	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	401a      	ands	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f47f af2b 	bne.w	8006a70 <HAL_GPIO_DeInit+0x10>
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	48000400 	.word	0x48000400
 8006c30:	48000800 	.word	0x48000800
 8006c34:	48000c00 	.word	0x48000c00
 8006c38:	48001000 	.word	0x48001000
 8006c3c:	48001400 	.word	0x48001400
 8006c40:	48001800 	.word	0x48001800
 8006c44:	40010400 	.word	0x40010400

08006c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	887b      	ldrh	r3, [r7, #2]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
 8006c64:	e001      	b.n	8006c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	807b      	strh	r3, [r7, #2]
 8006c84:	4613      	mov	r3, r2
 8006c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c88:	787b      	ldrb	r3, [r7, #1]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c8e:	887a      	ldrh	r2, [r7, #2]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c94:	e002      	b.n	8006c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c96:	887a      	ldrh	r2, [r7, #2]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e081      	b.n	8006dbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f8a8 	bl	8006e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2224      	movs	r2, #36	; 0x24
 8006cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d107      	bne.n	8006d22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	e006      	b.n	8006d30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d104      	bne.n	8006d42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	ea42 0103 	orr.w	r1, r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	021a      	lsls	r2, r3, #8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69d9      	ldr	r1, [r3, #28]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1a      	ldr	r2, [r3, #32]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e021      	b.n	8006e1c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2224      	movs	r2, #36	; 0x24
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f821 	bl	8006e38 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	817b      	strh	r3, [r7, #10]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	813b      	strh	r3, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	f040 80f9 	bne.w	8007066 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <HAL_I2C_Mem_Write+0x34>
 8006e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d105      	bne.n	8006e8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0ed      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_I2C_Mem_Write+0x4e>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e0e6      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ea2:	f7ff f829 	bl	8005ef8 <HAL_GetTick>
 8006ea6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	2319      	movs	r3, #25
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 ffe6 	bl	8007e86 <I2C_WaitOnFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0d1      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2221      	movs	r2, #33	; 0x21
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2240      	movs	r2, #64	; 0x40
 8006ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a3a      	ldr	r2, [r7, #32]
 8006ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006eec:	88f8      	ldrh	r0, [r7, #6]
 8006eee:	893a      	ldrh	r2, [r7, #8]
 8006ef0:	8979      	ldrh	r1, [r7, #10]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	4603      	mov	r3, r0
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fb9f 	bl	8007640 <I2C_RequestMemoryWrite>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0a9      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2bff      	cmp	r3, #255	; 0xff
 8006f1c:	d90e      	bls.n	8006f3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	22ff      	movs	r2, #255	; 0xff
 8006f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	8979      	ldrh	r1, [r7, #10]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f001 f8c9 	bl	80080cc <I2C_TransferConfig>
 8006f3a:	e00f      	b.n	8006f5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	8979      	ldrh	r1, [r7, #10]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f001 f8b8 	bl	80080cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 ffd0 	bl	8007f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e07b      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d034      	beq.n	8007014 <HAL_I2C_Mem_Write+0x1c8>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d130      	bne.n	8007014 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 ff62 	bl	8007e86 <I2C_WaitOnFlagUntilTimeout>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e04d      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2bff      	cmp	r3, #255	; 0xff
 8006fd4:	d90e      	bls.n	8006ff4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	22ff      	movs	r2, #255	; 0xff
 8006fda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	8979      	ldrh	r1, [r7, #10]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f001 f86d 	bl	80080cc <I2C_TransferConfig>
 8006ff2:	e00f      	b.n	8007014 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007002:	b2da      	uxtb	r2, r3
 8007004:	8979      	ldrh	r1, [r7, #10]
 8007006:	2300      	movs	r3, #0
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f001 f85c 	bl	80080cc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d19e      	bne.n	8006f5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 ffaf 	bl	8007f86 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e01a      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2220      	movs	r2, #32
 8007038:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6859      	ldr	r1, [r3, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <HAL_I2C_Mem_Write+0x224>)
 8007046:	400b      	ands	r3, r1
 8007048:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	e000      	b.n	8007068 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007066:	2302      	movs	r3, #2
  }
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	fe00e800 	.word	0xfe00e800

08007074 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af02      	add	r7, sp, #8
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	461a      	mov	r2, r3
 8007082:	4603      	mov	r3, r0
 8007084:	817b      	strh	r3, [r7, #10]
 8007086:	460b      	mov	r3, r1
 8007088:	813b      	strh	r3, [r7, #8]
 800708a:	4613      	mov	r3, r2
 800708c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b20      	cmp	r3, #32
 8007098:	f040 80fd 	bne.w	8007296 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_I2C_Mem_Read+0x34>
 80070a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0f1      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_I2C_Mem_Read+0x4e>
 80070be:	2302      	movs	r3, #2
 80070c0:	e0ea      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070ca:	f7fe ff15 	bl	8005ef8 <HAL_GetTick>
 80070ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	2319      	movs	r3, #25
 80070d6:	2201      	movs	r2, #1
 80070d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fed2 	bl	8007e86 <I2C_WaitOnFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0d5      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2222      	movs	r2, #34	; 0x22
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2240      	movs	r2, #64	; 0x40
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a3a      	ldr	r2, [r7, #32]
 8007106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800710c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007114:	88f8      	ldrh	r0, [r7, #6]
 8007116:	893a      	ldrh	r2, [r7, #8]
 8007118:	8979      	ldrh	r1, [r7, #10]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4603      	mov	r3, r0
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fadf 	bl	80076e8 <I2C_RequestMemoryRead>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0ad      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	2bff      	cmp	r3, #255	; 0xff
 8007144:	d90e      	bls.n	8007164 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	22ff      	movs	r2, #255	; 0xff
 800714a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007150:	b2da      	uxtb	r2, r3
 8007152:	8979      	ldrh	r1, [r7, #10]
 8007154:	4b52      	ldr	r3, [pc, #328]	; (80072a0 <HAL_I2C_Mem_Read+0x22c>)
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 ffb5 	bl	80080cc <I2C_TransferConfig>
 8007162:	e00f      	b.n	8007184 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007172:	b2da      	uxtb	r2, r3
 8007174:	8979      	ldrh	r1, [r7, #10]
 8007176:	4b4a      	ldr	r3, [pc, #296]	; (80072a0 <HAL_I2C_Mem_Read+0x22c>)
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 ffa4 	bl	80080cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2200      	movs	r2, #0
 800718c:	2104      	movs	r1, #4
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fe79 	bl	8007e86 <I2C_WaitOnFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e07c      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d034      	beq.n	8007244 <HAL_I2C_Mem_Read+0x1d0>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d130      	bne.n	8007244 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	2200      	movs	r2, #0
 80071ea:	2180      	movs	r1, #128	; 0x80
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fe4a 	bl	8007e86 <I2C_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e04d      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	2bff      	cmp	r3, #255	; 0xff
 8007204:	d90e      	bls.n	8007224 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	22ff      	movs	r2, #255	; 0xff
 800720a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007210:	b2da      	uxtb	r2, r3
 8007212:	8979      	ldrh	r1, [r7, #10]
 8007214:	2300      	movs	r3, #0
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 ff55 	bl	80080cc <I2C_TransferConfig>
 8007222:	e00f      	b.n	8007244 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007232:	b2da      	uxtb	r2, r3
 8007234:	8979      	ldrh	r1, [r7, #10]
 8007236:	2300      	movs	r3, #0
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 ff44 	bl	80080cc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d19a      	bne.n	8007184 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fe97 	bl	8007f86 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e01a      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2220      	movs	r2, #32
 8007268:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6859      	ldr	r1, [r3, #4]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <HAL_I2C_Mem_Read+0x230>)
 8007276:	400b      	ands	r3, r1
 8007278:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e000      	b.n	8007298 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007296:	2302      	movs	r3, #2
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	80002400 	.word	0x80002400
 80072a4:	fe00e800 	.word	0xfe00e800

080072a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
  }
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d010      	beq.n	8007322 <HAL_I2C_ER_IRQHandler+0x46>
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	09db      	lsrs	r3, r3, #7
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007310:	f043 0201 	orr.w	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007320:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	0a9b      	lsrs	r3, r3, #10
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d010      	beq.n	8007350 <HAL_I2C_ER_IRQHandler+0x74>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	09db      	lsrs	r3, r3, #7
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	f043 0208 	orr.w	r2, r3, #8
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800734e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	0a5b      	lsrs	r3, r3, #9
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <HAL_I2C_ER_IRQHandler+0xa2>
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	09db      	lsrs	r3, r3, #7
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736c:	f043 0202 	orr.w	r2, r3, #2
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800737c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f003 030b 	and.w	r3, r3, #11
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc3f 	bl	8007c14 <I2C_ITError>
  }
}
 8007396:	bf00      	nop
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
 80073d2:	4613      	mov	r3, r2
 80073d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800742c:	b2db      	uxtb	r3, r3
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <I2C_Slave_ISR_IT+0x24>
 800745a:	2302      	movs	r3, #2
 800745c:	e0ec      	b.n	8007638 <I2C_Slave_ISR_IT+0x1fe>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	095b      	lsrs	r3, r3, #5
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <I2C_Slave_ISR_IT+0x4c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800747e:	6939      	ldr	r1, [r7, #16]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fa67 	bl	8007954 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	091b      	lsrs	r3, r3, #4
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d04d      	beq.n	800752e <I2C_Slave_ISR_IT+0xf4>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d047      	beq.n	800752e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d128      	bne.n	80074fa <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b28      	cmp	r3, #40	; 0x28
 80074b2:	d108      	bne.n	80074c6 <I2C_Slave_ISR_IT+0x8c>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074ba:	d104      	bne.n	80074c6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80074bc:	6939      	ldr	r1, [r7, #16]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fb52 	bl	8007b68 <I2C_ITListenCplt>
 80074c4:	e032      	b.n	800752c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b29      	cmp	r3, #41	; 0x29
 80074d0:	d10e      	bne.n	80074f0 <I2C_Slave_ISR_IT+0xb6>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074d8:	d00a      	beq.n	80074f0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2210      	movs	r2, #16
 80074e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 fc8d 	bl	8007e02 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f9d5 	bl	8007898 <I2C_ITSlaveSeqCplt>
 80074ee:	e01d      	b.n	800752c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2210      	movs	r2, #16
 80074f6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80074f8:	e096      	b.n	8007628 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2210      	movs	r2, #16
 8007500:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <I2C_Slave_ISR_IT+0xe4>
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800751a:	f040 8085 	bne.w	8007628 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fb75 	bl	8007c14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800752a:	e07d      	b.n	8007628 <I2C_Slave_ISR_IT+0x1ee>
 800752c:	e07c      	b.n	8007628 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	089b      	lsrs	r3, r3, #2
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d030      	beq.n	800759c <I2C_Slave_ISR_IT+0x162>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	089b      	lsrs	r3, r3, #2
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d02a      	beq.n	800759c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d018      	beq.n	8007582 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d14f      	bne.n	800762c <I2C_Slave_ISR_IT+0x1f2>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007592:	d04b      	beq.n	800762c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f97f 	bl	8007898 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800759a:	e047      	b.n	800762c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	08db      	lsrs	r3, r3, #3
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	08db      	lsrs	r3, r3, #3
 80075ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80075b4:	6939      	ldr	r1, [r7, #16]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 f8ea 	bl	8007790 <I2C_ITAddrCplt>
 80075bc:	e037      	b.n	800762e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d031      	beq.n	800762e <I2C_Slave_ISR_IT+0x1f4>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d02b      	beq.n	800762e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d018      	beq.n	8007612 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007610:	e00d      	b.n	800762e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007618:	d002      	beq.n	8007620 <I2C_Slave_ISR_IT+0x1e6>
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f939 	bl	8007898 <I2C_ITSlaveSeqCplt>
 8007626:	e002      	b.n	800762e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007628:	bf00      	nop
 800762a:	e000      	b.n	800762e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800762c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af02      	add	r7, sp, #8
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	4608      	mov	r0, r1
 800764a:	4611      	mov	r1, r2
 800764c:	461a      	mov	r2, r3
 800764e:	4603      	mov	r3, r0
 8007650:	817b      	strh	r3, [r7, #10]
 8007652:	460b      	mov	r3, r1
 8007654:	813b      	strh	r3, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	8979      	ldrh	r1, [r7, #10]
 8007660:	4b20      	ldr	r3, [pc, #128]	; (80076e4 <I2C_RequestMemoryWrite+0xa4>)
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fd2f 	bl	80080cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	69b9      	ldr	r1, [r7, #24]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fc47 	bl	8007f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e02c      	b.n	80076dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007682:	88fb      	ldrh	r3, [r7, #6]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d105      	bne.n	8007694 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007688:	893b      	ldrh	r3, [r7, #8]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
 8007692:	e015      	b.n	80076c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007694:	893b      	ldrh	r3, [r7, #8]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	b29b      	uxth	r3, r3
 800769a:	b2da      	uxtb	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	69b9      	ldr	r1, [r7, #24]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fc2d 	bl	8007f06 <I2C_WaitOnTXISFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e012      	b.n	80076dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076b6:	893b      	ldrh	r3, [r7, #8]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2200      	movs	r2, #0
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fbdb 	bl	8007e86 <I2C_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	80002000 	.word	0x80002000

080076e8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	817b      	strh	r3, [r7, #10]
 80076fa:	460b      	mov	r3, r1
 80076fc:	813b      	strh	r3, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	b2da      	uxtb	r2, r3
 8007706:	8979      	ldrh	r1, [r7, #10]
 8007708:	4b20      	ldr	r3, [pc, #128]	; (800778c <I2C_RequestMemoryRead+0xa4>)
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	2300      	movs	r3, #0
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fcdc 	bl	80080cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	69b9      	ldr	r1, [r7, #24]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fbf4 	bl	8007f06 <I2C_WaitOnTXISFlagUntilTimeout>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e02c      	b.n	8007782 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d105      	bne.n	800773a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800772e:	893b      	ldrh	r3, [r7, #8]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
 8007738:	e015      	b.n	8007766 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	0a1b      	lsrs	r3, r3, #8
 800773e:	b29b      	uxth	r3, r3
 8007740:	b2da      	uxtb	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	69b9      	ldr	r1, [r7, #24]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 fbda 	bl	8007f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e012      	b.n	8007782 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800775c:	893b      	ldrh	r3, [r7, #8]
 800775e:	b2da      	uxtb	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2200      	movs	r2, #0
 800776e:	2140      	movs	r1, #64	; 0x40
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fb88 	bl	8007e86 <I2C_WaitOnFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	80002000 	.word	0x80002000

08007790 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077a6:	2b28      	cmp	r3, #40	; 0x28
 80077a8:	d16a      	bne.n	8007880 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	0c1b      	lsrs	r3, r3, #16
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	0c1b      	lsrs	r3, r3, #16
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80077c8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80077e4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d138      	bne.n	8007860 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80077ee:	897b      	ldrh	r3, [r7, #10]
 80077f0:	09db      	lsrs	r3, r3, #7
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	89bb      	ldrh	r3, [r7, #12]
 80077f6:	4053      	eors	r3, r2
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f003 0306 	and.w	r3, r3, #6
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d11c      	bne.n	800783c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007802:	897b      	ldrh	r3, [r7, #10]
 8007804:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007814:	2b02      	cmp	r3, #2
 8007816:	d13b      	bne.n	8007890 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2208      	movs	r2, #8
 8007824:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800782e:	89ba      	ldrh	r2, [r7, #12]
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff fdc6 	bl	80073c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800783a:	e029      	b.n	8007890 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800783c:	893b      	ldrh	r3, [r7, #8]
 800783e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc6f 	bl	8008128 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007852:	89ba      	ldrh	r2, [r7, #12]
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fdb4 	bl	80073c6 <HAL_I2C_AddrCallback>
}
 800785e:	e017      	b.n	8007890 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc5f 	bl	8008128 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007872:	89ba      	ldrh	r2, [r7, #12]
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff fda4 	bl	80073c6 <HAL_I2C_AddrCallback>
}
 800787e:	e007      	b.n	8007890 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2208      	movs	r2, #8
 8007886:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	0b9b      	lsrs	r3, r3, #14
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	e00d      	b.n	80078ea <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	0bdb      	lsrs	r3, r3, #15
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d007      	beq.n	80078ea <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b29      	cmp	r3, #41	; 0x29
 80078f4:	d112      	bne.n	800791c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2228      	movs	r2, #40	; 0x28
 80078fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2221      	movs	r2, #33	; 0x21
 8007902:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007904:	2101      	movs	r1, #1
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fc0e 	bl	8008128 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fd42 	bl	800739e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800791a:	e017      	b.n	800794c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b2a      	cmp	r3, #42	; 0x2a
 8007926:	d111      	bne.n	800794c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2228      	movs	r2, #40	; 0x28
 800792c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2222      	movs	r2, #34	; 0x22
 8007934:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007936:	2102      	movs	r1, #2
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fbf5 	bl	8008128 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fd33 	bl	80073b2 <HAL_I2C_SlaveRxCpltCallback>
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007970:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2220      	movs	r2, #32
 8007978:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b21      	cmp	r3, #33	; 0x21
 800797e:	d002      	beq.n	8007986 <I2C_ITSlaveCplt+0x32>
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b29      	cmp	r3, #41	; 0x29
 8007984:	d108      	bne.n	8007998 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007986:	f248 0101 	movw	r1, #32769	; 0x8001
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fbcc 	bl	8008128 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2221      	movs	r2, #33	; 0x21
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
 8007996:	e00d      	b.n	80079b4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b22      	cmp	r3, #34	; 0x22
 800799c:	d002      	beq.n	80079a4 <I2C_ITSlaveCplt+0x50>
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	2b2a      	cmp	r3, #42	; 0x2a
 80079a2:	d107      	bne.n	80079b4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80079a4:	f248 0102 	movw	r1, #32770	; 0x8002
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fbbd 	bl	8008128 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2222      	movs	r2, #34	; 0x22
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079c2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6859      	ldr	r1, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b64      	ldr	r3, [pc, #400]	; (8007b60 <I2C_ITSlaveCplt+0x20c>)
 80079d0:	400b      	ands	r3, r1
 80079d2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fa14 	bl	8007e02 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	0b9b      	lsrs	r3, r3, #14
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d013      	beq.n	8007a0e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d020      	beq.n	8007a40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a0c:	e018      	b.n	8007a40 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	0bdb      	lsrs	r3, r3, #15
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d012      	beq.n	8007a40 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d006      	beq.n	8007a40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	089b      	lsrs	r3, r3, #2
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d020      	beq.n	8007a8e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 0304 	bic.w	r3, r3, #4
 8007a52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00c      	beq.n	8007a8e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	f043 0204 	orr.w	r2, r3, #4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d010      	beq.n	8007adc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8a7 	bl	8007c14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b28      	cmp	r3, #40	; 0x28
 8007ad0:	d141      	bne.n	8007b56 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ad2:	6979      	ldr	r1, [r7, #20]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f847 	bl	8007b68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ada:	e03c      	b.n	8007b56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ae4:	d014      	beq.n	8007b10 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fed6 	bl	8007898 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <I2C_ITSlaveCplt+0x210>)
 8007af0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fc6a 	bl	80073e2 <HAL_I2C_ListenCpltCallback>
}
 8007b0e:	e022      	b.n	8007b56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b22      	cmp	r3, #34	; 0x22
 8007b1a:	d10e      	bne.n	8007b3a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fc3d 	bl	80073b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007b38:	e00d      	b.n	8007b56 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fc24 	bl	800739e <HAL_I2C_SlaveTxCpltCallback>
}
 8007b56:	bf00      	nop
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	fe00e800 	.word	0xfe00e800
 8007b64:	ffff0000 	.word	0xffff0000

08007b68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a26      	ldr	r2, [pc, #152]	; (8007c10 <I2C_ITListenCplt+0xa8>)
 8007b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d022      	beq.n	8007be6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d012      	beq.n	8007be6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	f043 0204 	orr.w	r2, r3, #4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007be6:	f248 0103 	movw	r1, #32771	; 0x8003
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa9c 	bl	8008128 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2210      	movs	r2, #16
 8007bf6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fbee 	bl	80073e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	ffff0000 	.word	0xffff0000

08007c14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a5d      	ldr	r2, [pc, #372]	; (8007da8 <I2C_ITError+0x194>)
 8007c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b28      	cmp	r3, #40	; 0x28
 8007c4a:	d005      	beq.n	8007c58 <I2C_ITError+0x44>
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	2b29      	cmp	r3, #41	; 0x29
 8007c50:	d002      	beq.n	8007c58 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b2a      	cmp	r3, #42	; 0x2a
 8007c56:	d10b      	bne.n	8007c70 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c58:	2103      	movs	r1, #3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa64 	bl	8008128 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2228      	movs	r2, #40	; 0x28
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a50      	ldr	r2, [pc, #320]	; (8007dac <I2C_ITError+0x198>)
 8007c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8007c6e:	e011      	b.n	8007c94 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c70:	f248 0103 	movw	r1, #32771	; 0x8003
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fa57 	bl	8008128 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b60      	cmp	r3, #96	; 0x60
 8007c84:	d003      	beq.n	8007c8e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d039      	beq.n	8007d16 <I2C_ITError+0x102>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b11      	cmp	r3, #17
 8007ca6:	d002      	beq.n	8007cae <I2C_ITError+0x9a>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b21      	cmp	r3, #33	; 0x21
 8007cac:	d133      	bne.n	8007d16 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cbc:	d107      	bne.n	8007cce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ccc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fc7e 	bl	80065d4 <HAL_DMA_GetState>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d017      	beq.n	8007d0e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	4a33      	ldr	r2, [pc, #204]	; (8007db0 <I2C_ITError+0x19c>)
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fb7e 	bl	80063f4 <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d04d      	beq.n	8007d9a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d0c:	e045      	b.n	8007d9a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f850 	bl	8007db4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d14:	e041      	b.n	8007d9a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d039      	beq.n	8007d92 <I2C_ITError+0x17e>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b12      	cmp	r3, #18
 8007d22:	d002      	beq.n	8007d2a <I2C_ITError+0x116>
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2b22      	cmp	r3, #34	; 0x22
 8007d28:	d133      	bne.n	8007d92 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d38:	d107      	bne.n	8007d4a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fc40 	bl	80065d4 <HAL_DMA_GetState>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d017      	beq.n	8007d8a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <I2C_ITError+0x19c>)
 8007d60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fb40 	bl	80063f4 <HAL_DMA_Abort_IT>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d011      	beq.n	8007d9e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d88:	e009      	b.n	8007d9e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f812 	bl	8007db4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d90:	e005      	b.n	8007d9e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f80e 	bl	8007db4 <I2C_TreatErrorCallback>
  }
}
 8007d98:	e002      	b.n	8007da0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d9a:	bf00      	nop
 8007d9c:	e000      	b.n	8007da0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d9e:	bf00      	nop
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	ffff0000 	.word	0xffff0000
 8007dac:	0800743b 	.word	0x0800743b
 8007db0:	08007e4b 	.word	0x08007e4b

08007db4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b60      	cmp	r3, #96	; 0x60
 8007dc6:	d10e      	bne.n	8007de6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff fb13 	bl	800740a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007de4:	e009      	b.n	8007dfa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff fafe 	bl	80073f6 <HAL_I2C_ErrorCallback>
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d103      	bne.n	8007e20 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d007      	beq.n	8007e3e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0201 	orr.w	r2, r2, #1
 8007e3c:	619a      	str	r2, [r3, #24]
  }
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e64:	2200      	movs	r2, #0
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e74:	2200      	movs	r2, #0
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff ff9b 	bl	8007db4 <I2C_TreatErrorCallback>
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e96:	e022      	b.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e9e:	d01e      	beq.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea0:	f7fe f82a 	bl	8005ef8 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d113      	bne.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	f043 0220 	orr.w	r2, r3, #32
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e00f      	b.n	8007efe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	bf0c      	ite	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	2300      	movne	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d0cd      	beq.n	8007e98 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f12:	e02c      	b.n	8007f6e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f871 	bl	8008000 <I2C_IsAcknowledgeFailed>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e02a      	b.n	8007f7e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f2e:	d01e      	beq.n	8007f6e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f30:	f7fd ffe2 	bl	8005ef8 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d113      	bne.n	8007f6e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	f043 0220 	orr.w	r2, r3, #32
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e007      	b.n	8007f7e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d1cb      	bne.n	8007f14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f92:	e028      	b.n	8007fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f831 	bl	8008000 <I2C_IsAcknowledgeFailed>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e026      	b.n	8007ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa8:	f7fd ffa6 	bl	8005ef8 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d302      	bcc.n	8007fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d113      	bne.n	8007fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc2:	f043 0220 	orr.w	r2, r3, #32
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e007      	b.n	8007ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d1cf      	bne.n	8007f94 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f003 0310 	and.w	r3, r3, #16
 8008016:	2b10      	cmp	r3, #16
 8008018:	d151      	bne.n	80080be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800801a:	e022      	b.n	8008062 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008022:	d01e      	beq.n	8008062 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008024:	f7fd ff68 	bl	8005ef8 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	429a      	cmp	r2, r3
 8008032:	d302      	bcc.n	800803a <I2C_IsAcknowledgeFailed+0x3a>
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d113      	bne.n	8008062 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f043 0220 	orr.w	r2, r3, #32
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e02e      	b.n	80080c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b20      	cmp	r3, #32
 800806e:	d1d5      	bne.n	800801c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2210      	movs	r2, #16
 8008076:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2220      	movs	r2, #32
 800807e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff febe 	bl	8007e02 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6859      	ldr	r1, [r3, #4]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8008092:	400b      	ands	r3, r1
 8008094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	f043 0204 	orr.w	r2, r3, #4
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e000      	b.n	80080c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	fe00e800 	.word	0xfe00e800

080080cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	607b      	str	r3, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	817b      	strh	r3, [r7, #10]
 80080da:	4613      	mov	r3, r2
 80080dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	0d5b      	lsrs	r3, r3, #21
 80080e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <I2C_TransferConfig+0x58>)
 80080ee:	430b      	orrs	r3, r1
 80080f0:	43db      	mvns	r3, r3
 80080f2:	ea02 0103 	and.w	r1, r2, r3
 80080f6:	897b      	ldrh	r3, [r7, #10]
 80080f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80080fc:	7a7b      	ldrb	r3, [r7, #9]
 80080fe:	041b      	lsls	r3, r3, #16
 8008100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	431a      	orrs	r2, r3
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	431a      	orrs	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	03ff63ff 	.word	0x03ff63ff

08008128 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008138:	887b      	ldrh	r3, [r7, #2]
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00f      	beq.n	8008162 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008148:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008156:	2b28      	cmp	r3, #40	; 0x28
 8008158:	d003      	beq.n	8008162 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008160:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008162:	887b      	ldrh	r3, [r7, #2]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00f      	beq.n	800818c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008172:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800817a:	b2db      	uxtb	r3, r3
 800817c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008180:	2b28      	cmp	r3, #40	; 0x28
 8008182:	d003      	beq.n	800818c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800818a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800818c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008190:	2b00      	cmp	r3, #0
 8008192:	da03      	bge.n	800819c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800819a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800819c:	887b      	ldrh	r3, [r7, #2]
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d103      	bne.n	80081aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80081a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081aa:	887b      	ldrh	r3, [r7, #2]
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d103      	bne.n	80081b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f043 0320 	orr.w	r3, r3, #32
 80081b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80081b8:	887b      	ldrh	r3, [r7, #2]
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d103      	bne.n	80081c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6819      	ldr	r1, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	43da      	mvns	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	400a      	ands	r2, r1
 80081d6:	601a      	str	r2, [r3, #0]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80081e4:	b590      	push	{r4, r7, lr}
 80081e6:	b08d      	sub	sp, #52	; 0x34
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f005 fc3b 	bl	800da76 <USB_GetMode>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 838f 	bne.w	8008926 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f005 fb9f 	bl	800d950 <USB_ReadInterrupts>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8385 	beq.w	8008924 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4618      	mov	r0, r3
 8008220:	f005 fb96 	bl	800d950 <USB_ReadInterrupts>
 8008224:	4603      	mov	r3, r0
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b02      	cmp	r3, #2
 800822c:	d107      	bne.n	800823e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695a      	ldr	r2, [r3, #20]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f002 0202 	and.w	r2, r2, #2
 800823c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f005 fb84 	bl	800d950 <USB_ReadInterrupts>
 8008248:	4603      	mov	r3, r0
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b10      	cmp	r3, #16
 8008250:	d161      	bne.n	8008316 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699a      	ldr	r2, [r3, #24]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0210 	bic.w	r2, r2, #16
 8008260:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f003 020f 	and.w	r2, r3, #15
 800826e:	4613      	mov	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	3304      	adds	r3, #4
 8008280:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	0c5b      	lsrs	r3, r3, #17
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	2b02      	cmp	r3, #2
 800828c:	d124      	bne.n	80082d8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008294:	4013      	ands	r3, r2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d035      	beq.n	8008306 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	091b      	lsrs	r3, r3, #4
 80082a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80082a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	6a38      	ldr	r0, [r7, #32]
 80082ae:	f005 fa2c 	bl	800d70a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	091b      	lsrs	r3, r3, #4
 80082ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082be:	441a      	add	r2, r3
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	091b      	lsrs	r3, r3, #4
 80082cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082d0:	441a      	add	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	619a      	str	r2, [r3, #24]
 80082d6:	e016      	b.n	8008306 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	0c5b      	lsrs	r3, r3, #17
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	2b06      	cmp	r3, #6
 80082e2:	d110      	bne.n	8008306 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80082ea:	2208      	movs	r2, #8
 80082ec:	4619      	mov	r1, r3
 80082ee:	6a38      	ldr	r0, [r7, #32]
 80082f0:	f005 fa0b 	bl	800d70a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008300:	441a      	add	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699a      	ldr	r2, [r3, #24]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0210 	orr.w	r2, r2, #16
 8008314:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f005 fb18 	bl	800d950 <USB_ReadInterrupts>
 8008320:	4603      	mov	r3, r0
 8008322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008326:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800832a:	d16e      	bne.n	800840a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f005 fb1e 	bl	800d976 <USB_ReadDevAllOutEpInterrupt>
 800833a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800833c:	e062      	b.n	8008404 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d057      	beq.n	80083f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834e:	b2d2      	uxtb	r2, r2
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f005 fb43 	bl	800d9de <USB_ReadDevOutEPInterrupt>
 8008358:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00c      	beq.n	800837e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008370:	461a      	mov	r2, r3
 8008372:	2301      	movs	r3, #1
 8008374:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fd1f 	bl	8008dbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00c      	beq.n	80083a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008394:	461a      	mov	r2, r3
 8008396:	2308      	movs	r3, #8
 8008398:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800839a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fd5b 	bl	8008e58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d008      	beq.n	80083be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b8:	461a      	mov	r2, r3
 80083ba:	2310      	movs	r3, #16
 80083bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	461a      	mov	r2, r3
 80083d6:	2320      	movs	r3, #32
 80083d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d009      	beq.n	80083f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f0:	461a      	mov	r2, r3
 80083f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	3301      	adds	r3, #1
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	d199      	bne.n	800833e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4618      	mov	r0, r3
 8008410:	f005 fa9e 	bl	800d950 <USB_ReadInterrupts>
 8008414:	4603      	mov	r3, r0
 8008416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800841a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800841e:	f040 8087 	bne.w	8008530 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4618      	mov	r0, r3
 8008428:	f005 fabf 	bl	800d9aa <USB_ReadDevAllInEpInterrupt>
 800842c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008432:	e07a      	b.n	800852a <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d06f      	beq.n	800851e <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f005 fae6 	bl	800da1a <USB_ReadDevInEPInterrupt>
 800844e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d020      	beq.n	800849c <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	2201      	movs	r2, #1
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	43db      	mvns	r3, r3
 8008474:	69f9      	ldr	r1, [r7, #28]
 8008476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800847a:	4013      	ands	r3, r2
 800847c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848a:	461a      	mov	r2, r3
 800848c:	2301      	movs	r3, #1
 800848e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	b2db      	uxtb	r3, r3
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fa fda7 	bl	8002fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b2:	461a      	mov	r2, r3
 80084b4:	2308      	movs	r3, #8
 80084b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f003 0310 	and.w	r3, r3, #16
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d008      	beq.n	80084d4 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	461a      	mov	r2, r3
 80084d0:	2310      	movs	r3, #16
 80084d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	461a      	mov	r2, r3
 80084ec:	2340      	movs	r3, #64	; 0x40
 80084ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008506:	461a      	mov	r2, r3
 8008508:	2302      	movs	r3, #2
 800850a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fbc7 	bl	8008cac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	3301      	adds	r3, #1
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	2b00      	cmp	r3, #0
 800852e:	d181      	bne.n	8008434 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f005 fa0b 	bl	800d950 <USB_ReadInterrupts>
 800853a:	4603      	mov	r3, r0
 800853c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008544:	d122      	bne.n	800858c <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008560:	2b01      	cmp	r3, #1
 8008562:	d108      	bne.n	8008576 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800856c:	2100      	movs	r1, #0
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fca6 	bl	8008ec0 <HAL_PCDEx_LPM_Callback>
 8008574:	e002      	b.n	800857c <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fa fd82 	bl	8003080 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695a      	ldr	r2, [r3, #20]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800858a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f005 f9dd 	bl	800d950 <USB_ReadInterrupts>
 8008596:	4603      	mov	r3, r0
 8008598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a0:	d112      	bne.n	80085c8 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d102      	bne.n	80085b8 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fa fd56 	bl	8003064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80085c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f005 f9bf 	bl	800d950 <USB_ReadInterrupts>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085dc:	d121      	bne.n	8008622 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	695a      	ldr	r2, [r3, #20]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80085ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d111      	bne.n	800861c <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008606:	089b      	lsrs	r3, r3, #2
 8008608:	f003 020f 	and.w	r2, r3, #15
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008612:	2101      	movs	r1, #1
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc53 	bl	8008ec0 <HAL_PCDEx_LPM_Callback>
 800861a:	e002      	b.n	8008622 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7fa fd21 	bl	8003064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f005 f992 	bl	800d950 <USB_ReadInterrupts>
 800862c:	4603      	mov	r3, r0
 800862e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008636:	f040 80c5 	bne.w	80087c4 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2110      	movs	r1, #16
 8008654:	4618      	mov	r0, r3
 8008656:	f004 fc61 	bl	800cf1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800865a:	2300      	movs	r3, #0
 800865c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800865e:	e056      	b.n	800870e <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	461a      	mov	r2, r3
 800866e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008672:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008692:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c0:	461a      	mov	r2, r3
 80086c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086f8:	0151      	lsls	r1, r2, #5
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	440a      	add	r2, r1
 80086fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008706:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	3301      	adds	r3, #1
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008714:	429a      	cmp	r2, r3
 8008716:	d3a3      	bcc.n	8008660 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008726:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800872a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d016      	beq.n	8008762 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800873e:	69fa      	ldr	r2, [r7, #28]
 8008740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008744:	f043 030b 	orr.w	r3, r3, #11
 8008748:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800875a:	f043 030b 	orr.w	r3, r3, #11
 800875e:	6453      	str	r3, [r2, #68]	; 0x44
 8008760:	e015      	b.n	800878e <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	69fa      	ldr	r2, [r7, #28]
 800876c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008774:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008778:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008788:	f043 030b 	orr.w	r3, r3, #11
 800878c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800879c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80087a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f005 f992 	bl	800dad8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695a      	ldr	r2, [r3, #20]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80087c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f005 f8c1 	bl	800d950 <USB_ReadInterrupts>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d8:	d124      	bne.n	8008824 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f005 f957 	bl	800da92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f004 fbbd 	bl	800cf68 <USB_GetDevSpeed>
 80087ee:	4603      	mov	r3, r0
 80087f0:	461a      	mov	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681c      	ldr	r4, [r3, #0]
 80087fa:	f001 f8ef 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 80087fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008804:	b2db      	uxtb	r3, r3
 8008806:	461a      	mov	r2, r3
 8008808:	4620      	mov	r0, r4
 800880a:	f004 faeb 	bl	800cde4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7fa fc13 	bl	800303a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008822:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4618      	mov	r0, r3
 800882a:	f005 f891 	bl	800d950 <USB_ReadInterrupts>
 800882e:	4603      	mov	r3, r0
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b08      	cmp	r3, #8
 8008836:	d10a      	bne.n	800884e <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fa fbf0 	bl	800301e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695a      	ldr	r2, [r3, #20]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f002 0208 	and.w	r2, r2, #8
 800884c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f005 f87c 	bl	800d950 <USB_ReadInterrupts>
 8008858:	4603      	mov	r3, r0
 800885a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800885e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008862:	d10f      	bne.n	8008884 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	b2db      	uxtb	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7fa fc26 	bl	80030c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	695a      	ldr	r2, [r3, #20]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f005 f861 	bl	800d950 <USB_ReadInterrupts>
 800888e:	4603      	mov	r3, r0
 8008890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008898:	d10f      	bne.n	80088ba <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7fa fbf9 	bl	800309c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695a      	ldr	r2, [r3, #20]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80088b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f005 f846 	bl	800d950 <USB_ReadInterrupts>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ce:	d10a      	bne.n	80088e6 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7fa fc07 	bl	80030e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80088e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f005 f830 	bl	800d950 <USB_ReadInterrupts>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d115      	bne.n	8008926 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7fa fbf7 	bl	8003100 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6859      	ldr	r1, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	e000      	b.n	8008926 <HAL_PCD_IRQHandler+0x742>
      return;
 8008924:	bf00      	nop
    }
  }
}
 8008926:	3734      	adds	r7, #52	; 0x34
 8008928:	46bd      	mov	sp, r7
 800892a:	bd90      	pop	{r4, r7, pc}

0800892c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_PCD_SetAddress+0x1a>
 8008942:	2302      	movs	r3, #2
 8008944:	e013      	b.n	800896e <HAL_PCD_SetAddress+0x42>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f004 ffd0 	bl	800d904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	461a      	mov	r2, r3
 8008984:	4603      	mov	r3, r0
 8008986:	70fb      	strb	r3, [r7, #3]
 8008988:	460b      	mov	r3, r1
 800898a:	803b      	strh	r3, [r7, #0]
 800898c:	4613      	mov	r3, r2
 800898e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da0f      	bge.n	80089bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	4613      	mov	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	1a9b      	subs	r3, r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	3338      	adds	r3, #56	; 0x38
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	4413      	add	r3, r2
 80089b0:	3304      	adds	r3, #4
 80089b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	705a      	strb	r2, [r3, #1]
 80089ba:	e00f      	b.n	80089dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	f003 020f 	and.w	r2, r3, #15
 80089c2:	4613      	mov	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	3304      	adds	r3, #4
 80089d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80089e8:	883a      	ldrh	r2, [r7, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	78ba      	ldrb	r2, [r7, #2]
 80089f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008a06:	78bb      	ldrb	r3, [r7, #2]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d102      	bne.n	8008a12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_PCD_EP_Open+0xaa>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e00e      	b.n	8008a3e <HAL_PCD_EP_Open+0xc8>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68f9      	ldr	r1, [r7, #12]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f004 fab9 	bl	800cfa6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b086      	sub	sp, #24
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
 8008a52:	460b      	mov	r3, r1
 8008a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a56:	7afb      	ldrb	r3, [r7, #11]
 8008a58:	f003 020f 	and.w	r2, r3, #15
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	1a9b      	subs	r3, r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2200      	movs	r2, #0
 8008a86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a94:	7afb      	ldrb	r3, [r7, #11]
 8008a96:	f003 030f 	and.w	r3, r3, #15
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f004 fce1 	bl	800d46c <USB_EP0StartXfer>
 8008aaa:	e005      	b.n	8008ab8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6979      	ldr	r1, [r7, #20]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f004 fafe 	bl	800d0b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b086      	sub	sp, #24
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	f003 020f 	and.w	r2, r3, #15
 8008ad8:	4613      	mov	r3, r2
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	3338      	adds	r3, #56	; 0x38
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2200      	movs	r2, #0
 8008afa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2201      	movs	r2, #1
 8008b00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d106      	bne.n	8008b26 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6979      	ldr	r1, [r7, #20]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f004 fca4 	bl	800d46c <USB_EP0StartXfer>
 8008b24:	e005      	b.n	8008b32 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6979      	ldr	r1, [r7, #20]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f004 fac1 	bl	800d0b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	f003 020f 	and.w	r2, r3, #15
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d901      	bls.n	8008b5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e04e      	b.n	8008bf8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	da0f      	bge.n	8008b82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	f003 020f 	and.w	r2, r3, #15
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	1a9b      	subs	r3, r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	3338      	adds	r3, #56	; 0x38
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	4413      	add	r3, r2
 8008b76:	3304      	adds	r3, #4
 8008b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	705a      	strb	r2, [r3, #1]
 8008b80:	e00d      	b.n	8008b9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	4613      	mov	r3, r2
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4413      	add	r3, r2
 8008b94:	3304      	adds	r3, #4
 8008b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	f003 030f 	and.w	r3, r3, #15
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d101      	bne.n	8008bbe <HAL_PCD_EP_SetStall+0x82>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	e01c      	b.n	8008bf8 <HAL_PCD_EP_SetStall+0xbc>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68f9      	ldr	r1, [r7, #12]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f004 fdc5 	bl	800d75c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d108      	bne.n	8008bee <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f004 ff75 	bl	800dad8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	f003 020f 	and.w	r2, r3, #15
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d901      	bls.n	8008c1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e042      	b.n	8008ca4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da0f      	bge.n	8008c46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	f003 020f 	and.w	r2, r3, #15
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	3338      	adds	r3, #56	; 0x38
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	705a      	strb	r2, [r3, #1]
 8008c44:	e00f      	b.n	8008c66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c46:	78fb      	ldrb	r3, [r7, #3]
 8008c48:	f003 020f 	and.w	r2, r3, #15
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d101      	bne.n	8008c86 <HAL_PCD_EP_ClrStall+0x86>
 8008c82:	2302      	movs	r3, #2
 8008c84:	e00e      	b.n	8008ca4 <HAL_PCD_EP_ClrStall+0xa4>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68f9      	ldr	r1, [r7, #12]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f004 fdcf 	bl	800d838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	1a9b      	subs	r3, r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	3338      	adds	r3, #56	; 0x38
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	699a      	ldr	r2, [r3, #24]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d901      	bls.n	8008ce4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e067      	b.n	8008db4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	695a      	ldr	r2, [r3, #20]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d902      	bls.n	8008d00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	3303      	adds	r3, #3
 8008d04:	089b      	lsrs	r3, r3, #2
 8008d06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d08:	e026      	b.n	8008d58 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	695a      	ldr	r2, [r3, #20]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d902      	bls.n	8008d26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	3303      	adds	r3, #3
 8008d2a:	089b      	lsrs	r3, r3, #2
 8008d2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68d9      	ldr	r1, [r3, #12]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	6978      	ldr	r0, [r7, #20]
 8008d3c:	f004 fcb4 	bl	800d6a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	441a      	add	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	441a      	add	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d809      	bhi.n	8008d82 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	699a      	ldr	r2, [r3, #24]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d203      	bcs.n	8008d82 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1c3      	bne.n	8008d0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	695a      	ldr	r2, [r3, #20]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d811      	bhi.n	8008db2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	2201      	movs	r2, #1
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	43db      	mvns	r3, r3
 8008da8:	6939      	ldr	r1, [r7, #16]
 8008daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dae:	4013      	ands	r3, r2
 8008db0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	333c      	adds	r3, #60	; 0x3c
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <PCD_EP_OutXfrComplete_int+0x98>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d124      	bne.n	8008e3c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e0e:	6093      	str	r3, [r2, #8]
 8008e10:	e01a      	b.n	8008e48 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d008      	beq.n	8008e2e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e28:	461a      	mov	r2, r3
 8008e2a:	2320      	movs	r3, #32
 8008e2c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7fa f8bd 	bl	8002fb4 <HAL_PCD_DataOutStageCallback>
 8008e3a:	e005      	b.n	8008e48 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fa f8b6 	bl	8002fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	4f54310a 	.word	0x4f54310a

08008e58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	333c      	adds	r3, #60	; 0x3c
 8008e70:	3304      	adds	r3, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4a0c      	ldr	r2, [pc, #48]	; (8008ebc <PCD_EP_OutSetupPacket_int+0x64>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d90e      	bls.n	8008eac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d009      	beq.n	8008eac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eaa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7fa f86f 	bl	8002f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	4f54300a 	.word	0x4f54300a

08008ec0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a04      	ldr	r2, [pc, #16]	; (8008ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ee6:	6013      	str	r3, [r2, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40007000 	.word	0x40007000

08008ef8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <HAL_PWREx_GetVoltageRange+0x18>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	40007000 	.word	0x40007000

08008f14 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008f18:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	4a04      	ldr	r2, [pc, #16]	; (8008f30 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f22:	6053      	str	r3, [r2, #4]
}
 8008f24:	bf00      	nop
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40007000 	.word	0x40007000

08008f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e3d4      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f46:	4ba1      	ldr	r3, [pc, #644]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f003 030c 	and.w	r3, r3, #12
 8008f4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f50:	4b9e      	ldr	r3, [pc, #632]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f003 0303 	and.w	r3, r3, #3
 8008f58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80e4 	beq.w	8009130 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d007      	beq.n	8008f7e <HAL_RCC_OscConfig+0x4a>
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2b0c      	cmp	r3, #12
 8008f72:	f040 808b 	bne.w	800908c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	f040 8087 	bne.w	800908c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f7e:	4b93      	ldr	r3, [pc, #588]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_RCC_OscConfig+0x62>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e3ac      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1a      	ldr	r2, [r3, #32]
 8008f9a:	4b8c      	ldr	r3, [pc, #560]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x7c>
 8008fa6:	4b89      	ldr	r3, [pc, #548]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fae:	e005      	b.n	8008fbc <HAL_RCC_OscConfig+0x88>
 8008fb0:	4b86      	ldr	r3, [pc, #536]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fb6:	091b      	lsrs	r3, r3, #4
 8008fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d223      	bcs.n	8009008 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fd41 	bl	8009a4c <RCC_SetFlashLatencyFromMSIRange>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e38d      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fd4:	4b7d      	ldr	r3, [pc, #500]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a7c      	ldr	r2, [pc, #496]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008fda:	f043 0308 	orr.w	r3, r3, #8
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	4b7a      	ldr	r3, [pc, #488]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	4977      	ldr	r1, [pc, #476]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ff2:	4b76      	ldr	r3, [pc, #472]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	4972      	ldr	r1, [pc, #456]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009002:	4313      	orrs	r3, r2
 8009004:	604b      	str	r3, [r1, #4]
 8009006:	e025      	b.n	8009054 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009008:	4b70      	ldr	r3, [pc, #448]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a6f      	ldr	r2, [pc, #444]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 800900e:	f043 0308 	orr.w	r3, r3, #8
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	4b6d      	ldr	r3, [pc, #436]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	496a      	ldr	r1, [pc, #424]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009022:	4313      	orrs	r3, r2
 8009024:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009026:	4b69      	ldr	r3, [pc, #420]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	4965      	ldr	r1, [pc, #404]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009036:	4313      	orrs	r3, r2
 8009038:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d109      	bne.n	8009054 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fd01 	bl	8009a4c <RCC_SetFlashLatencyFromMSIRange>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e34d      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009054:	f000 fc36 	bl	80098c4 <HAL_RCC_GetSysClockFreq>
 8009058:	4602      	mov	r2, r0
 800905a:	4b5c      	ldr	r3, [pc, #368]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	091b      	lsrs	r3, r3, #4
 8009060:	f003 030f 	and.w	r3, r3, #15
 8009064:	495a      	ldr	r1, [pc, #360]	; (80091d0 <HAL_RCC_OscConfig+0x29c>)
 8009066:	5ccb      	ldrb	r3, [r1, r3]
 8009068:	f003 031f 	and.w	r3, r3, #31
 800906c:	fa22 f303 	lsr.w	r3, r2, r3
 8009070:	4a58      	ldr	r2, [pc, #352]	; (80091d4 <HAL_RCC_OscConfig+0x2a0>)
 8009072:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009074:	4b58      	ldr	r3, [pc, #352]	; (80091d8 <HAL_RCC_OscConfig+0x2a4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f7fc feed 	bl	8005e58 <HAL_InitTick>
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d052      	beq.n	800912e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	e331      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d032      	beq.n	80090fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009094:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a4c      	ldr	r2, [pc, #304]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80090a0:	f7fc ff2a 	bl	8005ef8 <HAL_GetTick>
 80090a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80090a6:	e008      	b.n	80090ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80090a8:	f7fc ff26 	bl	8005ef8 <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d901      	bls.n	80090ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e31a      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80090ba:	4b44      	ldr	r3, [pc, #272]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0302 	and.w	r3, r3, #2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0f0      	beq.n	80090a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80090c6:	4b41      	ldr	r3, [pc, #260]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a40      	ldr	r2, [pc, #256]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090cc:	f043 0308 	orr.w	r3, r3, #8
 80090d0:	6013      	str	r3, [r2, #0]
 80090d2:	4b3e      	ldr	r3, [pc, #248]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	493b      	ldr	r1, [pc, #236]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80090e4:	4b39      	ldr	r3, [pc, #228]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	4936      	ldr	r1, [pc, #216]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	604b      	str	r3, [r1, #4]
 80090f8:	e01a      	b.n	8009130 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80090fa:	4b34      	ldr	r3, [pc, #208]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a33      	ldr	r2, [pc, #204]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009106:	f7fc fef7 	bl	8005ef8 <HAL_GetTick>
 800910a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800910c:	e008      	b.n	8009120 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800910e:	f7fc fef3 	bl	8005ef8 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	2b02      	cmp	r3, #2
 800911a:	d901      	bls.n	8009120 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e2e7      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009120:	4b2a      	ldr	r3, [pc, #168]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1f0      	bne.n	800910e <HAL_RCC_OscConfig+0x1da>
 800912c:	e000      	b.n	8009130 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800912e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d074      	beq.n	8009226 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b08      	cmp	r3, #8
 8009140:	d005      	beq.n	800914e <HAL_RCC_OscConfig+0x21a>
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	2b0c      	cmp	r3, #12
 8009146:	d10e      	bne.n	8009166 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2b03      	cmp	r3, #3
 800914c:	d10b      	bne.n	8009166 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800914e:	4b1f      	ldr	r3, [pc, #124]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d064      	beq.n	8009224 <HAL_RCC_OscConfig+0x2f0>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d160      	bne.n	8009224 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e2c4      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916e:	d106      	bne.n	800917e <HAL_RCC_OscConfig+0x24a>
 8009170:	4b16      	ldr	r3, [pc, #88]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a15      	ldr	r2, [pc, #84]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	e01d      	b.n	80091ba <HAL_RCC_OscConfig+0x286>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009186:	d10c      	bne.n	80091a2 <HAL_RCC_OscConfig+0x26e>
 8009188:	4b10      	ldr	r3, [pc, #64]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a0f      	ldr	r2, [pc, #60]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 800918e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a0c      	ldr	r2, [pc, #48]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 800919a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	e00b      	b.n	80091ba <HAL_RCC_OscConfig+0x286>
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a09      	ldr	r2, [pc, #36]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80091a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a06      	ldr	r2, [pc, #24]	; (80091cc <HAL_RCC_OscConfig+0x298>)
 80091b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01c      	beq.n	80091fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c2:	f7fc fe99 	bl	8005ef8 <HAL_GetTick>
 80091c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091c8:	e011      	b.n	80091ee <HAL_RCC_OscConfig+0x2ba>
 80091ca:	bf00      	nop
 80091cc:	40021000 	.word	0x40021000
 80091d0:	08010de4 	.word	0x08010de4
 80091d4:	20000004 	.word	0x20000004
 80091d8:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091dc:	f7fc fe8c 	bl	8005ef8 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b64      	cmp	r3, #100	; 0x64
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e280      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091ee:	4baf      	ldr	r3, [pc, #700]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f0      	beq.n	80091dc <HAL_RCC_OscConfig+0x2a8>
 80091fa:	e014      	b.n	8009226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091fc:	f7fc fe7c 	bl	8005ef8 <HAL_GetTick>
 8009200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009204:	f7fc fe78 	bl	8005ef8 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b64      	cmp	r3, #100	; 0x64
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e26c      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009216:	4ba5      	ldr	r3, [pc, #660]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f0      	bne.n	8009204 <HAL_RCC_OscConfig+0x2d0>
 8009222:	e000      	b.n	8009226 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d060      	beq.n	80092f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	2b04      	cmp	r3, #4
 8009236:	d005      	beq.n	8009244 <HAL_RCC_OscConfig+0x310>
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	2b0c      	cmp	r3, #12
 800923c:	d119      	bne.n	8009272 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b02      	cmp	r3, #2
 8009242:	d116      	bne.n	8009272 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009244:	4b99      	ldr	r3, [pc, #612]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <HAL_RCC_OscConfig+0x328>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e249      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800925c:	4b93      	ldr	r3, [pc, #588]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	061b      	lsls	r3, r3, #24
 800926a:	4990      	ldr	r1, [pc, #576]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800926c:	4313      	orrs	r3, r2
 800926e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009270:	e040      	b.n	80092f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d023      	beq.n	80092c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800927a:	4b8c      	ldr	r3, [pc, #560]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a8b      	ldr	r2, [pc, #556]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009286:	f7fc fe37 	bl	8005ef8 <HAL_GetTick>
 800928a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800928c:	e008      	b.n	80092a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800928e:	f7fc fe33 	bl	8005ef8 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	d901      	bls.n	80092a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e227      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092a0:	4b82      	ldr	r3, [pc, #520]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0f0      	beq.n	800928e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ac:	4b7f      	ldr	r3, [pc, #508]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	061b      	lsls	r3, r3, #24
 80092ba:	497c      	ldr	r1, [pc, #496]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	604b      	str	r3, [r1, #4]
 80092c0:	e018      	b.n	80092f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092c2:	4b7a      	ldr	r3, [pc, #488]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a79      	ldr	r2, [pc, #484]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80092c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ce:	f7fc fe13 	bl	8005ef8 <HAL_GetTick>
 80092d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092d4:	e008      	b.n	80092e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092d6:	f7fc fe0f 	bl	8005ef8 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e203      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092e8:	4b70      	ldr	r3, [pc, #448]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1f0      	bne.n	80092d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0308 	and.w	r3, r3, #8
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d03c      	beq.n	800937a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01c      	beq.n	8009342 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009308:	4b68      	ldr	r3, [pc, #416]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800930a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800930e:	4a67      	ldr	r2, [pc, #412]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009310:	f043 0301 	orr.w	r3, r3, #1
 8009314:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009318:	f7fc fdee 	bl	8005ef8 <HAL_GetTick>
 800931c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800931e:	e008      	b.n	8009332 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009320:	f7fc fdea 	bl	8005ef8 <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	2b02      	cmp	r3, #2
 800932c:	d901      	bls.n	8009332 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e1de      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009332:	4b5e      	ldr	r3, [pc, #376]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0ef      	beq.n	8009320 <HAL_RCC_OscConfig+0x3ec>
 8009340:	e01b      	b.n	800937a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009342:	4b5a      	ldr	r3, [pc, #360]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009348:	4a58      	ldr	r2, [pc, #352]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800934a:	f023 0301 	bic.w	r3, r3, #1
 800934e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009352:	f7fc fdd1 	bl	8005ef8 <HAL_GetTick>
 8009356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009358:	e008      	b.n	800936c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800935a:	f7fc fdcd 	bl	8005ef8 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	2b02      	cmp	r3, #2
 8009366:	d901      	bls.n	800936c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e1c1      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800936c:	4b4f      	ldr	r3, [pc, #316]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800936e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1ef      	bne.n	800935a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 80a6 	beq.w	80094d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009388:	2300      	movs	r3, #0
 800938a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800938c:	4b47      	ldr	r3, [pc, #284]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800938e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10d      	bne.n	80093b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009398:	4b44      	ldr	r3, [pc, #272]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800939a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939c:	4a43      	ldr	r2, [pc, #268]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800939e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a2:	6593      	str	r3, [r2, #88]	; 0x58
 80093a4:	4b41      	ldr	r3, [pc, #260]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80093a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ac:	60bb      	str	r3, [r7, #8]
 80093ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093b0:	2301      	movs	r3, #1
 80093b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093b4:	4b3e      	ldr	r3, [pc, #248]	; (80094b0 <HAL_RCC_OscConfig+0x57c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d118      	bne.n	80093f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093c0:	4b3b      	ldr	r3, [pc, #236]	; (80094b0 <HAL_RCC_OscConfig+0x57c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a3a      	ldr	r2, [pc, #232]	; (80094b0 <HAL_RCC_OscConfig+0x57c>)
 80093c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093cc:	f7fc fd94 	bl	8005ef8 <HAL_GetTick>
 80093d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093d2:	e008      	b.n	80093e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093d4:	f7fc fd90 	bl	8005ef8 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e184      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093e6:	4b32      	ldr	r3, [pc, #200]	; (80094b0 <HAL_RCC_OscConfig+0x57c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f0      	beq.n	80093d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d108      	bne.n	800940c <HAL_RCC_OscConfig+0x4d8>
 80093fa:	4b2c      	ldr	r3, [pc, #176]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009400:	4a2a      	ldr	r2, [pc, #168]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009402:	f043 0301 	orr.w	r3, r3, #1
 8009406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800940a:	e024      	b.n	8009456 <HAL_RCC_OscConfig+0x522>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2b05      	cmp	r3, #5
 8009412:	d110      	bne.n	8009436 <HAL_RCC_OscConfig+0x502>
 8009414:	4b25      	ldr	r3, [pc, #148]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800941a:	4a24      	ldr	r2, [pc, #144]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800941c:	f043 0304 	orr.w	r3, r3, #4
 8009420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009424:	4b21      	ldr	r3, [pc, #132]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942a:	4a20      	ldr	r2, [pc, #128]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800942c:	f043 0301 	orr.w	r3, r3, #1
 8009430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009434:	e00f      	b.n	8009456 <HAL_RCC_OscConfig+0x522>
 8009436:	4b1d      	ldr	r3, [pc, #116]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943c:	4a1b      	ldr	r2, [pc, #108]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800943e:	f023 0301 	bic.w	r3, r3, #1
 8009442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 8009448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944c:	4a17      	ldr	r2, [pc, #92]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800944e:	f023 0304 	bic.w	r3, r3, #4
 8009452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d016      	beq.n	800948c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800945e:	f7fc fd4b 	bl	8005ef8 <HAL_GetTick>
 8009462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009464:	e00a      	b.n	800947c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009466:	f7fc fd47 	bl	8005ef8 <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	f241 3288 	movw	r2, #5000	; 0x1388
 8009474:	4293      	cmp	r3, r2
 8009476:	d901      	bls.n	800947c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e139      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800947c:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <HAL_RCC_OscConfig+0x578>)
 800947e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009482:	f003 0302 	and.w	r3, r3, #2
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0ed      	beq.n	8009466 <HAL_RCC_OscConfig+0x532>
 800948a:	e01a      	b.n	80094c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800948c:	f7fc fd34 	bl	8005ef8 <HAL_GetTick>
 8009490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009492:	e00f      	b.n	80094b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009494:	f7fc fd30 	bl	8005ef8 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d906      	bls.n	80094b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e122      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
 80094aa:	bf00      	nop
 80094ac:	40021000 	.word	0x40021000
 80094b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80094b4:	4b90      	ldr	r3, [pc, #576]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80094b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e8      	bne.n	8009494 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094c2:	7ffb      	ldrb	r3, [r7, #31]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d105      	bne.n	80094d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094c8:	4b8b      	ldr	r3, [pc, #556]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80094ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094cc:	4a8a      	ldr	r2, [pc, #552]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80094ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 8108 	beq.w	80096ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	f040 80d0 	bne.w	8009688 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80094e8:	4b83      	ldr	r3, [pc, #524]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f003 0203 	and.w	r2, r3, #3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d130      	bne.n	800955e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	3b01      	subs	r3, #1
 8009508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800950a:	429a      	cmp	r2, r3
 800950c:	d127      	bne.n	800955e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009518:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800951a:	429a      	cmp	r2, r3
 800951c:	d11f      	bne.n	800955e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009528:	2a07      	cmp	r2, #7
 800952a:	bf14      	ite	ne
 800952c:	2201      	movne	r2, #1
 800952e:	2200      	moveq	r2, #0
 8009530:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009532:	4293      	cmp	r3, r2
 8009534:	d113      	bne.n	800955e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009540:	085b      	lsrs	r3, r3, #1
 8009542:	3b01      	subs	r3, #1
 8009544:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009546:	429a      	cmp	r2, r3
 8009548:	d109      	bne.n	800955e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	3b01      	subs	r3, #1
 8009558:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800955a:	429a      	cmp	r2, r3
 800955c:	d06e      	beq.n	800963c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b0c      	cmp	r3, #12
 8009562:	d069      	beq.n	8009638 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009564:	4b64      	ldr	r3, [pc, #400]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d105      	bne.n	800957c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009570:	4b61      	ldr	r3, [pc, #388]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0b7      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009580:	4b5d      	ldr	r3, [pc, #372]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a5c      	ldr	r2, [pc, #368]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800958a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800958c:	f7fc fcb4 	bl	8005ef8 <HAL_GetTick>
 8009590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009594:	f7fc fcb0 	bl	8005ef8 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e0a4      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095a6:	4b54      	ldr	r3, [pc, #336]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f0      	bne.n	8009594 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80095b2:	4b51      	ldr	r3, [pc, #324]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	4b51      	ldr	r3, [pc, #324]	; (80096fc <HAL_RCC_OscConfig+0x7c8>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80095c2:	3a01      	subs	r2, #1
 80095c4:	0112      	lsls	r2, r2, #4
 80095c6:	4311      	orrs	r1, r2
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80095cc:	0212      	lsls	r2, r2, #8
 80095ce:	4311      	orrs	r1, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80095d4:	0852      	lsrs	r2, r2, #1
 80095d6:	3a01      	subs	r2, #1
 80095d8:	0552      	lsls	r2, r2, #21
 80095da:	4311      	orrs	r1, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80095e0:	0852      	lsrs	r2, r2, #1
 80095e2:	3a01      	subs	r2, #1
 80095e4:	0652      	lsls	r2, r2, #25
 80095e6:	4311      	orrs	r1, r2
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095ec:	0912      	lsrs	r2, r2, #4
 80095ee:	0452      	lsls	r2, r2, #17
 80095f0:	430a      	orrs	r2, r1
 80095f2:	4941      	ldr	r1, [pc, #260]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80095f8:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a3e      	ldr	r2, [pc, #248]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80095fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009602:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009604:	4b3c      	ldr	r3, [pc, #240]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	4a3b      	ldr	r2, [pc, #236]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800960a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800960e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009610:	f7fc fc72 	bl	8005ef8 <HAL_GetTick>
 8009614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009616:	e008      	b.n	800962a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009618:	f7fc fc6e 	bl	8005ef8 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d901      	bls.n	800962a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e062      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800962a:	4b33      	ldr	r3, [pc, #204]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0f0      	beq.n	8009618 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009636:	e05a      	b.n	80096ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e059      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800963c:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d152      	bne.n	80096ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009648:	4b2b      	ldr	r3, [pc, #172]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a2a      	ldr	r2, [pc, #168]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800964e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009652:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009654:	4b28      	ldr	r3, [pc, #160]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	4a27      	ldr	r2, [pc, #156]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800965a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800965e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009660:	f7fc fc4a 	bl	8005ef8 <HAL_GetTick>
 8009664:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009666:	e008      	b.n	800967a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009668:	f7fc fc46 	bl	8005ef8 <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	d901      	bls.n	800967a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e03a      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800967a:	4b1f      	ldr	r3, [pc, #124]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0f0      	beq.n	8009668 <HAL_RCC_OscConfig+0x734>
 8009686:	e032      	b.n	80096ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	2b0c      	cmp	r3, #12
 800968c:	d02d      	beq.n	80096ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800968e:	4b1a      	ldr	r3, [pc, #104]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a19      	ldr	r2, [pc, #100]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 8009694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009698:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800969a:	4b17      	ldr	r3, [pc, #92]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d105      	bne.n	80096b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80096a6:	4b14      	ldr	r3, [pc, #80]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80096ac:	f023 0303 	bic.w	r3, r3, #3
 80096b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80096b2:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	4a10      	ldr	r2, [pc, #64]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80096b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80096bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c2:	f7fc fc19 	bl	8005ef8 <HAL_GetTick>
 80096c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096c8:	e008      	b.n	80096dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096ca:	f7fc fc15 	bl	8005ef8 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d901      	bls.n	80096dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e009      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096dc:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <HAL_RCC_OscConfig+0x7c4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f0      	bne.n	80096ca <HAL_RCC_OscConfig+0x796>
 80096e8:	e001      	b.n	80096ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	40021000 	.word	0x40021000
 80096fc:	f99d808c 	.word	0xf99d808c

08009700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e0c8      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009714:	4b66      	ldr	r3, [pc, #408]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d910      	bls.n	8009744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009722:	4b63      	ldr	r3, [pc, #396]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f023 0207 	bic.w	r2, r3, #7
 800972a:	4961      	ldr	r1, [pc, #388]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	4313      	orrs	r3, r2
 8009730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009732:	4b5f      	ldr	r3, [pc, #380]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d001      	beq.n	8009744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e0b0      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d04c      	beq.n	80097ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b03      	cmp	r3, #3
 8009756:	d107      	bne.n	8009768 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009758:	4b56      	ldr	r3, [pc, #344]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d121      	bne.n	80097a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e09e      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b02      	cmp	r3, #2
 800976e:	d107      	bne.n	8009780 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009770:	4b50      	ldr	r3, [pc, #320]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d115      	bne.n	80097a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e092      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d107      	bne.n	8009798 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009788:	4b4a      	ldr	r3, [pc, #296]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d109      	bne.n	80097a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e086      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009798:	4b46      	ldr	r3, [pc, #280]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e07e      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097a8:	4b42      	ldr	r3, [pc, #264]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f023 0203 	bic.w	r2, r3, #3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	493f      	ldr	r1, [pc, #252]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ba:	f7fc fb9d 	bl	8005ef8 <HAL_GetTick>
 80097be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097c0:	e00a      	b.n	80097d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097c2:	f7fc fb99 	bl	8005ef8 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e066      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d8:	4b36      	ldr	r3, [pc, #216]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f003 020c 	and.w	r2, r3, #12
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d1eb      	bne.n	80097c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097f6:	4b2f      	ldr	r3, [pc, #188]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	492c      	ldr	r1, [pc, #176]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009804:	4313      	orrs	r3, r2
 8009806:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009808:	4b29      	ldr	r3, [pc, #164]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d210      	bcs.n	8009838 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009816:	4b26      	ldr	r3, [pc, #152]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f023 0207 	bic.w	r2, r3, #7
 800981e:	4924      	ldr	r1, [pc, #144]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	4313      	orrs	r3, r2
 8009824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009826:	4b22      	ldr	r3, [pc, #136]	; (80098b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d001      	beq.n	8009838 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e036      	b.n	80098a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0304 	and.w	r3, r3, #4
 8009840:	2b00      	cmp	r3, #0
 8009842:	d008      	beq.n	8009856 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009844:	4b1b      	ldr	r3, [pc, #108]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	4918      	ldr	r1, [pc, #96]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009852:	4313      	orrs	r3, r2
 8009854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009862:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	4910      	ldr	r1, [pc, #64]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009872:	4313      	orrs	r3, r2
 8009874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009876:	f000 f825 	bl	80098c4 <HAL_RCC_GetSysClockFreq>
 800987a:	4602      	mov	r2, r0
 800987c:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <HAL_RCC_ClockConfig+0x1b4>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	091b      	lsrs	r3, r3, #4
 8009882:	f003 030f 	and.w	r3, r3, #15
 8009886:	490c      	ldr	r1, [pc, #48]	; (80098b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009888:	5ccb      	ldrb	r3, [r1, r3]
 800988a:	f003 031f 	and.w	r3, r3, #31
 800988e:	fa22 f303 	lsr.w	r3, r2, r3
 8009892:	4a0a      	ldr	r2, [pc, #40]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009896:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f7fc fadc 	bl	8005e58 <HAL_InitTick>
 80098a0:	4603      	mov	r3, r0
 80098a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80098a4:	7afb      	ldrb	r3, [r7, #11]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	40022000 	.word	0x40022000
 80098b4:	40021000 	.word	0x40021000
 80098b8:	08010de4 	.word	0x08010de4
 80098bc:	20000004 	.word	0x20000004
 80098c0:	20000098 	.word	0x20000098

080098c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b089      	sub	sp, #36	; 0x24
 80098c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61fb      	str	r3, [r7, #28]
 80098ce:	2300      	movs	r3, #0
 80098d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098d2:	4b3e      	ldr	r3, [pc, #248]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f003 030c 	and.w	r3, r3, #12
 80098da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098dc:	4b3b      	ldr	r3, [pc, #236]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f003 0303 	and.w	r3, r3, #3
 80098e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d005      	beq.n	80098f8 <HAL_RCC_GetSysClockFreq+0x34>
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b0c      	cmp	r3, #12
 80098f0:	d121      	bne.n	8009936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d11e      	bne.n	8009936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80098f8:	4b34      	ldr	r3, [pc, #208]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0308 	and.w	r3, r3, #8
 8009900:	2b00      	cmp	r3, #0
 8009902:	d107      	bne.n	8009914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009904:	4b31      	ldr	r3, [pc, #196]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 8009906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800990a:	0a1b      	lsrs	r3, r3, #8
 800990c:	f003 030f 	and.w	r3, r3, #15
 8009910:	61fb      	str	r3, [r7, #28]
 8009912:	e005      	b.n	8009920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009914:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	091b      	lsrs	r3, r3, #4
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009920:	4a2b      	ldr	r2, [pc, #172]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10d      	bne.n	800994c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009934:	e00a      	b.n	800994c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b04      	cmp	r3, #4
 800993a:	d102      	bne.n	8009942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800993c:	4b25      	ldr	r3, [pc, #148]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800993e:	61bb      	str	r3, [r7, #24]
 8009940:	e004      	b.n	800994c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	2b08      	cmp	r3, #8
 8009946:	d101      	bne.n	800994c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009948:	4b23      	ldr	r3, [pc, #140]	; (80099d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800994a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	2b0c      	cmp	r3, #12
 8009950:	d134      	bne.n	80099bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009952:	4b1e      	ldr	r3, [pc, #120]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d003      	beq.n	800996a <HAL_RCC_GetSysClockFreq+0xa6>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b03      	cmp	r3, #3
 8009966:	d003      	beq.n	8009970 <HAL_RCC_GetSysClockFreq+0xac>
 8009968:	e005      	b.n	8009976 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800996a:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800996c:	617b      	str	r3, [r7, #20]
      break;
 800996e:	e005      	b.n	800997c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009970:	4b19      	ldr	r3, [pc, #100]	; (80099d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009972:	617b      	str	r3, [r7, #20]
      break;
 8009974:	e002      	b.n	800997c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	617b      	str	r3, [r7, #20]
      break;
 800997a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800997c:	4b13      	ldr	r3, [pc, #76]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	091b      	lsrs	r3, r3, #4
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	3301      	adds	r3, #1
 8009988:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	fb02 f203 	mul.w	r2, r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099a2:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <HAL_RCC_GetSysClockFreq+0x108>)
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	0e5b      	lsrs	r3, r3, #25
 80099a8:	f003 0303 	and.w	r3, r3, #3
 80099ac:	3301      	adds	r3, #1
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80099bc:	69bb      	ldr	r3, [r7, #24]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3724      	adds	r7, #36	; 0x24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40021000 	.word	0x40021000
 80099d0:	08010dfc 	.word	0x08010dfc
 80099d4:	00f42400 	.word	0x00f42400
 80099d8:	007a1200 	.word	0x007a1200

080099dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099e0:	4b03      	ldr	r3, [pc, #12]	; (80099f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80099e2:	681b      	ldr	r3, [r3, #0]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	20000004 	.word	0x20000004

080099f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099f8:	f7ff fff0 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 80099fc:	4602      	mov	r2, r0
 80099fe:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	0a1b      	lsrs	r3, r3, #8
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	4904      	ldr	r1, [pc, #16]	; (8009a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a0a:	5ccb      	ldrb	r3, [r1, r3]
 8009a0c:	f003 031f 	and.w	r3, r3, #31
 8009a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	40021000 	.word	0x40021000
 8009a1c:	08010df4 	.word	0x08010df4

08009a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a24:	f7ff ffda 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	0adb      	lsrs	r3, r3, #11
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	4904      	ldr	r1, [pc, #16]	; (8009a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a36:	5ccb      	ldrb	r3, [r1, r3]
 8009a38:	f003 031f 	and.w	r3, r3, #31
 8009a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	40021000 	.word	0x40021000
 8009a48:	08010df4 	.word	0x08010df4

08009a4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009a54:	2300      	movs	r3, #0
 8009a56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009a58:	4b2a      	ldr	r3, [pc, #168]	; (8009b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009a64:	f7ff fa48 	bl	8008ef8 <HAL_PWREx_GetVoltageRange>
 8009a68:	6178      	str	r0, [r7, #20]
 8009a6a:	e014      	b.n	8009a96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a6c:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a70:	4a24      	ldr	r2, [pc, #144]	; (8009b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a76:	6593      	str	r3, [r2, #88]	; 0x58
 8009a78:	4b22      	ldr	r3, [pc, #136]	; (8009b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009a84:	f7ff fa38 	bl	8008ef8 <HAL_PWREx_GetVoltageRange>
 8009a88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009a8a:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8e:	4a1d      	ldr	r2, [pc, #116]	; (8009b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a9c:	d10b      	bne.n	8009ab6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b80      	cmp	r3, #128	; 0x80
 8009aa2:	d919      	bls.n	8009ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2ba0      	cmp	r3, #160	; 0xa0
 8009aa8:	d902      	bls.n	8009ab0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009aaa:	2302      	movs	r3, #2
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	e013      	b.n	8009ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	613b      	str	r3, [r7, #16]
 8009ab4:	e010      	b.n	8009ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b80      	cmp	r3, #128	; 0x80
 8009aba:	d902      	bls.n	8009ac2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009abc:	2303      	movs	r3, #3
 8009abe:	613b      	str	r3, [r7, #16]
 8009ac0:	e00a      	b.n	8009ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b80      	cmp	r3, #128	; 0x80
 8009ac6:	d102      	bne.n	8009ace <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009ac8:	2302      	movs	r3, #2
 8009aca:	613b      	str	r3, [r7, #16]
 8009acc:	e004      	b.n	8009ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b70      	cmp	r3, #112	; 0x70
 8009ad2:	d101      	bne.n	8009ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f023 0207 	bic.w	r2, r3, #7
 8009ae0:	4909      	ldr	r1, [pc, #36]	; (8009b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009ae8:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d001      	beq.n	8009afa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e000      	b.n	8009afc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40021000 	.word	0x40021000
 8009b08:	40022000 	.word	0x40022000

08009b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b14:	2300      	movs	r3, #0
 8009b16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b18:	2300      	movs	r3, #0
 8009b1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d041      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b30:	d02a      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009b32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b36:	d824      	bhi.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b3c:	d008      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b42:	d81e      	bhi.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00a      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b4c:	d010      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b4e:	e018      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009b50:	4b86      	ldr	r3, [pc, #536]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	4a85      	ldr	r2, [pc, #532]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009b5c:	e015      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3304      	adds	r3, #4
 8009b62:	2100      	movs	r1, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fae3 	bl	800a130 <RCCEx_PLLSAI1_Config>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009b6e:	e00c      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3320      	adds	r3, #32
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fbce 	bl	800a318 <RCCEx_PLLSAI2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009b80:	e003      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	74fb      	strb	r3, [r7, #19]
      break;
 8009b86:	e000      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b8a:	7cfb      	ldrb	r3, [r7, #19]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10b      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b90:	4b76      	ldr	r3, [pc, #472]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b9e:	4973      	ldr	r1, [pc, #460]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009ba6:	e001      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba8:	7cfb      	ldrb	r3, [r7, #19]
 8009baa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d041      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bc0:	d02a      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009bc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bc6:	d824      	bhi.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bcc:	d008      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bd2:	d81e      	bhi.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bdc:	d010      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009bde:	e018      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009be0:	4b62      	ldr	r3, [pc, #392]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	4a61      	ldr	r2, [pc, #388]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009bec:	e015      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 fa9b 	bl	800a130 <RCCEx_PLLSAI1_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009bfe:	e00c      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3320      	adds	r3, #32
 8009c04:	2100      	movs	r1, #0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fb86 	bl	800a318 <RCCEx_PLLSAI2_Config>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009c10:	e003      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	74fb      	strb	r3, [r7, #19]
      break;
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1a:	7cfb      	ldrb	r3, [r7, #19]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009c20:	4b52      	ldr	r3, [pc, #328]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c2e:	494f      	ldr	r1, [pc, #316]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009c36:	e001      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c38:	7cfb      	ldrb	r3, [r7, #19]
 8009c3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 80a0 	beq.w	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009c4e:	4b47      	ldr	r3, [pc, #284]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00d      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c64:	4b41      	ldr	r3, [pc, #260]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c68:	4a40      	ldr	r2, [pc, #256]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8009c70:	4b3e      	ldr	r3, [pc, #248]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c78:	60bb      	str	r3, [r7, #8]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c80:	4b3b      	ldr	r3, [pc, #236]	; (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a3a      	ldr	r2, [pc, #232]	; (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c8c:	f7fc f934 	bl	8005ef8 <HAL_GetTick>
 8009c90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009c92:	e009      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c94:	f7fc f930 	bl	8005ef8 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d902      	bls.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	74fb      	strb	r3, [r7, #19]
        break;
 8009ca6:	e005      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009ca8:	4b31      	ldr	r3, [pc, #196]	; (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0ef      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009cb4:	7cfb      	ldrb	r3, [r7, #19]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d15c      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009cba:	4b2c      	ldr	r3, [pc, #176]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01f      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d019      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009cd8:	4b24      	ldr	r3, [pc, #144]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ce4:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cea:	4a20      	ldr	r2, [pc, #128]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cf4:	4b1d      	ldr	r3, [pc, #116]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cfa:	4a1c      	ldr	r2, [pc, #112]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009d04:	4a19      	ldr	r2, [pc, #100]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d016      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d16:	f7fc f8ef 	bl	8005ef8 <HAL_GetTick>
 8009d1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d1c:	e00b      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d1e:	f7fc f8eb 	bl	8005ef8 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d902      	bls.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	74fb      	strb	r3, [r7, #19]
            break;
 8009d34:	e006      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d0ec      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009d44:	7cfb      	ldrb	r3, [r7, #19]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10c      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d4a:	4b08      	ldr	r3, [pc, #32]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d5a:	4904      	ldr	r1, [pc, #16]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009d62:	e009      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d64:	7cfb      	ldrb	r3, [r7, #19]
 8009d66:	74bb      	strb	r3, [r7, #18]
 8009d68:	e006      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009d6a:	bf00      	nop
 8009d6c:	40021000 	.word	0x40021000
 8009d70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d74:	7cfb      	ldrb	r3, [r7, #19]
 8009d76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d78:	7c7b      	ldrb	r3, [r7, #17]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d105      	bne.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d7e:	4b9e      	ldr	r3, [pc, #632]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d82:	4a9d      	ldr	r2, [pc, #628]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d96:	4b98      	ldr	r3, [pc, #608]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9c:	f023 0203 	bic.w	r2, r3, #3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da4:	4994      	ldr	r1, [pc, #592]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00a      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009db8:	4b8f      	ldr	r3, [pc, #572]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dbe:	f023 020c 	bic.w	r2, r3, #12
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc6:	498c      	ldr	r1, [pc, #560]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009dda:	4b87      	ldr	r3, [pc, #540]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	4983      	ldr	r1, [pc, #524]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0308 	and.w	r3, r3, #8
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009dfc:	4b7e      	ldr	r3, [pc, #504]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0a:	497b      	ldr	r1, [pc, #492]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e1e:	4b76      	ldr	r3, [pc, #472]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2c:	4972      	ldr	r1, [pc, #456]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00a      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e40:	4b6d      	ldr	r3, [pc, #436]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4e:	496a      	ldr	r1, [pc, #424]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e62:	4b65      	ldr	r3, [pc, #404]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e70:	4961      	ldr	r1, [pc, #388]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009e84:	4b5c      	ldr	r3, [pc, #368]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e92:	4959      	ldr	r1, [pc, #356]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ea6:	4b54      	ldr	r3, [pc, #336]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb4:	4950      	ldr	r1, [pc, #320]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00a      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009ec8:	4b4b      	ldr	r3, [pc, #300]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ece:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed6:	4948      	ldr	r1, [pc, #288]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009eea:	4b43      	ldr	r3, [pc, #268]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef8:	493f      	ldr	r1, [pc, #252]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d028      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f0c:	4b3a      	ldr	r3, [pc, #232]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f1a:	4937      	ldr	r1, [pc, #220]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f2a:	d106      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f2c:	4b32      	ldr	r3, [pc, #200]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	4a31      	ldr	r2, [pc, #196]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f36:	60d3      	str	r3, [r2, #12]
 8009f38:	e011      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f42:	d10c      	bne.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3304      	adds	r3, #4
 8009f48:	2101      	movs	r1, #1
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 f8f0 	bl	800a130 <RCCEx_PLLSAI1_Config>
 8009f50:	4603      	mov	r3, r0
 8009f52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009f54:	7cfb      	ldrb	r3, [r7, #19]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009f5a:	7cfb      	ldrb	r3, [r7, #19]
 8009f5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d028      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009f6a:	4b23      	ldr	r3, [pc, #140]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f78:	491f      	ldr	r1, [pc, #124]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f88:	d106      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	4a1a      	ldr	r2, [pc, #104]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f94:	60d3      	str	r3, [r2, #12]
 8009f96:	e011      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fa0:	d10c      	bne.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 f8c1 	bl	800a130 <RCCEx_PLLSAI1_Config>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009fb2:	7cfb      	ldrb	r3, [r7, #19]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009fb8:	7cfb      	ldrb	r3, [r7, #19]
 8009fba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d02b      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fc8:	4b0b      	ldr	r3, [pc, #44]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd6:	4908      	ldr	r1, [pc, #32]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fe6:	d109      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009fe8:	4b03      	ldr	r3, [pc, #12]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a02      	ldr	r2, [pc, #8]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ff2:	60d3      	str	r3, [r2, #12]
 8009ff4:	e014      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009ff6:	bf00      	nop
 8009ff8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a004:	d10c      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3304      	adds	r3, #4
 800a00a:	2101      	movs	r1, #1
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 f88f 	bl	800a130 <RCCEx_PLLSAI1_Config>
 800a012:	4603      	mov	r3, r0
 800a014:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a016:	7cfb      	ldrb	r3, [r7, #19]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a01c:	7cfb      	ldrb	r3, [r7, #19]
 800a01e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d02f      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a02c:	4b2b      	ldr	r3, [pc, #172]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a032:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a03a:	4928      	ldr	r1, [pc, #160]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a04a:	d10d      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3304      	adds	r3, #4
 800a050:	2102      	movs	r1, #2
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f86c 	bl	800a130 <RCCEx_PLLSAI1_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a05c:	7cfb      	ldrb	r3, [r7, #19]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d014      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a062:	7cfb      	ldrb	r3, [r7, #19]
 800a064:	74bb      	strb	r3, [r7, #18]
 800a066:	e011      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a070:	d10c      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3320      	adds	r3, #32
 800a076:	2102      	movs	r1, #2
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 f94d 	bl	800a318 <RCCEx_PLLSAI2_Config>
 800a07e:	4603      	mov	r3, r0
 800a080:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a082:	7cfb      	ldrb	r3, [r7, #19]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a088:	7cfb      	ldrb	r3, [r7, #19]
 800a08a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a098:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0a6:	490d      	ldr	r1, [pc, #52]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00b      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0ba:	4b08      	ldr	r3, [pc, #32]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ca:	4904      	ldr	r1, [pc, #16]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a0d2:	7cbb      	ldrb	r3, [r7, #18]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	40021000 	.word	0x40021000

0800a0e0 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800a0e4:	4b09      	ldr	r3, [pc, #36]	; (800a10c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ea:	4a08      	ldr	r2, [pc, #32]	; (800a10c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a0ec:	f023 0320 	bic.w	r3, r3, #32
 800a0f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	4a04      	ldr	r2, [pc, #16]	; (800a10c <HAL_RCCEx_DisableLSECSS+0x2c>)
 800a0fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0fe:	6193      	str	r3, [r2, #24]
}
 800a100:	bf00      	nop
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	40021000 	.word	0x40021000

0800a110 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a114:	4b05      	ldr	r3, [pc, #20]	; (800a12c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a04      	ldr	r2, [pc, #16]	; (800a12c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a11a:	f043 0304 	orr.w	r3, r3, #4
 800a11e:	6013      	str	r3, [r2, #0]
}
 800a120:	bf00      	nop
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	40021000 	.word	0x40021000

0800a130 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a13e:	4b75      	ldr	r3, [pc, #468]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d018      	beq.n	800a17c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a14a:	4b72      	ldr	r3, [pc, #456]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f003 0203 	and.w	r2, r3, #3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d10d      	bne.n	800a176 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
       ||
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a162:	4b6c      	ldr	r3, [pc, #432]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	091b      	lsrs	r3, r3, #4
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
       ||
 800a172:	429a      	cmp	r2, r3
 800a174:	d047      	beq.n	800a206 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	73fb      	strb	r3, [r7, #15]
 800a17a:	e044      	b.n	800a206 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d018      	beq.n	800a1b6 <RCCEx_PLLSAI1_Config+0x86>
 800a184:	2b03      	cmp	r3, #3
 800a186:	d825      	bhi.n	800a1d4 <RCCEx_PLLSAI1_Config+0xa4>
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d002      	beq.n	800a192 <RCCEx_PLLSAI1_Config+0x62>
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d009      	beq.n	800a1a4 <RCCEx_PLLSAI1_Config+0x74>
 800a190:	e020      	b.n	800a1d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a192:	4b60      	ldr	r3, [pc, #384]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d11d      	bne.n	800a1da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a1a2:	e01a      	b.n	800a1da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a1a4:	4b5b      	ldr	r3, [pc, #364]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d116      	bne.n	800a1de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a1b4:	e013      	b.n	800a1de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a1b6:	4b57      	ldr	r3, [pc, #348]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10f      	bne.n	800a1e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a1c2:	4b54      	ldr	r3, [pc, #336]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a1d2:	e006      	b.n	800a1e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d8:	e004      	b.n	800a1e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a1da:	bf00      	nop
 800a1dc:	e002      	b.n	800a1e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a1de:	bf00      	nop
 800a1e0:	e000      	b.n	800a1e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a1e2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10d      	bne.n	800a206 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a1ea:	4b4a      	ldr	r3, [pc, #296]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6819      	ldr	r1, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	430b      	orrs	r3, r1
 800a200:	4944      	ldr	r1, [pc, #272]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a202:	4313      	orrs	r3, r2
 800a204:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d17d      	bne.n	800a308 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a20c:	4b41      	ldr	r3, [pc, #260]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a40      	ldr	r2, [pc, #256]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a218:	f7fb fe6e 	bl	8005ef8 <HAL_GetTick>
 800a21c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a21e:	e009      	b.n	800a234 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a220:	f7fb fe6a 	bl	8005ef8 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d902      	bls.n	800a234 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	73fb      	strb	r3, [r7, #15]
        break;
 800a232:	e005      	b.n	800a240 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a234:	4b37      	ldr	r3, [pc, #220]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1ef      	bne.n	800a220 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d160      	bne.n	800a308 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d111      	bne.n	800a270 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a24c:	4b31      	ldr	r3, [pc, #196]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6892      	ldr	r2, [r2, #8]
 800a25c:	0211      	lsls	r1, r2, #8
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	68d2      	ldr	r2, [r2, #12]
 800a262:	0912      	lsrs	r2, r2, #4
 800a264:	0452      	lsls	r2, r2, #17
 800a266:	430a      	orrs	r2, r1
 800a268:	492a      	ldr	r1, [pc, #168]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	610b      	str	r3, [r1, #16]
 800a26e:	e027      	b.n	800a2c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d112      	bne.n	800a29c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a276:	4b27      	ldr	r3, [pc, #156]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a27e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6892      	ldr	r2, [r2, #8]
 800a286:	0211      	lsls	r1, r2, #8
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6912      	ldr	r2, [r2, #16]
 800a28c:	0852      	lsrs	r2, r2, #1
 800a28e:	3a01      	subs	r2, #1
 800a290:	0552      	lsls	r2, r2, #21
 800a292:	430a      	orrs	r2, r1
 800a294:	491f      	ldr	r1, [pc, #124]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a296:	4313      	orrs	r3, r2
 800a298:	610b      	str	r3, [r1, #16]
 800a29a:	e011      	b.n	800a2c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a29c:	4b1d      	ldr	r3, [pc, #116]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a2a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6892      	ldr	r2, [r2, #8]
 800a2ac:	0211      	lsls	r1, r2, #8
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	6952      	ldr	r2, [r2, #20]
 800a2b2:	0852      	lsrs	r2, r2, #1
 800a2b4:	3a01      	subs	r2, #1
 800a2b6:	0652      	lsls	r2, r2, #25
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	4916      	ldr	r1, [pc, #88]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a2c0:	4b14      	ldr	r3, [pc, #80]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a13      	ldr	r2, [pc, #76]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a2c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2cc:	f7fb fe14 	bl	8005ef8 <HAL_GetTick>
 800a2d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a2d2:	e009      	b.n	800a2e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a2d4:	f7fb fe10 	bl	8005ef8 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d902      	bls.n	800a2e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	73fb      	strb	r3, [r7, #15]
          break;
 800a2e6:	e005      	b.n	800a2f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0ef      	beq.n	800a2d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	4904      	ldr	r1, [pc, #16]	; (800a314 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a304:	4313      	orrs	r3, r2
 800a306:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	40021000 	.word	0x40021000

0800a318 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a326:	4b6a      	ldr	r3, [pc, #424]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d018      	beq.n	800a364 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a332:	4b67      	ldr	r3, [pc, #412]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f003 0203 	and.w	r2, r3, #3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d10d      	bne.n	800a35e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
       ||
 800a346:	2b00      	cmp	r3, #0
 800a348:	d009      	beq.n	800a35e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a34a:	4b61      	ldr	r3, [pc, #388]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	091b      	lsrs	r3, r3, #4
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
       ||
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d047      	beq.n	800a3ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	73fb      	strb	r3, [r7, #15]
 800a362:	e044      	b.n	800a3ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b03      	cmp	r3, #3
 800a36a:	d018      	beq.n	800a39e <RCCEx_PLLSAI2_Config+0x86>
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d825      	bhi.n	800a3bc <RCCEx_PLLSAI2_Config+0xa4>
 800a370:	2b01      	cmp	r3, #1
 800a372:	d002      	beq.n	800a37a <RCCEx_PLLSAI2_Config+0x62>
 800a374:	2b02      	cmp	r3, #2
 800a376:	d009      	beq.n	800a38c <RCCEx_PLLSAI2_Config+0x74>
 800a378:	e020      	b.n	800a3bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a37a:	4b55      	ldr	r3, [pc, #340]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d11d      	bne.n	800a3c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a38a:	e01a      	b.n	800a3c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a38c:	4b50      	ldr	r3, [pc, #320]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a394:	2b00      	cmp	r3, #0
 800a396:	d116      	bne.n	800a3c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a39c:	e013      	b.n	800a3c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a39e:	4b4c      	ldr	r3, [pc, #304]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10f      	bne.n	800a3ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a3aa:	4b49      	ldr	r3, [pc, #292]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d109      	bne.n	800a3ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3ba:	e006      	b.n	800a3ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c0:	e004      	b.n	800a3cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a3c2:	bf00      	nop
 800a3c4:	e002      	b.n	800a3cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a3c6:	bf00      	nop
 800a3c8:	e000      	b.n	800a3cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a3ca:	bf00      	nop
    }

    if(status == HAL_OK)
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10d      	bne.n	800a3ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a3d2:	4b3f      	ldr	r3, [pc, #252]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6819      	ldr	r1, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	011b      	lsls	r3, r3, #4
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	4939      	ldr	r1, [pc, #228]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d167      	bne.n	800a4c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a3f4:	4b36      	ldr	r3, [pc, #216]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a35      	ldr	r2, [pc, #212]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a400:	f7fb fd7a 	bl	8005ef8 <HAL_GetTick>
 800a404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a406:	e009      	b.n	800a41c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a408:	f7fb fd76 	bl	8005ef8 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b02      	cmp	r3, #2
 800a414:	d902      	bls.n	800a41c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	73fb      	strb	r3, [r7, #15]
        break;
 800a41a:	e005      	b.n	800a428 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a41c:	4b2c      	ldr	r3, [pc, #176]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1ef      	bne.n	800a408 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d14a      	bne.n	800a4c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d111      	bne.n	800a458 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a434:	4b26      	ldr	r3, [pc, #152]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a43c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	6892      	ldr	r2, [r2, #8]
 800a444:	0211      	lsls	r1, r2, #8
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	68d2      	ldr	r2, [r2, #12]
 800a44a:	0912      	lsrs	r2, r2, #4
 800a44c:	0452      	lsls	r2, r2, #17
 800a44e:	430a      	orrs	r2, r1
 800a450:	491f      	ldr	r1, [pc, #124]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a452:	4313      	orrs	r3, r2
 800a454:	614b      	str	r3, [r1, #20]
 800a456:	e011      	b.n	800a47c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a458:	4b1d      	ldr	r3, [pc, #116]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a460:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	6892      	ldr	r2, [r2, #8]
 800a468:	0211      	lsls	r1, r2, #8
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6912      	ldr	r2, [r2, #16]
 800a46e:	0852      	lsrs	r2, r2, #1
 800a470:	3a01      	subs	r2, #1
 800a472:	0652      	lsls	r2, r2, #25
 800a474:	430a      	orrs	r2, r1
 800a476:	4916      	ldr	r1, [pc, #88]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a47c:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a486:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a488:	f7fb fd36 	bl	8005ef8 <HAL_GetTick>
 800a48c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a48e:	e009      	b.n	800a4a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a490:	f7fb fd32 	bl	8005ef8 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d902      	bls.n	800a4a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	73fb      	strb	r3, [r7, #15]
          break;
 800a4a2:	e005      	b.n	800a4b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0ef      	beq.n	800a490 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d106      	bne.n	800a4c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a4b6:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a4b8:	695a      	ldr	r2, [r3, #20]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	4904      	ldr	r1, [pc, #16]	; (800a4d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	40021000 	.word	0x40021000

0800a4d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e095      	b.n	800a612 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d108      	bne.n	800a500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4f6:	d009      	beq.n	800a50c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	61da      	str	r2, [r3, #28]
 800a4fe:	e005      	b.n	800a50c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d106      	bne.n	800a52c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f89f 	bl	800a66a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a54c:	d902      	bls.n	800a554 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	e002      	b.n	800a55a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a558:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a562:	d007      	beq.n	800a574 <HAL_SPI_Init+0xa0>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a56c:	d002      	beq.n	800a574 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a584:	431a      	orrs	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b6:	ea42 0103 	orr.w	r1, r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	0c1b      	lsrs	r3, r3, #16
 800a5d0:	f003 0204 	and.w	r2, r3, #4
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	f003 0310 	and.w	r3, r3, #16
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e2:	f003 0308 	and.w	r3, r3, #8
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5f0:	ea42 0103 	orr.w	r1, r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e01a      	b.n	800a662 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a642:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f81a 	bl	800a67e <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b083      	sub	sp, #12
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b088      	sub	sp, #32
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	603b      	str	r3, [r7, #0]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d101      	bne.n	800a6b4 <HAL_SPI_Transmit+0x22>
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	e158      	b.n	800a966 <HAL_SPI_Transmit+0x2d4>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6bc:	f7fb fc1c 	bl	8005ef8 <HAL_GetTick>
 800a6c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a6c2:	88fb      	ldrh	r3, [r7, #6]
 800a6c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d002      	beq.n	800a6d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6d6:	e13d      	b.n	800a954 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d002      	beq.n	800a6e4 <HAL_SPI_Transmit+0x52>
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d102      	bne.n	800a6ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6e8:	e134      	b.n	800a954 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2203      	movs	r2, #3
 800a6ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	88fa      	ldrh	r2, [r7, #6]
 800a702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	88fa      	ldrh	r2, [r7, #6]
 800a708:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a734:	d10f      	bne.n	800a756 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a754:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a760:	2b40      	cmp	r3, #64	; 0x40
 800a762:	d007      	beq.n	800a774 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a77c:	d94b      	bls.n	800a816 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <HAL_SPI_Transmit+0xfa>
 800a786:	8afb      	ldrh	r3, [r7, #22]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d13e      	bne.n	800a80a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	881a      	ldrh	r2, [r3, #0]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79c:	1c9a      	adds	r2, r3, #2
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7b0:	e02b      	b.n	800a80a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d112      	bne.n	800a7e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	881a      	ldrh	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d0:	1c9a      	adds	r2, r3, #2
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a7e4:	e011      	b.n	800a80a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7e6:	f7fb fb87 	bl	8005ef8 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d803      	bhi.n	800a7fe <HAL_SPI_Transmit+0x16c>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7fc:	d102      	bne.n	800a804 <HAL_SPI_Transmit+0x172>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d102      	bne.n	800a80a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a808:	e0a4      	b.n	800a954 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a80e:	b29b      	uxth	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ce      	bne.n	800a7b2 <HAL_SPI_Transmit+0x120>
 800a814:	e07c      	b.n	800a910 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <HAL_SPI_Transmit+0x192>
 800a81e:	8afb      	ldrh	r3, [r7, #22]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d170      	bne.n	800a906 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a828:	b29b      	uxth	r3, r3
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d912      	bls.n	800a854 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a832:	881a      	ldrh	r2, [r3, #0]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83e:	1c9a      	adds	r2, r3, #2
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a848:	b29b      	uxth	r3, r3
 800a84a:	3b02      	subs	r3, #2
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a852:	e058      	b.n	800a906 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	330c      	adds	r3, #12
 800a85e:	7812      	ldrb	r2, [r2, #0]
 800a860:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a870:	b29b      	uxth	r3, r3
 800a872:	3b01      	subs	r3, #1
 800a874:	b29a      	uxth	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a87a:	e044      	b.n	800a906 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b02      	cmp	r3, #2
 800a888:	d12b      	bne.n	800a8e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a88e:	b29b      	uxth	r3, r3
 800a890:	2b01      	cmp	r3, #1
 800a892:	d912      	bls.n	800a8ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a898:	881a      	ldrh	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a4:	1c9a      	adds	r2, r3, #2
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3b02      	subs	r3, #2
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8b8:	e025      	b.n	800a906 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	330c      	adds	r3, #12
 800a8c4:	7812      	ldrb	r2, [r2, #0]
 800a8c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8e0:	e011      	b.n	800a906 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8e2:	f7fb fb09 	bl	8005ef8 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d803      	bhi.n	800a8fa <HAL_SPI_Transmit+0x268>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8f8:	d102      	bne.n	800a900 <HAL_SPI_Transmit+0x26e>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a904:	e026      	b.n	800a954 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1b5      	bne.n	800a87c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 fb65 	bl	800afe4 <SPI_EndRxTxTransaction>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2220      	movs	r2, #32
 800a924:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	613b      	str	r3, [r7, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	77fb      	strb	r3, [r7, #31]
 800a950:	e000      	b.n	800a954 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a964:	7ffb      	ldrb	r3, [r7, #31]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b08a      	sub	sp, #40	; 0x28
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	607a      	str	r2, [r7, #4]
 800a97a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a97c:	2301      	movs	r3, #1
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d101      	bne.n	800a994 <HAL_SPI_TransmitReceive+0x26>
 800a990:	2302      	movs	r3, #2
 800a992:	e1fb      	b.n	800ad8c <HAL_SPI_TransmitReceive+0x41e>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a99c:	f7fb faac 	bl	8005ef8 <HAL_GetTick>
 800a9a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a9b0:	887b      	ldrh	r3, [r7, #2]
 800a9b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a9b4:	887b      	ldrh	r3, [r7, #2]
 800a9b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9b8:	7efb      	ldrb	r3, [r7, #27]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d00e      	beq.n	800a9dc <HAL_SPI_TransmitReceive+0x6e>
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9c4:	d106      	bne.n	800a9d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <HAL_SPI_TransmitReceive+0x66>
 800a9ce:	7efb      	ldrb	r3, [r7, #27]
 800a9d0:	2b04      	cmp	r3, #4
 800a9d2:	d003      	beq.n	800a9dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a9da:	e1cd      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d005      	beq.n	800a9ee <HAL_SPI_TransmitReceive+0x80>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <HAL_SPI_TransmitReceive+0x80>
 800a9e8:	887b      	ldrh	r3, [r7, #2]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a9f4:	e1c0      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d003      	beq.n	800aa0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2205      	movs	r2, #5
 800aa06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	887a      	ldrh	r2, [r7, #2]
 800aa1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	887a      	ldrh	r2, [r7, #2]
 800aa22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	887a      	ldrh	r2, [r7, #2]
 800aa30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	887a      	ldrh	r2, [r7, #2]
 800aa36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa4c:	d802      	bhi.n	800aa54 <HAL_SPI_TransmitReceive+0xe6>
 800aa4e:	8a3b      	ldrh	r3, [r7, #16]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d908      	bls.n	800aa66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa62:	605a      	str	r2, [r3, #4]
 800aa64:	e007      	b.n	800aa76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa80:	2b40      	cmp	r3, #64	; 0x40
 800aa82:	d007      	beq.n	800aa94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa9c:	d97c      	bls.n	800ab98 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <HAL_SPI_TransmitReceive+0x13e>
 800aaa6:	8a7b      	ldrh	r3, [r7, #18]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d169      	bne.n	800ab80 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	881a      	ldrh	r2, [r3, #0]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	1c9a      	adds	r2, r3, #2
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	3b01      	subs	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aad0:	e056      	b.n	800ab80 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d11b      	bne.n	800ab18 <HAL_SPI_TransmitReceive+0x1aa>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d016      	beq.n	800ab18 <HAL_SPI_TransmitReceive+0x1aa>
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d113      	bne.n	800ab18 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf4:	881a      	ldrh	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	1c9a      	adds	r2, r3, #2
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab14:	2300      	movs	r3, #0
 800ab16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f003 0301 	and.w	r3, r3, #1
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d11c      	bne.n	800ab60 <HAL_SPI_TransmitReceive+0x1f2>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d016      	beq.n	800ab60 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68da      	ldr	r2, [r3, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	b292      	uxth	r2, r2
 800ab3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab44:	1c9a      	adds	r2, r3, #2
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	3b01      	subs	r3, #1
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab60:	f7fb f9ca 	bl	8005ef8 <HAL_GetTick>
 800ab64:	4602      	mov	r2, r0
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d807      	bhi.n	800ab80 <HAL_SPI_TransmitReceive+0x212>
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab76:	d003      	beq.n	800ab80 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ab7e:	e0fb      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1a3      	bne.n	800aad2 <HAL_SPI_TransmitReceive+0x164>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d19d      	bne.n	800aad2 <HAL_SPI_TransmitReceive+0x164>
 800ab96:	e0df      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <HAL_SPI_TransmitReceive+0x23a>
 800aba0:	8a7b      	ldrh	r3, [r7, #18]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	f040 80cb 	bne.w	800ad3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abac:	b29b      	uxth	r3, r3
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d912      	bls.n	800abd8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	881a      	ldrh	r2, [r3, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	1c9a      	adds	r2, r3, #2
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abcc:	b29b      	uxth	r3, r3
 800abce:	3b02      	subs	r3, #2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800abd6:	e0b2      	b.n	800ad3e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	330c      	adds	r3, #12
 800abe2:	7812      	ldrb	r2, [r2, #0]
 800abe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	3b01      	subs	r3, #1
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abfe:	e09e      	b.n	800ad3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f003 0302 	and.w	r3, r3, #2
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d134      	bne.n	800ac78 <HAL_SPI_TransmitReceive+0x30a>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d02f      	beq.n	800ac78 <HAL_SPI_TransmitReceive+0x30a>
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d12c      	bne.n	800ac78 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d912      	bls.n	800ac4e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2c:	881a      	ldrh	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	1c9a      	adds	r2, r3, #2
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	3b02      	subs	r3, #2
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac4c:	e012      	b.n	800ac74 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	330c      	adds	r3, #12
 800ac58:	7812      	ldrb	r2, [r2, #0]
 800ac5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac60:	1c5a      	adds	r2, r3, #1
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac74:	2300      	movs	r3, #0
 800ac76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d148      	bne.n	800ad18 <HAL_SPI_TransmitReceive+0x3aa>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d042      	beq.n	800ad18 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d923      	bls.n	800ace6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68da      	ldr	r2, [r3, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca8:	b292      	uxth	r2, r2
 800acaa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb0:	1c9a      	adds	r2, r3, #2
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	3b02      	subs	r3, #2
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acce:	b29b      	uxth	r3, r3
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d81f      	bhi.n	800ad14 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ace2:	605a      	str	r2, [r3, #4]
 800ace4:	e016      	b.n	800ad14 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f103 020c 	add.w	r2, r3, #12
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf2:	7812      	ldrb	r2, [r2, #0]
 800acf4:	b2d2      	uxtb	r2, r2
 800acf6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfc:	1c5a      	adds	r2, r3, #1
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad14:	2301      	movs	r3, #1
 800ad16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ad18:	f7fb f8ee 	bl	8005ef8 <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d803      	bhi.n	800ad30 <HAL_SPI_TransmitReceive+0x3c2>
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad2e:	d102      	bne.n	800ad36 <HAL_SPI_TransmitReceive+0x3c8>
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d103      	bne.n	800ad3e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ad3c:	e01c      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f47f af5b 	bne.w	800ac00 <HAL_SPI_TransmitReceive+0x292>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f47f af54 	bne.w	800ac00 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad58:	69fa      	ldr	r2, [r7, #28]
 800ad5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f941 	bl	800afe4 <SPI_EndRxTxTransaction>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d006      	beq.n	800ad76 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2220      	movs	r2, #32
 800ad72:	661a      	str	r2, [r3, #96]	; 0x60
 800ad74:	e000      	b.n	800ad78 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ad76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ad88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3728      	adds	r7, #40	; 0x28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ada2:	b2db      	uxtb	r3, r3
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	4613      	mov	r3, r2
 800adbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800adc0:	f7fb f89a 	bl	8005ef8 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	4413      	add	r3, r2
 800adce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800add0:	f7fb f892 	bl	8005ef8 <HAL_GetTick>
 800add4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800add6:	4b39      	ldr	r3, [pc, #228]	; (800aebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	015b      	lsls	r3, r3, #5
 800addc:	0d1b      	lsrs	r3, r3, #20
 800adde:	69fa      	ldr	r2, [r7, #28]
 800ade0:	fb02 f303 	mul.w	r3, r2, r3
 800ade4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ade6:	e054      	b.n	800ae92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adee:	d050      	beq.n	800ae92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800adf0:	f7fb f882 	bl	8005ef8 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d902      	bls.n	800ae06 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d13d      	bne.n	800ae82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae1e:	d111      	bne.n	800ae44 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae28:	d004      	beq.n	800ae34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae32:	d107      	bne.n	800ae44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae4c:	d10f      	bne.n	800ae6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e017      	b.n	800aeb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689a      	ldr	r2, [r3, #8]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	bf0c      	ite	eq
 800aea2:	2301      	moveq	r3, #1
 800aea4:	2300      	movne	r3, #0
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	461a      	mov	r2, r3
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d19b      	bne.n	800ade8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20000004 	.word	0x20000004

0800aec0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800aece:	f7fb f813 	bl	8005ef8 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	1a9b      	subs	r3, r3, r2
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	4413      	add	r3, r2
 800aedc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aede:	f7fb f80b 	bl	8005ef8 <HAL_GetTick>
 800aee2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aee4:	4b3e      	ldr	r3, [pc, #248]	; (800afe0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	00da      	lsls	r2, r3, #3
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	0d1b      	lsrs	r3, r3, #20
 800aef4:	69fa      	ldr	r2, [r7, #28]
 800aef6:	fb02 f303 	mul.w	r3, r2, r3
 800aefa:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800aefc:	e062      	b.n	800afc4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800af04:	d109      	bne.n	800af1a <SPI_WaitFifoStateUntilTimeout+0x5a>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d106      	bne.n	800af1a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	330c      	adds	r3, #12
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	b2db      	uxtb	r3, r3
 800af16:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800af18:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af20:	d050      	beq.n	800afc4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af22:	f7fa ffe9 	bl	8005ef8 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d902      	bls.n	800af38 <SPI_WaitFifoStateUntilTimeout+0x78>
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d13d      	bne.n	800afb4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af50:	d111      	bne.n	800af76 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af5a:	d004      	beq.n	800af66 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af64:	d107      	bne.n	800af76 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af7e:	d10f      	bne.n	800afa0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e010      	b.n	800afd6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689a      	ldr	r2, [r3, #8]
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	4013      	ands	r3, r2
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d194      	bne.n	800aefe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3720      	adds	r7, #32
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000004 	.word	0x20000004

0800afe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af02      	add	r7, sp, #8
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff ff5f 	bl	800aec0 <SPI_WaitFifoStateUntilTimeout>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d007      	beq.n	800b018 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00c:	f043 0220 	orr.w	r2, r3, #32
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e027      	b.n	800b068 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2200      	movs	r2, #0
 800b020:	2180      	movs	r1, #128	; 0x80
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7ff fec4 	bl	800adb0 <SPI_WaitFlagStateUntilTimeout>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d007      	beq.n	800b03e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b032:	f043 0220 	orr.w	r2, r3, #32
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e014      	b.n	800b068 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2200      	movs	r2, #0
 800b046:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7ff ff38 	bl	800aec0 <SPI_WaitFifoStateUntilTimeout>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d007      	beq.n	800b066 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b05a:	f043 0220 	orr.w	r2, r3, #32
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e000      	b.n	800b068 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e049      	b.n	800b116 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7f7 fe0c 	bl	8002cb4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f000 fc56 	bl	800b960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d109      	bne.n	800b144 <HAL_TIM_OC_Start_IT+0x24>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b01      	cmp	r3, #1
 800b13a:	bf14      	ite	ne
 800b13c:	2301      	movne	r3, #1
 800b13e:	2300      	moveq	r3, #0
 800b140:	b2db      	uxtb	r3, r3
 800b142:	e03c      	b.n	800b1be <HAL_TIM_OC_Start_IT+0x9e>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b04      	cmp	r3, #4
 800b148:	d109      	bne.n	800b15e <HAL_TIM_OC_Start_IT+0x3e>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b01      	cmp	r3, #1
 800b154:	bf14      	ite	ne
 800b156:	2301      	movne	r3, #1
 800b158:	2300      	moveq	r3, #0
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	e02f      	b.n	800b1be <HAL_TIM_OC_Start_IT+0x9e>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b08      	cmp	r3, #8
 800b162:	d109      	bne.n	800b178 <HAL_TIM_OC_Start_IT+0x58>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	bf14      	ite	ne
 800b170:	2301      	movne	r3, #1
 800b172:	2300      	moveq	r3, #0
 800b174:	b2db      	uxtb	r3, r3
 800b176:	e022      	b.n	800b1be <HAL_TIM_OC_Start_IT+0x9e>
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b0c      	cmp	r3, #12
 800b17c:	d109      	bne.n	800b192 <HAL_TIM_OC_Start_IT+0x72>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b01      	cmp	r3, #1
 800b188:	bf14      	ite	ne
 800b18a:	2301      	movne	r3, #1
 800b18c:	2300      	moveq	r3, #0
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	e015      	b.n	800b1be <HAL_TIM_OC_Start_IT+0x9e>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b10      	cmp	r3, #16
 800b196:	d109      	bne.n	800b1ac <HAL_TIM_OC_Start_IT+0x8c>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	bf14      	ite	ne
 800b1a4:	2301      	movne	r3, #1
 800b1a6:	2300      	moveq	r3, #0
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	e008      	b.n	800b1be <HAL_TIM_OC_Start_IT+0x9e>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	bf14      	ite	ne
 800b1b8:	2301      	movne	r3, #1
 800b1ba:	2300      	moveq	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e0e2      	b.n	800b38c <HAL_TIM_OC_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d104      	bne.n	800b1d6 <HAL_TIM_OC_Start_IT+0xb6>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1d4:	e023      	b.n	800b21e <HAL_TIM_OC_Start_IT+0xfe>
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b04      	cmp	r3, #4
 800b1da:	d104      	bne.n	800b1e6 <HAL_TIM_OC_Start_IT+0xc6>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2202      	movs	r2, #2
 800b1e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1e4:	e01b      	b.n	800b21e <HAL_TIM_OC_Start_IT+0xfe>
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b08      	cmp	r3, #8
 800b1ea:	d104      	bne.n	800b1f6 <HAL_TIM_OC_Start_IT+0xd6>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1f4:	e013      	b.n	800b21e <HAL_TIM_OC_Start_IT+0xfe>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b0c      	cmp	r3, #12
 800b1fa:	d104      	bne.n	800b206 <HAL_TIM_OC_Start_IT+0xe6>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b204:	e00b      	b.n	800b21e <HAL_TIM_OC_Start_IT+0xfe>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b10      	cmp	r3, #16
 800b20a:	d104      	bne.n	800b216 <HAL_TIM_OC_Start_IT+0xf6>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2202      	movs	r2, #2
 800b210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b214:	e003      	b.n	800b21e <HAL_TIM_OC_Start_IT+0xfe>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2202      	movs	r2, #2
 800b21a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b0c      	cmp	r3, #12
 800b222:	d841      	bhi.n	800b2a8 <HAL_TIM_OC_Start_IT+0x188>
 800b224:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <HAL_TIM_OC_Start_IT+0x10c>)
 800b226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22a:	bf00      	nop
 800b22c:	0800b261 	.word	0x0800b261
 800b230:	0800b2a9 	.word	0x0800b2a9
 800b234:	0800b2a9 	.word	0x0800b2a9
 800b238:	0800b2a9 	.word	0x0800b2a9
 800b23c:	0800b273 	.word	0x0800b273
 800b240:	0800b2a9 	.word	0x0800b2a9
 800b244:	0800b2a9 	.word	0x0800b2a9
 800b248:	0800b2a9 	.word	0x0800b2a9
 800b24c:	0800b285 	.word	0x0800b285
 800b250:	0800b2a9 	.word	0x0800b2a9
 800b254:	0800b2a9 	.word	0x0800b2a9
 800b258:	0800b2a9 	.word	0x0800b2a9
 800b25c:	0800b297 	.word	0x0800b297
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f042 0202 	orr.w	r2, r2, #2
 800b26e:	60da      	str	r2, [r3, #12]
      break;
 800b270:	e01b      	b.n	800b2aa <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68da      	ldr	r2, [r3, #12]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0204 	orr.w	r2, r2, #4
 800b280:	60da      	str	r2, [r3, #12]
      break;
 800b282:	e012      	b.n	800b2aa <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0208 	orr.w	r2, r2, #8
 800b292:	60da      	str	r2, [r3, #12]
      break;
 800b294:	e009      	b.n	800b2aa <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68da      	ldr	r2, [r3, #12]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f042 0210 	orr.w	r2, r2, #16
 800b2a4:	60da      	str	r2, [r3, #12]
      break;
 800b2a6:	e000      	b.n	800b2aa <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 800b2a8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 fec4 	bl	800c040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a35      	ldr	r2, [pc, #212]	; (800b394 <HAL_TIM_OC_Start_IT+0x274>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d013      	beq.n	800b2ea <HAL_TIM_OC_Start_IT+0x1ca>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a34      	ldr	r2, [pc, #208]	; (800b398 <HAL_TIM_OC_Start_IT+0x278>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00e      	beq.n	800b2ea <HAL_TIM_OC_Start_IT+0x1ca>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a32      	ldr	r2, [pc, #200]	; (800b39c <HAL_TIM_OC_Start_IT+0x27c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d009      	beq.n	800b2ea <HAL_TIM_OC_Start_IT+0x1ca>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a31      	ldr	r2, [pc, #196]	; (800b3a0 <HAL_TIM_OC_Start_IT+0x280>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d004      	beq.n	800b2ea <HAL_TIM_OC_Start_IT+0x1ca>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a2f      	ldr	r2, [pc, #188]	; (800b3a4 <HAL_TIM_OC_Start_IT+0x284>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d101      	bne.n	800b2ee <HAL_TIM_OC_Start_IT+0x1ce>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e000      	b.n	800b2f0 <HAL_TIM_OC_Start_IT+0x1d0>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d007      	beq.n	800b304 <HAL_TIM_OC_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b302:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a22      	ldr	r2, [pc, #136]	; (800b394 <HAL_TIM_OC_Start_IT+0x274>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d01d      	beq.n	800b34a <HAL_TIM_OC_Start_IT+0x22a>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b316:	d018      	beq.n	800b34a <HAL_TIM_OC_Start_IT+0x22a>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a22      	ldr	r2, [pc, #136]	; (800b3a8 <HAL_TIM_OC_Start_IT+0x288>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d013      	beq.n	800b34a <HAL_TIM_OC_Start_IT+0x22a>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a21      	ldr	r2, [pc, #132]	; (800b3ac <HAL_TIM_OC_Start_IT+0x28c>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d00e      	beq.n	800b34a <HAL_TIM_OC_Start_IT+0x22a>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a1f      	ldr	r2, [pc, #124]	; (800b3b0 <HAL_TIM_OC_Start_IT+0x290>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d009      	beq.n	800b34a <HAL_TIM_OC_Start_IT+0x22a>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a17      	ldr	r2, [pc, #92]	; (800b398 <HAL_TIM_OC_Start_IT+0x278>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d004      	beq.n	800b34a <HAL_TIM_OC_Start_IT+0x22a>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a15      	ldr	r2, [pc, #84]	; (800b39c <HAL_TIM_OC_Start_IT+0x27c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d115      	bne.n	800b376 <HAL_TIM_OC_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	689a      	ldr	r2, [r3, #8]
 800b350:	4b18      	ldr	r3, [pc, #96]	; (800b3b4 <HAL_TIM_OC_Start_IT+0x294>)
 800b352:	4013      	ands	r3, r2
 800b354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b06      	cmp	r3, #6
 800b35a:	d015      	beq.n	800b388 <HAL_TIM_OC_Start_IT+0x268>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b362:	d011      	beq.n	800b388 <HAL_TIM_OC_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f042 0201 	orr.w	r2, r2, #1
 800b372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b374:	e008      	b.n	800b388 <HAL_TIM_OC_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f042 0201 	orr.w	r2, r2, #1
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	e000      	b.n	800b38a <HAL_TIM_OC_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b388:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	40012c00 	.word	0x40012c00
 800b398:	40013400 	.word	0x40013400
 800b39c:	40014000 	.word	0x40014000
 800b3a0:	40014400 	.word	0x40014400
 800b3a4:	40014800 	.word	0x40014800
 800b3a8:	40000400 	.word	0x40000400
 800b3ac:	40000800 	.word	0x40000800
 800b3b0:	40000c00 	.word	0x40000c00
 800b3b4:	00010007 	.word	0x00010007

0800b3b8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b0c      	cmp	r3, #12
 800b3c6:	d841      	bhi.n	800b44c <HAL_TIM_OC_Stop_IT+0x94>
 800b3c8:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <HAL_TIM_OC_Stop_IT+0x18>)
 800b3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ce:	bf00      	nop
 800b3d0:	0800b405 	.word	0x0800b405
 800b3d4:	0800b44d 	.word	0x0800b44d
 800b3d8:	0800b44d 	.word	0x0800b44d
 800b3dc:	0800b44d 	.word	0x0800b44d
 800b3e0:	0800b417 	.word	0x0800b417
 800b3e4:	0800b44d 	.word	0x0800b44d
 800b3e8:	0800b44d 	.word	0x0800b44d
 800b3ec:	0800b44d 	.word	0x0800b44d
 800b3f0:	0800b429 	.word	0x0800b429
 800b3f4:	0800b44d 	.word	0x0800b44d
 800b3f8:	0800b44d 	.word	0x0800b44d
 800b3fc:	0800b44d 	.word	0x0800b44d
 800b400:	0800b43b 	.word	0x0800b43b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0202 	bic.w	r2, r2, #2
 800b412:	60da      	str	r2, [r3, #12]
      break;
 800b414:	e01b      	b.n	800b44e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f022 0204 	bic.w	r2, r2, #4
 800b424:	60da      	str	r2, [r3, #12]
      break;
 800b426:	e012      	b.n	800b44e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68da      	ldr	r2, [r3, #12]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f022 0208 	bic.w	r2, r2, #8
 800b436:	60da      	str	r2, [r3, #12]
      break;
 800b438:	e009      	b.n	800b44e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68da      	ldr	r2, [r3, #12]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f022 0210 	bic.w	r2, r2, #16
 800b448:	60da      	str	r2, [r3, #12]
      break;
 800b44a:	e000      	b.n	800b44e <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800b44c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2200      	movs	r2, #0
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fdf2 	bl	800c040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a3e      	ldr	r2, [pc, #248]	; (800b55c <HAL_TIM_OC_Stop_IT+0x1a4>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d013      	beq.n	800b48e <HAL_TIM_OC_Stop_IT+0xd6>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a3d      	ldr	r2, [pc, #244]	; (800b560 <HAL_TIM_OC_Stop_IT+0x1a8>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d00e      	beq.n	800b48e <HAL_TIM_OC_Stop_IT+0xd6>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a3b      	ldr	r2, [pc, #236]	; (800b564 <HAL_TIM_OC_Stop_IT+0x1ac>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d009      	beq.n	800b48e <HAL_TIM_OC_Stop_IT+0xd6>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a3a      	ldr	r2, [pc, #232]	; (800b568 <HAL_TIM_OC_Stop_IT+0x1b0>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d004      	beq.n	800b48e <HAL_TIM_OC_Stop_IT+0xd6>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a38      	ldr	r2, [pc, #224]	; (800b56c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d101      	bne.n	800b492 <HAL_TIM_OC_Stop_IT+0xda>
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <HAL_TIM_OC_Stop_IT+0xdc>
 800b492:	2300      	movs	r3, #0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d017      	beq.n	800b4c8 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6a1a      	ldr	r2, [r3, #32]
 800b49e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10f      	bne.n	800b4c8 <HAL_TIM_OC_Stop_IT+0x110>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6a1a      	ldr	r2, [r3, #32]
 800b4ae:	f240 4344 	movw	r3, #1092	; 0x444
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d107      	bne.n	800b4c8 <HAL_TIM_OC_Stop_IT+0x110>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6a1a      	ldr	r2, [r3, #32]
 800b4ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10f      	bne.n	800b4f8 <HAL_TIM_OC_Stop_IT+0x140>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6a1a      	ldr	r2, [r3, #32]
 800b4de:	f240 4344 	movw	r3, #1092	; 0x444
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d107      	bne.n	800b4f8 <HAL_TIM_OC_Stop_IT+0x140>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 0201 	bic.w	r2, r2, #1
 800b4f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d104      	bne.n	800b508 <HAL_TIM_OC_Stop_IT+0x150>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b506:	e023      	b.n	800b550 <HAL_TIM_OC_Stop_IT+0x198>
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2b04      	cmp	r3, #4
 800b50c:	d104      	bne.n	800b518 <HAL_TIM_OC_Stop_IT+0x160>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b516:	e01b      	b.n	800b550 <HAL_TIM_OC_Stop_IT+0x198>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2b08      	cmp	r3, #8
 800b51c:	d104      	bne.n	800b528 <HAL_TIM_OC_Stop_IT+0x170>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b526:	e013      	b.n	800b550 <HAL_TIM_OC_Stop_IT+0x198>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2b0c      	cmp	r3, #12
 800b52c:	d104      	bne.n	800b538 <HAL_TIM_OC_Stop_IT+0x180>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b536:	e00b      	b.n	800b550 <HAL_TIM_OC_Stop_IT+0x198>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b10      	cmp	r3, #16
 800b53c:	d104      	bne.n	800b548 <HAL_TIM_OC_Stop_IT+0x190>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b546:	e003      	b.n	800b550 <HAL_TIM_OC_Stop_IT+0x198>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	40012c00 	.word	0x40012c00
 800b560:	40013400 	.word	0x40013400
 800b564:	40014000 	.word	0x40014000
 800b568:	40014400 	.word	0x40014400
 800b56c:	40014800 	.word	0x40014800

0800b570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	f003 0302 	and.w	r3, r3, #2
 800b582:	2b02      	cmp	r3, #2
 800b584:	d122      	bne.n	800b5cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f003 0302 	and.w	r3, r3, #2
 800b590:	2b02      	cmp	r3, #2
 800b592:	d11b      	bne.n	800b5cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f06f 0202 	mvn.w	r2, #2
 800b59c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f003 0303 	and.w	r3, r3, #3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d003      	beq.n	800b5ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f9b6 	bl	800b924 <HAL_TIM_IC_CaptureCallback>
 800b5b8:	e005      	b.n	800b5c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7f5 fbea 	bl	8000d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f9b9 	bl	800b938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	f003 0304 	and.w	r3, r3, #4
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d122      	bne.n	800b620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	d11b      	bne.n	800b620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f06f 0204 	mvn.w	r2, #4
 800b5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b602:	2b00      	cmp	r3, #0
 800b604:	d003      	beq.n	800b60e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f98c 	bl	800b924 <HAL_TIM_IC_CaptureCallback>
 800b60c:	e005      	b.n	800b61a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7f5 fbc0 	bl	8000d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f98f 	bl	800b938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	f003 0308 	and.w	r3, r3, #8
 800b62a:	2b08      	cmp	r3, #8
 800b62c:	d122      	bne.n	800b674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	f003 0308 	and.w	r3, r3, #8
 800b638:	2b08      	cmp	r3, #8
 800b63a:	d11b      	bne.n	800b674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f06f 0208 	mvn.w	r2, #8
 800b644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2204      	movs	r2, #4
 800b64a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	f003 0303 	and.w	r3, r3, #3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f962 	bl	800b924 <HAL_TIM_IC_CaptureCallback>
 800b660:	e005      	b.n	800b66e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7f5 fb96 	bl	8000d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f965 	bl	800b938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	f003 0310 	and.w	r3, r3, #16
 800b67e:	2b10      	cmp	r3, #16
 800b680:	d122      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f003 0310 	and.w	r3, r3, #16
 800b68c:	2b10      	cmp	r3, #16
 800b68e:	d11b      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f06f 0210 	mvn.w	r2, #16
 800b698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2208      	movs	r2, #8
 800b69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f938 	bl	800b924 <HAL_TIM_IC_CaptureCallback>
 800b6b4:	e005      	b.n	800b6c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7f5 fb6c 	bl	8000d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f93b 	bl	800b938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d10e      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d107      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f06f 0201 	mvn.w	r2, #1
 800b6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7f5 fb72 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fe:	2b80      	cmp	r3, #128	; 0x80
 800b700:	d10e      	bne.n	800b720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b70c:	2b80      	cmp	r3, #128	; 0x80
 800b70e:	d107      	bne.n	800b720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fcbf 	bl	800c09e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b72e:	d10e      	bne.n	800b74e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b73a:	2b80      	cmp	r3, #128	; 0x80
 800b73c:	d107      	bne.n	800b74e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fcb2 	bl	800c0b2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	d10e      	bne.n	800b77a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b766:	2b40      	cmp	r3, #64	; 0x40
 800b768:	d107      	bne.n	800b77a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f8e9 	bl	800b94c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b20      	cmp	r3, #32
 800b786:	d10e      	bne.n	800b7a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f003 0320 	and.w	r3, r3, #32
 800b792:	2b20      	cmp	r3, #32
 800b794:	d107      	bne.n	800b7a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f06f 0220 	mvn.w	r2, #32
 800b79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fc72 	bl	800c08a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
	...

0800b7b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d101      	bne.n	800b7ca <HAL_TIM_OC_ConfigChannel+0x1a>
 800b7c6:	2302      	movs	r3, #2
 800b7c8:	e064      	b.n	800b894 <HAL_TIM_OC_ConfigChannel+0xe4>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b14      	cmp	r3, #20
 800b7d6:	d857      	bhi.n	800b888 <HAL_TIM_OC_ConfigChannel+0xd8>
 800b7d8:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <HAL_TIM_OC_ConfigChannel+0x30>)
 800b7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7de:	bf00      	nop
 800b7e0:	0800b835 	.word	0x0800b835
 800b7e4:	0800b889 	.word	0x0800b889
 800b7e8:	0800b889 	.word	0x0800b889
 800b7ec:	0800b889 	.word	0x0800b889
 800b7f0:	0800b843 	.word	0x0800b843
 800b7f4:	0800b889 	.word	0x0800b889
 800b7f8:	0800b889 	.word	0x0800b889
 800b7fc:	0800b889 	.word	0x0800b889
 800b800:	0800b851 	.word	0x0800b851
 800b804:	0800b889 	.word	0x0800b889
 800b808:	0800b889 	.word	0x0800b889
 800b80c:	0800b889 	.word	0x0800b889
 800b810:	0800b85f 	.word	0x0800b85f
 800b814:	0800b889 	.word	0x0800b889
 800b818:	0800b889 	.word	0x0800b889
 800b81c:	0800b889 	.word	0x0800b889
 800b820:	0800b86d 	.word	0x0800b86d
 800b824:	0800b889 	.word	0x0800b889
 800b828:	0800b889 	.word	0x0800b889
 800b82c:	0800b889 	.word	0x0800b889
 800b830:	0800b87b 	.word	0x0800b87b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 f92a 	bl	800ba94 <TIM_OC1_SetConfig>
      break;
 800b840:	e023      	b.n	800b88a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 f9b3 	bl	800bbb4 <TIM_OC2_SetConfig>
      break;
 800b84e:	e01c      	b.n	800b88a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68b9      	ldr	r1, [r7, #8]
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fa36 	bl	800bcc8 <TIM_OC3_SetConfig>
      break;
 800b85c:	e015      	b.n	800b88a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fab7 	bl	800bdd8 <TIM_OC4_SetConfig>
      break;
 800b86a:	e00e      	b.n	800b88a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fb1a 	bl	800beac <TIM_OC5_SetConfig>
      break;
 800b878:	e007      	b.n	800b88a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68b9      	ldr	r1, [r7, #8]
 800b880:	4618      	mov	r0, r3
 800b882:	f000 fb77 	bl	800bf74 <TIM_OC6_SetConfig>
      break;
 800b886:	e000      	b.n	800b88a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800b888:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b0c      	cmp	r3, #12
 800b8ae:	d831      	bhi.n	800b914 <HAL_TIM_ReadCapturedValue+0x78>
 800b8b0:	a201      	add	r2, pc, #4	; (adr r2, 800b8b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b6:	bf00      	nop
 800b8b8:	0800b8ed 	.word	0x0800b8ed
 800b8bc:	0800b915 	.word	0x0800b915
 800b8c0:	0800b915 	.word	0x0800b915
 800b8c4:	0800b915 	.word	0x0800b915
 800b8c8:	0800b8f7 	.word	0x0800b8f7
 800b8cc:	0800b915 	.word	0x0800b915
 800b8d0:	0800b915 	.word	0x0800b915
 800b8d4:	0800b915 	.word	0x0800b915
 800b8d8:	0800b901 	.word	0x0800b901
 800b8dc:	0800b915 	.word	0x0800b915
 800b8e0:	0800b915 	.word	0x0800b915
 800b8e4:	0800b915 	.word	0x0800b915
 800b8e8:	0800b90b 	.word	0x0800b90b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f2:	60fb      	str	r3, [r7, #12]

      break;
 800b8f4:	e00f      	b.n	800b916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fc:	60fb      	str	r3, [r7, #12]

      break;
 800b8fe:	e00a      	b.n	800b916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b906:	60fb      	str	r3, [r7, #12]

      break;
 800b908:	e005      	b.n	800b916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b910:	60fb      	str	r3, [r7, #12]

      break;
 800b912:	e000      	b.n	800b916 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b914:	bf00      	nop
  }

  return tmpreg;
 800b916:	68fb      	ldr	r3, [r7, #12]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a40      	ldr	r2, [pc, #256]	; (800ba74 <TIM_Base_SetConfig+0x114>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d013      	beq.n	800b9a0 <TIM_Base_SetConfig+0x40>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b97e:	d00f      	beq.n	800b9a0 <TIM_Base_SetConfig+0x40>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a3d      	ldr	r2, [pc, #244]	; (800ba78 <TIM_Base_SetConfig+0x118>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d00b      	beq.n	800b9a0 <TIM_Base_SetConfig+0x40>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a3c      	ldr	r2, [pc, #240]	; (800ba7c <TIM_Base_SetConfig+0x11c>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d007      	beq.n	800b9a0 <TIM_Base_SetConfig+0x40>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a3b      	ldr	r2, [pc, #236]	; (800ba80 <TIM_Base_SetConfig+0x120>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d003      	beq.n	800b9a0 <TIM_Base_SetConfig+0x40>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a3a      	ldr	r2, [pc, #232]	; (800ba84 <TIM_Base_SetConfig+0x124>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d108      	bne.n	800b9b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a2f      	ldr	r2, [pc, #188]	; (800ba74 <TIM_Base_SetConfig+0x114>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d01f      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c0:	d01b      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a2c      	ldr	r2, [pc, #176]	; (800ba78 <TIM_Base_SetConfig+0x118>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d017      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a2b      	ldr	r2, [pc, #172]	; (800ba7c <TIM_Base_SetConfig+0x11c>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d013      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a2a      	ldr	r2, [pc, #168]	; (800ba80 <TIM_Base_SetConfig+0x120>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d00f      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a29      	ldr	r2, [pc, #164]	; (800ba84 <TIM_Base_SetConfig+0x124>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d00b      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a28      	ldr	r2, [pc, #160]	; (800ba88 <TIM_Base_SetConfig+0x128>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d007      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a27      	ldr	r2, [pc, #156]	; (800ba8c <TIM_Base_SetConfig+0x12c>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d003      	beq.n	800b9fa <TIM_Base_SetConfig+0x9a>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a26      	ldr	r2, [pc, #152]	; (800ba90 <TIM_Base_SetConfig+0x130>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d108      	bne.n	800ba0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a10      	ldr	r2, [pc, #64]	; (800ba74 <TIM_Base_SetConfig+0x114>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d00f      	beq.n	800ba58 <TIM_Base_SetConfig+0xf8>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a12      	ldr	r2, [pc, #72]	; (800ba84 <TIM_Base_SetConfig+0x124>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00b      	beq.n	800ba58 <TIM_Base_SetConfig+0xf8>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a11      	ldr	r2, [pc, #68]	; (800ba88 <TIM_Base_SetConfig+0x128>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d007      	beq.n	800ba58 <TIM_Base_SetConfig+0xf8>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a10      	ldr	r2, [pc, #64]	; (800ba8c <TIM_Base_SetConfig+0x12c>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d003      	beq.n	800ba58 <TIM_Base_SetConfig+0xf8>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a0f      	ldr	r2, [pc, #60]	; (800ba90 <TIM_Base_SetConfig+0x130>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d103      	bne.n	800ba60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	691a      	ldr	r2, [r3, #16]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	615a      	str	r2, [r3, #20]
}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	40012c00 	.word	0x40012c00
 800ba78:	40000400 	.word	0x40000400
 800ba7c:	40000800 	.word	0x40000800
 800ba80:	40000c00 	.word	0x40000c00
 800ba84:	40013400 	.word	0x40013400
 800ba88:	40014000 	.word	0x40014000
 800ba8c:	40014400 	.word	0x40014400
 800ba90:	40014800 	.word	0x40014800

0800ba94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	f023 0201 	bic.w	r2, r3, #1
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0303 	bic.w	r3, r3, #3
 800bace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f023 0302 	bic.w	r3, r3, #2
 800bae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	4313      	orrs	r3, r2
 800baea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a2c      	ldr	r2, [pc, #176]	; (800bba0 <TIM_OC1_SetConfig+0x10c>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d00f      	beq.n	800bb14 <TIM_OC1_SetConfig+0x80>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a2b      	ldr	r2, [pc, #172]	; (800bba4 <TIM_OC1_SetConfig+0x110>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00b      	beq.n	800bb14 <TIM_OC1_SetConfig+0x80>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a2a      	ldr	r2, [pc, #168]	; (800bba8 <TIM_OC1_SetConfig+0x114>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d007      	beq.n	800bb14 <TIM_OC1_SetConfig+0x80>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a29      	ldr	r2, [pc, #164]	; (800bbac <TIM_OC1_SetConfig+0x118>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d003      	beq.n	800bb14 <TIM_OC1_SetConfig+0x80>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a28      	ldr	r2, [pc, #160]	; (800bbb0 <TIM_OC1_SetConfig+0x11c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d10c      	bne.n	800bb2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	f023 0308 	bic.w	r3, r3, #8
 800bb1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f023 0304 	bic.w	r3, r3, #4
 800bb2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a1b      	ldr	r2, [pc, #108]	; (800bba0 <TIM_OC1_SetConfig+0x10c>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d00f      	beq.n	800bb56 <TIM_OC1_SetConfig+0xc2>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a1a      	ldr	r2, [pc, #104]	; (800bba4 <TIM_OC1_SetConfig+0x110>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d00b      	beq.n	800bb56 <TIM_OC1_SetConfig+0xc2>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a19      	ldr	r2, [pc, #100]	; (800bba8 <TIM_OC1_SetConfig+0x114>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d007      	beq.n	800bb56 <TIM_OC1_SetConfig+0xc2>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a18      	ldr	r2, [pc, #96]	; (800bbac <TIM_OC1_SetConfig+0x118>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d003      	beq.n	800bb56 <TIM_OC1_SetConfig+0xc2>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a17      	ldr	r2, [pc, #92]	; (800bbb0 <TIM_OC1_SetConfig+0x11c>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d111      	bne.n	800bb7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	621a      	str	r2, [r3, #32]
}
 800bb94:	bf00      	nop
 800bb96:	371c      	adds	r7, #28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	40012c00 	.word	0x40012c00
 800bba4:	40013400 	.word	0x40013400
 800bba8:	40014000 	.word	0x40014000
 800bbac:	40014400 	.word	0x40014400
 800bbb0:	40014800 	.word	0x40014800

0800bbb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	f023 0210 	bic.w	r2, r3, #16
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	021b      	lsls	r3, r3, #8
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f023 0320 	bic.w	r3, r3, #32
 800bc02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	011b      	lsls	r3, r3, #4
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a28      	ldr	r2, [pc, #160]	; (800bcb4 <TIM_OC2_SetConfig+0x100>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d003      	beq.n	800bc20 <TIM_OC2_SetConfig+0x6c>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a27      	ldr	r2, [pc, #156]	; (800bcb8 <TIM_OC2_SetConfig+0x104>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d10d      	bne.n	800bc3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	011b      	lsls	r3, r3, #4
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a1d      	ldr	r2, [pc, #116]	; (800bcb4 <TIM_OC2_SetConfig+0x100>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d00f      	beq.n	800bc64 <TIM_OC2_SetConfig+0xb0>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a1c      	ldr	r2, [pc, #112]	; (800bcb8 <TIM_OC2_SetConfig+0x104>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d00b      	beq.n	800bc64 <TIM_OC2_SetConfig+0xb0>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a1b      	ldr	r2, [pc, #108]	; (800bcbc <TIM_OC2_SetConfig+0x108>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d007      	beq.n	800bc64 <TIM_OC2_SetConfig+0xb0>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a1a      	ldr	r2, [pc, #104]	; (800bcc0 <TIM_OC2_SetConfig+0x10c>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d003      	beq.n	800bc64 <TIM_OC2_SetConfig+0xb0>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a19      	ldr	r2, [pc, #100]	; (800bcc4 <TIM_OC2_SetConfig+0x110>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d113      	bne.n	800bc8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	621a      	str	r2, [r3, #32]
}
 800bca6:	bf00      	nop
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	40012c00 	.word	0x40012c00
 800bcb8:	40013400 	.word	0x40013400
 800bcbc:	40014000 	.word	0x40014000
 800bcc0:	40014400 	.word	0x40014400
 800bcc4:	40014800 	.word	0x40014800

0800bcc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	69db      	ldr	r3, [r3, #28]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f023 0303 	bic.w	r3, r3, #3
 800bd02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	021b      	lsls	r3, r3, #8
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a27      	ldr	r2, [pc, #156]	; (800bdc4 <TIM_OC3_SetConfig+0xfc>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d003      	beq.n	800bd32 <TIM_OC3_SetConfig+0x6a>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a26      	ldr	r2, [pc, #152]	; (800bdc8 <TIM_OC3_SetConfig+0x100>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d10d      	bne.n	800bd4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	021b      	lsls	r3, r3, #8
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a1c      	ldr	r2, [pc, #112]	; (800bdc4 <TIM_OC3_SetConfig+0xfc>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d00f      	beq.n	800bd76 <TIM_OC3_SetConfig+0xae>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a1b      	ldr	r2, [pc, #108]	; (800bdc8 <TIM_OC3_SetConfig+0x100>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d00b      	beq.n	800bd76 <TIM_OC3_SetConfig+0xae>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a1a      	ldr	r2, [pc, #104]	; (800bdcc <TIM_OC3_SetConfig+0x104>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d007      	beq.n	800bd76 <TIM_OC3_SetConfig+0xae>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a19      	ldr	r2, [pc, #100]	; (800bdd0 <TIM_OC3_SetConfig+0x108>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d003      	beq.n	800bd76 <TIM_OC3_SetConfig+0xae>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a18      	ldr	r2, [pc, #96]	; (800bdd4 <TIM_OC3_SetConfig+0x10c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d113      	bne.n	800bd9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	011b      	lsls	r3, r3, #4
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	621a      	str	r2, [r3, #32]
}
 800bdb8:	bf00      	nop
 800bdba:	371c      	adds	r7, #28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	40012c00 	.word	0x40012c00
 800bdc8:	40013400 	.word	0x40013400
 800bdcc:	40014000 	.word	0x40014000
 800bdd0:	40014400 	.word	0x40014400
 800bdd4:	40014800 	.word	0x40014800

0800bdd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	021b      	lsls	r3, r3, #8
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	031b      	lsls	r3, r3, #12
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	4313      	orrs	r3, r2
 800be32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a18      	ldr	r2, [pc, #96]	; (800be98 <TIM_OC4_SetConfig+0xc0>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d00f      	beq.n	800be5c <TIM_OC4_SetConfig+0x84>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a17      	ldr	r2, [pc, #92]	; (800be9c <TIM_OC4_SetConfig+0xc4>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d00b      	beq.n	800be5c <TIM_OC4_SetConfig+0x84>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a16      	ldr	r2, [pc, #88]	; (800bea0 <TIM_OC4_SetConfig+0xc8>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d007      	beq.n	800be5c <TIM_OC4_SetConfig+0x84>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a15      	ldr	r2, [pc, #84]	; (800bea4 <TIM_OC4_SetConfig+0xcc>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d003      	beq.n	800be5c <TIM_OC4_SetConfig+0x84>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a14      	ldr	r2, [pc, #80]	; (800bea8 <TIM_OC4_SetConfig+0xd0>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d109      	bne.n	800be70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	019b      	lsls	r3, r3, #6
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	621a      	str	r2, [r3, #32]
}
 800be8a:	bf00      	nop
 800be8c:	371c      	adds	r7, #28
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	40012c00 	.word	0x40012c00
 800be9c:	40013400 	.word	0x40013400
 800bea0:	40014000 	.word	0x40014000
 800bea4:	40014400 	.word	0x40014400
 800bea8:	40014800 	.word	0x40014800

0800beac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800beda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	041b      	lsls	r3, r3, #16
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	4313      	orrs	r3, r2
 800befc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a17      	ldr	r2, [pc, #92]	; (800bf60 <TIM_OC5_SetConfig+0xb4>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d00f      	beq.n	800bf26 <TIM_OC5_SetConfig+0x7a>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a16      	ldr	r2, [pc, #88]	; (800bf64 <TIM_OC5_SetConfig+0xb8>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d00b      	beq.n	800bf26 <TIM_OC5_SetConfig+0x7a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a15      	ldr	r2, [pc, #84]	; (800bf68 <TIM_OC5_SetConfig+0xbc>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d007      	beq.n	800bf26 <TIM_OC5_SetConfig+0x7a>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a14      	ldr	r2, [pc, #80]	; (800bf6c <TIM_OC5_SetConfig+0xc0>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d003      	beq.n	800bf26 <TIM_OC5_SetConfig+0x7a>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a13      	ldr	r2, [pc, #76]	; (800bf70 <TIM_OC5_SetConfig+0xc4>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d109      	bne.n	800bf3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	021b      	lsls	r3, r3, #8
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	685a      	ldr	r2, [r3, #4]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	621a      	str	r2, [r3, #32]
}
 800bf54:	bf00      	nop
 800bf56:	371c      	adds	r7, #28
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	40012c00 	.word	0x40012c00
 800bf64:	40013400 	.word	0x40013400
 800bf68:	40014000 	.word	0x40014000
 800bf6c:	40014400 	.word	0x40014400
 800bf70:	40014800 	.word	0x40014800

0800bf74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bfa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	021b      	lsls	r3, r3, #8
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bfba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	051b      	lsls	r3, r3, #20
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a18      	ldr	r2, [pc, #96]	; (800c02c <TIM_OC6_SetConfig+0xb8>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d00f      	beq.n	800bff0 <TIM_OC6_SetConfig+0x7c>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a17      	ldr	r2, [pc, #92]	; (800c030 <TIM_OC6_SetConfig+0xbc>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d00b      	beq.n	800bff0 <TIM_OC6_SetConfig+0x7c>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a16      	ldr	r2, [pc, #88]	; (800c034 <TIM_OC6_SetConfig+0xc0>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d007      	beq.n	800bff0 <TIM_OC6_SetConfig+0x7c>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a15      	ldr	r2, [pc, #84]	; (800c038 <TIM_OC6_SetConfig+0xc4>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d003      	beq.n	800bff0 <TIM_OC6_SetConfig+0x7c>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a14      	ldr	r2, [pc, #80]	; (800c03c <TIM_OC6_SetConfig+0xc8>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d109      	bne.n	800c004 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	029b      	lsls	r3, r3, #10
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	4313      	orrs	r3, r2
 800c002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	621a      	str	r2, [r3, #32]
}
 800c01e:	bf00      	nop
 800c020:	371c      	adds	r7, #28
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	40012c00 	.word	0x40012c00
 800c030:	40013400 	.word	0x40013400
 800c034:	40014000 	.word	0x40014000
 800c038:	40014400 	.word	0x40014400
 800c03c:	40014800 	.word	0x40014800

0800c040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	f003 031f 	and.w	r3, r3, #31
 800c052:	2201      	movs	r2, #1
 800c054:	fa02 f303 	lsl.w	r3, r2, r3
 800c058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6a1a      	ldr	r2, [r3, #32]
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	43db      	mvns	r3, r3
 800c062:	401a      	ands	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6a1a      	ldr	r2, [r3, #32]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f003 031f 	and.w	r3, r3, #31
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	fa01 f303 	lsl.w	r3, r1, r3
 800c078:	431a      	orrs	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	621a      	str	r2, [r3, #32]
}
 800c07e:	bf00      	nop
 800c080:	371c      	adds	r7, #28
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c092:	bf00      	nop
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b083      	sub	sp, #12
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e040      	b.n	800c15a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d106      	bne.n	800c0ee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7f6 fd33 	bl	8002b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2224      	movs	r2, #36	; 0x24
 800c0f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f022 0201 	bic.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f925 	bl	800c354 <UART_SetConfig>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d101      	bne.n	800c114 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e022      	b.n	800c15a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fba3 	bl	800c868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c130:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	689a      	ldr	r2, [r3, #8]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c140:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f042 0201 	orr.w	r2, r2, #1
 800c150:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fc2a 	bl	800c9ac <UART_CheckIdleState>
 800c158:	4603      	mov	r3, r0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b08a      	sub	sp, #40	; 0x28
 800c166:	af02      	add	r7, sp, #8
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	603b      	str	r3, [r7, #0]
 800c16e:	4613      	mov	r3, r2
 800c170:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c176:	2b20      	cmp	r3, #32
 800c178:	f040 8082 	bne.w	800c280 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d002      	beq.n	800c188 <HAL_UART_Transmit+0x26>
 800c182:	88fb      	ldrh	r3, [r7, #6]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d101      	bne.n	800c18c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	e07a      	b.n	800c282 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c192:	2b01      	cmp	r3, #1
 800c194:	d101      	bne.n	800c19a <HAL_UART_Transmit+0x38>
 800c196:	2302      	movs	r3, #2
 800c198:	e073      	b.n	800c282 <HAL_UART_Transmit+0x120>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2201      	movs	r2, #1
 800c19e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2221      	movs	r2, #33	; 0x21
 800c1ae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1b0:	f7f9 fea2 	bl	8005ef8 <HAL_GetTick>
 800c1b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	88fa      	ldrh	r2, [r7, #6]
 800c1ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	88fa      	ldrh	r2, [r7, #6]
 800c1c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ce:	d108      	bne.n	800c1e2 <HAL_UART_Transmit+0x80>
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d104      	bne.n	800c1e2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	e003      	b.n	800c1ea <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c1f2:	e02d      	b.n	800c250 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2180      	movs	r1, #128	; 0x80
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 fc1d 	bl	800ca3e <UART_WaitOnFlagUntilTimeout>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d001      	beq.n	800c20e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e039      	b.n	800c282 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10b      	bne.n	800c22c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	881a      	ldrh	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c220:	b292      	uxth	r2, r2
 800c222:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	3302      	adds	r3, #2
 800c228:	61bb      	str	r3, [r7, #24]
 800c22a:	e008      	b.n	800c23e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	781a      	ldrb	r2, [r3, #0]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	b292      	uxth	r2, r2
 800c236:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	3301      	adds	r3, #1
 800c23c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c244:	b29b      	uxth	r3, r3
 800c246:	3b01      	subs	r3, #1
 800c248:	b29a      	uxth	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c256:	b29b      	uxth	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1cb      	bne.n	800c1f4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2200      	movs	r2, #0
 800c264:	2140      	movs	r1, #64	; 0x40
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 fbe9 	bl	800ca3e <UART_WaitOnFlagUntilTimeout>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	e005      	b.n	800c282 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2220      	movs	r2, #32
 800c27a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	e000      	b.n	800c282 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800c280:	2302      	movs	r3, #2
  }
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	4613      	mov	r3, r2
 800c298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	d131      	bne.n	800c306 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d002      	beq.n	800c2ae <HAL_UART_Receive_DMA+0x22>
 800c2a8:	88fb      	ldrh	r3, [r7, #6]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e02a      	b.n	800c308 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d101      	bne.n	800c2c0 <HAL_UART_Receive_DMA+0x34>
 800c2bc:	2302      	movs	r3, #2
 800c2be:	e023      	b.n	800c308 <HAL_UART_Receive_DMA+0x7c>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a0f      	ldr	r2, [pc, #60]	; (800c310 <HAL_UART_Receive_DMA+0x84>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d00e      	beq.n	800c2f6 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d007      	beq.n	800c2f6 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c2f4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800c2f6:	88fb      	ldrh	r3, [r7, #6]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 fc1b 	bl	800cb38 <UART_Start_Receive_DMA>
 800c302:	4603      	mov	r3, r0
 800c304:	e000      	b.n	800c308 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800c306:	2302      	movs	r3, #2
  }
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	40008000 	.word	0x40008000

0800c314 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c354:	b5b0      	push	{r4, r5, r7, lr}
 800c356:	b088      	sub	sp, #32
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	689a      	ldr	r2, [r3, #8]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	431a      	orrs	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	431a      	orrs	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	69db      	ldr	r3, [r3, #28]
 800c374:	4313      	orrs	r3, r2
 800c376:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	4bad      	ldr	r3, [pc, #692]	; (800c634 <UART_SetConfig+0x2e0>)
 800c380:	4013      	ands	r3, r2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	69f9      	ldr	r1, [r7, #28]
 800c388:	430b      	orrs	r3, r1
 800c38a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4aa2      	ldr	r2, [pc, #648]	; (800c638 <UART_SetConfig+0x2e4>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d004      	beq.n	800c3bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	430a      	orrs	r2, r1
 800c3ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a99      	ldr	r2, [pc, #612]	; (800c63c <UART_SetConfig+0x2e8>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d121      	bne.n	800c41e <UART_SetConfig+0xca>
 800c3da:	4b99      	ldr	r3, [pc, #612]	; (800c640 <UART_SetConfig+0x2ec>)
 800c3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d817      	bhi.n	800c418 <UART_SetConfig+0xc4>
 800c3e8:	a201      	add	r2, pc, #4	; (adr r2, 800c3f0 <UART_SetConfig+0x9c>)
 800c3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ee:	bf00      	nop
 800c3f0:	0800c401 	.word	0x0800c401
 800c3f4:	0800c40d 	.word	0x0800c40d
 800c3f8:	0800c407 	.word	0x0800c407
 800c3fc:	0800c413 	.word	0x0800c413
 800c400:	2301      	movs	r3, #1
 800c402:	76fb      	strb	r3, [r7, #27]
 800c404:	e0e7      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c406:	2302      	movs	r3, #2
 800c408:	76fb      	strb	r3, [r7, #27]
 800c40a:	e0e4      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c40c:	2304      	movs	r3, #4
 800c40e:	76fb      	strb	r3, [r7, #27]
 800c410:	e0e1      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c412:	2308      	movs	r3, #8
 800c414:	76fb      	strb	r3, [r7, #27]
 800c416:	e0de      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c418:	2310      	movs	r3, #16
 800c41a:	76fb      	strb	r3, [r7, #27]
 800c41c:	e0db      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a88      	ldr	r2, [pc, #544]	; (800c644 <UART_SetConfig+0x2f0>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d132      	bne.n	800c48e <UART_SetConfig+0x13a>
 800c428:	4b85      	ldr	r3, [pc, #532]	; (800c640 <UART_SetConfig+0x2ec>)
 800c42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c42e:	f003 030c 	and.w	r3, r3, #12
 800c432:	2b0c      	cmp	r3, #12
 800c434:	d828      	bhi.n	800c488 <UART_SetConfig+0x134>
 800c436:	a201      	add	r2, pc, #4	; (adr r2, 800c43c <UART_SetConfig+0xe8>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c471 	.word	0x0800c471
 800c440:	0800c489 	.word	0x0800c489
 800c444:	0800c489 	.word	0x0800c489
 800c448:	0800c489 	.word	0x0800c489
 800c44c:	0800c47d 	.word	0x0800c47d
 800c450:	0800c489 	.word	0x0800c489
 800c454:	0800c489 	.word	0x0800c489
 800c458:	0800c489 	.word	0x0800c489
 800c45c:	0800c477 	.word	0x0800c477
 800c460:	0800c489 	.word	0x0800c489
 800c464:	0800c489 	.word	0x0800c489
 800c468:	0800c489 	.word	0x0800c489
 800c46c:	0800c483 	.word	0x0800c483
 800c470:	2300      	movs	r3, #0
 800c472:	76fb      	strb	r3, [r7, #27]
 800c474:	e0af      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c476:	2302      	movs	r3, #2
 800c478:	76fb      	strb	r3, [r7, #27]
 800c47a:	e0ac      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c47c:	2304      	movs	r3, #4
 800c47e:	76fb      	strb	r3, [r7, #27]
 800c480:	e0a9      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c482:	2308      	movs	r3, #8
 800c484:	76fb      	strb	r3, [r7, #27]
 800c486:	e0a6      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c488:	2310      	movs	r3, #16
 800c48a:	76fb      	strb	r3, [r7, #27]
 800c48c:	e0a3      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a6d      	ldr	r2, [pc, #436]	; (800c648 <UART_SetConfig+0x2f4>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d120      	bne.n	800c4da <UART_SetConfig+0x186>
 800c498:	4b69      	ldr	r3, [pc, #420]	; (800c640 <UART_SetConfig+0x2ec>)
 800c49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c49e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c4a2:	2b30      	cmp	r3, #48	; 0x30
 800c4a4:	d013      	beq.n	800c4ce <UART_SetConfig+0x17a>
 800c4a6:	2b30      	cmp	r3, #48	; 0x30
 800c4a8:	d814      	bhi.n	800c4d4 <UART_SetConfig+0x180>
 800c4aa:	2b20      	cmp	r3, #32
 800c4ac:	d009      	beq.n	800c4c2 <UART_SetConfig+0x16e>
 800c4ae:	2b20      	cmp	r3, #32
 800c4b0:	d810      	bhi.n	800c4d4 <UART_SetConfig+0x180>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <UART_SetConfig+0x168>
 800c4b6:	2b10      	cmp	r3, #16
 800c4b8:	d006      	beq.n	800c4c8 <UART_SetConfig+0x174>
 800c4ba:	e00b      	b.n	800c4d4 <UART_SetConfig+0x180>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	76fb      	strb	r3, [r7, #27]
 800c4c0:	e089      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	76fb      	strb	r3, [r7, #27]
 800c4c6:	e086      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	76fb      	strb	r3, [r7, #27]
 800c4cc:	e083      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c4ce:	2308      	movs	r3, #8
 800c4d0:	76fb      	strb	r3, [r7, #27]
 800c4d2:	e080      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	76fb      	strb	r3, [r7, #27]
 800c4d8:	e07d      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a5b      	ldr	r2, [pc, #364]	; (800c64c <UART_SetConfig+0x2f8>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d120      	bne.n	800c526 <UART_SetConfig+0x1d2>
 800c4e4:	4b56      	ldr	r3, [pc, #344]	; (800c640 <UART_SetConfig+0x2ec>)
 800c4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c4ee:	2bc0      	cmp	r3, #192	; 0xc0
 800c4f0:	d013      	beq.n	800c51a <UART_SetConfig+0x1c6>
 800c4f2:	2bc0      	cmp	r3, #192	; 0xc0
 800c4f4:	d814      	bhi.n	800c520 <UART_SetConfig+0x1cc>
 800c4f6:	2b80      	cmp	r3, #128	; 0x80
 800c4f8:	d009      	beq.n	800c50e <UART_SetConfig+0x1ba>
 800c4fa:	2b80      	cmp	r3, #128	; 0x80
 800c4fc:	d810      	bhi.n	800c520 <UART_SetConfig+0x1cc>
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <UART_SetConfig+0x1b4>
 800c502:	2b40      	cmp	r3, #64	; 0x40
 800c504:	d006      	beq.n	800c514 <UART_SetConfig+0x1c0>
 800c506:	e00b      	b.n	800c520 <UART_SetConfig+0x1cc>
 800c508:	2300      	movs	r3, #0
 800c50a:	76fb      	strb	r3, [r7, #27]
 800c50c:	e063      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c50e:	2302      	movs	r3, #2
 800c510:	76fb      	strb	r3, [r7, #27]
 800c512:	e060      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c514:	2304      	movs	r3, #4
 800c516:	76fb      	strb	r3, [r7, #27]
 800c518:	e05d      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c51a:	2308      	movs	r3, #8
 800c51c:	76fb      	strb	r3, [r7, #27]
 800c51e:	e05a      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c520:	2310      	movs	r3, #16
 800c522:	76fb      	strb	r3, [r7, #27]
 800c524:	e057      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a49      	ldr	r2, [pc, #292]	; (800c650 <UART_SetConfig+0x2fc>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d125      	bne.n	800c57c <UART_SetConfig+0x228>
 800c530:	4b43      	ldr	r3, [pc, #268]	; (800c640 <UART_SetConfig+0x2ec>)
 800c532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c53a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c53e:	d017      	beq.n	800c570 <UART_SetConfig+0x21c>
 800c540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c544:	d817      	bhi.n	800c576 <UART_SetConfig+0x222>
 800c546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c54a:	d00b      	beq.n	800c564 <UART_SetConfig+0x210>
 800c54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c550:	d811      	bhi.n	800c576 <UART_SetConfig+0x222>
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <UART_SetConfig+0x20a>
 800c556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c55a:	d006      	beq.n	800c56a <UART_SetConfig+0x216>
 800c55c:	e00b      	b.n	800c576 <UART_SetConfig+0x222>
 800c55e:	2300      	movs	r3, #0
 800c560:	76fb      	strb	r3, [r7, #27]
 800c562:	e038      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c564:	2302      	movs	r3, #2
 800c566:	76fb      	strb	r3, [r7, #27]
 800c568:	e035      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c56a:	2304      	movs	r3, #4
 800c56c:	76fb      	strb	r3, [r7, #27]
 800c56e:	e032      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c570:	2308      	movs	r3, #8
 800c572:	76fb      	strb	r3, [r7, #27]
 800c574:	e02f      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c576:	2310      	movs	r3, #16
 800c578:	76fb      	strb	r3, [r7, #27]
 800c57a:	e02c      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a2d      	ldr	r2, [pc, #180]	; (800c638 <UART_SetConfig+0x2e4>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d125      	bne.n	800c5d2 <UART_SetConfig+0x27e>
 800c586:	4b2e      	ldr	r3, [pc, #184]	; (800c640 <UART_SetConfig+0x2ec>)
 800c588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c58c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c594:	d017      	beq.n	800c5c6 <UART_SetConfig+0x272>
 800c596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c59a:	d817      	bhi.n	800c5cc <UART_SetConfig+0x278>
 800c59c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5a0:	d00b      	beq.n	800c5ba <UART_SetConfig+0x266>
 800c5a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5a6:	d811      	bhi.n	800c5cc <UART_SetConfig+0x278>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d003      	beq.n	800c5b4 <UART_SetConfig+0x260>
 800c5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5b0:	d006      	beq.n	800c5c0 <UART_SetConfig+0x26c>
 800c5b2:	e00b      	b.n	800c5cc <UART_SetConfig+0x278>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	76fb      	strb	r3, [r7, #27]
 800c5b8:	e00d      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	76fb      	strb	r3, [r7, #27]
 800c5be:	e00a      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c5c0:	2304      	movs	r3, #4
 800c5c2:	76fb      	strb	r3, [r7, #27]
 800c5c4:	e007      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c5c6:	2308      	movs	r3, #8
 800c5c8:	76fb      	strb	r3, [r7, #27]
 800c5ca:	e004      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c5cc:	2310      	movs	r3, #16
 800c5ce:	76fb      	strb	r3, [r7, #27]
 800c5d0:	e001      	b.n	800c5d6 <UART_SetConfig+0x282>
 800c5d2:	2310      	movs	r3, #16
 800c5d4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a17      	ldr	r2, [pc, #92]	; (800c638 <UART_SetConfig+0x2e4>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	f040 8087 	bne.w	800c6f0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5e2:	7efb      	ldrb	r3, [r7, #27]
 800c5e4:	2b08      	cmp	r3, #8
 800c5e6:	d837      	bhi.n	800c658 <UART_SetConfig+0x304>
 800c5e8:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <UART_SetConfig+0x29c>)
 800c5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ee:	bf00      	nop
 800c5f0:	0800c615 	.word	0x0800c615
 800c5f4:	0800c659 	.word	0x0800c659
 800c5f8:	0800c61d 	.word	0x0800c61d
 800c5fc:	0800c659 	.word	0x0800c659
 800c600:	0800c623 	.word	0x0800c623
 800c604:	0800c659 	.word	0x0800c659
 800c608:	0800c659 	.word	0x0800c659
 800c60c:	0800c659 	.word	0x0800c659
 800c610:	0800c62b 	.word	0x0800c62b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c614:	f7fd f9ee 	bl	80099f4 <HAL_RCC_GetPCLK1Freq>
 800c618:	6178      	str	r0, [r7, #20]
        break;
 800c61a:	e022      	b.n	800c662 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c61c:	4b0d      	ldr	r3, [pc, #52]	; (800c654 <UART_SetConfig+0x300>)
 800c61e:	617b      	str	r3, [r7, #20]
        break;
 800c620:	e01f      	b.n	800c662 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c622:	f7fd f94f 	bl	80098c4 <HAL_RCC_GetSysClockFreq>
 800c626:	6178      	str	r0, [r7, #20]
        break;
 800c628:	e01b      	b.n	800c662 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c62a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c62e:	617b      	str	r3, [r7, #20]
        break;
 800c630:	e017      	b.n	800c662 <UART_SetConfig+0x30e>
 800c632:	bf00      	nop
 800c634:	efff69f3 	.word	0xefff69f3
 800c638:	40008000 	.word	0x40008000
 800c63c:	40013800 	.word	0x40013800
 800c640:	40021000 	.word	0x40021000
 800c644:	40004400 	.word	0x40004400
 800c648:	40004800 	.word	0x40004800
 800c64c:	40004c00 	.word	0x40004c00
 800c650:	40005000 	.word	0x40005000
 800c654:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c658:	2300      	movs	r3, #0
 800c65a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	76bb      	strb	r3, [r7, #26]
        break;
 800c660:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80f1 	beq.w	800c84c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	4413      	add	r3, r2
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	429a      	cmp	r2, r3
 800c678:	d305      	bcc.n	800c686 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	429a      	cmp	r2, r3
 800c684:	d902      	bls.n	800c68c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	76bb      	strb	r3, [r7, #26]
 800c68a:	e0df      	b.n	800c84c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	4618      	mov	r0, r3
 800c690:	f04f 0100 	mov.w	r1, #0
 800c694:	f04f 0200 	mov.w	r2, #0
 800c698:	f04f 0300 	mov.w	r3, #0
 800c69c:	020b      	lsls	r3, r1, #8
 800c69e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6a2:	0202      	lsls	r2, r0, #8
 800c6a4:	6879      	ldr	r1, [r7, #4]
 800c6a6:	6849      	ldr	r1, [r1, #4]
 800c6a8:	0849      	lsrs	r1, r1, #1
 800c6aa:	4608      	mov	r0, r1
 800c6ac:	f04f 0100 	mov.w	r1, #0
 800c6b0:	1814      	adds	r4, r2, r0
 800c6b2:	eb43 0501 	adc.w	r5, r3, r1
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f04f 0300 	mov.w	r3, #0
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	f7f3 fdd4 	bl	8000270 <__aeabi_uldivmod>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6d6:	d308      	bcc.n	800c6ea <UART_SetConfig+0x396>
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6de:	d204      	bcs.n	800c6ea <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	693a      	ldr	r2, [r7, #16]
 800c6e6:	60da      	str	r2, [r3, #12]
 800c6e8:	e0b0      	b.n	800c84c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	76bb      	strb	r3, [r7, #26]
 800c6ee:	e0ad      	b.n	800c84c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6f8:	d15c      	bne.n	800c7b4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800c6fa:	7efb      	ldrb	r3, [r7, #27]
 800c6fc:	2b08      	cmp	r3, #8
 800c6fe:	d828      	bhi.n	800c752 <UART_SetConfig+0x3fe>
 800c700:	a201      	add	r2, pc, #4	; (adr r2, 800c708 <UART_SetConfig+0x3b4>)
 800c702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c706:	bf00      	nop
 800c708:	0800c72d 	.word	0x0800c72d
 800c70c:	0800c735 	.word	0x0800c735
 800c710:	0800c73d 	.word	0x0800c73d
 800c714:	0800c753 	.word	0x0800c753
 800c718:	0800c743 	.word	0x0800c743
 800c71c:	0800c753 	.word	0x0800c753
 800c720:	0800c753 	.word	0x0800c753
 800c724:	0800c753 	.word	0x0800c753
 800c728:	0800c74b 	.word	0x0800c74b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c72c:	f7fd f962 	bl	80099f4 <HAL_RCC_GetPCLK1Freq>
 800c730:	6178      	str	r0, [r7, #20]
        break;
 800c732:	e013      	b.n	800c75c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c734:	f7fd f974 	bl	8009a20 <HAL_RCC_GetPCLK2Freq>
 800c738:	6178      	str	r0, [r7, #20]
        break;
 800c73a:	e00f      	b.n	800c75c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c73c:	4b49      	ldr	r3, [pc, #292]	; (800c864 <UART_SetConfig+0x510>)
 800c73e:	617b      	str	r3, [r7, #20]
        break;
 800c740:	e00c      	b.n	800c75c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c742:	f7fd f8bf 	bl	80098c4 <HAL_RCC_GetSysClockFreq>
 800c746:	6178      	str	r0, [r7, #20]
        break;
 800c748:	e008      	b.n	800c75c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c74a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c74e:	617b      	str	r3, [r7, #20]
        break;
 800c750:	e004      	b.n	800c75c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	76bb      	strb	r3, [r7, #26]
        break;
 800c75a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d074      	beq.n	800c84c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	005a      	lsls	r2, r3, #1
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	085b      	lsrs	r3, r3, #1
 800c76c:	441a      	add	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	fbb2 f3f3 	udiv	r3, r2, r3
 800c776:	b29b      	uxth	r3, r3
 800c778:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b0f      	cmp	r3, #15
 800c77e:	d916      	bls.n	800c7ae <UART_SetConfig+0x45a>
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c786:	d212      	bcs.n	800c7ae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	f023 030f 	bic.w	r3, r3, #15
 800c790:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	085b      	lsrs	r3, r3, #1
 800c796:	b29b      	uxth	r3, r3
 800c798:	f003 0307 	and.w	r3, r3, #7
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	89fb      	ldrh	r3, [r7, #14]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	89fa      	ldrh	r2, [r7, #14]
 800c7aa:	60da      	str	r2, [r3, #12]
 800c7ac:	e04e      	b.n	800c84c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	76bb      	strb	r3, [r7, #26]
 800c7b2:	e04b      	b.n	800c84c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7b4:	7efb      	ldrb	r3, [r7, #27]
 800c7b6:	2b08      	cmp	r3, #8
 800c7b8:	d827      	bhi.n	800c80a <UART_SetConfig+0x4b6>
 800c7ba:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <UART_SetConfig+0x46c>)
 800c7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c0:	0800c7e5 	.word	0x0800c7e5
 800c7c4:	0800c7ed 	.word	0x0800c7ed
 800c7c8:	0800c7f5 	.word	0x0800c7f5
 800c7cc:	0800c80b 	.word	0x0800c80b
 800c7d0:	0800c7fb 	.word	0x0800c7fb
 800c7d4:	0800c80b 	.word	0x0800c80b
 800c7d8:	0800c80b 	.word	0x0800c80b
 800c7dc:	0800c80b 	.word	0x0800c80b
 800c7e0:	0800c803 	.word	0x0800c803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7e4:	f7fd f906 	bl	80099f4 <HAL_RCC_GetPCLK1Freq>
 800c7e8:	6178      	str	r0, [r7, #20]
        break;
 800c7ea:	e013      	b.n	800c814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7ec:	f7fd f918 	bl	8009a20 <HAL_RCC_GetPCLK2Freq>
 800c7f0:	6178      	str	r0, [r7, #20]
        break;
 800c7f2:	e00f      	b.n	800c814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7f4:	4b1b      	ldr	r3, [pc, #108]	; (800c864 <UART_SetConfig+0x510>)
 800c7f6:	617b      	str	r3, [r7, #20]
        break;
 800c7f8:	e00c      	b.n	800c814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7fa:	f7fd f863 	bl	80098c4 <HAL_RCC_GetSysClockFreq>
 800c7fe:	6178      	str	r0, [r7, #20]
        break;
 800c800:	e008      	b.n	800c814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c806:	617b      	str	r3, [r7, #20]
        break;
 800c808:	e004      	b.n	800c814 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	76bb      	strb	r3, [r7, #26]
        break;
 800c812:	bf00      	nop
    }

    if (pclk != 0U)
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d018      	beq.n	800c84c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	085a      	lsrs	r2, r3, #1
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	441a      	add	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	fbb2 f3f3 	udiv	r3, r2, r3
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	2b0f      	cmp	r3, #15
 800c834:	d908      	bls.n	800c848 <UART_SetConfig+0x4f4>
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c83c:	d204      	bcs.n	800c848 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	60da      	str	r2, [r3, #12]
 800c846:	e001      	b.n	800c84c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c858:	7ebb      	ldrb	r3, [r7, #26]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3720      	adds	r7, #32
 800c85e:	46bd      	mov	sp, r7
 800c860:	bdb0      	pop	{r4, r5, r7, pc}
 800c862:	bf00      	nop
 800c864:	00f42400 	.word	0x00f42400

0800c868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00a      	beq.n	800c892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00a      	beq.n	800c8d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	f003 0308 	and.w	r3, r3, #8
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fc:	f003 0310 	and.w	r3, r3, #16
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00a      	beq.n	800c91a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	430a      	orrs	r2, r1
 800c918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	f003 0320 	and.w	r3, r3, #32
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00a      	beq.n	800c93c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	430a      	orrs	r2, r1
 800c93a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c944:	2b00      	cmp	r3, #0
 800c946:	d01a      	beq.n	800c97e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	430a      	orrs	r2, r1
 800c95c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c966:	d10a      	bne.n	800c97e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	430a      	orrs	r2, r1
 800c97c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00a      	beq.n	800c9a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	430a      	orrs	r2, r1
 800c99e:	605a      	str	r2, [r3, #4]
  }
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af02      	add	r7, sp, #8
 800c9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9bc:	f7f9 fa9c 	bl	8005ef8 <HAL_GetTick>
 800c9c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 0308 	and.w	r3, r3, #8
 800c9cc:	2b08      	cmp	r3, #8
 800c9ce:	d10e      	bne.n	800c9ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f82d 	bl	800ca3e <UART_WaitOnFlagUntilTimeout>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e023      	b.n	800ca36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 0304 	and.w	r3, r3, #4
 800c9f8:	2b04      	cmp	r3, #4
 800c9fa:	d10e      	bne.n	800ca1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f817 	bl	800ca3e <UART_WaitOnFlagUntilTimeout>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e00d      	b.n	800ca36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2220      	movs	r2, #32
 800ca1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2220      	movs	r2, #32
 800ca24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	60f8      	str	r0, [r7, #12]
 800ca46:	60b9      	str	r1, [r7, #8]
 800ca48:	603b      	str	r3, [r7, #0]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca4e:	e05e      	b.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca56:	d05a      	beq.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca58:	f7f9 fa4e 	bl	8005ef8 <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d302      	bcc.n	800ca6e <UART_WaitOnFlagUntilTimeout+0x30>
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d11b      	bne.n	800caa6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ca7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	689a      	ldr	r2, [r3, #8]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f022 0201 	bic.w	r2, r2, #1
 800ca8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2220      	movs	r2, #32
 800ca92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2220      	movs	r2, #32
 800ca98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e043      	b.n	800cb2e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0304 	and.w	r3, r3, #4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d02c      	beq.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cabe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cac2:	d124      	bne.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cacc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cadc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	689a      	ldr	r2, [r3, #8]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f022 0201 	bic.w	r2, r2, #1
 800caec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2220      	movs	r2, #32
 800caf2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2220      	movs	r2, #32
 800caf8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2220      	movs	r2, #32
 800cafe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e00f      	b.n	800cb2e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69da      	ldr	r2, [r3, #28]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4013      	ands	r3, r2
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	bf0c      	ite	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	2300      	movne	r3, #0
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	461a      	mov	r2, r3
 800cb26:	79fb      	ldrb	r3, [r7, #7]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d091      	beq.n	800ca50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
	...

0800cb38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	4613      	mov	r3, r2
 800cb44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	88fa      	ldrh	r2, [r7, #6]
 800cb50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2222      	movs	r2, #34	; 0x22
 800cb60:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d02b      	beq.n	800cbc2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb6e:	4a25      	ldr	r2, [pc, #148]	; (800cc04 <UART_Start_Receive_DMA+0xcc>)
 800cb70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb76:	4a24      	ldr	r2, [pc, #144]	; (800cc08 <UART_Start_Receive_DMA+0xd0>)
 800cb78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb7e:	4a23      	ldr	r2, [pc, #140]	; (800cc0c <UART_Start_Receive_DMA+0xd4>)
 800cb80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb86:	2200      	movs	r2, #0
 800cb88:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3324      	adds	r3, #36	; 0x24
 800cb94:	4619      	mov	r1, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	88fb      	ldrh	r3, [r7, #6]
 800cb9e:	f7f9 fbc9 	bl	8006334 <HAL_DMA_Start_IT>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00c      	beq.n	800cbc2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2210      	movs	r2, #16
 800cbac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2220      	movs	r2, #32
 800cbbc:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e01c      	b.n	800cbfc <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbd8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	689a      	ldr	r2, [r3, #8]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f042 0201 	orr.w	r2, r2, #1
 800cbe8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbf8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	0800cc99 	.word	0x0800cc99
 800cc08:	0800cd31 	.word	0x0800cd31
 800cc0c:	0800cd69 	.word	0x0800cd69

0800cc10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cc26:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2220      	movs	r2, #32
 800cc2c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800cc2e:	bf00      	nop
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cc50:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	689a      	ldr	r2, [r3, #8]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f022 0201 	bic.w	r2, r2, #1
 800cc60:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d107      	bne.n	800cc7a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f022 0210 	bic.w	r2, r2, #16
 800cc78:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f003 0320 	and.w	r3, r3, #32
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d12a      	bne.n	800cd0a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ccca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	689a      	ldr	r2, [r3, #8]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f022 0201 	bic.w	r2, r2, #1
 800ccda:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	689a      	ldr	r2, [r3, #8]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccea:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d107      	bne.n	800cd0a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f022 0210 	bic.w	r2, r2, #16
 800cd08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d107      	bne.n	800cd22 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cd18:	4619      	mov	r1, r3
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f7ff fb0e 	bl	800c33c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd20:	e002      	b.n	800cd28 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7f9 f864 	bl	8005df0 <HAL_UART_RxCpltCallback>
}
 800cd28:	bf00      	nop
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d109      	bne.n	800cd5a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cd4c:	085b      	lsrs	r3, r3, #1
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	4619      	mov	r1, r3
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7ff faf2 	bl	800c33c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd58:	e002      	b.n	800cd60 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f7ff fada 	bl	800c314 <HAL_UART_RxHalfCpltCallback>
}
 800cd60:	bf00      	nop
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd74:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8c:	2b80      	cmp	r3, #128	; 0x80
 800cd8e:	d109      	bne.n	800cda4 <UART_DMAError+0x3c>
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	2b21      	cmp	r3, #33	; 0x21
 800cd94:	d106      	bne.n	800cda4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800cd9e:	6978      	ldr	r0, [r7, #20]
 800cda0:	f7ff ff36 	bl	800cc10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdae:	2b40      	cmp	r3, #64	; 0x40
 800cdb0:	d109      	bne.n	800cdc6 <UART_DMAError+0x5e>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b22      	cmp	r3, #34	; 0x22
 800cdb6:	d106      	bne.n	800cdc6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800cdc0:	6978      	ldr	r0, [r7, #20]
 800cdc2:	f7ff ff3a 	bl	800cc3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdcc:	f043 0210 	orr.w	r2, r3, #16
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdd6:	6978      	ldr	r0, [r7, #20]
 800cdd8:	f7ff faa6 	bl	800c328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cddc:	bf00      	nop
 800cdde:	3718      	adds	r7, #24
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cdf2:	79fb      	ldrb	r3, [r7, #7]
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d165      	bne.n	800cec4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	4a3e      	ldr	r2, [pc, #248]	; (800cef4 <USB_SetTurnaroundTime+0x110>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d906      	bls.n	800ce0e <USB_SetTurnaroundTime+0x2a>
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	4a3d      	ldr	r2, [pc, #244]	; (800cef8 <USB_SetTurnaroundTime+0x114>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d202      	bcs.n	800ce0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ce08:	230f      	movs	r3, #15
 800ce0a:	617b      	str	r3, [r7, #20]
 800ce0c:	e05c      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	4a39      	ldr	r2, [pc, #228]	; (800cef8 <USB_SetTurnaroundTime+0x114>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d306      	bcc.n	800ce24 <USB_SetTurnaroundTime+0x40>
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	4a38      	ldr	r2, [pc, #224]	; (800cefc <USB_SetTurnaroundTime+0x118>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d202      	bcs.n	800ce24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ce1e:	230e      	movs	r3, #14
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	e051      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	4a35      	ldr	r2, [pc, #212]	; (800cefc <USB_SetTurnaroundTime+0x118>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d306      	bcc.n	800ce3a <USB_SetTurnaroundTime+0x56>
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	4a34      	ldr	r2, [pc, #208]	; (800cf00 <USB_SetTurnaroundTime+0x11c>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d202      	bcs.n	800ce3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ce34:	230d      	movs	r3, #13
 800ce36:	617b      	str	r3, [r7, #20]
 800ce38:	e046      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	4a30      	ldr	r2, [pc, #192]	; (800cf00 <USB_SetTurnaroundTime+0x11c>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d306      	bcc.n	800ce50 <USB_SetTurnaroundTime+0x6c>
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	4a2f      	ldr	r2, [pc, #188]	; (800cf04 <USB_SetTurnaroundTime+0x120>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d802      	bhi.n	800ce50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ce4a:	230c      	movs	r3, #12
 800ce4c:	617b      	str	r3, [r7, #20]
 800ce4e:	e03b      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	4a2c      	ldr	r2, [pc, #176]	; (800cf04 <USB_SetTurnaroundTime+0x120>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d906      	bls.n	800ce66 <USB_SetTurnaroundTime+0x82>
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	4a2b      	ldr	r2, [pc, #172]	; (800cf08 <USB_SetTurnaroundTime+0x124>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d802      	bhi.n	800ce66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ce60:	230b      	movs	r3, #11
 800ce62:	617b      	str	r3, [r7, #20]
 800ce64:	e030      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	4a27      	ldr	r2, [pc, #156]	; (800cf08 <USB_SetTurnaroundTime+0x124>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d906      	bls.n	800ce7c <USB_SetTurnaroundTime+0x98>
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	4a26      	ldr	r2, [pc, #152]	; (800cf0c <USB_SetTurnaroundTime+0x128>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d802      	bhi.n	800ce7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ce76:	230a      	movs	r3, #10
 800ce78:	617b      	str	r3, [r7, #20]
 800ce7a:	e025      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	4a23      	ldr	r2, [pc, #140]	; (800cf0c <USB_SetTurnaroundTime+0x128>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d906      	bls.n	800ce92 <USB_SetTurnaroundTime+0xae>
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	4a22      	ldr	r2, [pc, #136]	; (800cf10 <USB_SetTurnaroundTime+0x12c>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d202      	bcs.n	800ce92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ce8c:	2309      	movs	r3, #9
 800ce8e:	617b      	str	r3, [r7, #20]
 800ce90:	e01a      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	4a1e      	ldr	r2, [pc, #120]	; (800cf10 <USB_SetTurnaroundTime+0x12c>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d306      	bcc.n	800cea8 <USB_SetTurnaroundTime+0xc4>
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	4a1d      	ldr	r2, [pc, #116]	; (800cf14 <USB_SetTurnaroundTime+0x130>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d802      	bhi.n	800cea8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cea2:	2308      	movs	r3, #8
 800cea4:	617b      	str	r3, [r7, #20]
 800cea6:	e00f      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	4a1a      	ldr	r2, [pc, #104]	; (800cf14 <USB_SetTurnaroundTime+0x130>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d906      	bls.n	800cebe <USB_SetTurnaroundTime+0xda>
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	4a19      	ldr	r2, [pc, #100]	; (800cf18 <USB_SetTurnaroundTime+0x134>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d202      	bcs.n	800cebe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ceb8:	2307      	movs	r3, #7
 800ceba:	617b      	str	r3, [r7, #20]
 800cebc:	e004      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cebe:	2306      	movs	r3, #6
 800cec0:	617b      	str	r3, [r7, #20]
 800cec2:	e001      	b.n	800cec8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cec4:	2309      	movs	r3, #9
 800cec6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	68da      	ldr	r2, [r3, #12]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	029b      	lsls	r3, r3, #10
 800cedc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cee0:	431a      	orrs	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	371c      	adds	r7, #28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	00d8acbf 	.word	0x00d8acbf
 800cef8:	00e4e1c0 	.word	0x00e4e1c0
 800cefc:	00f42400 	.word	0x00f42400
 800cf00:	01067380 	.word	0x01067380
 800cf04:	011a499f 	.word	0x011a499f
 800cf08:	01312cff 	.word	0x01312cff
 800cf0c:	014ca43f 	.word	0x014ca43f
 800cf10:	016e3600 	.word	0x016e3600
 800cf14:	01a6ab1f 	.word	0x01a6ab1f
 800cf18:	01e84800 	.word	0x01e84800

0800cf1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cf26:	2300      	movs	r3, #0
 800cf28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	019b      	lsls	r3, r3, #6
 800cf2e:	f043 0220 	orr.w	r2, r3, #32
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	4a09      	ldr	r2, [pc, #36]	; (800cf64 <USB_FlushTxFifo+0x48>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d901      	bls.n	800cf48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e006      	b.n	800cf56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	f003 0320 	and.w	r3, r3, #32
 800cf50:	2b20      	cmp	r3, #32
 800cf52:	d0f0      	beq.n	800cf36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	00030d40 	.word	0x00030d40

0800cf68 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b087      	sub	sp, #28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	f003 0306 	and.w	r3, r3, #6
 800cf80:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	d002      	beq.n	800cf8e <USB_GetDevSpeed+0x26>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b06      	cmp	r3, #6
 800cf8c:	d102      	bne.n	800cf94 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cf8e:	2302      	movs	r3, #2
 800cf90:	75fb      	strb	r3, [r7, #23]
 800cf92:	e001      	b.n	800cf98 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800cf94:	230f      	movs	r3, #15
 800cf96:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	371c      	adds	r7, #28
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b085      	sub	sp, #20
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	785b      	ldrb	r3, [r3, #1]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d13a      	bne.n	800d038 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfc8:	69da      	ldr	r2, [r3, #28]
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	f003 030f 	and.w	r3, r3, #15
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	fa01 f303 	lsl.w	r3, r1, r3
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	68f9      	ldr	r1, [r7, #12]
 800cfdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	015a      	lsls	r2, r3, #5
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d155      	bne.n	800d0a6 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	015a      	lsls	r2, r3, #5
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	4413      	add	r3, r2
 800d002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	78db      	ldrb	r3, [r3, #3]
 800d014:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d016:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	059b      	lsls	r3, r3, #22
 800d01c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d01e:	4313      	orrs	r3, r2
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	0151      	lsls	r1, r2, #5
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	440a      	add	r2, r1
 800d028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d02c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	e036      	b.n	800d0a6 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d03e:	69da      	ldr	r2, [r3, #28]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	f003 030f 	and.w	r3, r3, #15
 800d048:	2101      	movs	r1, #1
 800d04a:	fa01 f303 	lsl.w	r3, r1, r3
 800d04e:	041b      	lsls	r3, r3, #16
 800d050:	68f9      	ldr	r1, [r7, #12]
 800d052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d056:	4313      	orrs	r3, r2
 800d058:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	015a      	lsls	r2, r3, #5
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	4413      	add	r3, r2
 800d062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d11a      	bne.n	800d0a6 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	015a      	lsls	r2, r3, #5
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	4413      	add	r3, r2
 800d078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	78db      	ldrb	r3, [r3, #3]
 800d08a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d08c:	430b      	orrs	r3, r1
 800d08e:	4313      	orrs	r3, r2
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	0151      	lsls	r1, r2, #5
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	440a      	add	r2, r1
 800d098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d09c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0a4:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	785b      	ldrb	r3, [r3, #1]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	f040 810a 	bne.w	800d2e6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d132      	bne.n	800d140 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	0151      	lsls	r1, r2, #5
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	440a      	add	r2, r1
 800d0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d0f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d0fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	015a      	lsls	r2, r3, #5
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	4413      	add	r3, r2
 800d106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	693a      	ldr	r2, [r7, #16]
 800d10e:	0151      	lsls	r1, r2, #5
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	440a      	add	r2, r1
 800d114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d11c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d138:	0cdb      	lsrs	r3, r3, #19
 800d13a:	04db      	lsls	r3, r3, #19
 800d13c:	6113      	str	r3, [r2, #16]
 800d13e:	e074      	b.n	800d22a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	015a      	lsls	r2, r3, #5
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	4413      	add	r3, r2
 800d148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	0151      	lsls	r1, r2, #5
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	440a      	add	r2, r1
 800d156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15a:	0cdb      	lsrs	r3, r3, #19
 800d15c:	04db      	lsls	r3, r3, #19
 800d15e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	4413      	add	r3, r2
 800d168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	0151      	lsls	r1, r2, #5
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	440a      	add	r2, r1
 800d176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d17e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d190:	691a      	ldr	r2, [r3, #16]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	6959      	ldr	r1, [r3, #20]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	440b      	add	r3, r1
 800d19c:	1e59      	subs	r1, r3, #1
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800d1a6:	04d9      	lsls	r1, r3, #19
 800d1a8:	4baf      	ldr	r3, [pc, #700]	; (800d468 <USB_EPStartXfer+0x3b4>)
 800d1aa:	400b      	ands	r3, r1
 800d1ac:	6939      	ldr	r1, [r7, #16]
 800d1ae:	0148      	lsls	r0, r1, #5
 800d1b0:	6979      	ldr	r1, [r7, #20]
 800d1b2:	4401      	add	r1, r0
 800d1b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	015a      	lsls	r2, r3, #5
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c8:	691a      	ldr	r2, [r3, #16]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	695b      	ldr	r3, [r3, #20]
 800d1ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1d2:	6939      	ldr	r1, [r7, #16]
 800d1d4:	0148      	lsls	r0, r1, #5
 800d1d6:	6979      	ldr	r1, [r7, #20]
 800d1d8:	4401      	add	r1, r0
 800d1da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	78db      	ldrb	r3, [r3, #3]
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d11f      	bne.n	800d22a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	693a      	ldr	r2, [r7, #16]
 800d1fa:	0151      	lsls	r1, r2, #5
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	440a      	add	r2, r1
 800d200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d204:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d208:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	015a      	lsls	r2, r3, #5
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	4413      	add	r3, r2
 800d212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	0151      	lsls	r1, r2, #5
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	440a      	add	r2, r1
 800d220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d228:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	015a      	lsls	r2, r3, #5
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	4413      	add	r3, r2
 800d232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	0151      	lsls	r1, r2, #5
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	440a      	add	r2, r1
 800d240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d248:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	78db      	ldrb	r3, [r3, #3]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d015      	beq.n	800d27e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 8100 	beq.w	800d45c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	f003 030f 	and.w	r3, r3, #15
 800d26c:	2101      	movs	r1, #1
 800d26e:	fa01 f303 	lsl.w	r3, r1, r3
 800d272:	6979      	ldr	r1, [r7, #20]
 800d274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d278:	4313      	orrs	r3, r2
 800d27a:	634b      	str	r3, [r1, #52]	; 0x34
 800d27c:	e0ee      	b.n	800d45c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d110      	bne.n	800d2b0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	4413      	add	r3, r2
 800d296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	0151      	lsls	r1, r2, #5
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	440a      	add	r2, r1
 800d2a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	e00f      	b.n	800d2d0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	0151      	lsls	r1, r2, #5
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	440a      	add	r2, r1
 800d2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2ce:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	68d9      	ldr	r1, [r3, #12]
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	781a      	ldrb	r2, [r3, #0]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	695b      	ldr	r3, [r3, #20]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f9e2 	bl	800d6a8 <USB_WritePacket>
 800d2e4:	e0ba      	b.n	800d45c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	015a      	lsls	r2, r3, #5
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	693a      	ldr	r2, [r7, #16]
 800d2f6:	0151      	lsls	r1, r2, #5
 800d2f8:	697a      	ldr	r2, [r7, #20]
 800d2fa:	440a      	add	r2, r1
 800d2fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d300:	0cdb      	lsrs	r3, r3, #19
 800d302:	04db      	lsls	r3, r3, #19
 800d304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	015a      	lsls	r2, r3, #5
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	4413      	add	r3, r2
 800d30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d312:	691b      	ldr	r3, [r3, #16]
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	0151      	lsls	r1, r2, #5
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	440a      	add	r2, r1
 800d31c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d320:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d324:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d328:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d123      	bne.n	800d37a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	015a      	lsls	r2, r3, #5
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	4413      	add	r3, r2
 800d33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d33e:	691a      	ldr	r2, [r3, #16]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d348:	6939      	ldr	r1, [r7, #16]
 800d34a:	0148      	lsls	r0, r1, #5
 800d34c:	6979      	ldr	r1, [r7, #20]
 800d34e:	4401      	add	r1, r0
 800d350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d354:	4313      	orrs	r3, r2
 800d356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	0151      	lsls	r1, r2, #5
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	440a      	add	r2, r1
 800d36e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d376:	6113      	str	r3, [r2, #16]
 800d378:	e033      	b.n	800d3e2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	695a      	ldr	r2, [r3, #20]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	4413      	add	r3, r2
 800d384:	1e5a      	subs	r2, r3, #1
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d38e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	015a      	lsls	r2, r3, #5
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	4413      	add	r3, r2
 800d398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	89fb      	ldrh	r3, [r7, #14]
 800d3a0:	04d9      	lsls	r1, r3, #19
 800d3a2:	4b31      	ldr	r3, [pc, #196]	; (800d468 <USB_EPStartXfer+0x3b4>)
 800d3a4:	400b      	ands	r3, r1
 800d3a6:	6939      	ldr	r1, [r7, #16]
 800d3a8:	0148      	lsls	r0, r1, #5
 800d3aa:	6979      	ldr	r1, [r7, #20]
 800d3ac:	4401      	add	r1, r0
 800d3ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	015a      	lsls	r2, r3, #5
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	4413      	add	r3, r2
 800d3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c2:	691a      	ldr	r2, [r3, #16]
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	89f9      	ldrh	r1, [r7, #14]
 800d3ca:	fb01 f303 	mul.w	r3, r1, r3
 800d3ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3d2:	6939      	ldr	r1, [r7, #16]
 800d3d4:	0148      	lsls	r0, r1, #5
 800d3d6:	6979      	ldr	r1, [r7, #20]
 800d3d8:	4401      	add	r1, r0
 800d3da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	78db      	ldrb	r3, [r3, #3]
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d128      	bne.n	800d43c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d110      	bne.n	800d41c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	4413      	add	r3, r2
 800d402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	0151      	lsls	r1, r2, #5
 800d40c:	697a      	ldr	r2, [r7, #20]
 800d40e:	440a      	add	r2, r1
 800d410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d418:	6013      	str	r3, [r2, #0]
 800d41a:	e00f      	b.n	800d43c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	015a      	lsls	r2, r3, #5
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	4413      	add	r3, r2
 800d424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	0151      	lsls	r1, r2, #5
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	440a      	add	r2, r1
 800d432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d43a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	4413      	add	r3, r2
 800d444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	693a      	ldr	r2, [r7, #16]
 800d44c:	0151      	lsls	r1, r2, #5
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	440a      	add	r2, r1
 800d452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d45a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	1ff80000 	.word	0x1ff80000

0800d46c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	785b      	ldrb	r3, [r3, #1]
 800d484:	2b01      	cmp	r3, #1
 800d486:	f040 80ab 	bne.w	800d5e0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d132      	bne.n	800d4f8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	015a      	lsls	r2, r3, #5
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4413      	add	r3, r2
 800d49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	0151      	lsls	r1, r2, #5
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	440a      	add	r2, r1
 800d4a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d4b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d4b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	015a      	lsls	r2, r3, #5
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	4413      	add	r3, r2
 800d4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	0151      	lsls	r1, r2, #5
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	440a      	add	r2, r1
 800d4cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	015a      	lsls	r2, r3, #5
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	4413      	add	r3, r2
 800d4de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	0151      	lsls	r1, r2, #5
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	440a      	add	r2, r1
 800d4ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f0:	0cdb      	lsrs	r3, r3, #19
 800d4f2:	04db      	lsls	r3, r3, #19
 800d4f4:	6113      	str	r3, [r2, #16]
 800d4f6:	e04e      	b.n	800d596 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	015a      	lsls	r2, r3, #5
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	0151      	lsls	r1, r2, #5
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	440a      	add	r2, r1
 800d50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d512:	0cdb      	lsrs	r3, r3, #19
 800d514:	04db      	lsls	r3, r3, #19
 800d516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	68ba      	ldr	r2, [r7, #8]
 800d528:	0151      	lsls	r1, r2, #5
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	440a      	add	r2, r1
 800d52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d532:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d536:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d53a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	695a      	ldr	r2, [r3, #20]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	429a      	cmp	r2, r3
 800d546:	d903      	bls.n	800d550 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	015a      	lsls	r2, r3, #5
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	4413      	add	r3, r2
 800d558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	0151      	lsls	r1, r2, #5
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	440a      	add	r2, r1
 800d566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d56a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d56e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	015a      	lsls	r2, r3, #5
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	4413      	add	r3, r2
 800d578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d57c:	691a      	ldr	r2, [r3, #16]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d586:	68b9      	ldr	r1, [r7, #8]
 800d588:	0148      	lsls	r0, r1, #5
 800d58a:	68f9      	ldr	r1, [r7, #12]
 800d58c:	4401      	add	r1, r0
 800d58e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d592:	4313      	orrs	r3, r2
 800d594:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	0151      	lsls	r1, r2, #5
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d5b4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	695b      	ldr	r3, [r3, #20]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d06d      	beq.n	800d69a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	f003 030f 	and.w	r3, r3, #15
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d4:	68f9      	ldr	r1, [r7, #12]
 800d5d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	634b      	str	r3, [r1, #52]	; 0x34
 800d5de:	e05c      	b.n	800d69a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	0151      	lsls	r1, r2, #5
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	440a      	add	r2, r1
 800d5f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5fa:	0cdb      	lsrs	r3, r3, #19
 800d5fc:	04db      	lsls	r3, r3, #19
 800d5fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	015a      	lsls	r2, r3, #5
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	4413      	add	r3, r2
 800d608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d60c:	691b      	ldr	r3, [r3, #16]
 800d60e:	68ba      	ldr	r2, [r7, #8]
 800d610:	0151      	lsls	r1, r2, #5
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	440a      	add	r2, r1
 800d616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d61a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d61e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d622:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	689a      	ldr	r2, [r3, #8]
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	015a      	lsls	r2, r3, #5
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	4413      	add	r3, r2
 800d63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	0151      	lsls	r1, r2, #5
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	440a      	add	r2, r1
 800d64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d64e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	015a      	lsls	r2, r3, #5
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	4413      	add	r3, r2
 800d65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d660:	691a      	ldr	r2, [r3, #16]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d66a:	68b9      	ldr	r1, [r7, #8]
 800d66c:	0148      	lsls	r0, r1, #5
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	4401      	add	r1, r0
 800d672:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d676:	4313      	orrs	r3, r2
 800d678:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	015a      	lsls	r2, r3, #5
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	4413      	add	r3, r2
 800d682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	0151      	lsls	r1, r2, #5
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	440a      	add	r2, r1
 800d690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d694:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d698:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b089      	sub	sp, #36	; 0x24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	71fb      	strb	r3, [r7, #7]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d6c6:	88bb      	ldrh	r3, [r7, #4]
 800d6c8:	3303      	adds	r3, #3
 800d6ca:	089b      	lsrs	r3, r3, #2
 800d6cc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	61bb      	str	r3, [r7, #24]
 800d6d2:	e00f      	b.n	800d6f4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	031a      	lsls	r2, r3, #12
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	4413      	add	r3, r2
 800d6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d6ee:	69bb      	ldr	r3, [r7, #24]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	61bb      	str	r3, [r7, #24]
 800d6f4:	69ba      	ldr	r2, [r7, #24]
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d3eb      	bcc.n	800d6d4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3724      	adds	r7, #36	; 0x24
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d70a:	b480      	push	{r7}
 800d70c:	b089      	sub	sp, #36	; 0x24
 800d70e:	af00      	add	r7, sp, #0
 800d710:	60f8      	str	r0, [r7, #12]
 800d712:	60b9      	str	r1, [r7, #8]
 800d714:	4613      	mov	r3, r2
 800d716:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d720:	88fb      	ldrh	r3, [r7, #6]
 800d722:	3303      	adds	r3, #3
 800d724:	089b      	lsrs	r3, r3, #2
 800d726:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d728:	2300      	movs	r3, #0
 800d72a:	61bb      	str	r3, [r7, #24]
 800d72c:	e00b      	b.n	800d746 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	601a      	str	r2, [r3, #0]
    pDest++;
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	3304      	adds	r3, #4
 800d73e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	3301      	adds	r3, #1
 800d744:	61bb      	str	r3, [r7, #24]
 800d746:	69ba      	ldr	r2, [r7, #24]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d3ef      	bcc.n	800d72e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d74e:	69fb      	ldr	r3, [r7, #28]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3724      	adds	r7, #36	; 0x24
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	785b      	ldrb	r3, [r3, #1]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d12c      	bne.n	800d7d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	015a      	lsls	r2, r3, #5
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4413      	add	r3, r2
 800d780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	db12      	blt.n	800d7b0 <USB_EPSetStall+0x54>
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00f      	beq.n	800d7b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	4413      	add	r3, r2
 800d798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	0151      	lsls	r1, r2, #5
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	440a      	add	r2, r1
 800d7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	0151      	lsls	r1, r2, #5
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	440a      	add	r2, r1
 800d7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	e02b      	b.n	800d82a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	015a      	lsls	r2, r3, #5
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	4413      	add	r3, r2
 800d7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	db12      	blt.n	800d80a <USB_EPSetStall+0xae>
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00f      	beq.n	800d80a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	0151      	lsls	r1, r2, #5
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	440a      	add	r2, r1
 800d800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	015a      	lsls	r2, r3, #5
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	4413      	add	r3, r2
 800d812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	0151      	lsls	r1, r2, #5
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	440a      	add	r2, r1
 800d820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3714      	adds	r7, #20
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	785b      	ldrb	r3, [r3, #1]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d128      	bne.n	800d8a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	015a      	lsls	r2, r3, #5
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4413      	add	r3, r2
 800d85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	0151      	lsls	r1, r2, #5
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	440a      	add	r2, r1
 800d86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d86e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	78db      	ldrb	r3, [r3, #3]
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d003      	beq.n	800d884 <USB_EPClearStall+0x4c>
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	78db      	ldrb	r3, [r3, #3]
 800d880:	2b02      	cmp	r3, #2
 800d882:	d138      	bne.n	800d8f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	015a      	lsls	r2, r3, #5
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	4413      	add	r3, r2
 800d88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	0151      	lsls	r1, r2, #5
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	440a      	add	r2, r1
 800d89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8a2:	6013      	str	r3, [r2, #0]
 800d8a4:	e027      	b.n	800d8f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	015a      	lsls	r2, r3, #5
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	0151      	lsls	r1, r2, #5
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	440a      	add	r2, r1
 800d8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	78db      	ldrb	r3, [r3, #3]
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d003      	beq.n	800d8d6 <USB_EPClearStall+0x9e>
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	78db      	ldrb	r3, [r3, #3]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d10f      	bne.n	800d8f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	0151      	lsls	r1, r2, #5
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	440a      	add	r2, r1
 800d8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	78fb      	ldrb	r3, [r7, #3]
 800d932:	011b      	lsls	r3, r3, #4
 800d934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d938:	68f9      	ldr	r1, [r7, #12]
 800d93a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d93e:	4313      	orrs	r3, r2
 800d940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	695b      	ldr	r3, [r3, #20]
 800d95c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	4013      	ands	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d968:	68fb      	ldr	r3, [r7, #12]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d976:	b480      	push	{r7}
 800d978:	b085      	sub	sp, #20
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d992:	69db      	ldr	r3, [r3, #28]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	4013      	ands	r3, r2
 800d998:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	0c1b      	lsrs	r3, r3, #16
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b085      	sub	sp, #20
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9c6:	69db      	ldr	r3, [r3, #28]
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	4013      	ands	r3, r2
 800d9cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	b29b      	uxth	r3, r3
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b085      	sub	sp, #20
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d9ee:	78fb      	ldrb	r3, [r7, #3]
 800d9f0:	015a      	lsls	r2, r3, #5
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	4013      	ands	r3, r2
 800da0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da0c:	68bb      	ldr	r3, [r7, #8]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da1a:	b480      	push	{r7}
 800da1c:	b087      	sub	sp, #28
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da3e:	78fb      	ldrb	r3, [r7, #3]
 800da40:	f003 030f 	and.w	r3, r3, #15
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	fa22 f303 	lsr.w	r3, r2, r3
 800da4a:	01db      	lsls	r3, r3, #7
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	693a      	ldr	r2, [r7, #16]
 800da50:	4313      	orrs	r3, r2
 800da52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da54:	78fb      	ldrb	r3, [r7, #3]
 800da56:	015a      	lsls	r2, r3, #5
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	4413      	add	r3, r2
 800da5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	4013      	ands	r3, r2
 800da66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da68:	68bb      	ldr	r3, [r7, #8]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800da76:	b480      	push	{r7}
 800da78:	b083      	sub	sp, #12
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	695b      	ldr	r3, [r3, #20]
 800da82:	f003 0301 	and.w	r3, r3, #1
}
 800da86:	4618      	mov	r0, r3
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800da92:	b480      	push	{r7}
 800da94:	b085      	sub	sp, #20
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dab0:	f023 0307 	bic.w	r3, r3, #7
 800dab4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dac8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	333c      	adds	r3, #60	; 0x3c
 800daea:	3304      	adds	r3, #4
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	4a1c      	ldr	r2, [pc, #112]	; (800db64 <USB_EP0_OutStart+0x8c>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d90a      	bls.n	800db0e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db08:	d101      	bne.n	800db0e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	e024      	b.n	800db58 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db14:	461a      	mov	r2, r3
 800db16:	2300      	movs	r3, #0
 800db18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db20:	691b      	ldr	r3, [r3, #16]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db3c:	f043 0318 	orr.w	r3, r3, #24
 800db40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800db54:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	4f54300a 	.word	0x4f54300a

0800db68 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800db68:	b480      	push	{r7}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db7a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800db82:	2303      	movs	r3, #3
 800db84:	e008      	b.n	800db98 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	371c      	adds	r7, #28
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbb2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	e01a      	b.n	800dbfc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d114      	bne.n	800dbfa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dbee:	2181      	movs	r1, #129	; 0x81
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7f5 fb12 	bl	800321a <USBD_LL_Transmit>

    ret = USBD_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	460b      	mov	r3, r1
 800dc24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dc26:	2303      	movs	r3, #3
 800dc28:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d009      	beq.n	800dc48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	78fa      	ldrb	r2, [r7, #3]
 800dc3e:	4611      	mov	r1, r2
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	4798      	blx	r3
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d007      	beq.n	800dc78 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	78fa      	ldrb	r2, [r7, #3]
 800dc72:	4611      	mov	r1, r2
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	4798      	blx	r3
  }

  return USBD_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b084      	sub	sp, #16
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 ff8f 	bl	800ebb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dca8:	461a      	mov	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dcb6:	f003 031f 	and.w	r3, r3, #31
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d01a      	beq.n	800dcf4 <USBD_LL_SetupStage+0x72>
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d822      	bhi.n	800dd08 <USBD_LL_SetupStage+0x86>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <USBD_LL_SetupStage+0x4a>
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d00a      	beq.n	800dce0 <USBD_LL_SetupStage+0x5e>
 800dcca:	e01d      	b.n	800dd08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fa61 	bl	800e19c <USBD_StdDevReq>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	73fb      	strb	r3, [r7, #15]
      break;
 800dcde:	e020      	b.n	800dd22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fac5 	bl	800e278 <USBD_StdItfReq>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73fb      	strb	r3, [r7, #15]
      break;
 800dcf2:	e016      	b.n	800dd22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fb04 	bl	800e30a <USBD_StdEPReq>
 800dd02:	4603      	mov	r3, r0
 800dd04:	73fb      	strb	r3, [r7, #15]
      break;
 800dd06:	e00c      	b.n	800dd22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dd0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	4619      	mov	r1, r3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7f5 fa1a 	bl	8003150 <USBD_LL_StallEP>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]
      break;
 800dd20:	bf00      	nop
  }

  return ret;
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3710      	adds	r7, #16
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	460b      	mov	r3, r1
 800dd36:	607a      	str	r2, [r7, #4]
 800dd38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dd3a:	7afb      	ldrb	r3, [r7, #11]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d138      	bne.n	800ddb2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dd46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd4e:	2b03      	cmp	r3, #3
 800dd50:	d14a      	bne.n	800dde8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	689a      	ldr	r2, [r3, #8]
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d913      	bls.n	800dd86 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	689a      	ldr	r2, [r3, #8]
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	1ad2      	subs	r2, r2, r3
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	68da      	ldr	r2, [r3, #12]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	4293      	cmp	r3, r2
 800dd76:	bf28      	it	cs
 800dd78:	4613      	movcs	r3, r2
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f000 ff91 	bl	800eca6 <USBD_CtlContinueRx>
 800dd84:	e030      	b.n	800dde8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d10b      	bne.n	800ddaa <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd98:	691b      	ldr	r3, [r3, #16]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d005      	beq.n	800ddaa <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 ff8c 	bl	800ecc8 <USBD_CtlSendStatus>
 800ddb0:	e01a      	b.n	800dde8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d114      	bne.n	800dde8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00e      	beq.n	800dde8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddd0:	699b      	ldr	r3, [r3, #24]
 800ddd2:	7afa      	ldrb	r2, [r7, #11]
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	4798      	blx	r3
 800ddda:	4603      	mov	r3, r0
 800dddc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dde4:	7dfb      	ldrb	r3, [r7, #23]
 800dde6:	e000      	b.n	800ddea <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b086      	sub	sp, #24
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	60f8      	str	r0, [r7, #12]
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	607a      	str	r2, [r7, #4]
 800ddfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800de00:	7afb      	ldrb	r3, [r7, #11]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d16b      	bne.n	800dede <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3314      	adds	r3, #20
 800de0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de12:	2b02      	cmp	r3, #2
 800de14:	d156      	bne.n	800dec4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	689a      	ldr	r2, [r3, #8]
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d914      	bls.n	800de4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	689a      	ldr	r2, [r3, #8]
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	1ad2      	subs	r2, r2, r3
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	461a      	mov	r2, r3
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f000 ff23 	bl	800ec84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de3e:	2300      	movs	r3, #0
 800de40:	2200      	movs	r2, #0
 800de42:	2100      	movs	r1, #0
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f7f5 f9fd 	bl	8003244 <USBD_LL_PrepareReceive>
 800de4a:	e03b      	b.n	800dec4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	68da      	ldr	r2, [r3, #12]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	429a      	cmp	r2, r3
 800de56:	d11c      	bne.n	800de92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800de60:	429a      	cmp	r2, r3
 800de62:	d316      	bcc.n	800de92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	685a      	ldr	r2, [r3, #4]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de6e:	429a      	cmp	r2, r3
 800de70:	d20f      	bcs.n	800de92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de72:	2200      	movs	r2, #0
 800de74:	2100      	movs	r1, #0
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	f000 ff04 	bl	800ec84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2200      	movs	r2, #0
 800de80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de84:	2300      	movs	r3, #0
 800de86:	2200      	movs	r2, #0
 800de88:	2100      	movs	r1, #0
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f7f5 f9da 	bl	8003244 <USBD_LL_PrepareReceive>
 800de90:	e018      	b.n	800dec4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	2b03      	cmp	r3, #3
 800de9c:	d10b      	bne.n	800deb6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d005      	beq.n	800deb6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800deb6:	2180      	movs	r1, #128	; 0x80
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7f5 f949 	bl	8003150 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f000 ff15 	bl	800ecee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800deca:	2b01      	cmp	r3, #1
 800decc:	d122      	bne.n	800df14 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7ff fe98 	bl	800dc04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dedc:	e01a      	b.n	800df14 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	d114      	bne.n	800df14 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00e      	beq.n	800df14 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	7afa      	ldrb	r2, [r7, #11]
 800df00:	4611      	mov	r1, r2
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	4798      	blx	r3
 800df06:	4603      	mov	r3, r0
 800df08:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	e000      	b.n	800df16 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800df14:	2300      	movs	r3, #0
}
 800df16:	4618      	mov	r0, r3
 800df18:	3718      	adds	r7, #24
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b082      	sub	sp, #8
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800df4e:	2303      	movs	r3, #3
 800df50:	e02f      	b.n	800dfb2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00f      	beq.n	800df7c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d009      	beq.n	800df7c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	6852      	ldr	r2, [r2, #4]
 800df74:	b2d2      	uxtb	r2, r2
 800df76:	4611      	mov	r1, r2
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df7c:	2340      	movs	r3, #64	; 0x40
 800df7e:	2200      	movs	r2, #0
 800df80:	2100      	movs	r1, #0
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7f5 f8ca 	bl	800311c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2240      	movs	r2, #64	; 0x40
 800df94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df98:	2340      	movs	r3, #64	; 0x40
 800df9a:	2200      	movs	r2, #0
 800df9c:	2180      	movs	r1, #128	; 0x80
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f7f5 f8bc 	bl	800311c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2240      	movs	r2, #64	; 0x40
 800dfae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	b083      	sub	sp, #12
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	78fa      	ldrb	r2, [r7, #3]
 800dfca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dfda:	b480      	push	{r7}
 800dfdc:	b083      	sub	sp, #12
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2204      	movs	r2, #4
 800dff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e006:	b480      	push	{r7}
 800e008:	b083      	sub	sp, #12
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b04      	cmp	r3, #4
 800e018:	d106      	bne.n	800e028 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b082      	sub	sp, #8
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e044:	2b00      	cmp	r3, #0
 800e046:	d101      	bne.n	800e04c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e048:	2303      	movs	r3, #3
 800e04a:	e012      	b.n	800e072 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e052:	b2db      	uxtb	r3, r3
 800e054:	2b03      	cmp	r3, #3
 800e056:	d10b      	bne.n	800e070 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e05e:	69db      	ldr	r3, [r3, #28]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d005      	beq.n	800e070 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e06a:	69db      	ldr	r3, [r3, #28]
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e070:	2300      	movs	r3, #0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b082      	sub	sp, #8
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
 800e082:	460b      	mov	r3, r1
 800e084:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d101      	bne.n	800e094 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e090:	2303      	movs	r3, #3
 800e092:	e014      	b.n	800e0be <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d10d      	bne.n	800e0bc <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a6:	6a1b      	ldr	r3, [r3, #32]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d007      	beq.n	800e0bc <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0b2:	6a1b      	ldr	r3, [r3, #32]
 800e0b4:	78fa      	ldrb	r2, [r7, #3]
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b082      	sub	sp, #8
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d101      	bne.n	800e0e0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e014      	b.n	800e10a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d10d      	bne.n	800e108 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d007      	beq.n	800e108 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e100:	78fa      	ldrb	r2, [r7, #3]
 800e102:	4611      	mov	r1, r2
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e112:	b480      	push	{r7}
 800e114:	b083      	sub	sp, #12
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d009      	beq.n	800e156 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	6852      	ldr	r2, [r2, #4]
 800e14e:	b2d2      	uxtb	r2, r2
 800e150:	4611      	mov	r1, r2
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	4798      	blx	r3
  }

  return USBD_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e160:	b480      	push	{r7}
 800e162:	b087      	sub	sp, #28
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	3301      	adds	r3, #1
 800e176:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e17e:	8a3b      	ldrh	r3, [r7, #16]
 800e180:	021b      	lsls	r3, r3, #8
 800e182:	b21a      	sxth	r2, r3
 800e184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e188:	4313      	orrs	r3, r2
 800e18a:	b21b      	sxth	r3, r3
 800e18c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e18e:	89fb      	ldrh	r3, [r7, #14]
}
 800e190:	4618      	mov	r0, r3
 800e192:	371c      	adds	r7, #28
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1b2:	2b40      	cmp	r3, #64	; 0x40
 800e1b4:	d005      	beq.n	800e1c2 <USBD_StdDevReq+0x26>
 800e1b6:	2b40      	cmp	r3, #64	; 0x40
 800e1b8:	d853      	bhi.n	800e262 <USBD_StdDevReq+0xc6>
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00b      	beq.n	800e1d6 <USBD_StdDevReq+0x3a>
 800e1be:	2b20      	cmp	r3, #32
 800e1c0:	d14f      	bne.n	800e262 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	4798      	blx	r3
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e1d4:	e04a      	b.n	800e26c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	2b09      	cmp	r3, #9
 800e1dc:	d83b      	bhi.n	800e256 <USBD_StdDevReq+0xba>
 800e1de:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <USBD_StdDevReq+0x48>)
 800e1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e4:	0800e239 	.word	0x0800e239
 800e1e8:	0800e24d 	.word	0x0800e24d
 800e1ec:	0800e257 	.word	0x0800e257
 800e1f0:	0800e243 	.word	0x0800e243
 800e1f4:	0800e257 	.word	0x0800e257
 800e1f8:	0800e217 	.word	0x0800e217
 800e1fc:	0800e20d 	.word	0x0800e20d
 800e200:	0800e257 	.word	0x0800e257
 800e204:	0800e22f 	.word	0x0800e22f
 800e208:	0800e221 	.word	0x0800e221
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f9de 	bl	800e5d0 <USBD_GetDescriptor>
          break;
 800e214:	e024      	b.n	800e260 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 fb43 	bl	800e8a4 <USBD_SetAddress>
          break;
 800e21e:	e01f      	b.n	800e260 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fb82 	bl	800e92c <USBD_SetConfig>
 800e228:	4603      	mov	r3, r0
 800e22a:	73fb      	strb	r3, [r7, #15]
          break;
 800e22c:	e018      	b.n	800e260 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 fc21 	bl	800ea78 <USBD_GetConfig>
          break;
 800e236:	e013      	b.n	800e260 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e238:	6839      	ldr	r1, [r7, #0]
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fc52 	bl	800eae4 <USBD_GetStatus>
          break;
 800e240:	e00e      	b.n	800e260 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 fc81 	bl	800eb4c <USBD_SetFeature>
          break;
 800e24a:	e009      	b.n	800e260 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e24c:	6839      	ldr	r1, [r7, #0]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fc90 	bl	800eb74 <USBD_ClrFeature>
          break;
 800e254:	e004      	b.n	800e260 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e256:	6839      	ldr	r1, [r7, #0]
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 fce7 	bl	800ec2c <USBD_CtlError>
          break;
 800e25e:	bf00      	nop
      }
      break;
 800e260:	e004      	b.n	800e26c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e262:	6839      	ldr	r1, [r7, #0]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 fce1 	bl	800ec2c <USBD_CtlError>
      break;
 800e26a:	bf00      	nop
  }

  return ret;
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop

0800e278 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e282:	2300      	movs	r3, #0
 800e284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e28e:	2b40      	cmp	r3, #64	; 0x40
 800e290:	d005      	beq.n	800e29e <USBD_StdItfReq+0x26>
 800e292:	2b40      	cmp	r3, #64	; 0x40
 800e294:	d82f      	bhi.n	800e2f6 <USBD_StdItfReq+0x7e>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <USBD_StdItfReq+0x26>
 800e29a:	2b20      	cmp	r3, #32
 800e29c:	d12b      	bne.n	800e2f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d81d      	bhi.n	800e2e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	889b      	ldrh	r3, [r3, #4]
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d813      	bhi.n	800e2de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	6839      	ldr	r1, [r7, #0]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	4798      	blx	r3
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	88db      	ldrh	r3, [r3, #6]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d110      	bne.n	800e2f2 <USBD_StdItfReq+0x7a>
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10d      	bne.n	800e2f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fcf6 	bl	800ecc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e2dc:	e009      	b.n	800e2f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 fca3 	bl	800ec2c <USBD_CtlError>
          break;
 800e2e6:	e004      	b.n	800e2f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fc9e 	bl	800ec2c <USBD_CtlError>
          break;
 800e2f0:	e000      	b.n	800e2f4 <USBD_StdItfReq+0x7c>
          break;
 800e2f2:	bf00      	nop
      }
      break;
 800e2f4:	e004      	b.n	800e300 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e2f6:	6839      	ldr	r1, [r7, #0]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fc97 	bl	800ec2c <USBD_CtlError>
      break;
 800e2fe:	bf00      	nop
  }

  return ret;
 800e300:	7bfb      	ldrb	r3, [r7, #15]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b084      	sub	sp, #16
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e314:	2300      	movs	r3, #0
 800e316:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	889b      	ldrh	r3, [r3, #4]
 800e31c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e326:	2b40      	cmp	r3, #64	; 0x40
 800e328:	d007      	beq.n	800e33a <USBD_StdEPReq+0x30>
 800e32a:	2b40      	cmp	r3, #64	; 0x40
 800e32c:	f200 8145 	bhi.w	800e5ba <USBD_StdEPReq+0x2b0>
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00c      	beq.n	800e34e <USBD_StdEPReq+0x44>
 800e334:	2b20      	cmp	r3, #32
 800e336:	f040 8140 	bne.w	800e5ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	6839      	ldr	r1, [r7, #0]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	4798      	blx	r3
 800e348:	4603      	mov	r3, r0
 800e34a:	73fb      	strb	r3, [r7, #15]
      break;
 800e34c:	e13a      	b.n	800e5c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	785b      	ldrb	r3, [r3, #1]
 800e352:	2b03      	cmp	r3, #3
 800e354:	d007      	beq.n	800e366 <USBD_StdEPReq+0x5c>
 800e356:	2b03      	cmp	r3, #3
 800e358:	f300 8129 	bgt.w	800e5ae <USBD_StdEPReq+0x2a4>
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d07f      	beq.n	800e460 <USBD_StdEPReq+0x156>
 800e360:	2b01      	cmp	r3, #1
 800e362:	d03c      	beq.n	800e3de <USBD_StdEPReq+0xd4>
 800e364:	e123      	b.n	800e5ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d002      	beq.n	800e378 <USBD_StdEPReq+0x6e>
 800e372:	2b03      	cmp	r3, #3
 800e374:	d016      	beq.n	800e3a4 <USBD_StdEPReq+0x9a>
 800e376:	e02c      	b.n	800e3d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e378:	7bbb      	ldrb	r3, [r7, #14]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00d      	beq.n	800e39a <USBD_StdEPReq+0x90>
 800e37e:	7bbb      	ldrb	r3, [r7, #14]
 800e380:	2b80      	cmp	r3, #128	; 0x80
 800e382:	d00a      	beq.n	800e39a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	4619      	mov	r1, r3
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7f4 fee1 	bl	8003150 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e38e:	2180      	movs	r1, #128	; 0x80
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7f4 fedd 	bl	8003150 <USBD_LL_StallEP>
 800e396:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e398:	e020      	b.n	800e3dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 fc45 	bl	800ec2c <USBD_CtlError>
              break;
 800e3a2:	e01b      	b.n	800e3dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	885b      	ldrh	r3, [r3, #2]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10e      	bne.n	800e3ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e3ac:	7bbb      	ldrb	r3, [r7, #14]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00b      	beq.n	800e3ca <USBD_StdEPReq+0xc0>
 800e3b2:	7bbb      	ldrb	r3, [r7, #14]
 800e3b4:	2b80      	cmp	r3, #128	; 0x80
 800e3b6:	d008      	beq.n	800e3ca <USBD_StdEPReq+0xc0>
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	88db      	ldrh	r3, [r3, #6]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d104      	bne.n	800e3ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3c0:	7bbb      	ldrb	r3, [r7, #14]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7f4 fec3 	bl	8003150 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fc7c 	bl	800ecc8 <USBD_CtlSendStatus>

              break;
 800e3d0:	e004      	b.n	800e3dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e3d2:	6839      	ldr	r1, [r7, #0]
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fc29 	bl	800ec2c <USBD_CtlError>
              break;
 800e3da:	bf00      	nop
          }
          break;
 800e3dc:	e0ec      	b.n	800e5b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	d002      	beq.n	800e3f0 <USBD_StdEPReq+0xe6>
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d016      	beq.n	800e41c <USBD_StdEPReq+0x112>
 800e3ee:	e030      	b.n	800e452 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3f0:	7bbb      	ldrb	r3, [r7, #14]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00d      	beq.n	800e412 <USBD_StdEPReq+0x108>
 800e3f6:	7bbb      	ldrb	r3, [r7, #14]
 800e3f8:	2b80      	cmp	r3, #128	; 0x80
 800e3fa:	d00a      	beq.n	800e412 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7f4 fea5 	bl	8003150 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e406:	2180      	movs	r1, #128	; 0x80
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7f4 fea1 	bl	8003150 <USBD_LL_StallEP>
 800e40e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e410:	e025      	b.n	800e45e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e412:	6839      	ldr	r1, [r7, #0]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fc09 	bl	800ec2c <USBD_CtlError>
              break;
 800e41a:	e020      	b.n	800e45e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	885b      	ldrh	r3, [r3, #2]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d11b      	bne.n	800e45c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e424:	7bbb      	ldrb	r3, [r7, #14]
 800e426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d004      	beq.n	800e438 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e42e:	7bbb      	ldrb	r3, [r7, #14]
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7f4 fe9f 	bl	8003176 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fc45 	bl	800ecc8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	4798      	blx	r3
 800e44c:	4603      	mov	r3, r0
 800e44e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e450:	e004      	b.n	800e45c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e452:	6839      	ldr	r1, [r7, #0]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fbe9 	bl	800ec2c <USBD_CtlError>
              break;
 800e45a:	e000      	b.n	800e45e <USBD_StdEPReq+0x154>
              break;
 800e45c:	bf00      	nop
          }
          break;
 800e45e:	e0ab      	b.n	800e5b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e466:	b2db      	uxtb	r3, r3
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d002      	beq.n	800e472 <USBD_StdEPReq+0x168>
 800e46c:	2b03      	cmp	r3, #3
 800e46e:	d032      	beq.n	800e4d6 <USBD_StdEPReq+0x1cc>
 800e470:	e097      	b.n	800e5a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e472:	7bbb      	ldrb	r3, [r7, #14]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d007      	beq.n	800e488 <USBD_StdEPReq+0x17e>
 800e478:	7bbb      	ldrb	r3, [r7, #14]
 800e47a:	2b80      	cmp	r3, #128	; 0x80
 800e47c:	d004      	beq.n	800e488 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 fbd3 	bl	800ec2c <USBD_CtlError>
                break;
 800e486:	e091      	b.n	800e5ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	da0b      	bge.n	800e4a8 <USBD_StdEPReq+0x19e>
 800e490:	7bbb      	ldrb	r3, [r7, #14]
 800e492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e496:	4613      	mov	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4413      	add	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	3310      	adds	r3, #16
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	e00b      	b.n	800e4c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	4413      	add	r3, r2
 800e4be:	3304      	adds	r3, #4
 800e4c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fbbd 	bl	800ec4e <USBD_CtlSendData>
              break;
 800e4d4:	e06a      	b.n	800e5ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e4d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	da11      	bge.n	800e502 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	f003 020f 	and.w	r2, r3, #15
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	440b      	add	r3, r1
 800e4f0:	3324      	adds	r3, #36	; 0x24
 800e4f2:	881b      	ldrh	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d117      	bne.n	800e528 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fb96 	bl	800ec2c <USBD_CtlError>
                  break;
 800e500:	e054      	b.n	800e5ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e502:	7bbb      	ldrb	r3, [r7, #14]
 800e504:	f003 020f 	and.w	r2, r3, #15
 800e508:	6879      	ldr	r1, [r7, #4]
 800e50a:	4613      	mov	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	440b      	add	r3, r1
 800e514:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d104      	bne.n	800e528 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 fb83 	bl	800ec2c <USBD_CtlError>
                  break;
 800e526:	e041      	b.n	800e5ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	da0b      	bge.n	800e548 <USBD_StdEPReq+0x23e>
 800e530:	7bbb      	ldrb	r3, [r7, #14]
 800e532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e536:	4613      	mov	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	3310      	adds	r3, #16
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	4413      	add	r3, r2
 800e544:	3304      	adds	r3, #4
 800e546:	e00b      	b.n	800e560 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e548:	7bbb      	ldrb	r3, [r7, #14]
 800e54a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e54e:	4613      	mov	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	4413      	add	r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	4413      	add	r3, r2
 800e55e:	3304      	adds	r3, #4
 800e560:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e562:	7bbb      	ldrb	r3, [r7, #14]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d002      	beq.n	800e56e <USBD_StdEPReq+0x264>
 800e568:	7bbb      	ldrb	r3, [r7, #14]
 800e56a:	2b80      	cmp	r3, #128	; 0x80
 800e56c:	d103      	bne.n	800e576 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	e00e      	b.n	800e594 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e576:	7bbb      	ldrb	r3, [r7, #14]
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7f4 fe0e 	bl	800319c <USBD_LL_IsStallEP>
 800e580:	4603      	mov	r3, r0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d003      	beq.n	800e58e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	2201      	movs	r2, #1
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	e002      	b.n	800e594 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2200      	movs	r2, #0
 800e592:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	2202      	movs	r2, #2
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fb57 	bl	800ec4e <USBD_CtlSendData>
              break;
 800e5a0:	e004      	b.n	800e5ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 fb41 	bl	800ec2c <USBD_CtlError>
              break;
 800e5aa:	bf00      	nop
          }
          break;
 800e5ac:	e004      	b.n	800e5b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e5ae:	6839      	ldr	r1, [r7, #0]
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 fb3b 	bl	800ec2c <USBD_CtlError>
          break;
 800e5b6:	bf00      	nop
      }
      break;
 800e5b8:	e004      	b.n	800e5c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fb35 	bl	800ec2c <USBD_CtlError>
      break;
 800e5c2:	bf00      	nop
  }

  return ret;
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	885b      	ldrh	r3, [r3, #2]
 800e5ea:	0a1b      	lsrs	r3, r3, #8
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	2b06      	cmp	r3, #6
 800e5f2:	f200 8128 	bhi.w	800e846 <USBD_GetDescriptor+0x276>
 800e5f6:	a201      	add	r2, pc, #4	; (adr r2, 800e5fc <USBD_GetDescriptor+0x2c>)
 800e5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5fc:	0800e619 	.word	0x0800e619
 800e600:	0800e631 	.word	0x0800e631
 800e604:	0800e671 	.word	0x0800e671
 800e608:	0800e847 	.word	0x0800e847
 800e60c:	0800e847 	.word	0x0800e847
 800e610:	0800e7e7 	.word	0x0800e7e7
 800e614:	0800e813 	.word	0x0800e813
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	7c12      	ldrb	r2, [r2, #16]
 800e624:	f107 0108 	add.w	r1, r7, #8
 800e628:	4610      	mov	r0, r2
 800e62a:	4798      	blx	r3
 800e62c:	60f8      	str	r0, [r7, #12]
      break;
 800e62e:	e112      	b.n	800e856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	7c1b      	ldrb	r3, [r3, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10d      	bne.n	800e654 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e640:	f107 0208 	add.w	r2, r7, #8
 800e644:	4610      	mov	r0, r2
 800e646:	4798      	blx	r3
 800e648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	3301      	adds	r3, #1
 800e64e:	2202      	movs	r2, #2
 800e650:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e652:	e100      	b.n	800e856 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65c:	f107 0208 	add.w	r2, r7, #8
 800e660:	4610      	mov	r0, r2
 800e662:	4798      	blx	r3
 800e664:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	3301      	adds	r3, #1
 800e66a:	2202      	movs	r2, #2
 800e66c:	701a      	strb	r2, [r3, #0]
      break;
 800e66e:	e0f2      	b.n	800e856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	885b      	ldrh	r3, [r3, #2]
 800e674:	b2db      	uxtb	r3, r3
 800e676:	2b05      	cmp	r3, #5
 800e678:	f200 80ac 	bhi.w	800e7d4 <USBD_GetDescriptor+0x204>
 800e67c:	a201      	add	r2, pc, #4	; (adr r2, 800e684 <USBD_GetDescriptor+0xb4>)
 800e67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e682:	bf00      	nop
 800e684:	0800e69d 	.word	0x0800e69d
 800e688:	0800e6d1 	.word	0x0800e6d1
 800e68c:	0800e705 	.word	0x0800e705
 800e690:	0800e739 	.word	0x0800e739
 800e694:	0800e76d 	.word	0x0800e76d
 800e698:	0800e7a1 	.word	0x0800e7a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00b      	beq.n	800e6c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	7c12      	ldrb	r2, [r2, #16]
 800e6b4:	f107 0108 	add.w	r1, r7, #8
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	4798      	blx	r3
 800e6bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6be:	e091      	b.n	800e7e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fab2 	bl	800ec2c <USBD_CtlError>
            err++;
 800e6c8:	7afb      	ldrb	r3, [r7, #11]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ce:	e089      	b.n	800e7e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00b      	beq.n	800e6f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6e2:	689b      	ldr	r3, [r3, #8]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	7c12      	ldrb	r2, [r2, #16]
 800e6e8:	f107 0108 	add.w	r1, r7, #8
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	4798      	blx	r3
 800e6f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6f2:	e077      	b.n	800e7e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6f4:	6839      	ldr	r1, [r7, #0]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fa98 	bl	800ec2c <USBD_CtlError>
            err++;
 800e6fc:	7afb      	ldrb	r3, [r7, #11]
 800e6fe:	3301      	adds	r3, #1
 800e700:	72fb      	strb	r3, [r7, #11]
          break;
 800e702:	e06f      	b.n	800e7e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00b      	beq.n	800e728 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	7c12      	ldrb	r2, [r2, #16]
 800e71c:	f107 0108 	add.w	r1, r7, #8
 800e720:	4610      	mov	r0, r2
 800e722:	4798      	blx	r3
 800e724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e726:	e05d      	b.n	800e7e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 fa7e 	bl	800ec2c <USBD_CtlError>
            err++;
 800e730:	7afb      	ldrb	r3, [r7, #11]
 800e732:	3301      	adds	r3, #1
 800e734:	72fb      	strb	r3, [r7, #11]
          break;
 800e736:	e055      	b.n	800e7e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e73e:	691b      	ldr	r3, [r3, #16]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d00b      	beq.n	800e75c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	7c12      	ldrb	r2, [r2, #16]
 800e750:	f107 0108 	add.w	r1, r7, #8
 800e754:	4610      	mov	r0, r2
 800e756:	4798      	blx	r3
 800e758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e75a:	e043      	b.n	800e7e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fa64 	bl	800ec2c <USBD_CtlError>
            err++;
 800e764:	7afb      	ldrb	r3, [r7, #11]
 800e766:	3301      	adds	r3, #1
 800e768:	72fb      	strb	r3, [r7, #11]
          break;
 800e76a:	e03b      	b.n	800e7e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e77e:	695b      	ldr	r3, [r3, #20]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	7c12      	ldrb	r2, [r2, #16]
 800e784:	f107 0108 	add.w	r1, r7, #8
 800e788:	4610      	mov	r0, r2
 800e78a:	4798      	blx	r3
 800e78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e78e:	e029      	b.n	800e7e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fa4a 	bl	800ec2c <USBD_CtlError>
            err++;
 800e798:	7afb      	ldrb	r3, [r7, #11]
 800e79a:	3301      	adds	r3, #1
 800e79c:	72fb      	strb	r3, [r7, #11]
          break;
 800e79e:	e021      	b.n	800e7e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7a6:	699b      	ldr	r3, [r3, #24]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00b      	beq.n	800e7c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	7c12      	ldrb	r2, [r2, #16]
 800e7b8:	f107 0108 	add.w	r1, r7, #8
 800e7bc:	4610      	mov	r0, r2
 800e7be:	4798      	blx	r3
 800e7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7c2:	e00f      	b.n	800e7e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7c4:	6839      	ldr	r1, [r7, #0]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 fa30 	bl	800ec2c <USBD_CtlError>
            err++;
 800e7cc:	7afb      	ldrb	r3, [r7, #11]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e7d2:	e007      	b.n	800e7e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e7d4:	6839      	ldr	r1, [r7, #0]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fa28 	bl	800ec2c <USBD_CtlError>
          err++;
 800e7dc:	7afb      	ldrb	r3, [r7, #11]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e7e2:	bf00      	nop
      }
      break;
 800e7e4:	e037      	b.n	800e856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	7c1b      	ldrb	r3, [r3, #16]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d109      	bne.n	800e802 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f6:	f107 0208 	add.w	r2, r7, #8
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	4798      	blx	r3
 800e7fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e800:	e029      	b.n	800e856 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e802:	6839      	ldr	r1, [r7, #0]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 fa11 	bl	800ec2c <USBD_CtlError>
        err++;
 800e80a:	7afb      	ldrb	r3, [r7, #11]
 800e80c:	3301      	adds	r3, #1
 800e80e:	72fb      	strb	r3, [r7, #11]
      break;
 800e810:	e021      	b.n	800e856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	7c1b      	ldrb	r3, [r3, #16]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10d      	bne.n	800e836 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e822:	f107 0208 	add.w	r2, r7, #8
 800e826:	4610      	mov	r0, r2
 800e828:	4798      	blx	r3
 800e82a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3301      	adds	r3, #1
 800e830:	2207      	movs	r2, #7
 800e832:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e834:	e00f      	b.n	800e856 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f9f7 	bl	800ec2c <USBD_CtlError>
        err++;
 800e83e:	7afb      	ldrb	r3, [r7, #11]
 800e840:	3301      	adds	r3, #1
 800e842:	72fb      	strb	r3, [r7, #11]
      break;
 800e844:	e007      	b.n	800e856 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e846:	6839      	ldr	r1, [r7, #0]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f9ef 	bl	800ec2c <USBD_CtlError>
      err++;
 800e84e:	7afb      	ldrb	r3, [r7, #11]
 800e850:	3301      	adds	r3, #1
 800e852:	72fb      	strb	r3, [r7, #11]
      break;
 800e854:	bf00      	nop
  }

  if (err != 0U)
 800e856:	7afb      	ldrb	r3, [r7, #11]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d11e      	bne.n	800e89a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	88db      	ldrh	r3, [r3, #6]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d016      	beq.n	800e892 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e864:	893b      	ldrh	r3, [r7, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00e      	beq.n	800e888 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	88da      	ldrh	r2, [r3, #6]
 800e86e:	893b      	ldrh	r3, [r7, #8]
 800e870:	4293      	cmp	r3, r2
 800e872:	bf28      	it	cs
 800e874:	4613      	movcs	r3, r2
 800e876:	b29b      	uxth	r3, r3
 800e878:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e87a:	893b      	ldrh	r3, [r7, #8]
 800e87c:	461a      	mov	r2, r3
 800e87e:	68f9      	ldr	r1, [r7, #12]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f9e4 	bl	800ec4e <USBD_CtlSendData>
 800e886:	e009      	b.n	800e89c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 f9ce 	bl	800ec2c <USBD_CtlError>
 800e890:	e004      	b.n	800e89c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 fa18 	bl	800ecc8 <USBD_CtlSendStatus>
 800e898:	e000      	b.n	800e89c <USBD_GetDescriptor+0x2cc>
    return;
 800e89a:	bf00      	nop
  }
}
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop

0800e8a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	889b      	ldrh	r3, [r3, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d131      	bne.n	800e91a <USBD_SetAddress+0x76>
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	88db      	ldrh	r3, [r3, #6]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d12d      	bne.n	800e91a <USBD_SetAddress+0x76>
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	885b      	ldrh	r3, [r3, #2]
 800e8c2:	2b7f      	cmp	r3, #127	; 0x7f
 800e8c4:	d829      	bhi.n	800e91a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	885b      	ldrh	r3, [r3, #2]
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	d104      	bne.n	800e8e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e8de:	6839      	ldr	r1, [r7, #0]
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f9a3 	bl	800ec2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8e6:	e01d      	b.n	800e924 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	7bfa      	ldrb	r2, [r7, #15]
 800e8ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7f4 fc7d 	bl	80031f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 f9e4 	bl	800ecc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e900:	7bfb      	ldrb	r3, [r7, #15]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d004      	beq.n	800e910 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2202      	movs	r2, #2
 800e90a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e90e:	e009      	b.n	800e924 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e918:	e004      	b.n	800e924 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e91a:	6839      	ldr	r1, [r7, #0]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f985 	bl	800ec2c <USBD_CtlError>
  }
}
 800e922:	bf00      	nop
 800e924:	bf00      	nop
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e936:	2300      	movs	r3, #0
 800e938:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	885b      	ldrh	r3, [r3, #2]
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	4b4c      	ldr	r3, [pc, #304]	; (800ea74 <USBD_SetConfig+0x148>)
 800e942:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e944:	4b4b      	ldr	r3, [pc, #300]	; (800ea74 <USBD_SetConfig+0x148>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d905      	bls.n	800e958 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f96c 	bl	800ec2c <USBD_CtlError>
    return USBD_FAIL;
 800e954:	2303      	movs	r3, #3
 800e956:	e088      	b.n	800ea6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b02      	cmp	r3, #2
 800e962:	d002      	beq.n	800e96a <USBD_SetConfig+0x3e>
 800e964:	2b03      	cmp	r3, #3
 800e966:	d025      	beq.n	800e9b4 <USBD_SetConfig+0x88>
 800e968:	e071      	b.n	800ea4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e96a:	4b42      	ldr	r3, [pc, #264]	; (800ea74 <USBD_SetConfig+0x148>)
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d01c      	beq.n	800e9ac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e972:	4b40      	ldr	r3, [pc, #256]	; (800ea74 <USBD_SetConfig+0x148>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e97c:	4b3d      	ldr	r3, [pc, #244]	; (800ea74 <USBD_SetConfig+0x148>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	4619      	mov	r1, r3
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f7ff f949 	bl	800dc1a <USBD_SetClassConfig>
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d004      	beq.n	800e99c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e992:	6839      	ldr	r1, [r7, #0]
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 f949 	bl	800ec2c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e99a:	e065      	b.n	800ea68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f993 	bl	800ecc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2203      	movs	r2, #3
 800e9a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e9aa:	e05d      	b.n	800ea68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 f98b 	bl	800ecc8 <USBD_CtlSendStatus>
      break;
 800e9b2:	e059      	b.n	800ea68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e9b4:	4b2f      	ldr	r3, [pc, #188]	; (800ea74 <USBD_SetConfig+0x148>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d112      	bne.n	800e9e2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e9c4:	4b2b      	ldr	r3, [pc, #172]	; (800ea74 <USBD_SetConfig+0x148>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9ce:	4b29      	ldr	r3, [pc, #164]	; (800ea74 <USBD_SetConfig+0x148>)
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7ff f93c 	bl	800dc52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f974 	bl	800ecc8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e9e0:	e042      	b.n	800ea68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e9e2:	4b24      	ldr	r3, [pc, #144]	; (800ea74 <USBD_SetConfig+0x148>)
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d02a      	beq.n	800ea46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7ff f92a 	bl	800dc52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e9fe:	4b1d      	ldr	r3, [pc, #116]	; (800ea74 <USBD_SetConfig+0x148>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	461a      	mov	r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea08:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <USBD_SetConfig+0x148>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7ff f903 	bl	800dc1a <USBD_SetClassConfig>
 800ea14:	4603      	mov	r3, r0
 800ea16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ea18:	7bfb      	ldrb	r3, [r7, #15]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00f      	beq.n	800ea3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ea1e:	6839      	ldr	r1, [r7, #0]
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f903 	bl	800ec2c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7ff f90f 	bl	800dc52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2202      	movs	r2, #2
 800ea38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea3c:	e014      	b.n	800ea68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f942 	bl	800ecc8 <USBD_CtlSendStatus>
      break;
 800ea44:	e010      	b.n	800ea68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 f93e 	bl	800ecc8 <USBD_CtlSendStatus>
      break;
 800ea4c:	e00c      	b.n	800ea68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f8eb 	bl	800ec2c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea56:	4b07      	ldr	r3, [pc, #28]	; (800ea74 <USBD_SetConfig+0x148>)
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff f8f8 	bl	800dc52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ea62:	2303      	movs	r3, #3
 800ea64:	73fb      	strb	r3, [r7, #15]
      break;
 800ea66:	bf00      	nop
  }

  return ret;
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	2000030a 	.word	0x2000030a

0800ea78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	88db      	ldrh	r3, [r3, #6]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d004      	beq.n	800ea94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 f8cd 	bl	800ec2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea92:	e023      	b.n	800eadc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	dc02      	bgt.n	800eaa6 <USBD_GetConfig+0x2e>
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	dc03      	bgt.n	800eaac <USBD_GetConfig+0x34>
 800eaa4:	e015      	b.n	800ead2 <USBD_GetConfig+0x5a>
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d00b      	beq.n	800eac2 <USBD_GetConfig+0x4a>
 800eaaa:	e012      	b.n	800ead2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	3308      	adds	r3, #8
 800eab6:	2201      	movs	r2, #1
 800eab8:	4619      	mov	r1, r3
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f8c7 	bl	800ec4e <USBD_CtlSendData>
        break;
 800eac0:	e00c      	b.n	800eadc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	3304      	adds	r3, #4
 800eac6:	2201      	movs	r2, #1
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f8bf 	bl	800ec4e <USBD_CtlSendData>
        break;
 800ead0:	e004      	b.n	800eadc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f8a9 	bl	800ec2c <USBD_CtlError>
        break;
 800eada:	bf00      	nop
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d81e      	bhi.n	800eb3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	88db      	ldrh	r3, [r3, #6]
 800eb00:	2b02      	cmp	r3, #2
 800eb02:	d004      	beq.n	800eb0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f890 	bl	800ec2c <USBD_CtlError>
        break;
 800eb0c:	e01a      	b.n	800eb44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2201      	movs	r2, #1
 800eb12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d005      	beq.n	800eb2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	f043 0202 	orr.w	r2, r3, #2
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	330c      	adds	r3, #12
 800eb2e:	2202      	movs	r2, #2
 800eb30:	4619      	mov	r1, r3
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f88b 	bl	800ec4e <USBD_CtlSendData>
      break;
 800eb38:	e004      	b.n	800eb44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 f875 	bl	800ec2c <USBD_CtlError>
      break;
 800eb42:	bf00      	nop
  }
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	885b      	ldrh	r3, [r3, #2]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d106      	bne.n	800eb6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f8ae 	bl	800ecc8 <USBD_CtlSendStatus>
  }
}
 800eb6c:	bf00      	nop
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	3b01      	subs	r3, #1
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d80b      	bhi.n	800eba4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	885b      	ldrh	r3, [r3, #2]
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d10c      	bne.n	800ebae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f893 	bl	800ecc8 <USBD_CtlSendStatus>
      }
      break;
 800eba2:	e004      	b.n	800ebae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f840 	bl	800ec2c <USBD_CtlError>
      break;
 800ebac:	e000      	b.n	800ebb0 <USBD_ClrFeature+0x3c>
      break;
 800ebae:	bf00      	nop
  }
}
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	781a      	ldrb	r2, [r3, #0]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	781a      	ldrb	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f7ff fabc 	bl	800e160 <SWAPBYTE>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	461a      	mov	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f7ff faaf 	bl	800e160 <SWAPBYTE>
 800ec02:	4603      	mov	r3, r0
 800ec04:	461a      	mov	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	3301      	adds	r3, #1
 800ec14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7ff faa2 	bl	800e160 <SWAPBYTE>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	461a      	mov	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	80da      	strh	r2, [r3, #6]
}
 800ec24:	bf00      	nop
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec36:	2180      	movs	r1, #128	; 0x80
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f7f4 fa89 	bl	8003150 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec3e:	2100      	movs	r1, #0
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7f4 fa85 	bl	8003150 <USBD_LL_StallEP>
}
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	60b9      	str	r1, [r7, #8]
 800ec58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2202      	movs	r2, #2
 800ec5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	2100      	movs	r1, #0
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7f4 fad0 	bl	800321a <USBD_LL_Transmit>

  return USBD_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	2100      	movs	r1, #0
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f7f4 fabf 	bl	800321a <USBD_LL_Transmit>

  return USBD_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b084      	sub	sp, #16
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	60f8      	str	r0, [r7, #12]
 800ecae:	60b9      	str	r1, [r7, #8]
 800ecb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7f4 fac3 	bl	8003244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2204      	movs	r2, #4
 800ecd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ecd8:	2300      	movs	r3, #0
 800ecda:	2200      	movs	r2, #0
 800ecdc:	2100      	movs	r1, #0
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f7f4 fa9b 	bl	800321a <USBD_LL_Transmit>

  return USBD_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b082      	sub	sp, #8
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2205      	movs	r2, #5
 800ecfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecfe:	2300      	movs	r3, #0
 800ed00:	2200      	movs	r2, #0
 800ed02:	2100      	movs	r1, #0
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7f4 fa9d 	bl	8003244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b08c      	sub	sp, #48	; 0x30
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	603b      	str	r3, [r7, #0]
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	71fb      	strb	r3, [r7, #7]
 800ed20:	460b      	mov	r3, r1
 800ed22:	71bb      	strb	r3, [r7, #6]
 800ed24:	4613      	mov	r3, r2
 800ed26:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800ed28:	79fb      	ldrb	r3, [r7, #7]
 800ed2a:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800ed2c:	79bb      	ldrb	r3, [r7, #6]
 800ed2e:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800ed30:	797b      	ldrb	r3, [r7, #5]
 800ed32:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ed34:	f107 030c 	add.w	r3, r7, #12
 800ed38:	2207      	movs	r2, #7
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f001 f949 	bl	800ffd4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ed42:	f107 0318 	add.w	r3, r7, #24
 800ed46:	2218      	movs	r2, #24
 800ed48:	2100      	movs	r1, #0
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f001 f942 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ed50:	233f      	movs	r3, #63	; 0x3f
 800ed52:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800ed54:	238a      	movs	r3, #138	; 0x8a
 800ed56:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800ed58:	f107 0314 	add.w	r3, r7, #20
 800ed5c:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800ed5e:	2303      	movs	r3, #3
 800ed60:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800ed62:	f107 030c 	add.w	r3, r7, #12
 800ed66:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800ed68:	2307      	movs	r3, #7
 800ed6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ed6c:	f107 0318 	add.w	r3, r7, #24
 800ed70:	2100      	movs	r1, #0
 800ed72:	4618      	mov	r0, r3
 800ed74:	f000 fe4c 	bl	800fa10 <hci_send_req>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	da01      	bge.n	800ed82 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800ed7e:	23ff      	movs	r3, #255	; 0xff
 800ed80:	e014      	b.n	800edac <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800ed82:	7b3b      	ldrb	r3, [r7, #12]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d001      	beq.n	800ed8c <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800ed88:	7b3b      	ldrb	r3, [r7, #12]
 800ed8a:	e00f      	b.n	800edac <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800ed8c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800ed96:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800eda0:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda8:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3730      	adds	r7, #48	; 0x30
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800edb4:	b590      	push	{r4, r7, lr}
 800edb6:	b095      	sub	sp, #84	; 0x54
 800edb8:	af00      	add	r7, sp, #0
 800edba:	4604      	mov	r4, r0
 800edbc:	4608      	mov	r0, r1
 800edbe:	4611      	mov	r1, r2
 800edc0:	461a      	mov	r2, r3
 800edc2:	4623      	mov	r3, r4
 800edc4:	71fb      	strb	r3, [r7, #7]
 800edc6:	4603      	mov	r3, r0
 800edc8:	80bb      	strh	r3, [r7, #4]
 800edca:	460b      	mov	r3, r1
 800edcc:	807b      	strh	r3, [r7, #2]
 800edce:	4613      	mov	r3, r2
 800edd0:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800edd8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800eddc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ede0:	4413      	add	r3, r2
 800ede2:	330e      	adds	r3, #14
 800ede4:	2b28      	cmp	r3, #40	; 0x28
 800ede6:	d901      	bls.n	800edec <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800ede8:	2342      	movs	r3, #66	; 0x42
 800edea:	e0ce      	b.n	800ef8a <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800edec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edf0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800edf4:	4413      	add	r3, r2
 800edf6:	79fa      	ldrb	r2, [r7, #7]
 800edf8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800edfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee00:	3301      	adds	r3, #1
 800ee02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800ee06:	88bb      	ldrh	r3, [r7, #4]
 800ee08:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800ee0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee0e:	f107 0208 	add.w	r2, r7, #8
 800ee12:	4413      	add	r3, r2
 800ee14:	88ba      	ldrh	r2, [r7, #4]
 800ee16:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ee18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee1c:	3302      	adds	r3, #2
 800ee1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800ee22:	887b      	ldrh	r3, [r7, #2]
 800ee24:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800ee26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee2a:	f107 0208 	add.w	r2, r7, #8
 800ee2e:	4413      	add	r3, r2
 800ee30:	887a      	ldrh	r2, [r7, #2]
 800ee32:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ee34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee38:	3302      	adds	r3, #2
 800ee3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800ee3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee46:	4413      	add	r3, r2
 800ee48:	79ba      	ldrb	r2, [r7, #6]
 800ee4a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ee4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee52:	3301      	adds	r3, #1
 800ee54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800ee58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee5c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee60:	4413      	add	r3, r2
 800ee62:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ee66:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ee6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee6e:	3301      	adds	r3, #1
 800ee70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800ee74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee7c:	4413      	add	r3, r2
 800ee7e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800ee82:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800ee86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800ee90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee94:	f107 0208 	add.w	r2, r7, #8
 800ee98:	4413      	add	r3, r2
 800ee9a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800ee9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eea0:	4618      	mov	r0, r3
 800eea2:	f001 f889 	bl	800ffb8 <memcpy>
  indx +=  LocalNameLen;
 800eea6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800eeaa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800eeae:	4413      	add	r3, r2
 800eeb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800eeb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eeb8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800eebc:	4413      	add	r3, r2
 800eebe:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800eec2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800eec6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eeca:	3301      	adds	r3, #1
 800eecc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800eed0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eed4:	f107 0208 	add.w	r2, r7, #8
 800eed8:	4413      	add	r3, r2
 800eeda:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800eede:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eee0:	4618      	mov	r0, r3
 800eee2:	f001 f869 	bl	800ffb8 <memcpy>
  indx +=  ServiceUUIDLen;  
 800eee6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800eeea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800eeee:	4413      	add	r3, r2
 800eef0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800eef4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800eef8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800eefc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef00:	f107 0208 	add.w	r2, r7, #8
 800ef04:	4413      	add	r3, r2
 800ef06:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800ef0a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800ef0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef10:	3302      	adds	r3, #2
 800ef12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800ef16:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ef1a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800ef1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef22:	f107 0208 	add.w	r2, r7, #8
 800ef26:	4413      	add	r3, r2
 800ef28:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800ef2c:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800ef2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef32:	3302      	adds	r3, #2
 800ef34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ef38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ef3c:	2218      	movs	r2, #24
 800ef3e:	2100      	movs	r1, #0
 800ef40:	4618      	mov	r0, r3
 800ef42:	f001 f847 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ef46:	233f      	movs	r3, #63	; 0x3f
 800ef48:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800ef4a:	2383      	movs	r3, #131	; 0x83
 800ef4c:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800ef4e:	f107 0308 	add.w	r3, r7, #8
 800ef52:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800ef54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef58:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800ef5a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800ef5e:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800ef60:	2301      	movs	r3, #1
 800ef62:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800ef64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ef68:	2100      	movs	r1, #0
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 fd50 	bl	800fa10 <hci_send_req>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	da01      	bge.n	800ef7a <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800ef76:	23ff      	movs	r3, #255	; 0xff
 800ef78:	e007      	b.n	800ef8a <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800ef7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <aci_gap_set_discoverable+0x1d4>
    return status;
 800ef82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef86:	e000      	b.n	800ef8a <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3754      	adds	r7, #84	; 0x54
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd90      	pop	{r4, r7, pc}

0800ef92 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800ef92:	b590      	push	{r4, r7, lr}
 800ef94:	b091      	sub	sp, #68	; 0x44
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	603a      	str	r2, [r7, #0]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	71fb      	strb	r3, [r7, #7]
 800efa0:	460b      	mov	r3, r1
 800efa2:	71bb      	strb	r3, [r7, #6]
 800efa4:	4613      	mov	r3, r2
 800efa6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800efa8:	79fb      	ldrb	r3, [r7, #7]
 800efaa:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800efac:	79bb      	ldrb	r3, [r7, #6]
 800efae:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800efb0:	79bb      	ldrb	r3, [r7, #6]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00a      	beq.n	800efcc <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800efb6:	683a      	ldr	r2, [r7, #0]
 800efb8:	f107 030e 	add.w	r3, r7, #14
 800efbc:	6814      	ldr	r4, [r2, #0]
 800efbe:	6850      	ldr	r0, [r2, #4]
 800efc0:	6891      	ldr	r1, [r2, #8]
 800efc2:	68d2      	ldr	r2, [r2, #12]
 800efc4:	601c      	str	r4, [r3, #0]
 800efc6:	6058      	str	r0, [r3, #4]
 800efc8:	6099      	str	r1, [r3, #8]
 800efca:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800efcc:	797b      	ldrb	r3, [r7, #5]
 800efce:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800efd0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800efd4:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800efd6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800efda:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800efde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efe0:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800efe4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800efe8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800efec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eff0:	2218      	movs	r2, #24
 800eff2:	2100      	movs	r1, #0
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 ffed 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800effa:	233f      	movs	r3, #63	; 0x3f
 800effc:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800effe:	2386      	movs	r3, #134	; 0x86
 800f000:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800f002:	f107 030c 	add.w	r3, r7, #12
 800f006:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800f008:	231a      	movs	r3, #26
 800f00a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800f00c:	f107 030b 	add.w	r3, r7, #11
 800f010:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800f012:	2301      	movs	r3, #1
 800f014:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800f016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f01a:	2100      	movs	r1, #0
 800f01c:	4618      	mov	r0, r3
 800f01e:	f000 fcf7 	bl	800fa10 <hci_send_req>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	da01      	bge.n	800f02c <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800f028:	23ff      	movs	r3, #255	; 0xff
 800f02a:	e005      	b.n	800f038 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800f02c:	7afb      	ldrb	r3, [r7, #11]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800f032:	7afb      	ldrb	r3, [r7, #11]
 800f034:	e000      	b.n	800f038 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3744      	adds	r7, #68	; 0x44
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd90      	pop	{r4, r7, pc}

0800f040 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b092      	sub	sp, #72	; 0x48
 800f044:	af00      	add	r7, sp, #0
 800f046:	4603      	mov	r3, r0
 800f048:	6039      	str	r1, [r7, #0]
 800f04a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800f052:	79fb      	ldrb	r3, [r7, #7]
 800f054:	2b1f      	cmp	r3, #31
 800f056:	d901      	bls.n	800f05c <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800f058:	2342      	movs	r3, #66	; 0x42
 800f05a:	e03f      	b.n	800f0dc <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800f05c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f060:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f064:	4413      	add	r3, r2
 800f066:	79fa      	ldrb	r2, [r7, #7]
 800f068:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800f06c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f070:	3301      	adds	r3, #1
 800f072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800f076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f07a:	f107 0208 	add.w	r2, r7, #8
 800f07e:	4413      	add	r3, r2
 800f080:	79fa      	ldrb	r2, [r7, #7]
 800f082:	6839      	ldr	r1, [r7, #0]
 800f084:	4618      	mov	r0, r3
 800f086:	f000 ff97 	bl	800ffb8 <memcpy>
  indx +=  AdvLen;
 800f08a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800f08e:	79fb      	ldrb	r3, [r7, #7]
 800f090:	4413      	add	r3, r2
 800f092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f09a:	2218      	movs	r2, #24
 800f09c:	2100      	movs	r1, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 ff98 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f0a4:	233f      	movs	r3, #63	; 0x3f
 800f0a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800f0a8:	238e      	movs	r3, #142	; 0x8e
 800f0aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800f0ac:	f107 0308 	add.w	r3, r7, #8
 800f0b0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800f0b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f0b6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800f0b8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800f0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800f0c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 fca1 	bl	800fa10 <hci_send_req>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	da01      	bge.n	800f0d8 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800f0d4:	23ff      	movs	r3, #255	; 0xff
 800f0d6:	e001      	b.n	800f0dc <aci_gap_update_adv_data+0x9c>
    
  return status;
 800f0d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3748      	adds	r7, #72	; 0x48
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b088      	sub	sp, #32
 800f0e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f0ea:	f107 0308 	add.w	r3, r7, #8
 800f0ee:	2218      	movs	r2, #24
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 ff6e 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f0f8:	233f      	movs	r3, #63	; 0x3f
 800f0fa:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800f0fc:	f240 1301 	movw	r3, #257	; 0x101
 800f100:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f102:	1dfb      	adds	r3, r7, #7
 800f104:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f106:	2301      	movs	r3, #1
 800f108:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800f10a:	f107 0308 	add.w	r3, r7, #8
 800f10e:	2100      	movs	r1, #0
 800f110:	4618      	mov	r0, r3
 800f112:	f000 fc7d 	bl	800fa10 <hci_send_req>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	da01      	bge.n	800f120 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800f11c:	23ff      	movs	r3, #255	; 0xff
 800f11e:	e000      	b.n	800f122 <aci_gatt_init+0x3e>

  return status;
 800f120:	79fb      	ldrb	r3, [r7, #7]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3720      	adds	r7, #32
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b090      	sub	sp, #64	; 0x40
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6039      	str	r1, [r7, #0]
 800f132:	4611      	mov	r1, r2
 800f134:	461a      	mov	r2, r3
 800f136:	4603      	mov	r3, r0
 800f138:	71fb      	strb	r3, [r7, #7]
 800f13a:	460b      	mov	r3, r1
 800f13c:	71bb      	strb	r3, [r7, #6]
 800f13e:	4613      	mov	r3, r2
 800f140:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800f142:	2300      	movs	r3, #0
 800f144:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800f148:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f14c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f150:	4413      	add	r3, r2
 800f152:	79fa      	ldrb	r2, [r7, #7]
 800f154:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f158:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f15c:	3301      	adds	r3, #1
 800f15e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800f162:	79fb      	ldrb	r3, [r7, #7]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d103      	bne.n	800f170 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800f168:	2302      	movs	r3, #2
 800f16a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f16e:	e002      	b.n	800f176 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800f170:	2310      	movs	r3, #16
 800f172:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800f176:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f17a:	f107 020c 	add.w	r2, r7, #12
 800f17e:	4413      	add	r3, r2
 800f180:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f184:	6839      	ldr	r1, [r7, #0]
 800f186:	4618      	mov	r0, r3
 800f188:	f000 ff16 	bl	800ffb8 <memcpy>
  indx +=  uuid_len;
 800f18c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f190:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f194:	4413      	add	r3, r2
 800f196:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800f19a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f19e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f1a2:	4413      	add	r3, r2
 800f1a4:	79ba      	ldrb	r2, [r7, #6]
 800f1a6:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f1aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800f1b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f1b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f1bc:	4413      	add	r3, r2
 800f1be:	797a      	ldrb	r2, [r7, #5]
 800f1c0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800f1c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f1ce:	f107 0320 	add.w	r3, r7, #32
 800f1d2:	2203      	movs	r2, #3
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f000 fefc 	bl	800ffd4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1e0:	2218      	movs	r2, #24
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 fef5 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f1ea:	233f      	movs	r3, #63	; 0x3f
 800f1ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800f1ee:	f44f 7381 	mov.w	r3, #258	; 0x102
 800f1f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800f1f4:	f107 030c 	add.w	r3, r7, #12
 800f1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800f1fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f1fe:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800f200:	f107 0320 	add.w	r3, r7, #32
 800f204:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800f206:	2303      	movs	r3, #3
 800f208:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800f20a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f20e:	2100      	movs	r1, #0
 800f210:	4618      	mov	r0, r3
 800f212:	f000 fbfd 	bl	800fa10 <hci_send_req>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	da01      	bge.n	800f220 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f21c:	23ff      	movs	r3, #255	; 0xff
 800f21e:	e00c      	b.n	800f23a <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800f220:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <aci_gatt_add_serv+0x104>
    return resp.status;
 800f228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f22c:	e005      	b.n	800f23a <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800f22e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800f232:	b29a      	uxth	r2, r3
 800f234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f236:	801a      	strh	r2, [r3, #0]

  return 0;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3740      	adds	r7, #64	; 0x40
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}

0800f242 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b092      	sub	sp, #72	; 0x48
 800f246:	af00      	add	r7, sp, #0
 800f248:	603a      	str	r2, [r7, #0]
 800f24a:	461a      	mov	r2, r3
 800f24c:	4603      	mov	r3, r0
 800f24e:	80fb      	strh	r3, [r7, #6]
 800f250:	460b      	mov	r3, r1
 800f252:	717b      	strb	r3, [r7, #5]
 800f254:	4613      	mov	r3, r2
 800f256:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800f25e:	88fb      	ldrh	r3, [r7, #6]
 800f260:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800f262:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f266:	f107 020c 	add.w	r2, r7, #12
 800f26a:	4413      	add	r3, r2
 800f26c:	88fa      	ldrh	r2, [r7, #6]
 800f26e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f270:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f274:	3302      	adds	r3, #2
 800f276:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800f27a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f27e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f282:	4413      	add	r3, r2
 800f284:	797a      	ldrb	r2, [r7, #5]
 800f286:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f28a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f28e:	3301      	adds	r3, #1
 800f290:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800f294:	797b      	ldrb	r3, [r7, #5]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d103      	bne.n	800f2a2 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800f29a:	2302      	movs	r3, #2
 800f29c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f2a0:	e002      	b.n	800f2a8 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800f2a2:	2310      	movs	r3, #16
 800f2a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800f2a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f2ac:	f107 020c 	add.w	r2, r7, #12
 800f2b0:	4413      	add	r3, r2
 800f2b2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 fe7d 	bl	800ffb8 <memcpy>
  indx +=  uuid_len;
 800f2be:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800f2c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800f2cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f2d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f2d4:	4413      	add	r3, r2
 800f2d6:	793a      	ldrb	r2, [r7, #4]
 800f2d8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f2dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800f2e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f2ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f2ee:	4413      	add	r3, r2
 800f2f0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f2f4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f2f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800f302:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f306:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f30a:	4413      	add	r3, r2
 800f30c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f310:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f314:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f318:	3301      	adds	r3, #1
 800f31a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800f31e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f322:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f326:	4413      	add	r3, r2
 800f328:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f32c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f330:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f334:	3301      	adds	r3, #1
 800f336:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800f33a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f33e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f342:	4413      	add	r3, r2
 800f344:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f348:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f34c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f350:	3301      	adds	r3, #1
 800f352:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800f356:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f35a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f35e:	4413      	add	r3, r2
 800f360:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f364:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800f368:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f36c:	3301      	adds	r3, #1
 800f36e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f376:	2203      	movs	r2, #3
 800f378:	2100      	movs	r1, #0
 800f37a:	4618      	mov	r0, r3
 800f37c:	f000 fe2a 	bl	800ffd4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f384:	2218      	movs	r2, #24
 800f386:	2100      	movs	r1, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	f000 fe23 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f38e:	233f      	movs	r3, #63	; 0x3f
 800f390:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800f392:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f396:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800f398:	f107 030c 	add.w	r3, r7, #12
 800f39c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800f39e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800f3a2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800f3a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800f3ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 fb2b 	bl	800fa10 <hci_send_req>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da01      	bge.n	800f3c4 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800f3c0:	23ff      	movs	r3, #255	; 0xff
 800f3c2:	e00c      	b.n	800f3de <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800f3c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <aci_gatt_add_char+0x190>
    return resp.status;
 800f3cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3d0:	e005      	b.n	800f3de <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800f3d2:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3da:	801a      	strh	r2, [r3, #0]

  return 0;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3748      	adds	r7, #72	; 0x48
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800f3e6:	b590      	push	{r4, r7, lr}
 800f3e8:	b0ab      	sub	sp, #172	; 0xac
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	4608      	mov	r0, r1
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	4623      	mov	r3, r4
 800f3f6:	80fb      	strh	r3, [r7, #6]
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	80bb      	strh	r3, [r7, #4]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	70fb      	strb	r3, [r7, #3]
 800f400:	4613      	mov	r3, r2
 800f402:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800f40a:	78bb      	ldrb	r3, [r7, #2]
 800f40c:	2b7a      	cmp	r3, #122	; 0x7a
 800f40e:	d901      	bls.n	800f414 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800f410:	2342      	movs	r3, #66	; 0x42
 800f412:	e076      	b.n	800f502 <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 800f414:	88fb      	ldrh	r3, [r7, #6]
 800f416:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800f418:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f41c:	f107 0208 	add.w	r2, r7, #8
 800f420:	4413      	add	r3, r2
 800f422:	88fa      	ldrh	r2, [r7, #6]
 800f424:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f426:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f42a:	3302      	adds	r3, #2
 800f42c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800f430:	88bb      	ldrh	r3, [r7, #4]
 800f432:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800f434:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f438:	f107 0208 	add.w	r2, r7, #8
 800f43c:	4413      	add	r3, r2
 800f43e:	88ba      	ldrh	r2, [r7, #4]
 800f440:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800f442:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f446:	3302      	adds	r3, #2
 800f448:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800f44c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f450:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f454:	4413      	add	r3, r2
 800f456:	78fa      	ldrb	r2, [r7, #3]
 800f458:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f45c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f460:	3301      	adds	r3, #1
 800f462:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800f466:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f46a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800f46e:	4413      	add	r3, r2
 800f470:	78ba      	ldrb	r2, [r7, #2]
 800f472:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800f476:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f47a:	3301      	adds	r3, #1
 800f47c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800f480:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f484:	f107 0208 	add.w	r2, r7, #8
 800f488:	4413      	add	r3, r2
 800f48a:	78ba      	ldrb	r2, [r7, #2]
 800f48c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f490:	4618      	mov	r0, r3
 800f492:	f000 fd91 	bl	800ffb8 <memcpy>
  indx +=  charValueLen;
 800f496:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800f49a:	78bb      	ldrb	r3, [r7, #2]
 800f49c:	4413      	add	r3, r2
 800f49e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f4a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f4a6:	2218      	movs	r2, #24
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f000 fd92 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f4b0:	233f      	movs	r3, #63	; 0x3f
 800f4b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800f4b6:	f44f 7383 	mov.w	r3, #262	; 0x106
 800f4ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800f4be:	f107 0308 	add.w	r3, r7, #8
 800f4c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800f4c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800f4ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800f4ce:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800f4d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800f4dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 fa94 	bl	800fa10 <hci_send_req>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	da01      	bge.n	800f4f2 <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 800f4ee:	23ff      	movs	r3, #255	; 0xff
 800f4f0:	e007      	b.n	800f502 <aci_gatt_update_char_value+0x11c>

  if (status) {
 800f4f2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d002      	beq.n	800f500 <aci_gatt_update_char_value+0x11a>
    return status;
 800f4fa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f4fe:	e000      	b.n	800f502 <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	37ac      	adds	r7, #172	; 0xac
 800f506:	46bd      	mov	sp, r7
 800f508:	bd90      	pop	{r4, r7, pc}

0800f50a <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b08a      	sub	sp, #40	; 0x28
 800f50e:	af00      	add	r7, sp, #0
 800f510:	4603      	mov	r3, r0
 800f512:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800f514:	88fb      	ldrh	r3, [r7, #6]
 800f516:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800f518:	f107 0310 	add.w	r3, r7, #16
 800f51c:	2218      	movs	r2, #24
 800f51e:	2100      	movs	r1, #0
 800f520:	4618      	mov	r0, r3
 800f522:	f000 fd57 	bl	800ffd4 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800f526:	233f      	movs	r3, #63	; 0x3f
 800f528:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800f52a:	f240 1327 	movw	r3, #295	; 0x127
 800f52e:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800f530:	f107 030c 	add.w	r3, r7, #12
 800f534:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800f536:	2302      	movs	r3, #2
 800f538:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800f53a:	f107 030b 	add.w	r3, r7, #11
 800f53e:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800f540:	2301      	movs	r3, #1
 800f542:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800f544:	f107 0310 	add.w	r3, r7, #16
 800f548:	2100      	movs	r1, #0
 800f54a:	4618      	mov	r0, r3
 800f54c:	f000 fa60 	bl	800fa10 <hci_send_req>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	da01      	bge.n	800f55a <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800f556:	23ff      	movs	r3, #255	; 0xff
 800f558:	e000      	b.n	800f55c <aci_gatt_allow_read+0x52>

    return status;
 800f55a:	7afb      	ldrb	r3, [r7, #11]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3728      	adds	r7, #40	; 0x28
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	460a      	mov	r2, r1
 800f56e:	71fb      	strb	r3, [r7, #7]
 800f570:	4613      	mov	r3, r2
 800f572:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800f574:	79fb      	ldrb	r3, [r7, #7]
 800f576:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800f578:	79bb      	ldrb	r3, [r7, #6]
 800f57a:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f57c:	f107 0310 	add.w	r3, r7, #16
 800f580:	2218      	movs	r2, #24
 800f582:	2100      	movs	r1, #0
 800f584:	4618      	mov	r0, r3
 800f586:	f000 fd25 	bl	800ffd4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800f58a:	233f      	movs	r3, #63	; 0x3f
 800f58c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800f58e:	230f      	movs	r3, #15
 800f590:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800f592:	f107 030c 	add.w	r3, r7, #12
 800f596:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800f598:	2302      	movs	r3, #2
 800f59a:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800f59c:	f107 030b 	add.w	r3, r7, #11
 800f5a0:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800f5a6:	f107 0310 	add.w	r3, r7, #16
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 fa2f 	bl	800fa10 <hci_send_req>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	da01      	bge.n	800f5bc <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800f5b8:	23ff      	movs	r3, #255	; 0xff
 800f5ba:	e000      	b.n	800f5be <aci_hal_set_tx_power_level+0x5a>

  return status;
 800f5bc:	7afb      	ldrb	r3, [r7, #11]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3728      	adds	r7, #40	; 0x28
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800f5c6:	b590      	push	{r4, r7, lr}
 800f5c8:	b089      	sub	sp, #36	; 0x24
 800f5ca:	af02      	add	r7, sp, #8
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800f5d0:	f107 0410 	add.w	r4, r7, #16
 800f5d4:	f107 0215 	add.w	r2, r7, #21
 800f5d8:	f107 0112 	add.w	r1, r7, #18
 800f5dc:	f107 0016 	add.w	r0, r7, #22
 800f5e0:	f107 030e 	add.w	r3, r7, #14
 800f5e4:	9300      	str	r3, [sp, #0]
 800f5e6:	4623      	mov	r3, r4
 800f5e8:	f000 f853 	bl	800f692 <hci_le_read_local_version>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800f5f0:	7dfb      	ldrb	r3, [r7, #23]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d126      	bne.n	800f644 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800f5f6:	8a7b      	ldrh	r3, [r7, #18]
 800f5f8:	0a1b      	lsrs	r3, r3, #8
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800f602:	8a7b      	ldrh	r3, [r7, #18]
 800f604:	021b      	lsls	r3, r3, #8
 800f606:	b29a      	uxth	r2, r3
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	881b      	ldrh	r3, [r3, #0]
 800f610:	b21a      	sxth	r2, r3
 800f612:	89fb      	ldrh	r3, [r7, #14]
 800f614:	091b      	lsrs	r3, r3, #4
 800f616:	b29b      	uxth	r3, r3
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	b21b      	sxth	r3, r3
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	b21b      	sxth	r3, r3
 800f620:	4313      	orrs	r3, r2
 800f622:	b21b      	sxth	r3, r3
 800f624:	b29a      	uxth	r2, r3
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	b21a      	sxth	r2, r3
 800f630:	89fb      	ldrh	r3, [r7, #14]
 800f632:	b21b      	sxth	r3, r3
 800f634:	f003 030f 	and.w	r3, r3, #15
 800f638:	b21b      	sxth	r3, r3
 800f63a:	4313      	orrs	r3, r2
 800f63c:	b21b      	sxth	r3, r3
 800f63e:	b29a      	uxth	r2, r3
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800f644:	7dfb      	ldrb	r3, [r7, #23]
}
 800f646:	4618      	mov	r0, r3
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd90      	pop	{r4, r7, pc}

0800f64e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b088      	sub	sp, #32
 800f652:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f654:	f107 0308 	add.w	r3, r7, #8
 800f658:	2218      	movs	r2, #24
 800f65a:	2100      	movs	r1, #0
 800f65c:	4618      	mov	r0, r3
 800f65e:	f000 fcb9 	bl	800ffd4 <memset>
  rq.ogf = OGF_HOST_CTL;
 800f662:	2303      	movs	r3, #3
 800f664:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800f666:	2303      	movs	r3, #3
 800f668:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f66a:	1dfb      	adds	r3, r7, #7
 800f66c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f66e:	2301      	movs	r3, #1
 800f670:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f672:	f107 0308 	add.w	r3, r7, #8
 800f676:	2100      	movs	r1, #0
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 f9c9 	bl	800fa10 <hci_send_req>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	da01      	bge.n	800f688 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800f684:	23ff      	movs	r3, #255	; 0xff
 800f686:	e000      	b.n	800f68a <hci_reset+0x3c>
  
  return status;  
 800f688:	79fb      	ldrb	r3, [r7, #7]
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3720      	adds	r7, #32
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b08e      	sub	sp, #56	; 0x38
 800f696:	af00      	add	r7, sp, #0
 800f698:	60f8      	str	r0, [r7, #12]
 800f69a:	60b9      	str	r1, [r7, #8]
 800f69c:	607a      	str	r2, [r7, #4]
 800f69e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800f6a0:	f107 0314 	add.w	r3, r7, #20
 800f6a4:	2209      	movs	r2, #9
 800f6a6:	2100      	movs	r1, #0
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f000 fc93 	bl	800ffd4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f6ae:	f107 0320 	add.w	r3, r7, #32
 800f6b2:	2218      	movs	r2, #24
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 fc8c 	bl	800ffd4 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800f6bc:	2304      	movs	r3, #4
 800f6be:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800f6cc:	f107 0314 	add.w	r3, r7, #20
 800f6d0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800f6d2:	2309      	movs	r3, #9
 800f6d4:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f6d6:	f107 0320 	add.w	r3, r7, #32
 800f6da:	2100      	movs	r1, #0
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f000 f997 	bl	800fa10 <hci_send_req>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	da01      	bge.n	800f6ec <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800f6e8:	23ff      	movs	r3, #255	; 0xff
 800f6ea:	e018      	b.n	800f71e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800f6ec:	7d3b      	ldrb	r3, [r7, #20]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d001      	beq.n	800f6f6 <hci_le_read_local_version+0x64>
    return resp.status;
 800f6f2:	7d3b      	ldrb	r3, [r7, #20]
 800f6f4:	e013      	b.n	800f71e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800f6f6:	7d7a      	ldrb	r2, [r7, #21]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800f6fc:	8afa      	ldrh	r2, [r7, #22]
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800f702:	7e3a      	ldrb	r2, [r7, #24]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800f708:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800f712:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800f716:	b29a      	uxth	r2, r3
 800f718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f71a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3738      	adds	r7, #56	; 0x38
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b092      	sub	sp, #72	; 0x48
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	4603      	mov	r3, r0
 800f72e:	6039      	str	r1, [r7, #0]
 800f730:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800f732:	f107 0310 	add.w	r3, r7, #16
 800f736:	2220      	movs	r2, #32
 800f738:	2100      	movs	r1, #0
 800f73a:	4618      	mov	r0, r3
 800f73c:	f000 fc4a 	bl	800ffd4 <memset>
  scan_resp_cp.length = length;
 800f740:	79fb      	ldrb	r3, [r7, #7]
 800f742:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800f744:	79fb      	ldrb	r3, [r7, #7]
 800f746:	2b1f      	cmp	r3, #31
 800f748:	bf28      	it	cs
 800f74a:	231f      	movcs	r3, #31
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	461a      	mov	r2, r3
 800f750:	f107 0310 	add.w	r3, r7, #16
 800f754:	3301      	adds	r3, #1
 800f756:	6839      	ldr	r1, [r7, #0]
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 fc2d 	bl	800ffb8 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f75e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f762:	2218      	movs	r2, #24
 800f764:	2100      	movs	r1, #0
 800f766:	4618      	mov	r0, r3
 800f768:	f000 fc34 	bl	800ffd4 <memset>
  rq.ogf = OGF_LE_CTL;
 800f76c:	2308      	movs	r3, #8
 800f76e:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800f770:	2309      	movs	r3, #9
 800f772:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800f774:	f107 0310 	add.w	r3, r7, #16
 800f778:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800f77a:	2320      	movs	r3, #32
 800f77c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800f77e:	f107 030f 	add.w	r3, r7, #15
 800f782:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800f784:	2301      	movs	r3, #1
 800f786:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f78c:	2100      	movs	r1, #0
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 f93e 	bl	800fa10 <hci_send_req>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	da01      	bge.n	800f79e <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800f79a:	23ff      	movs	r3, #255	; 0xff
 800f79c:	e000      	b.n	800f7a0 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3748      	adds	r7, #72	; 0x48
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <hci_le_set_random_address>:
  
  return 0;
}

int hci_le_set_random_address(tBDAddr bdaddr)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08c      	sub	sp, #48	; 0x30
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  le_set_random_address_cp set_rand_addr_cp;
  uint8_t status;
  
  BLUENRG_memset(&set_rand_addr_cp, 0, sizeof(set_rand_addr_cp));
 800f7b0:	f107 0310 	add.w	r3, r7, #16
 800f7b4:	2206      	movs	r2, #6
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 fc0b 	bl	800ffd4 <memset>
  BLUENRG_memcpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	f107 0310 	add.w	r3, r7, #16
 800f7c4:	6810      	ldr	r0, [r2, #0]
 800f7c6:	6018      	str	r0, [r3, #0]
 800f7c8:	8892      	ldrh	r2, [r2, #4]
 800f7ca:	809a      	strh	r2, [r3, #4]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f7cc:	f107 0318 	add.w	r3, r7, #24
 800f7d0:	2218      	movs	r2, #24
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 fbfd 	bl	800ffd4 <memset>
  rq.ogf = OGF_LE_CTL;
 800f7da:	2308      	movs	r3, #8
 800f7dc:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
 800f7de:	2305      	movs	r3, #5
 800f7e0:	837b      	strh	r3, [r7, #26]
  rq.cparam = &set_rand_addr_cp;
 800f7e2:	f107 0310 	add.w	r3, r7, #16
 800f7e6:	623b      	str	r3, [r7, #32]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 800f7e8:	2306      	movs	r3, #6
 800f7ea:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &status;
 800f7ec:	f107 030f 	add.w	r3, r7, #15
 800f7f0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f7f6:	f107 0318 	add.w	r3, r7, #24
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f000 f907 	bl	800fa10 <hci_send_req>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	da01      	bge.n	800f80c <hci_le_set_random_address+0x64>
    return BLE_STATUS_TIMEOUT;
 800f808:	23ff      	movs	r3, #255	; 0xff
 800f80a:	e000      	b.n	800f80e <hci_le_set_random_address+0x66>
  
  return status;
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3730      	adds	r7, #48	; 0x30
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800f816:	b480      	push	{r7}
 800f818:	b085      	sub	sp, #20
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	3308      	adds	r3, #8
 800f822:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	2b04      	cmp	r3, #4
 800f82a:	d001      	beq.n	800f830 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800f82c:	2301      	movs	r3, #1
 800f82e:	e00c      	b.n	800f84a <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	3302      	adds	r3, #2
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	461a      	mov	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f83e:	3b03      	subs	r3, #3
 800f840:	429a      	cmp	r2, r3
 800f842:	d001      	beq.n	800f848 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800f844:	2302      	movs	r3, #2
 800f846:	e000      	b.n	800f84a <verify_packet+0x34>
  
  return 0;      
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3714      	adds	r7, #20
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr
	...

0800f858 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b0a6      	sub	sp, #152	; 0x98
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	607b      	str	r3, [r7, #4]
 800f860:	4603      	mov	r3, r0
 800f862:	81fb      	strh	r3, [r7, #14]
 800f864:	460b      	mov	r3, r1
 800f866:	81bb      	strh	r3, [r7, #12]
 800f868:	4613      	mov	r3, r2
 800f86a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f86c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f874:	b21a      	sxth	r2, r3
 800f876:	89fb      	ldrh	r3, [r7, #14]
 800f878:	029b      	lsls	r3, r3, #10
 800f87a:	b21b      	sxth	r3, r3
 800f87c:	4313      	orrs	r3, r2
 800f87e:	b21b      	sxth	r3, r3
 800f880:	b29b      	uxth	r3, r3
 800f882:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800f884:	7afb      	ldrb	r3, [r7, #11]
 800f886:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800f888:	2301      	movs	r3, #1
 800f88a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f88c:	f107 0318 	add.w	r3, r7, #24
 800f890:	3301      	adds	r3, #1
 800f892:	461a      	mov	r2, r3
 800f894:	f107 0314 	add.w	r3, r7, #20
 800f898:	8819      	ldrh	r1, [r3, #0]
 800f89a:	789b      	ldrb	r3, [r3, #2]
 800f89c:	8011      	strh	r1, [r2, #0]
 800f89e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f8a0:	f107 0318 	add.w	r3, r7, #24
 800f8a4:	3304      	adds	r3, #4
 800f8a6:	7afa      	ldrb	r2, [r7, #11]
 800f8a8:	6879      	ldr	r1, [r7, #4]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f000 fb84 	bl	800ffb8 <memcpy>
  
  if (hciContext.io.Send)
 800f8b0:	4b08      	ldr	r3, [pc, #32]	; (800f8d4 <send_cmd+0x7c>)
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d009      	beq.n	800f8cc <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800f8b8:	4b06      	ldr	r3, [pc, #24]	; (800f8d4 <send_cmd+0x7c>)
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	7afa      	ldrb	r2, [r7, #11]
 800f8be:	b292      	uxth	r2, r2
 800f8c0:	3204      	adds	r2, #4
 800f8c2:	b291      	uxth	r1, r2
 800f8c4:	f107 0218 	add.w	r2, r7, #24
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	4798      	blx	r3
  }
}
 800f8cc:	bf00      	nop
 800f8ce:	3798      	adds	r7, #152	; 0x98
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	200005c8 	.word	0x200005c8

0800f8d8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800f8e2:	e00a      	b.n	800f8fa <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800f8e4:	f107 030c 	add.w	r3, r7, #12
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	6838      	ldr	r0, [r7, #0]
 800f8ec:	f000 faea 	bl	800fec4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 fa51 	bl	800fd9c <list_insert_head>
  while (!list_is_empty(src_list))
 800f8fa:	6838      	ldr	r0, [r7, #0]
 800f8fc:	f000 fa2c 	bl	800fd58 <list_is_empty>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d0ee      	beq.n	800f8e4 <move_list+0xc>
  }
}
 800f906:	bf00      	nop
 800f908:	bf00      	nop
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f916:	e009      	b.n	800f92c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800f918:	1d3b      	adds	r3, r7, #4
 800f91a:	4619      	mov	r1, r3
 800f91c:	4809      	ldr	r0, [pc, #36]	; (800f944 <free_event_list+0x34>)
 800f91e:	f000 faaa 	bl	800fe76 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4619      	mov	r1, r3
 800f926:	4808      	ldr	r0, [pc, #32]	; (800f948 <free_event_list+0x38>)
 800f928:	f000 fa5e 	bl	800fde8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f92c:	4806      	ldr	r0, [pc, #24]	; (800f948 <free_event_list+0x38>)
 800f92e:	f000 faf0 	bl	800ff12 <list_get_size>
 800f932:	4603      	mov	r3, r0
 800f934:	2b01      	cmp	r3, #1
 800f936:	ddef      	ble.n	800f918 <free_event_list+0x8>
  }
}
 800f938:	bf00      	nop
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	200028a4 	.word	0x200028a4
 800f948:	2000289c 	.word	0x2000289c

0800f94c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d002      	beq.n	800f962 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800f95c:	4a18      	ldr	r2, [pc, #96]	; (800f9c0 <hci_init+0x74>)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800f962:	4818      	ldr	r0, [pc, #96]	; (800f9c4 <hci_init+0x78>)
 800f964:	f000 f9e8 	bl	800fd38 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800f968:	4817      	ldr	r0, [pc, #92]	; (800f9c8 <hci_init+0x7c>)
 800f96a:	f000 f9e5 	bl	800fd38 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800f96e:	f7f1 f879 	bl	8000a64 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f972:	2300      	movs	r3, #0
 800f974:	73fb      	strb	r3, [r7, #15]
 800f976:	e00c      	b.n	800f992 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f978:	7bfb      	ldrb	r3, [r7, #15]
 800f97a:	228c      	movs	r2, #140	; 0x8c
 800f97c:	fb02 f303 	mul.w	r3, r2, r3
 800f980:	4a12      	ldr	r2, [pc, #72]	; (800f9cc <hci_init+0x80>)
 800f982:	4413      	add	r3, r2
 800f984:	4619      	mov	r1, r3
 800f986:	480f      	ldr	r0, [pc, #60]	; (800f9c4 <hci_init+0x78>)
 800f988:	f000 fa2e 	bl	800fde8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	3301      	adds	r3, #1
 800f990:	73fb      	strb	r3, [r7, #15]
 800f992:	7bfb      	ldrb	r3, [r7, #15]
 800f994:	2b04      	cmp	r3, #4
 800f996:	d9ef      	bls.n	800f978 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800f998:	4b09      	ldr	r3, [pc, #36]	; (800f9c0 <hci_init+0x74>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d003      	beq.n	800f9a8 <hci_init+0x5c>
 800f9a0:	4b07      	ldr	r3, [pc, #28]	; (800f9c0 <hci_init+0x74>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f9a8:	4b05      	ldr	r3, [pc, #20]	; (800f9c0 <hci_init+0x74>)
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d002      	beq.n	800f9b6 <hci_init+0x6a>
 800f9b0:	4b03      	ldr	r3, [pc, #12]	; (800f9c0 <hci_init+0x74>)
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	4798      	blx	r3
}
 800f9b6:	bf00      	nop
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	200005c8 	.word	0x200005c8
 800f9c4:	2000289c 	.word	0x2000289c
 800f9c8:	200028a4 	.word	0x200028a4
 800f9cc:	2000030c 	.word	0x2000030c

0800f9d0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a0b      	ldr	r2, [pc, #44]	; (800fa0c <hci_register_io_bus+0x3c>)
 800f9de:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	4a09      	ldr	r2, [pc, #36]	; (800fa0c <hci_register_io_bus+0x3c>)
 800f9e6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	691b      	ldr	r3, [r3, #16]
 800f9ec:	4a07      	ldr	r2, [pc, #28]	; (800fa0c <hci_register_io_bus+0x3c>)
 800f9ee:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	699b      	ldr	r3, [r3, #24]
 800f9f4:	4a05      	ldr	r2, [pc, #20]	; (800fa0c <hci_register_io_bus+0x3c>)
 800f9f6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	4a03      	ldr	r2, [pc, #12]	; (800fa0c <hci_register_io_bus+0x3c>)
 800f9fe:	6093      	str	r3, [r2, #8]
}
 800fa00:	bf00      	nop
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	200005c8 	.word	0x200005c8

0800fa10 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b08e      	sub	sp, #56	; 0x38
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	885b      	ldrh	r3, [r3, #2]
 800fa20:	b21b      	sxth	r3, r3
 800fa22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa26:	b21a      	sxth	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	881b      	ldrh	r3, [r3, #0]
 800fa2c:	029b      	lsls	r3, r3, #10
 800fa2e:	b21b      	sxth	r3, r3
 800fa30:	4313      	orrs	r3, r2
 800fa32:	b21b      	sxth	r3, r3
 800fa34:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800fa36:	2300      	movs	r3, #0
 800fa38:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800fa3a:	f107 0308 	add.w	r3, r7, #8
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 f97a 	bl	800fd38 <list_init_head>

  free_event_list();
 800fa44:	f7ff ff64 	bl	800f910 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	8818      	ldrh	r0, [r3, #0]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	8859      	ldrh	r1, [r3, #2]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	b2da      	uxtb	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	f7ff fefd 	bl	800f858 <send_cmd>
  
  if (async)
 800fa5e:	78fb      	ldrb	r3, [r7, #3]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <hci_send_req+0x58>
  {
    return 0;
 800fa64:	2300      	movs	r3, #0
 800fa66:	e0e5      	b.n	800fc34 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800fa68:	f7f6 fa46 	bl	8005ef8 <HAL_GetTick>
 800fa6c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800fa6e:	f7f6 fa43 	bl	8005ef8 <HAL_GetTick>
 800fa72:	4602      	mov	r2, r0
 800fa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa76:	1ad3      	subs	r3, r2, r3
 800fa78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa7c:	f200 80b6 	bhi.w	800fbec <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800fa80:	486e      	ldr	r0, [pc, #440]	; (800fc3c <hci_send_req+0x22c>)
 800fa82:	f000 f969 	bl	800fd58 <list_is_empty>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d000      	beq.n	800fa8e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800fa8c:	e7ef      	b.n	800fa6e <hci_send_req+0x5e>
      {
        break;
 800fa8e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800fa90:	f107 0310 	add.w	r3, r7, #16
 800fa94:	4619      	mov	r1, r3
 800fa96:	4869      	ldr	r0, [pc, #420]	; (800fc3c <hci_send_req+0x22c>)
 800fa98:	f000 f9ed 	bl	800fe76 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	3308      	adds	r3, #8
 800faa0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	2b04      	cmp	r3, #4
 800faa8:	d17b      	bne.n	800fba2 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	3301      	adds	r3, #1
 800faae:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	3308      	adds	r3, #8
 800fab4:	3303      	adds	r3, #3
 800fab6:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fabe:	3b03      	subs	r3, #3
 800fac0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800fac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	2b3e      	cmp	r3, #62	; 0x3e
 800fac8:	d04d      	beq.n	800fb66 <hci_send_req+0x156>
 800faca:	2b3e      	cmp	r3, #62	; 0x3e
 800facc:	dc6b      	bgt.n	800fba6 <hci_send_req+0x196>
 800face:	2b10      	cmp	r3, #16
 800fad0:	f000 808e 	beq.w	800fbf0 <hci_send_req+0x1e0>
 800fad4:	2b10      	cmp	r3, #16
 800fad6:	dc66      	bgt.n	800fba6 <hci_send_req+0x196>
 800fad8:	2b0e      	cmp	r3, #14
 800fada:	d024      	beq.n	800fb26 <hci_send_req+0x116>
 800fadc:	2b0f      	cmp	r3, #15
 800fade:	d162      	bne.n	800fba6 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800fae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	885b      	ldrh	r3, [r3, #2]
 800fae8:	b29b      	uxth	r3, r3
 800faea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800faec:	429a      	cmp	r2, r3
 800faee:	f040 8081 	bne.w	800fbf4 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	2b0f      	cmp	r3, #15
 800faf8:	d004      	beq.n	800fb04 <hci_send_req+0xf4>
          if (cs->status) {
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d053      	beq.n	800fbaa <hci_send_req+0x19a>
            goto failed;
 800fb02:	e07a      	b.n	800fbfa <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	695a      	ldr	r2, [r3, #20]
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	bf28      	it	cs
 800fb0e:	461a      	movcs	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6918      	ldr	r0, [r3, #16]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	695b      	ldr	r3, [r3, #20]
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb20:	f000 fa4a 	bl	800ffb8 <memcpy>
        goto done;
 800fb24:	e07a      	b.n	800fc1c <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800fb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb28:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d15f      	bne.n	800fbf8 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	3303      	adds	r3, #3
 800fb3c:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	3b03      	subs	r3, #3
 800fb42:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	695a      	ldr	r2, [r3, #20]
 800fb48:	6a3b      	ldr	r3, [r7, #32]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	bf28      	it	cs
 800fb4e:	461a      	movcs	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6918      	ldr	r0, [r3, #16]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	695b      	ldr	r3, [r3, #20]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb60:	f000 fa2a 	bl	800ffb8 <memcpy>
        goto done;
 800fb64:	e05a      	b.n	800fc1c <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800fb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb68:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d11a      	bne.n	800fbae <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800fb78:	6a3b      	ldr	r3, [r7, #32]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	695a      	ldr	r2, [r3, #20]
 800fb82:	6a3b      	ldr	r3, [r7, #32]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	bf28      	it	cs
 800fb88:	461a      	movcs	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6918      	ldr	r0, [r3, #16]
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	1c59      	adds	r1, r3, #1
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	695b      	ldr	r3, [r3, #20]
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	f000 fa0c 	bl	800ffb8 <memcpy>
        goto done;
 800fba0:	e03c      	b.n	800fc1c <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800fba2:	bf00      	nop
 800fba4:	e004      	b.n	800fbb0 <hci_send_req+0x1a0>
        break;
 800fba6:	bf00      	nop
 800fba8:	e002      	b.n	800fbb0 <hci_send_req+0x1a0>
          break;
 800fbaa:	bf00      	nop
 800fbac:	e000      	b.n	800fbb0 <hci_send_req+0x1a0>
          break;
 800fbae:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800fbb0:	4823      	ldr	r0, [pc, #140]	; (800fc40 <hci_send_req+0x230>)
 800fbb2:	f000 f8d1 	bl	800fd58 <list_is_empty>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00d      	beq.n	800fbd8 <hci_send_req+0x1c8>
 800fbbc:	481f      	ldr	r0, [pc, #124]	; (800fc3c <hci_send_req+0x22c>)
 800fbbe:	f000 f8cb 	bl	800fd58 <list_is_empty>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d007      	beq.n	800fbd8 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	481c      	ldr	r0, [pc, #112]	; (800fc40 <hci_send_req+0x230>)
 800fbce:	f000 f90b 	bl	800fde8 <list_insert_tail>
      hciReadPacket=NULL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	613b      	str	r3, [r7, #16]
 800fbd6:	e008      	b.n	800fbea <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800fbd8:	693a      	ldr	r2, [r7, #16]
 800fbda:	f107 0308 	add.w	r3, r7, #8
 800fbde:	4611      	mov	r1, r2
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f000 f901 	bl	800fde8 <list_insert_tail>
      hciReadPacket=NULL;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	613b      	str	r3, [r7, #16]
  {
 800fbea:	e73d      	b.n	800fa68 <hci_send_req+0x58>
        goto failed;
 800fbec:	bf00      	nop
 800fbee:	e004      	b.n	800fbfa <hci_send_req+0x1ea>
        goto failed;
 800fbf0:	bf00      	nop
 800fbf2:	e002      	b.n	800fbfa <hci_send_req+0x1ea>
          goto failed;
 800fbf4:	bf00      	nop
 800fbf6:	e000      	b.n	800fbfa <hci_send_req+0x1ea>
          goto failed;
 800fbf8:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d004      	beq.n	800fc0a <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	4619      	mov	r1, r3
 800fc04:	480e      	ldr	r0, [pc, #56]	; (800fc40 <hci_send_req+0x230>)
 800fc06:	f000 f8c9 	bl	800fd9c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fc0a:	f107 0308 	add.w	r3, r7, #8
 800fc0e:	4619      	mov	r1, r3
 800fc10:	480a      	ldr	r0, [pc, #40]	; (800fc3c <hci_send_req+0x22c>)
 800fc12:	f7ff fe61 	bl	800f8d8 <move_list>

  return -1;
 800fc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc1a:	e00b      	b.n	800fc34 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	4619      	mov	r1, r3
 800fc20:	4807      	ldr	r0, [pc, #28]	; (800fc40 <hci_send_req+0x230>)
 800fc22:	f000 f8bb 	bl	800fd9c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800fc26:	f107 0308 	add.w	r3, r7, #8
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	4803      	ldr	r0, [pc, #12]	; (800fc3c <hci_send_req+0x22c>)
 800fc2e:	f7ff fe53 	bl	800f8d8 <move_list>

  return 0;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3738      	adds	r7, #56	; 0x38
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	200028a4 	.word	0x200028a4
 800fc40:	2000289c 	.word	0x2000289c

0800fc44 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800fc4e:	e013      	b.n	800fc78 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800fc50:	1d3b      	adds	r3, r7, #4
 800fc52:	4619      	mov	r1, r3
 800fc54:	480e      	ldr	r0, [pc, #56]	; (800fc90 <hci_user_evt_proc+0x4c>)
 800fc56:	f000 f90e 	bl	800fe76 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800fc5a:	4b0e      	ldr	r3, [pc, #56]	; (800fc94 <hci_user_evt_proc+0x50>)
 800fc5c:	69db      	ldr	r3, [r3, #28]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d005      	beq.n	800fc6e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800fc62:	4b0c      	ldr	r3, [pc, #48]	; (800fc94 <hci_user_evt_proc+0x50>)
 800fc64:	69db      	ldr	r3, [r3, #28]
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	3208      	adds	r2, #8
 800fc6a:	4610      	mov	r0, r2
 800fc6c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4619      	mov	r1, r3
 800fc72:	4809      	ldr	r0, [pc, #36]	; (800fc98 <hci_user_evt_proc+0x54>)
 800fc74:	f000 f8b8 	bl	800fde8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800fc78:	4805      	ldr	r0, [pc, #20]	; (800fc90 <hci_user_evt_proc+0x4c>)
 800fc7a:	f000 f86d 	bl	800fd58 <list_is_empty>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d0e5      	beq.n	800fc50 <hci_user_evt_proc+0xc>
  }
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	200028a4 	.word	0x200028a4
 800fc94:	200005c8 	.word	0x200005c8
 800fc98:	2000289c 	.word	0x2000289c

0800fc9c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b086      	sub	sp, #24
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800fca4:	2300      	movs	r3, #0
 800fca6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800fcac:	481f      	ldr	r0, [pc, #124]	; (800fd2c <hci_notify_asynch_evt+0x90>)
 800fcae:	f000 f853 	bl	800fd58 <list_is_empty>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d132      	bne.n	800fd1e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800fcb8:	f107 030c 	add.w	r3, r7, #12
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	481b      	ldr	r0, [pc, #108]	; (800fd2c <hci_notify_asynch_evt+0x90>)
 800fcc0:	f000 f8d9 	bl	800fe76 <list_remove_head>
    
    if (hciContext.io.Receive)
 800fcc4:	4b1a      	ldr	r3, [pc, #104]	; (800fd30 <hci_notify_asynch_evt+0x94>)
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d02a      	beq.n	800fd22 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800fccc:	4b18      	ldr	r3, [pc, #96]	; (800fd30 <hci_notify_asynch_evt+0x94>)
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	68fa      	ldr	r2, [r7, #12]
 800fcd2:	3208      	adds	r2, #8
 800fcd4:	2180      	movs	r1, #128	; 0x80
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	4798      	blx	r3
 800fcda:	4603      	mov	r3, r0
 800fcdc:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800fcde:	7cfb      	ldrb	r3, [r7, #19]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d016      	beq.n	800fd12 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	7cfa      	ldrb	r2, [r7, #19]
 800fce8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7ff fd91 	bl	800f816 <verify_packet>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d105      	bne.n	800fd06 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	480d      	ldr	r0, [pc, #52]	; (800fd34 <hci_notify_asynch_evt+0x98>)
 800fd00:	f000 f872 	bl	800fde8 <list_insert_tail>
 800fd04:	e00d      	b.n	800fd22 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	4619      	mov	r1, r3
 800fd0a:	4808      	ldr	r0, [pc, #32]	; (800fd2c <hci_notify_asynch_evt+0x90>)
 800fd0c:	f000 f846 	bl	800fd9c <list_insert_head>
 800fd10:	e007      	b.n	800fd22 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4619      	mov	r1, r3
 800fd16:	4805      	ldr	r0, [pc, #20]	; (800fd2c <hci_notify_asynch_evt+0x90>)
 800fd18:	f000 f840 	bl	800fd9c <list_insert_head>
 800fd1c:	e001      	b.n	800fd22 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800fd1e:	2301      	movs	r3, #1
 800fd20:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800fd22:	697b      	ldr	r3, [r7, #20]

}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3718      	adds	r7, #24
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	2000289c 	.word	0x2000289c
 800fd30:	200005c8 	.word	0x200005c8
 800fd34:	200028a4 	.word	0x200028a4

0800fd38 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	605a      	str	r2, [r3, #4]
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd60:	f3ef 8310 	mrs	r3, PRIMASK
 800fd64:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd66:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd6a:	b672      	cpsid	i
}
 800fd6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d102      	bne.n	800fd7e <list_is_empty+0x26>
  {
    return_value = 1;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	75fb      	strb	r3, [r7, #23]
 800fd7c:	e001      	b.n	800fd82 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	75fb      	strb	r3, [r7, #23]
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	f383 8810 	msr	PRIMASK, r3
}
 800fd8c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800fd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	371c      	adds	r7, #28
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fda6:	f3ef 8310 	mrs	r3, PRIMASK
 800fdaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdac:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdb0:	b672      	cpsid	i
}
 800fdb2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	683a      	ldr	r2, [r7, #0]
 800fdce:	605a      	str	r2, [r3, #4]
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	f383 8810 	msr	PRIMASK, r3
}
 800fdda:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fddc:	bf00      	nop
 800fdde:	371c      	adds	r7, #28
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b087      	sub	sp, #28
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdf2:	f3ef 8310 	mrs	r3, PRIMASK
 800fdf6:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdfc:	b672      	cpsid	i
}
 800fdfe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	685a      	ldr	r2, [r3, #4]
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	683a      	ldr	r2, [r7, #0]
 800fe1a:	601a      	str	r2, [r3, #0]
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	f383 8810 	msr	PRIMASK, r3
}
 800fe26:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fe28:	bf00      	nop
 800fe2a:	371c      	adds	r7, #28
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b087      	sub	sp, #28
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe3c:	f3ef 8310 	mrs	r3, PRIMASK
 800fe40:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe42:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe46:	b672      	cpsid	i
}
 800fe48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	6812      	ldr	r2, [r2, #0]
 800fe52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	6852      	ldr	r2, [r2, #4]
 800fe5c:	605a      	str	r2, [r3, #4]
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	f383 8810 	msr	PRIMASK, r3
}
 800fe68:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800fe6a:	bf00      	nop
 800fe6c:	371c      	adds	r7, #28
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b086      	sub	sp, #24
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe80:	f3ef 8310 	mrs	r3, PRIMASK
 800fe84:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe86:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe8a:	b672      	cpsid	i
}
 800fe8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff ffca 	bl	800fe34 <list_remove_node>
  (*node)->next = NULL;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2200      	movs	r2, #0
 800feae:	605a      	str	r2, [r3, #4]
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	f383 8810 	msr	PRIMASK, r3
}
 800feba:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800febc:	bf00      	nop
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fece:	f3ef 8310 	mrs	r3, PRIMASK
 800fed2:	60fb      	str	r3, [r7, #12]
  return(result);
 800fed4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fed8:	b672      	cpsid	i
}
 800feda:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	685a      	ldr	r2, [r3, #4]
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	4618      	mov	r0, r3
 800feea:	f7ff ffa3 	bl	800fe34 <list_remove_node>
  (*node)->next = NULL;
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2200      	movs	r2, #0
 800fefc:	605a      	str	r2, [r3, #4]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	f383 8810 	msr	PRIMASK, r3
}
 800ff08:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ff0a:	bf00      	nop
 800ff0c:	3718      	adds	r7, #24
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800ff12:	b480      	push	{r7}
 800ff14:	b089      	sub	sp, #36	; 0x24
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
  int size = 0;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff22:	613b      	str	r3, [r7, #16]
  return(result);
 800ff24:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ff26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff28:	b672      	cpsid	i
}
 800ff2a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800ff32:	e005      	b.n	800ff40 <list_get_size+0x2e>
  {
    size++;
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	3301      	adds	r3, #1
 800ff38:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800ff40:	69ba      	ldr	r2, [r7, #24]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d1f5      	bne.n	800ff34 <list_get_size+0x22>
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f383 8810 	msr	PRIMASK, r3
}
 800ff52:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800ff54:	69fb      	ldr	r3, [r7, #28]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3724      	adds	r7, #36	; 0x24
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
	...

0800ff64 <__errno>:
 800ff64:	4b01      	ldr	r3, [pc, #4]	; (800ff6c <__errno+0x8>)
 800ff66:	6818      	ldr	r0, [r3, #0]
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop
 800ff6c:	200000a0 	.word	0x200000a0

0800ff70 <__libc_init_array>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	4d0d      	ldr	r5, [pc, #52]	; (800ffa8 <__libc_init_array+0x38>)
 800ff74:	4c0d      	ldr	r4, [pc, #52]	; (800ffac <__libc_init_array+0x3c>)
 800ff76:	1b64      	subs	r4, r4, r5
 800ff78:	10a4      	asrs	r4, r4, #2
 800ff7a:	2600      	movs	r6, #0
 800ff7c:	42a6      	cmp	r6, r4
 800ff7e:	d109      	bne.n	800ff94 <__libc_init_array+0x24>
 800ff80:	4d0b      	ldr	r5, [pc, #44]	; (800ffb0 <__libc_init_array+0x40>)
 800ff82:	4c0c      	ldr	r4, [pc, #48]	; (800ffb4 <__libc_init_array+0x44>)
 800ff84:	f000 fc4e 	bl	8010824 <_init>
 800ff88:	1b64      	subs	r4, r4, r5
 800ff8a:	10a4      	asrs	r4, r4, #2
 800ff8c:	2600      	movs	r6, #0
 800ff8e:	42a6      	cmp	r6, r4
 800ff90:	d105      	bne.n	800ff9e <__libc_init_array+0x2e>
 800ff92:	bd70      	pop	{r4, r5, r6, pc}
 800ff94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff98:	4798      	blx	r3
 800ff9a:	3601      	adds	r6, #1
 800ff9c:	e7ee      	b.n	800ff7c <__libc_init_array+0xc>
 800ff9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffa2:	4798      	blx	r3
 800ffa4:	3601      	adds	r6, #1
 800ffa6:	e7f2      	b.n	800ff8e <__libc_init_array+0x1e>
 800ffa8:	08010e70 	.word	0x08010e70
 800ffac:	08010e70 	.word	0x08010e70
 800ffb0:	08010e70 	.word	0x08010e70
 800ffb4:	08010e74 	.word	0x08010e74

0800ffb8 <memcpy>:
 800ffb8:	440a      	add	r2, r1
 800ffba:	4291      	cmp	r1, r2
 800ffbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ffc0:	d100      	bne.n	800ffc4 <memcpy+0xc>
 800ffc2:	4770      	bx	lr
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffce:	4291      	cmp	r1, r2
 800ffd0:	d1f9      	bne.n	800ffc6 <memcpy+0xe>
 800ffd2:	bd10      	pop	{r4, pc}

0800ffd4 <memset>:
 800ffd4:	4402      	add	r2, r0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d100      	bne.n	800ffde <memset+0xa>
 800ffdc:	4770      	bx	lr
 800ffde:	f803 1b01 	strb.w	r1, [r3], #1
 800ffe2:	e7f9      	b.n	800ffd8 <memset+0x4>

0800ffe4 <_free_r>:
 800ffe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffe6:	2900      	cmp	r1, #0
 800ffe8:	d048      	beq.n	801007c <_free_r+0x98>
 800ffea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffee:	9001      	str	r0, [sp, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f1a1 0404 	sub.w	r4, r1, #4
 800fff6:	bfb8      	it	lt
 800fff8:	18e4      	addlt	r4, r4, r3
 800fffa:	f000 f8cd 	bl	8010198 <__malloc_lock>
 800fffe:	4a20      	ldr	r2, [pc, #128]	; (8010080 <_free_r+0x9c>)
 8010000:	9801      	ldr	r0, [sp, #4]
 8010002:	6813      	ldr	r3, [r2, #0]
 8010004:	4615      	mov	r5, r2
 8010006:	b933      	cbnz	r3, 8010016 <_free_r+0x32>
 8010008:	6063      	str	r3, [r4, #4]
 801000a:	6014      	str	r4, [r2, #0]
 801000c:	b003      	add	sp, #12
 801000e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010012:	f000 b8c7 	b.w	80101a4 <__malloc_unlock>
 8010016:	42a3      	cmp	r3, r4
 8010018:	d90b      	bls.n	8010032 <_free_r+0x4e>
 801001a:	6821      	ldr	r1, [r4, #0]
 801001c:	1862      	adds	r2, r4, r1
 801001e:	4293      	cmp	r3, r2
 8010020:	bf04      	itt	eq
 8010022:	681a      	ldreq	r2, [r3, #0]
 8010024:	685b      	ldreq	r3, [r3, #4]
 8010026:	6063      	str	r3, [r4, #4]
 8010028:	bf04      	itt	eq
 801002a:	1852      	addeq	r2, r2, r1
 801002c:	6022      	streq	r2, [r4, #0]
 801002e:	602c      	str	r4, [r5, #0]
 8010030:	e7ec      	b.n	801000c <_free_r+0x28>
 8010032:	461a      	mov	r2, r3
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	b10b      	cbz	r3, 801003c <_free_r+0x58>
 8010038:	42a3      	cmp	r3, r4
 801003a:	d9fa      	bls.n	8010032 <_free_r+0x4e>
 801003c:	6811      	ldr	r1, [r2, #0]
 801003e:	1855      	adds	r5, r2, r1
 8010040:	42a5      	cmp	r5, r4
 8010042:	d10b      	bne.n	801005c <_free_r+0x78>
 8010044:	6824      	ldr	r4, [r4, #0]
 8010046:	4421      	add	r1, r4
 8010048:	1854      	adds	r4, r2, r1
 801004a:	42a3      	cmp	r3, r4
 801004c:	6011      	str	r1, [r2, #0]
 801004e:	d1dd      	bne.n	801000c <_free_r+0x28>
 8010050:	681c      	ldr	r4, [r3, #0]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	6053      	str	r3, [r2, #4]
 8010056:	4421      	add	r1, r4
 8010058:	6011      	str	r1, [r2, #0]
 801005a:	e7d7      	b.n	801000c <_free_r+0x28>
 801005c:	d902      	bls.n	8010064 <_free_r+0x80>
 801005e:	230c      	movs	r3, #12
 8010060:	6003      	str	r3, [r0, #0]
 8010062:	e7d3      	b.n	801000c <_free_r+0x28>
 8010064:	6825      	ldr	r5, [r4, #0]
 8010066:	1961      	adds	r1, r4, r5
 8010068:	428b      	cmp	r3, r1
 801006a:	bf04      	itt	eq
 801006c:	6819      	ldreq	r1, [r3, #0]
 801006e:	685b      	ldreq	r3, [r3, #4]
 8010070:	6063      	str	r3, [r4, #4]
 8010072:	bf04      	itt	eq
 8010074:	1949      	addeq	r1, r1, r5
 8010076:	6021      	streq	r1, [r4, #0]
 8010078:	6054      	str	r4, [r2, #4]
 801007a:	e7c7      	b.n	801000c <_free_r+0x28>
 801007c:	b003      	add	sp, #12
 801007e:	bd30      	pop	{r4, r5, pc}
 8010080:	200005e8 	.word	0x200005e8

08010084 <_malloc_r>:
 8010084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010086:	1ccd      	adds	r5, r1, #3
 8010088:	f025 0503 	bic.w	r5, r5, #3
 801008c:	3508      	adds	r5, #8
 801008e:	2d0c      	cmp	r5, #12
 8010090:	bf38      	it	cc
 8010092:	250c      	movcc	r5, #12
 8010094:	2d00      	cmp	r5, #0
 8010096:	4606      	mov	r6, r0
 8010098:	db01      	blt.n	801009e <_malloc_r+0x1a>
 801009a:	42a9      	cmp	r1, r5
 801009c:	d903      	bls.n	80100a6 <_malloc_r+0x22>
 801009e:	230c      	movs	r3, #12
 80100a0:	6033      	str	r3, [r6, #0]
 80100a2:	2000      	movs	r0, #0
 80100a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100a6:	f000 f877 	bl	8010198 <__malloc_lock>
 80100aa:	4921      	ldr	r1, [pc, #132]	; (8010130 <_malloc_r+0xac>)
 80100ac:	680a      	ldr	r2, [r1, #0]
 80100ae:	4614      	mov	r4, r2
 80100b0:	b99c      	cbnz	r4, 80100da <_malloc_r+0x56>
 80100b2:	4f20      	ldr	r7, [pc, #128]	; (8010134 <_malloc_r+0xb0>)
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	b923      	cbnz	r3, 80100c2 <_malloc_r+0x3e>
 80100b8:	4621      	mov	r1, r4
 80100ba:	4630      	mov	r0, r6
 80100bc:	f000 f83c 	bl	8010138 <_sbrk_r>
 80100c0:	6038      	str	r0, [r7, #0]
 80100c2:	4629      	mov	r1, r5
 80100c4:	4630      	mov	r0, r6
 80100c6:	f000 f837 	bl	8010138 <_sbrk_r>
 80100ca:	1c43      	adds	r3, r0, #1
 80100cc:	d123      	bne.n	8010116 <_malloc_r+0x92>
 80100ce:	230c      	movs	r3, #12
 80100d0:	6033      	str	r3, [r6, #0]
 80100d2:	4630      	mov	r0, r6
 80100d4:	f000 f866 	bl	80101a4 <__malloc_unlock>
 80100d8:	e7e3      	b.n	80100a2 <_malloc_r+0x1e>
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	1b5b      	subs	r3, r3, r5
 80100de:	d417      	bmi.n	8010110 <_malloc_r+0x8c>
 80100e0:	2b0b      	cmp	r3, #11
 80100e2:	d903      	bls.n	80100ec <_malloc_r+0x68>
 80100e4:	6023      	str	r3, [r4, #0]
 80100e6:	441c      	add	r4, r3
 80100e8:	6025      	str	r5, [r4, #0]
 80100ea:	e004      	b.n	80100f6 <_malloc_r+0x72>
 80100ec:	6863      	ldr	r3, [r4, #4]
 80100ee:	42a2      	cmp	r2, r4
 80100f0:	bf0c      	ite	eq
 80100f2:	600b      	streq	r3, [r1, #0]
 80100f4:	6053      	strne	r3, [r2, #4]
 80100f6:	4630      	mov	r0, r6
 80100f8:	f000 f854 	bl	80101a4 <__malloc_unlock>
 80100fc:	f104 000b 	add.w	r0, r4, #11
 8010100:	1d23      	adds	r3, r4, #4
 8010102:	f020 0007 	bic.w	r0, r0, #7
 8010106:	1ac2      	subs	r2, r0, r3
 8010108:	d0cc      	beq.n	80100a4 <_malloc_r+0x20>
 801010a:	1a1b      	subs	r3, r3, r0
 801010c:	50a3      	str	r3, [r4, r2]
 801010e:	e7c9      	b.n	80100a4 <_malloc_r+0x20>
 8010110:	4622      	mov	r2, r4
 8010112:	6864      	ldr	r4, [r4, #4]
 8010114:	e7cc      	b.n	80100b0 <_malloc_r+0x2c>
 8010116:	1cc4      	adds	r4, r0, #3
 8010118:	f024 0403 	bic.w	r4, r4, #3
 801011c:	42a0      	cmp	r0, r4
 801011e:	d0e3      	beq.n	80100e8 <_malloc_r+0x64>
 8010120:	1a21      	subs	r1, r4, r0
 8010122:	4630      	mov	r0, r6
 8010124:	f000 f808 	bl	8010138 <_sbrk_r>
 8010128:	3001      	adds	r0, #1
 801012a:	d1dd      	bne.n	80100e8 <_malloc_r+0x64>
 801012c:	e7cf      	b.n	80100ce <_malloc_r+0x4a>
 801012e:	bf00      	nop
 8010130:	200005e8 	.word	0x200005e8
 8010134:	200005ec 	.word	0x200005ec

08010138 <_sbrk_r>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4d06      	ldr	r5, [pc, #24]	; (8010154 <_sbrk_r+0x1c>)
 801013c:	2300      	movs	r3, #0
 801013e:	4604      	mov	r4, r0
 8010140:	4608      	mov	r0, r1
 8010142:	602b      	str	r3, [r5, #0]
 8010144:	f7f2 fe4a 	bl	8002ddc <_sbrk>
 8010148:	1c43      	adds	r3, r0, #1
 801014a:	d102      	bne.n	8010152 <_sbrk_r+0x1a>
 801014c:	682b      	ldr	r3, [r5, #0]
 801014e:	b103      	cbz	r3, 8010152 <_sbrk_r+0x1a>
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	bd38      	pop	{r3, r4, r5, pc}
 8010154:	200028ac 	.word	0x200028ac

08010158 <siprintf>:
 8010158:	b40e      	push	{r1, r2, r3}
 801015a:	b500      	push	{lr}
 801015c:	b09c      	sub	sp, #112	; 0x70
 801015e:	ab1d      	add	r3, sp, #116	; 0x74
 8010160:	9002      	str	r0, [sp, #8]
 8010162:	9006      	str	r0, [sp, #24]
 8010164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010168:	4809      	ldr	r0, [pc, #36]	; (8010190 <siprintf+0x38>)
 801016a:	9107      	str	r1, [sp, #28]
 801016c:	9104      	str	r1, [sp, #16]
 801016e:	4909      	ldr	r1, [pc, #36]	; (8010194 <siprintf+0x3c>)
 8010170:	f853 2b04 	ldr.w	r2, [r3], #4
 8010174:	9105      	str	r1, [sp, #20]
 8010176:	6800      	ldr	r0, [r0, #0]
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	a902      	add	r1, sp, #8
 801017c:	f000 f874 	bl	8010268 <_svfiprintf_r>
 8010180:	9b02      	ldr	r3, [sp, #8]
 8010182:	2200      	movs	r2, #0
 8010184:	701a      	strb	r2, [r3, #0]
 8010186:	b01c      	add	sp, #112	; 0x70
 8010188:	f85d eb04 	ldr.w	lr, [sp], #4
 801018c:	b003      	add	sp, #12
 801018e:	4770      	bx	lr
 8010190:	200000a0 	.word	0x200000a0
 8010194:	ffff0208 	.word	0xffff0208

08010198 <__malloc_lock>:
 8010198:	4801      	ldr	r0, [pc, #4]	; (80101a0 <__malloc_lock+0x8>)
 801019a:	f000 baf9 	b.w	8010790 <__retarget_lock_acquire_recursive>
 801019e:	bf00      	nop
 80101a0:	200028b4 	.word	0x200028b4

080101a4 <__malloc_unlock>:
 80101a4:	4801      	ldr	r0, [pc, #4]	; (80101ac <__malloc_unlock+0x8>)
 80101a6:	f000 baf4 	b.w	8010792 <__retarget_lock_release_recursive>
 80101aa:	bf00      	nop
 80101ac:	200028b4 	.word	0x200028b4

080101b0 <__ssputs_r>:
 80101b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b4:	688e      	ldr	r6, [r1, #8]
 80101b6:	429e      	cmp	r6, r3
 80101b8:	4682      	mov	sl, r0
 80101ba:	460c      	mov	r4, r1
 80101bc:	4690      	mov	r8, r2
 80101be:	461f      	mov	r7, r3
 80101c0:	d838      	bhi.n	8010234 <__ssputs_r+0x84>
 80101c2:	898a      	ldrh	r2, [r1, #12]
 80101c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80101c8:	d032      	beq.n	8010230 <__ssputs_r+0x80>
 80101ca:	6825      	ldr	r5, [r4, #0]
 80101cc:	6909      	ldr	r1, [r1, #16]
 80101ce:	eba5 0901 	sub.w	r9, r5, r1
 80101d2:	6965      	ldr	r5, [r4, #20]
 80101d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101dc:	3301      	adds	r3, #1
 80101de:	444b      	add	r3, r9
 80101e0:	106d      	asrs	r5, r5, #1
 80101e2:	429d      	cmp	r5, r3
 80101e4:	bf38      	it	cc
 80101e6:	461d      	movcc	r5, r3
 80101e8:	0553      	lsls	r3, r2, #21
 80101ea:	d531      	bpl.n	8010250 <__ssputs_r+0xa0>
 80101ec:	4629      	mov	r1, r5
 80101ee:	f7ff ff49 	bl	8010084 <_malloc_r>
 80101f2:	4606      	mov	r6, r0
 80101f4:	b950      	cbnz	r0, 801020c <__ssputs_r+0x5c>
 80101f6:	230c      	movs	r3, #12
 80101f8:	f8ca 3000 	str.w	r3, [sl]
 80101fc:	89a3      	ldrh	r3, [r4, #12]
 80101fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010202:	81a3      	strh	r3, [r4, #12]
 8010204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801020c:	6921      	ldr	r1, [r4, #16]
 801020e:	464a      	mov	r2, r9
 8010210:	f7ff fed2 	bl	800ffb8 <memcpy>
 8010214:	89a3      	ldrh	r3, [r4, #12]
 8010216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801021a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801021e:	81a3      	strh	r3, [r4, #12]
 8010220:	6126      	str	r6, [r4, #16]
 8010222:	6165      	str	r5, [r4, #20]
 8010224:	444e      	add	r6, r9
 8010226:	eba5 0509 	sub.w	r5, r5, r9
 801022a:	6026      	str	r6, [r4, #0]
 801022c:	60a5      	str	r5, [r4, #8]
 801022e:	463e      	mov	r6, r7
 8010230:	42be      	cmp	r6, r7
 8010232:	d900      	bls.n	8010236 <__ssputs_r+0x86>
 8010234:	463e      	mov	r6, r7
 8010236:	4632      	mov	r2, r6
 8010238:	6820      	ldr	r0, [r4, #0]
 801023a:	4641      	mov	r1, r8
 801023c:	f000 faaa 	bl	8010794 <memmove>
 8010240:	68a3      	ldr	r3, [r4, #8]
 8010242:	6822      	ldr	r2, [r4, #0]
 8010244:	1b9b      	subs	r3, r3, r6
 8010246:	4432      	add	r2, r6
 8010248:	60a3      	str	r3, [r4, #8]
 801024a:	6022      	str	r2, [r4, #0]
 801024c:	2000      	movs	r0, #0
 801024e:	e7db      	b.n	8010208 <__ssputs_r+0x58>
 8010250:	462a      	mov	r2, r5
 8010252:	f000 fab9 	bl	80107c8 <_realloc_r>
 8010256:	4606      	mov	r6, r0
 8010258:	2800      	cmp	r0, #0
 801025a:	d1e1      	bne.n	8010220 <__ssputs_r+0x70>
 801025c:	6921      	ldr	r1, [r4, #16]
 801025e:	4650      	mov	r0, sl
 8010260:	f7ff fec0 	bl	800ffe4 <_free_r>
 8010264:	e7c7      	b.n	80101f6 <__ssputs_r+0x46>
	...

08010268 <_svfiprintf_r>:
 8010268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026c:	4698      	mov	r8, r3
 801026e:	898b      	ldrh	r3, [r1, #12]
 8010270:	061b      	lsls	r3, r3, #24
 8010272:	b09d      	sub	sp, #116	; 0x74
 8010274:	4607      	mov	r7, r0
 8010276:	460d      	mov	r5, r1
 8010278:	4614      	mov	r4, r2
 801027a:	d50e      	bpl.n	801029a <_svfiprintf_r+0x32>
 801027c:	690b      	ldr	r3, [r1, #16]
 801027e:	b963      	cbnz	r3, 801029a <_svfiprintf_r+0x32>
 8010280:	2140      	movs	r1, #64	; 0x40
 8010282:	f7ff feff 	bl	8010084 <_malloc_r>
 8010286:	6028      	str	r0, [r5, #0]
 8010288:	6128      	str	r0, [r5, #16]
 801028a:	b920      	cbnz	r0, 8010296 <_svfiprintf_r+0x2e>
 801028c:	230c      	movs	r3, #12
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010294:	e0d1      	b.n	801043a <_svfiprintf_r+0x1d2>
 8010296:	2340      	movs	r3, #64	; 0x40
 8010298:	616b      	str	r3, [r5, #20]
 801029a:	2300      	movs	r3, #0
 801029c:	9309      	str	r3, [sp, #36]	; 0x24
 801029e:	2320      	movs	r3, #32
 80102a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80102a8:	2330      	movs	r3, #48	; 0x30
 80102aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010454 <_svfiprintf_r+0x1ec>
 80102ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102b2:	f04f 0901 	mov.w	r9, #1
 80102b6:	4623      	mov	r3, r4
 80102b8:	469a      	mov	sl, r3
 80102ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102be:	b10a      	cbz	r2, 80102c4 <_svfiprintf_r+0x5c>
 80102c0:	2a25      	cmp	r2, #37	; 0x25
 80102c2:	d1f9      	bne.n	80102b8 <_svfiprintf_r+0x50>
 80102c4:	ebba 0b04 	subs.w	fp, sl, r4
 80102c8:	d00b      	beq.n	80102e2 <_svfiprintf_r+0x7a>
 80102ca:	465b      	mov	r3, fp
 80102cc:	4622      	mov	r2, r4
 80102ce:	4629      	mov	r1, r5
 80102d0:	4638      	mov	r0, r7
 80102d2:	f7ff ff6d 	bl	80101b0 <__ssputs_r>
 80102d6:	3001      	adds	r0, #1
 80102d8:	f000 80aa 	beq.w	8010430 <_svfiprintf_r+0x1c8>
 80102dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102de:	445a      	add	r2, fp
 80102e0:	9209      	str	r2, [sp, #36]	; 0x24
 80102e2:	f89a 3000 	ldrb.w	r3, [sl]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 80a2 	beq.w	8010430 <_svfiprintf_r+0x1c8>
 80102ec:	2300      	movs	r3, #0
 80102ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80102f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102f6:	f10a 0a01 	add.w	sl, sl, #1
 80102fa:	9304      	str	r3, [sp, #16]
 80102fc:	9307      	str	r3, [sp, #28]
 80102fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010302:	931a      	str	r3, [sp, #104]	; 0x68
 8010304:	4654      	mov	r4, sl
 8010306:	2205      	movs	r2, #5
 8010308:	f814 1b01 	ldrb.w	r1, [r4], #1
 801030c:	4851      	ldr	r0, [pc, #324]	; (8010454 <_svfiprintf_r+0x1ec>)
 801030e:	f7ef ff5f 	bl	80001d0 <memchr>
 8010312:	9a04      	ldr	r2, [sp, #16]
 8010314:	b9d8      	cbnz	r0, 801034e <_svfiprintf_r+0xe6>
 8010316:	06d0      	lsls	r0, r2, #27
 8010318:	bf44      	itt	mi
 801031a:	2320      	movmi	r3, #32
 801031c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010320:	0711      	lsls	r1, r2, #28
 8010322:	bf44      	itt	mi
 8010324:	232b      	movmi	r3, #43	; 0x2b
 8010326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801032a:	f89a 3000 	ldrb.w	r3, [sl]
 801032e:	2b2a      	cmp	r3, #42	; 0x2a
 8010330:	d015      	beq.n	801035e <_svfiprintf_r+0xf6>
 8010332:	9a07      	ldr	r2, [sp, #28]
 8010334:	4654      	mov	r4, sl
 8010336:	2000      	movs	r0, #0
 8010338:	f04f 0c0a 	mov.w	ip, #10
 801033c:	4621      	mov	r1, r4
 801033e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010342:	3b30      	subs	r3, #48	; 0x30
 8010344:	2b09      	cmp	r3, #9
 8010346:	d94e      	bls.n	80103e6 <_svfiprintf_r+0x17e>
 8010348:	b1b0      	cbz	r0, 8010378 <_svfiprintf_r+0x110>
 801034a:	9207      	str	r2, [sp, #28]
 801034c:	e014      	b.n	8010378 <_svfiprintf_r+0x110>
 801034e:	eba0 0308 	sub.w	r3, r0, r8
 8010352:	fa09 f303 	lsl.w	r3, r9, r3
 8010356:	4313      	orrs	r3, r2
 8010358:	9304      	str	r3, [sp, #16]
 801035a:	46a2      	mov	sl, r4
 801035c:	e7d2      	b.n	8010304 <_svfiprintf_r+0x9c>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	1d19      	adds	r1, r3, #4
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	9103      	str	r1, [sp, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	bfbb      	ittet	lt
 801036a:	425b      	neglt	r3, r3
 801036c:	f042 0202 	orrlt.w	r2, r2, #2
 8010370:	9307      	strge	r3, [sp, #28]
 8010372:	9307      	strlt	r3, [sp, #28]
 8010374:	bfb8      	it	lt
 8010376:	9204      	strlt	r2, [sp, #16]
 8010378:	7823      	ldrb	r3, [r4, #0]
 801037a:	2b2e      	cmp	r3, #46	; 0x2e
 801037c:	d10c      	bne.n	8010398 <_svfiprintf_r+0x130>
 801037e:	7863      	ldrb	r3, [r4, #1]
 8010380:	2b2a      	cmp	r3, #42	; 0x2a
 8010382:	d135      	bne.n	80103f0 <_svfiprintf_r+0x188>
 8010384:	9b03      	ldr	r3, [sp, #12]
 8010386:	1d1a      	adds	r2, r3, #4
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	9203      	str	r2, [sp, #12]
 801038c:	2b00      	cmp	r3, #0
 801038e:	bfb8      	it	lt
 8010390:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010394:	3402      	adds	r4, #2
 8010396:	9305      	str	r3, [sp, #20]
 8010398:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010464 <_svfiprintf_r+0x1fc>
 801039c:	7821      	ldrb	r1, [r4, #0]
 801039e:	2203      	movs	r2, #3
 80103a0:	4650      	mov	r0, sl
 80103a2:	f7ef ff15 	bl	80001d0 <memchr>
 80103a6:	b140      	cbz	r0, 80103ba <_svfiprintf_r+0x152>
 80103a8:	2340      	movs	r3, #64	; 0x40
 80103aa:	eba0 000a 	sub.w	r0, r0, sl
 80103ae:	fa03 f000 	lsl.w	r0, r3, r0
 80103b2:	9b04      	ldr	r3, [sp, #16]
 80103b4:	4303      	orrs	r3, r0
 80103b6:	3401      	adds	r4, #1
 80103b8:	9304      	str	r3, [sp, #16]
 80103ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103be:	4826      	ldr	r0, [pc, #152]	; (8010458 <_svfiprintf_r+0x1f0>)
 80103c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103c4:	2206      	movs	r2, #6
 80103c6:	f7ef ff03 	bl	80001d0 <memchr>
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d038      	beq.n	8010440 <_svfiprintf_r+0x1d8>
 80103ce:	4b23      	ldr	r3, [pc, #140]	; (801045c <_svfiprintf_r+0x1f4>)
 80103d0:	bb1b      	cbnz	r3, 801041a <_svfiprintf_r+0x1b2>
 80103d2:	9b03      	ldr	r3, [sp, #12]
 80103d4:	3307      	adds	r3, #7
 80103d6:	f023 0307 	bic.w	r3, r3, #7
 80103da:	3308      	adds	r3, #8
 80103dc:	9303      	str	r3, [sp, #12]
 80103de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e0:	4433      	add	r3, r6
 80103e2:	9309      	str	r3, [sp, #36]	; 0x24
 80103e4:	e767      	b.n	80102b6 <_svfiprintf_r+0x4e>
 80103e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80103ea:	460c      	mov	r4, r1
 80103ec:	2001      	movs	r0, #1
 80103ee:	e7a5      	b.n	801033c <_svfiprintf_r+0xd4>
 80103f0:	2300      	movs	r3, #0
 80103f2:	3401      	adds	r4, #1
 80103f4:	9305      	str	r3, [sp, #20]
 80103f6:	4619      	mov	r1, r3
 80103f8:	f04f 0c0a 	mov.w	ip, #10
 80103fc:	4620      	mov	r0, r4
 80103fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010402:	3a30      	subs	r2, #48	; 0x30
 8010404:	2a09      	cmp	r2, #9
 8010406:	d903      	bls.n	8010410 <_svfiprintf_r+0x1a8>
 8010408:	2b00      	cmp	r3, #0
 801040a:	d0c5      	beq.n	8010398 <_svfiprintf_r+0x130>
 801040c:	9105      	str	r1, [sp, #20]
 801040e:	e7c3      	b.n	8010398 <_svfiprintf_r+0x130>
 8010410:	fb0c 2101 	mla	r1, ip, r1, r2
 8010414:	4604      	mov	r4, r0
 8010416:	2301      	movs	r3, #1
 8010418:	e7f0      	b.n	80103fc <_svfiprintf_r+0x194>
 801041a:	ab03      	add	r3, sp, #12
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	462a      	mov	r2, r5
 8010420:	4b0f      	ldr	r3, [pc, #60]	; (8010460 <_svfiprintf_r+0x1f8>)
 8010422:	a904      	add	r1, sp, #16
 8010424:	4638      	mov	r0, r7
 8010426:	f3af 8000 	nop.w
 801042a:	1c42      	adds	r2, r0, #1
 801042c:	4606      	mov	r6, r0
 801042e:	d1d6      	bne.n	80103de <_svfiprintf_r+0x176>
 8010430:	89ab      	ldrh	r3, [r5, #12]
 8010432:	065b      	lsls	r3, r3, #25
 8010434:	f53f af2c 	bmi.w	8010290 <_svfiprintf_r+0x28>
 8010438:	9809      	ldr	r0, [sp, #36]	; 0x24
 801043a:	b01d      	add	sp, #116	; 0x74
 801043c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010440:	ab03      	add	r3, sp, #12
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	462a      	mov	r2, r5
 8010446:	4b06      	ldr	r3, [pc, #24]	; (8010460 <_svfiprintf_r+0x1f8>)
 8010448:	a904      	add	r1, sp, #16
 801044a:	4638      	mov	r0, r7
 801044c:	f000 f87a 	bl	8010544 <_printf_i>
 8010450:	e7eb      	b.n	801042a <_svfiprintf_r+0x1c2>
 8010452:	bf00      	nop
 8010454:	08010e34 	.word	0x08010e34
 8010458:	08010e3e 	.word	0x08010e3e
 801045c:	00000000 	.word	0x00000000
 8010460:	080101b1 	.word	0x080101b1
 8010464:	08010e3a 	.word	0x08010e3a

08010468 <_printf_common>:
 8010468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801046c:	4616      	mov	r6, r2
 801046e:	4699      	mov	r9, r3
 8010470:	688a      	ldr	r2, [r1, #8]
 8010472:	690b      	ldr	r3, [r1, #16]
 8010474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010478:	4293      	cmp	r3, r2
 801047a:	bfb8      	it	lt
 801047c:	4613      	movlt	r3, r2
 801047e:	6033      	str	r3, [r6, #0]
 8010480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010484:	4607      	mov	r7, r0
 8010486:	460c      	mov	r4, r1
 8010488:	b10a      	cbz	r2, 801048e <_printf_common+0x26>
 801048a:	3301      	adds	r3, #1
 801048c:	6033      	str	r3, [r6, #0]
 801048e:	6823      	ldr	r3, [r4, #0]
 8010490:	0699      	lsls	r1, r3, #26
 8010492:	bf42      	ittt	mi
 8010494:	6833      	ldrmi	r3, [r6, #0]
 8010496:	3302      	addmi	r3, #2
 8010498:	6033      	strmi	r3, [r6, #0]
 801049a:	6825      	ldr	r5, [r4, #0]
 801049c:	f015 0506 	ands.w	r5, r5, #6
 80104a0:	d106      	bne.n	80104b0 <_printf_common+0x48>
 80104a2:	f104 0a19 	add.w	sl, r4, #25
 80104a6:	68e3      	ldr	r3, [r4, #12]
 80104a8:	6832      	ldr	r2, [r6, #0]
 80104aa:	1a9b      	subs	r3, r3, r2
 80104ac:	42ab      	cmp	r3, r5
 80104ae:	dc26      	bgt.n	80104fe <_printf_common+0x96>
 80104b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104b4:	1e13      	subs	r3, r2, #0
 80104b6:	6822      	ldr	r2, [r4, #0]
 80104b8:	bf18      	it	ne
 80104ba:	2301      	movne	r3, #1
 80104bc:	0692      	lsls	r2, r2, #26
 80104be:	d42b      	bmi.n	8010518 <_printf_common+0xb0>
 80104c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104c4:	4649      	mov	r1, r9
 80104c6:	4638      	mov	r0, r7
 80104c8:	47c0      	blx	r8
 80104ca:	3001      	adds	r0, #1
 80104cc:	d01e      	beq.n	801050c <_printf_common+0xa4>
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	68e5      	ldr	r5, [r4, #12]
 80104d2:	6832      	ldr	r2, [r6, #0]
 80104d4:	f003 0306 	and.w	r3, r3, #6
 80104d8:	2b04      	cmp	r3, #4
 80104da:	bf08      	it	eq
 80104dc:	1aad      	subeq	r5, r5, r2
 80104de:	68a3      	ldr	r3, [r4, #8]
 80104e0:	6922      	ldr	r2, [r4, #16]
 80104e2:	bf0c      	ite	eq
 80104e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104e8:	2500      	movne	r5, #0
 80104ea:	4293      	cmp	r3, r2
 80104ec:	bfc4      	itt	gt
 80104ee:	1a9b      	subgt	r3, r3, r2
 80104f0:	18ed      	addgt	r5, r5, r3
 80104f2:	2600      	movs	r6, #0
 80104f4:	341a      	adds	r4, #26
 80104f6:	42b5      	cmp	r5, r6
 80104f8:	d11a      	bne.n	8010530 <_printf_common+0xc8>
 80104fa:	2000      	movs	r0, #0
 80104fc:	e008      	b.n	8010510 <_printf_common+0xa8>
 80104fe:	2301      	movs	r3, #1
 8010500:	4652      	mov	r2, sl
 8010502:	4649      	mov	r1, r9
 8010504:	4638      	mov	r0, r7
 8010506:	47c0      	blx	r8
 8010508:	3001      	adds	r0, #1
 801050a:	d103      	bne.n	8010514 <_printf_common+0xac>
 801050c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010514:	3501      	adds	r5, #1
 8010516:	e7c6      	b.n	80104a6 <_printf_common+0x3e>
 8010518:	18e1      	adds	r1, r4, r3
 801051a:	1c5a      	adds	r2, r3, #1
 801051c:	2030      	movs	r0, #48	; 0x30
 801051e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010522:	4422      	add	r2, r4
 8010524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801052c:	3302      	adds	r3, #2
 801052e:	e7c7      	b.n	80104c0 <_printf_common+0x58>
 8010530:	2301      	movs	r3, #1
 8010532:	4622      	mov	r2, r4
 8010534:	4649      	mov	r1, r9
 8010536:	4638      	mov	r0, r7
 8010538:	47c0      	blx	r8
 801053a:	3001      	adds	r0, #1
 801053c:	d0e6      	beq.n	801050c <_printf_common+0xa4>
 801053e:	3601      	adds	r6, #1
 8010540:	e7d9      	b.n	80104f6 <_printf_common+0x8e>
	...

08010544 <_printf_i>:
 8010544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010548:	460c      	mov	r4, r1
 801054a:	4691      	mov	r9, r2
 801054c:	7e27      	ldrb	r7, [r4, #24]
 801054e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010550:	2f78      	cmp	r7, #120	; 0x78
 8010552:	4680      	mov	r8, r0
 8010554:	469a      	mov	sl, r3
 8010556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801055a:	d807      	bhi.n	801056c <_printf_i+0x28>
 801055c:	2f62      	cmp	r7, #98	; 0x62
 801055e:	d80a      	bhi.n	8010576 <_printf_i+0x32>
 8010560:	2f00      	cmp	r7, #0
 8010562:	f000 80d8 	beq.w	8010716 <_printf_i+0x1d2>
 8010566:	2f58      	cmp	r7, #88	; 0x58
 8010568:	f000 80a3 	beq.w	80106b2 <_printf_i+0x16e>
 801056c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010574:	e03a      	b.n	80105ec <_printf_i+0xa8>
 8010576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801057a:	2b15      	cmp	r3, #21
 801057c:	d8f6      	bhi.n	801056c <_printf_i+0x28>
 801057e:	a001      	add	r0, pc, #4	; (adr r0, 8010584 <_printf_i+0x40>)
 8010580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010584:	080105dd 	.word	0x080105dd
 8010588:	080105f1 	.word	0x080105f1
 801058c:	0801056d 	.word	0x0801056d
 8010590:	0801056d 	.word	0x0801056d
 8010594:	0801056d 	.word	0x0801056d
 8010598:	0801056d 	.word	0x0801056d
 801059c:	080105f1 	.word	0x080105f1
 80105a0:	0801056d 	.word	0x0801056d
 80105a4:	0801056d 	.word	0x0801056d
 80105a8:	0801056d 	.word	0x0801056d
 80105ac:	0801056d 	.word	0x0801056d
 80105b0:	080106fd 	.word	0x080106fd
 80105b4:	08010621 	.word	0x08010621
 80105b8:	080106df 	.word	0x080106df
 80105bc:	0801056d 	.word	0x0801056d
 80105c0:	0801056d 	.word	0x0801056d
 80105c4:	0801071f 	.word	0x0801071f
 80105c8:	0801056d 	.word	0x0801056d
 80105cc:	08010621 	.word	0x08010621
 80105d0:	0801056d 	.word	0x0801056d
 80105d4:	0801056d 	.word	0x0801056d
 80105d8:	080106e7 	.word	0x080106e7
 80105dc:	680b      	ldr	r3, [r1, #0]
 80105de:	1d1a      	adds	r2, r3, #4
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	600a      	str	r2, [r1, #0]
 80105e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80105e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105ec:	2301      	movs	r3, #1
 80105ee:	e0a3      	b.n	8010738 <_printf_i+0x1f4>
 80105f0:	6825      	ldr	r5, [r4, #0]
 80105f2:	6808      	ldr	r0, [r1, #0]
 80105f4:	062e      	lsls	r6, r5, #24
 80105f6:	f100 0304 	add.w	r3, r0, #4
 80105fa:	d50a      	bpl.n	8010612 <_printf_i+0xce>
 80105fc:	6805      	ldr	r5, [r0, #0]
 80105fe:	600b      	str	r3, [r1, #0]
 8010600:	2d00      	cmp	r5, #0
 8010602:	da03      	bge.n	801060c <_printf_i+0xc8>
 8010604:	232d      	movs	r3, #45	; 0x2d
 8010606:	426d      	negs	r5, r5
 8010608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801060c:	485e      	ldr	r0, [pc, #376]	; (8010788 <_printf_i+0x244>)
 801060e:	230a      	movs	r3, #10
 8010610:	e019      	b.n	8010646 <_printf_i+0x102>
 8010612:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010616:	6805      	ldr	r5, [r0, #0]
 8010618:	600b      	str	r3, [r1, #0]
 801061a:	bf18      	it	ne
 801061c:	b22d      	sxthne	r5, r5
 801061e:	e7ef      	b.n	8010600 <_printf_i+0xbc>
 8010620:	680b      	ldr	r3, [r1, #0]
 8010622:	6825      	ldr	r5, [r4, #0]
 8010624:	1d18      	adds	r0, r3, #4
 8010626:	6008      	str	r0, [r1, #0]
 8010628:	0628      	lsls	r0, r5, #24
 801062a:	d501      	bpl.n	8010630 <_printf_i+0xec>
 801062c:	681d      	ldr	r5, [r3, #0]
 801062e:	e002      	b.n	8010636 <_printf_i+0xf2>
 8010630:	0669      	lsls	r1, r5, #25
 8010632:	d5fb      	bpl.n	801062c <_printf_i+0xe8>
 8010634:	881d      	ldrh	r5, [r3, #0]
 8010636:	4854      	ldr	r0, [pc, #336]	; (8010788 <_printf_i+0x244>)
 8010638:	2f6f      	cmp	r7, #111	; 0x6f
 801063a:	bf0c      	ite	eq
 801063c:	2308      	moveq	r3, #8
 801063e:	230a      	movne	r3, #10
 8010640:	2100      	movs	r1, #0
 8010642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010646:	6866      	ldr	r6, [r4, #4]
 8010648:	60a6      	str	r6, [r4, #8]
 801064a:	2e00      	cmp	r6, #0
 801064c:	bfa2      	ittt	ge
 801064e:	6821      	ldrge	r1, [r4, #0]
 8010650:	f021 0104 	bicge.w	r1, r1, #4
 8010654:	6021      	strge	r1, [r4, #0]
 8010656:	b90d      	cbnz	r5, 801065c <_printf_i+0x118>
 8010658:	2e00      	cmp	r6, #0
 801065a:	d04d      	beq.n	80106f8 <_printf_i+0x1b4>
 801065c:	4616      	mov	r6, r2
 801065e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010662:	fb03 5711 	mls	r7, r3, r1, r5
 8010666:	5dc7      	ldrb	r7, [r0, r7]
 8010668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801066c:	462f      	mov	r7, r5
 801066e:	42bb      	cmp	r3, r7
 8010670:	460d      	mov	r5, r1
 8010672:	d9f4      	bls.n	801065e <_printf_i+0x11a>
 8010674:	2b08      	cmp	r3, #8
 8010676:	d10b      	bne.n	8010690 <_printf_i+0x14c>
 8010678:	6823      	ldr	r3, [r4, #0]
 801067a:	07df      	lsls	r7, r3, #31
 801067c:	d508      	bpl.n	8010690 <_printf_i+0x14c>
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	6861      	ldr	r1, [r4, #4]
 8010682:	4299      	cmp	r1, r3
 8010684:	bfde      	ittt	le
 8010686:	2330      	movle	r3, #48	; 0x30
 8010688:	f806 3c01 	strble.w	r3, [r6, #-1]
 801068c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010690:	1b92      	subs	r2, r2, r6
 8010692:	6122      	str	r2, [r4, #16]
 8010694:	f8cd a000 	str.w	sl, [sp]
 8010698:	464b      	mov	r3, r9
 801069a:	aa03      	add	r2, sp, #12
 801069c:	4621      	mov	r1, r4
 801069e:	4640      	mov	r0, r8
 80106a0:	f7ff fee2 	bl	8010468 <_printf_common>
 80106a4:	3001      	adds	r0, #1
 80106a6:	d14c      	bne.n	8010742 <_printf_i+0x1fe>
 80106a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106ac:	b004      	add	sp, #16
 80106ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b2:	4835      	ldr	r0, [pc, #212]	; (8010788 <_printf_i+0x244>)
 80106b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	680e      	ldr	r6, [r1, #0]
 80106bc:	061f      	lsls	r7, r3, #24
 80106be:	f856 5b04 	ldr.w	r5, [r6], #4
 80106c2:	600e      	str	r6, [r1, #0]
 80106c4:	d514      	bpl.n	80106f0 <_printf_i+0x1ac>
 80106c6:	07d9      	lsls	r1, r3, #31
 80106c8:	bf44      	itt	mi
 80106ca:	f043 0320 	orrmi.w	r3, r3, #32
 80106ce:	6023      	strmi	r3, [r4, #0]
 80106d0:	b91d      	cbnz	r5, 80106da <_printf_i+0x196>
 80106d2:	6823      	ldr	r3, [r4, #0]
 80106d4:	f023 0320 	bic.w	r3, r3, #32
 80106d8:	6023      	str	r3, [r4, #0]
 80106da:	2310      	movs	r3, #16
 80106dc:	e7b0      	b.n	8010640 <_printf_i+0xfc>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	f043 0320 	orr.w	r3, r3, #32
 80106e4:	6023      	str	r3, [r4, #0]
 80106e6:	2378      	movs	r3, #120	; 0x78
 80106e8:	4828      	ldr	r0, [pc, #160]	; (801078c <_printf_i+0x248>)
 80106ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106ee:	e7e3      	b.n	80106b8 <_printf_i+0x174>
 80106f0:	065e      	lsls	r6, r3, #25
 80106f2:	bf48      	it	mi
 80106f4:	b2ad      	uxthmi	r5, r5
 80106f6:	e7e6      	b.n	80106c6 <_printf_i+0x182>
 80106f8:	4616      	mov	r6, r2
 80106fa:	e7bb      	b.n	8010674 <_printf_i+0x130>
 80106fc:	680b      	ldr	r3, [r1, #0]
 80106fe:	6826      	ldr	r6, [r4, #0]
 8010700:	6960      	ldr	r0, [r4, #20]
 8010702:	1d1d      	adds	r5, r3, #4
 8010704:	600d      	str	r5, [r1, #0]
 8010706:	0635      	lsls	r5, r6, #24
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	d501      	bpl.n	8010710 <_printf_i+0x1cc>
 801070c:	6018      	str	r0, [r3, #0]
 801070e:	e002      	b.n	8010716 <_printf_i+0x1d2>
 8010710:	0671      	lsls	r1, r6, #25
 8010712:	d5fb      	bpl.n	801070c <_printf_i+0x1c8>
 8010714:	8018      	strh	r0, [r3, #0]
 8010716:	2300      	movs	r3, #0
 8010718:	6123      	str	r3, [r4, #16]
 801071a:	4616      	mov	r6, r2
 801071c:	e7ba      	b.n	8010694 <_printf_i+0x150>
 801071e:	680b      	ldr	r3, [r1, #0]
 8010720:	1d1a      	adds	r2, r3, #4
 8010722:	600a      	str	r2, [r1, #0]
 8010724:	681e      	ldr	r6, [r3, #0]
 8010726:	6862      	ldr	r2, [r4, #4]
 8010728:	2100      	movs	r1, #0
 801072a:	4630      	mov	r0, r6
 801072c:	f7ef fd50 	bl	80001d0 <memchr>
 8010730:	b108      	cbz	r0, 8010736 <_printf_i+0x1f2>
 8010732:	1b80      	subs	r0, r0, r6
 8010734:	6060      	str	r0, [r4, #4]
 8010736:	6863      	ldr	r3, [r4, #4]
 8010738:	6123      	str	r3, [r4, #16]
 801073a:	2300      	movs	r3, #0
 801073c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010740:	e7a8      	b.n	8010694 <_printf_i+0x150>
 8010742:	6923      	ldr	r3, [r4, #16]
 8010744:	4632      	mov	r2, r6
 8010746:	4649      	mov	r1, r9
 8010748:	4640      	mov	r0, r8
 801074a:	47d0      	blx	sl
 801074c:	3001      	adds	r0, #1
 801074e:	d0ab      	beq.n	80106a8 <_printf_i+0x164>
 8010750:	6823      	ldr	r3, [r4, #0]
 8010752:	079b      	lsls	r3, r3, #30
 8010754:	d413      	bmi.n	801077e <_printf_i+0x23a>
 8010756:	68e0      	ldr	r0, [r4, #12]
 8010758:	9b03      	ldr	r3, [sp, #12]
 801075a:	4298      	cmp	r0, r3
 801075c:	bfb8      	it	lt
 801075e:	4618      	movlt	r0, r3
 8010760:	e7a4      	b.n	80106ac <_printf_i+0x168>
 8010762:	2301      	movs	r3, #1
 8010764:	4632      	mov	r2, r6
 8010766:	4649      	mov	r1, r9
 8010768:	4640      	mov	r0, r8
 801076a:	47d0      	blx	sl
 801076c:	3001      	adds	r0, #1
 801076e:	d09b      	beq.n	80106a8 <_printf_i+0x164>
 8010770:	3501      	adds	r5, #1
 8010772:	68e3      	ldr	r3, [r4, #12]
 8010774:	9903      	ldr	r1, [sp, #12]
 8010776:	1a5b      	subs	r3, r3, r1
 8010778:	42ab      	cmp	r3, r5
 801077a:	dcf2      	bgt.n	8010762 <_printf_i+0x21e>
 801077c:	e7eb      	b.n	8010756 <_printf_i+0x212>
 801077e:	2500      	movs	r5, #0
 8010780:	f104 0619 	add.w	r6, r4, #25
 8010784:	e7f5      	b.n	8010772 <_printf_i+0x22e>
 8010786:	bf00      	nop
 8010788:	08010e45 	.word	0x08010e45
 801078c:	08010e56 	.word	0x08010e56

08010790 <__retarget_lock_acquire_recursive>:
 8010790:	4770      	bx	lr

08010792 <__retarget_lock_release_recursive>:
 8010792:	4770      	bx	lr

08010794 <memmove>:
 8010794:	4288      	cmp	r0, r1
 8010796:	b510      	push	{r4, lr}
 8010798:	eb01 0402 	add.w	r4, r1, r2
 801079c:	d902      	bls.n	80107a4 <memmove+0x10>
 801079e:	4284      	cmp	r4, r0
 80107a0:	4623      	mov	r3, r4
 80107a2:	d807      	bhi.n	80107b4 <memmove+0x20>
 80107a4:	1e43      	subs	r3, r0, #1
 80107a6:	42a1      	cmp	r1, r4
 80107a8:	d008      	beq.n	80107bc <memmove+0x28>
 80107aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107b2:	e7f8      	b.n	80107a6 <memmove+0x12>
 80107b4:	4402      	add	r2, r0
 80107b6:	4601      	mov	r1, r0
 80107b8:	428a      	cmp	r2, r1
 80107ba:	d100      	bne.n	80107be <memmove+0x2a>
 80107bc:	bd10      	pop	{r4, pc}
 80107be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107c6:	e7f7      	b.n	80107b8 <memmove+0x24>

080107c8 <_realloc_r>:
 80107c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ca:	4607      	mov	r7, r0
 80107cc:	4614      	mov	r4, r2
 80107ce:	460e      	mov	r6, r1
 80107d0:	b921      	cbnz	r1, 80107dc <_realloc_r+0x14>
 80107d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107d6:	4611      	mov	r1, r2
 80107d8:	f7ff bc54 	b.w	8010084 <_malloc_r>
 80107dc:	b922      	cbnz	r2, 80107e8 <_realloc_r+0x20>
 80107de:	f7ff fc01 	bl	800ffe4 <_free_r>
 80107e2:	4625      	mov	r5, r4
 80107e4:	4628      	mov	r0, r5
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e8:	f000 f814 	bl	8010814 <_malloc_usable_size_r>
 80107ec:	42a0      	cmp	r0, r4
 80107ee:	d20f      	bcs.n	8010810 <_realloc_r+0x48>
 80107f0:	4621      	mov	r1, r4
 80107f2:	4638      	mov	r0, r7
 80107f4:	f7ff fc46 	bl	8010084 <_malloc_r>
 80107f8:	4605      	mov	r5, r0
 80107fa:	2800      	cmp	r0, #0
 80107fc:	d0f2      	beq.n	80107e4 <_realloc_r+0x1c>
 80107fe:	4631      	mov	r1, r6
 8010800:	4622      	mov	r2, r4
 8010802:	f7ff fbd9 	bl	800ffb8 <memcpy>
 8010806:	4631      	mov	r1, r6
 8010808:	4638      	mov	r0, r7
 801080a:	f7ff fbeb 	bl	800ffe4 <_free_r>
 801080e:	e7e9      	b.n	80107e4 <_realloc_r+0x1c>
 8010810:	4635      	mov	r5, r6
 8010812:	e7e7      	b.n	80107e4 <_realloc_r+0x1c>

08010814 <_malloc_usable_size_r>:
 8010814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010818:	1f18      	subs	r0, r3, #4
 801081a:	2b00      	cmp	r3, #0
 801081c:	bfbc      	itt	lt
 801081e:	580b      	ldrlt	r3, [r1, r0]
 8010820:	18c0      	addlt	r0, r0, r3
 8010822:	4770      	bx	lr

08010824 <_init>:
 8010824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010826:	bf00      	nop
 8010828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082a:	bc08      	pop	{r3}
 801082c:	469e      	mov	lr, r3
 801082e:	4770      	bx	lr

08010830 <_fini>:
 8010830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010832:	bf00      	nop
 8010834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010836:	bc08      	pop	{r3}
 8010838:	469e      	mov	lr, r3
 801083a:	4770      	bx	lr
